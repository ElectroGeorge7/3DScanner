
3DScanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e2c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  080130cc  080130cc  000230cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133c8  080133c8  000303d0  2**0
                  CONTENTS
  4 .ARM          00000008  080133c8  080133c8  000233c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133d0  080133d0  000303d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133d0  080133d0  000233d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080133d4  080133d4  000233d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  24000000  080133d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000591c  240003d0  080137a8  000303d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005cec  080137a8  00035cec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004bb06  00000000  00000000  000303fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007d15  00000000  00000000  0007bf04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002790  00000000  00000000  00083c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002480  00000000  00000000  000863b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003f8f6  00000000  00000000  00088830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002c853  00000000  00000000  000c8126  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00176e59  00000000  00000000  000f4979  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026b7d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a918  00000000  00000000  0026b850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003d0 	.word	0x240003d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080130b4 	.word	0x080130b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003d4 	.word	0x240003d4
 80002dc:	080130b4 	.word	0x080130b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <laser_cmd_define_cb>:
 * @brief 
 * 
 * @param cmdStr 
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef laser_cmd_define_cb(uint8_t *cmdStr){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	75fb      	strb	r3, [r7, #23]
    char *pParamStr = NULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
    char *pParamVal = NULL;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
    uint8_t paramValLen = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	75bb      	strb	r3, [r7, #22]
    char paramValStr[4] = {0}; 
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]

    if (cmdStr != NULL){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d078      	beq.n	8000704 <laser_cmd_define_cb+0x114>
        
        for ( i = 0; i < 2 ; i++){
 8000612:	2300      	movs	r3, #0
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e011      	b.n	800063c <laser_cmd_define_cb+0x4c>
            if ( strstr(cmdStr, laser.power_func_names[i]) )
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	4a3d      	ldr	r2, [pc, #244]	; (8000710 <laser_cmd_define_cb+0x120>)
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f012 fc75 	bl	8012f14 <strstr>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <laser_cmd_define_cb+0x46>
                laser.powerState = (PowerState_t) i;
 8000630:	4a37      	ldr	r2, [pc, #220]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	7313      	strb	r3, [r2, #12]
        for ( i = 0; i < 2 ; i++){
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	3301      	adds	r3, #1
 800063a:	75fb      	strb	r3, [r7, #23]
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d9ea      	bls.n	8000618 <laser_cmd_define_cb+0x28>
        };

        if ( pParamStr = strstr(cmdStr, laser.bright_param_name) ){
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f012 fc63 	bl	8012f14 <strstr>
 800064e:	6138      	str	r0, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d03e      	beq.n	80006d4 <laser_cmd_define_cb+0xe4>
            pParamVal = pParamStr + strlen(laser.bright_param_name);
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000658:	691b      	ldr	r3, [r3, #16]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe40 	bl	80002e0 <strlen>
 8000660:	4602      	mov	r2, r0
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D) && ( *(pParamVal+paramValLen) != ' ') && (paramValLen < 4 ) ){
 800066c:	e002      	b.n	8000674 <laser_cmd_define_cb+0x84>
                paramValLen++;
 800066e:	7dbb      	ldrb	r3, [r7, #22]
 8000670:	3301      	adds	r3, #1
 8000672:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D) && ( *(pParamVal+paramValLen) != ' ') && (paramValLen < 4 ) ){
 8000674:	7dbb      	ldrb	r3, [r7, #22]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b0d      	cmp	r3, #13
 800067e:	d008      	beq.n	8000692 <laser_cmd_define_cb+0xa2>
 8000680:	7dbb      	ldrb	r3, [r7, #22]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b20      	cmp	r3, #32
 800068a:	d002      	beq.n	8000692 <laser_cmd_define_cb+0xa2>
 800068c:	7dbb      	ldrb	r3, [r7, #22]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d9ed      	bls.n	800066e <laser_cmd_define_cb+0x7e>
            };
            memmove(paramValStr, pParamVal, paramValLen);
 8000692:	7dba      	ldrb	r2, [r7, #22]
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f012 fb4f 	bl	8012d3e <memmove>
            if ( paramValStr[0] == '0' )
 80006a0:	7a3b      	ldrb	r3, [r7, #8]
 80006a2:	2b30      	cmp	r3, #48	; 0x30
 80006a4:	d103      	bne.n	80006ae <laser_cmd_define_cb+0xbe>
                laser.brightVal = 0;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
 80006ac:	e012      	b.n	80006d4 <laser_cmd_define_cb+0xe4>
            else  {
            	paramValStr[3] = '\0';
 80006ae:	2300      	movs	r3, #0
 80006b0:	72fb      	strb	r3, [r7, #11]
                if ( atoi(paramValStr) )
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4618      	mov	r0, r3
 80006b8:	f012 faf8 	bl	8012cac <atoi>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <laser_cmd_define_cb+0xe4>
                    laser.brightVal = atoi(paramValStr);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f012 faf0 	bl	8012cac <atoi>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006d2:	751a      	strb	r2, [r3, #20]
            }
        }

        if ( laser.powerState == EN ){
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006d6:	7b1b      	ldrb	r3, [r3, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10d      	bne.n	80006f8 <laser_cmd_define_cb+0x108>
            HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006e0:	f007 ff16 	bl	8008510 <HAL_TIM_PWM_Stop>
            __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, laser.brightVal);
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006e6:	7d1a      	ldrb	r2, [r3, #20]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006f2:	f007 fe3b 	bl	800836c <HAL_TIM_PWM_Start>
 80006f6:	e003      	b.n	8000700 <laser_cmd_define_cb+0x110>
        }
        else
            HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006fc:	f007 ff08 	bl	8008510 <HAL_TIM_PWM_Stop>



        /// @todo создать сообщение для обработки команды

        return HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	e000      	b.n	8000706 <laser_cmd_define_cb+0x116>
    }

	return HAL_ERROR;
 8000704:	2301      	movs	r3, #1
};
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000018 	.word	0x24000018
 8000714:	24004ec8 	.word	0x24004ec8

08000718 <SCCB_write_reg>:
		{ 0x72, 0x11 },		//DCW_SCALING
		{ 0x73, 0xf0 },		//PCLK_DIV_SCALING
		{ 0xa2, 0x02 }		//PCLK_DELAY_SCALING
};

uint8_t SCCB_write_reg(uint8_t reg_addr, uint8_t data) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
	uint32_t timeout = 0xFFFFFF;
 8000728:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800072c:	60fb      	str	r3, [r7, #12]

	uint8_t tempData[2];
	tempData[0]=reg_addr;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	723b      	strb	r3, [r7, #8]
	tempData[1]=data;
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42, tempData, 2, timeout);
 8000736:	f107 0208 	add.w	r2, r7, #8
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2302      	movs	r3, #2
 8000740:	2142      	movs	r1, #66	; 0x42
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <SCCB_write_reg+0x3c>)
 8000744:	f001 fd10 	bl	8002168 <HAL_I2C_Master_Transmit>

	return 0;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	24004d68 	.word	0x24004d68

08000758 <Delay>:

void Delay(volatile long nCount) {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	while (nCount--) {
 8000760:	bf00      	nop
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1fa      	bne.n	8000762 <Delay+0xa>
	}
}
 800076c:	bf00      	nop
 800076e:	370c      	adds	r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr

08000778 <camera_cmd_define_cb>:
		Delay(0xFFFF);
	}
	return err;
}

HAL_StatusTypeDef camera_cmd_define_cb(uint8_t *cmdStr){
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	75fb      	strb	r3, [r7, #23]
    char *pParamStr = NULL;
 8000784:	2300      	movs	r3, #0
 8000786:	613b      	str	r3, [r7, #16]
    char *pParamVal = NULL;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
    uint8_t paramValLen = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	75bb      	strb	r3, [r7, #22]
    char paramValStr[4] = {0};
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
    
    if (cmdStr != NULL){
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b00      	cmp	r3, #0
 8000798:	f000 8160 	beq.w	8000a5c <camera_cmd_define_cb+0x2e4>
        
        for ( i = 0; i < 2 ; i++){
 800079c:	2300      	movs	r3, #0
 800079e:	75fb      	strb	r3, [r7, #23]
 80007a0:	e011      	b.n	80007c6 <camera_cmd_define_cb+0x4e>
            if ( strstr(cmdStr, camera.power_func_names[i]) )
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	4ab0      	ldr	r2, [pc, #704]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f012 fbb0 	bl	8012f14 <strstr>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <camera_cmd_define_cb+0x48>
                camera.powerState = (PowerState_t) i;
 80007ba:	4aab      	ldr	r2, [pc, #684]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80007bc:	7dfb      	ldrb	r3, [r7, #23]
 80007be:	7313      	strb	r3, [r2, #12]
        for ( i = 0; i < 2 ; i++){
 80007c0:	7dfb      	ldrb	r3, [r7, #23]
 80007c2:	3301      	adds	r3, #1
 80007c4:	75fb      	strb	r3, [r7, #23]
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d9ea      	bls.n	80007a2 <camera_cmd_define_cb+0x2a>
        };


        if ( pParamStr = strstr(cmdStr, camera.picture_param_name) ){
 80007cc:	4ba6      	ldr	r3, [pc, #664]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f012 fb9e 	bl	8012f14 <strstr>
 80007d8:	6138      	str	r0, [r7, #16]
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d031      	beq.n	8000844 <camera_cmd_define_cb+0xcc>
            pParamVal = pParamStr + strlen(camera.picture_param_name);
 80007e0:	4ba1      	ldr	r3, [pc, #644]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80007e2:	691b      	ldr	r3, [r3, #16]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fd7b 	bl	80002e0 <strlen>
 80007ea:	4602      	mov	r2, r0
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	4413      	add	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 80007f6:	e002      	b.n	80007fe <camera_cmd_define_cb+0x86>
                        ( *(pParamVal+paramValLen) != ' ')          && 
                              ( *(pParamVal+paramValLen) != '\0')   &&
                                (paramValLen < CAMERA_FILES_MAX_LENGTH-1 )  ){
                paramValLen++;
 80007f8:	7dbb      	ldrb	r3, [r7, #22]
 80007fa:	3301      	adds	r3, #1
 80007fc:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 80007fe:	7dbb      	ldrb	r3, [r7, #22]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b0d      	cmp	r3, #13
 8000808:	d00e      	beq.n	8000828 <camera_cmd_define_cb+0xb0>
                        ( *(pParamVal+paramValLen) != ' ')          && 
 800080a:	7dbb      	ldrb	r3, [r7, #22]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 8000812:	2b20      	cmp	r3, #32
 8000814:	d008      	beq.n	8000828 <camera_cmd_define_cb+0xb0>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 8000816:	7dbb      	ldrb	r3, [r7, #22]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	4413      	add	r3, r2
 800081c:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')          && 
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <camera_cmd_define_cb+0xb0>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 8000822:	7dbb      	ldrb	r3, [r7, #22]
 8000824:	2b0a      	cmp	r3, #10
 8000826:	d9e7      	bls.n	80007f8 <camera_cmd_define_cb+0x80>
            };

            if ( paramValLen != 0 ){
 8000828:	7dbb      	ldrb	r3, [r7, #22]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d00a      	beq.n	8000844 <camera_cmd_define_cb+0xcc>
            	memset(camera.pictureName, 0, CAMERA_FILES_MAX_LENGTH);
 800082e:	220c      	movs	r2, #12
 8000830:	2100      	movs	r1, #0
 8000832:	488e      	ldr	r0, [pc, #568]	; (8000a6c <camera_cmd_define_cb+0x2f4>)
 8000834:	f012 fa9c 	bl	8012d70 <memset>
                memmove(camera.pictureName, pParamVal, paramValLen);
 8000838:	7dbb      	ldrb	r3, [r7, #22]
 800083a:	461a      	mov	r2, r3
 800083c:	68f9      	ldr	r1, [r7, #12]
 800083e:	488b      	ldr	r0, [pc, #556]	; (8000a6c <camera_cmd_define_cb+0x2f4>)
 8000840:	f012 fa7d 	bl	8012d3e <memmove>
            else 
            	;
                /// @todo создать сообщение для обработки ошибки
        }

        if ( pParamStr = strstr(cmdStr, camera.config_param_name) ){
 8000844:	4b88      	ldr	r3, [pc, #544]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 8000846:	6a1b      	ldr	r3, [r3, #32]
 8000848:	4619      	mov	r1, r3
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f012 fb62 	bl	8012f14 <strstr>
 8000850:	6138      	str	r0, [r7, #16]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d031      	beq.n	80008bc <camera_cmd_define_cb+0x144>
            pParamVal = pParamStr + strlen(camera.config_param_name);
 8000858:	4b83      	ldr	r3, [pc, #524]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 800085a:	6a1b      	ldr	r3, [r3, #32]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fd3f 	bl	80002e0 <strlen>
 8000862:	4602      	mov	r2, r0
 8000864:	693b      	ldr	r3, [r7, #16]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 800086e:	e002      	b.n	8000876 <camera_cmd_define_cb+0xfe>
                        ( *(pParamVal+paramValLen) != ' ')          && 
                              ( *(pParamVal+paramValLen) != '\0')   &&
                                (paramValLen < CAMERA_FILES_MAX_LENGTH-1 )  ){
                paramValLen++;
 8000870:	7dbb      	ldrb	r3, [r7, #22]
 8000872:	3301      	adds	r3, #1
 8000874:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 8000876:	7dbb      	ldrb	r3, [r7, #22]
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b0d      	cmp	r3, #13
 8000880:	d00e      	beq.n	80008a0 <camera_cmd_define_cb+0x128>
                        ( *(pParamVal+paramValLen) != ' ')          && 
 8000882:	7dbb      	ldrb	r3, [r7, #22]
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 800088a:	2b20      	cmp	r3, #32
 800088c:	d008      	beq.n	80008a0 <camera_cmd_define_cb+0x128>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 800088e:	7dbb      	ldrb	r3, [r7, #22]
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')          && 
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <camera_cmd_define_cb+0x128>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 800089a:	7dbb      	ldrb	r3, [r7, #22]
 800089c:	2b0a      	cmp	r3, #10
 800089e:	d9e7      	bls.n	8000870 <camera_cmd_define_cb+0xf8>
            };

            if ( paramValLen != 0 ){
 80008a0:	7dbb      	ldrb	r3, [r7, #22]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00a      	beq.n	80008bc <camera_cmd_define_cb+0x144>
            	memset(camera.configFileName, 0, CAMERA_FILES_MAX_LENGTH);
 80008a6:	220c      	movs	r2, #12
 80008a8:	2100      	movs	r1, #0
 80008aa:	4871      	ldr	r0, [pc, #452]	; (8000a70 <camera_cmd_define_cb+0x2f8>)
 80008ac:	f012 fa60 	bl	8012d70 <memset>
                memmove(camera.configFileName, pParamVal, paramValLen);
 80008b0:	7dbb      	ldrb	r3, [r7, #22]
 80008b2:	461a      	mov	r2, r3
 80008b4:	68f9      	ldr	r1, [r7, #12]
 80008b6:	486e      	ldr	r0, [pc, #440]	; (8000a70 <camera_cmd_define_cb+0x2f8>)
 80008b8:	f012 fa41 	bl	8012d3e <memmove>
            else 
            	;
                /// @todo создать сообщение для обработки ошибки
        }

        if ( pParamStr = strstr(cmdStr, camera.reg_param_name) ){
 80008bc:	4b6a      	ldr	r3, [pc, #424]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80008be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c0:	4619      	mov	r1, r3
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f012 fb26 	bl	8012f14 <strstr>
 80008c8:	6138      	str	r0, [r7, #16]
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f000 808b 	beq.w	80009e8 <camera_cmd_define_cb+0x270>
            pParamVal = pParamStr + strlen(camera.reg_param_name);
 80008d2:	4b65      	ldr	r3, [pc, #404]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fd02 	bl	80002e0 <strlen>
 80008dc:	4602      	mov	r2, r0
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	4413      	add	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 80008e8:	e002      	b.n	80008f0 <camera_cmd_define_cb+0x178>
                        ( *(pParamVal+paramValLen) != ' ')      &&
                            ( *(pParamVal+paramValLen) != ',')  &&
                                (paramValLen < 4 ) ){
                paramValLen++;
 80008ea:	7dbb      	ldrb	r3, [r7, #22]
 80008ec:	3301      	adds	r3, #1
 80008ee:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 80008f0:	7dbb      	ldrb	r3, [r7, #22]
 80008f2:	68fa      	ldr	r2, [r7, #12]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b0d      	cmp	r3, #13
 80008fa:	d00e      	beq.n	800091a <camera_cmd_define_cb+0x1a2>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 80008fc:	7dbb      	ldrb	r3, [r7, #22]
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	4413      	add	r3, r2
 8000902:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 8000904:	2b20      	cmp	r3, #32
 8000906:	d008      	beq.n	800091a <camera_cmd_define_cb+0x1a2>
                            ( *(pParamVal+paramValLen) != ',')  &&
 8000908:	7dbb      	ldrb	r3, [r7, #22]
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')      &&
 8000910:	2b2c      	cmp	r3, #44	; 0x2c
 8000912:	d002      	beq.n	800091a <camera_cmd_define_cb+0x1a2>
                            ( *(pParamVal+paramValLen) != ',')  &&
 8000914:	7dbb      	ldrb	r3, [r7, #22]
 8000916:	2b03      	cmp	r3, #3
 8000918:	d9e7      	bls.n	80008ea <camera_cmd_define_cb+0x172>
            };
            memmove(paramValStr, pParamVal, paramValLen);
 800091a:	7dba      	ldrb	r2, [r7, #22]
 800091c:	f107 0308 	add.w	r3, r7, #8
 8000920:	68f9      	ldr	r1, [r7, #12]
 8000922:	4618      	mov	r0, r3
 8000924:	f012 fa0b 	bl	8012d3e <memmove>
            if ( paramValStr[0] == '0' )
 8000928:	7a3b      	ldrb	r3, [r7, #8]
 800092a:	2b30      	cmp	r3, #48	; 0x30
 800092c:	d104      	bne.n	8000938 <camera_cmd_define_cb+0x1c0>
                camera.regAddr = 0;
 800092e:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000936:	e013      	b.n	8000960 <camera_cmd_define_cb+0x1e8>
            else  {
            	paramValStr[3] = '\0';
 8000938:	2300      	movs	r3, #0
 800093a:	72fb      	strb	r3, [r7, #11]
                if ( atoi(paramValStr) )
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4618      	mov	r0, r3
 8000942:	f012 f9b3 	bl	8012cac <atoi>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d009      	beq.n	8000960 <camera_cmd_define_cb+0x1e8>
                    camera.regAddr = atoi(paramValStr);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	4618      	mov	r0, r3
 8000952:	f012 f9ab 	bl	8012cac <atoi>
 8000956:	4603      	mov	r3, r0
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b43      	ldr	r3, [pc, #268]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 800095c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            pParamVal += paramValLen+1;
 8000960:	7dbb      	ldrb	r3, [r7, #22]
 8000962:	3301      	adds	r3, #1
 8000964:	68fa      	ldr	r2, [r7, #12]
 8000966:	4413      	add	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	75bb      	strb	r3, [r7, #22]
            memset(paramValStr, 0, 4);
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2204      	movs	r2, #4
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f012 f9fa 	bl	8012d70 <memset>
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 800097c:	e002      	b.n	8000984 <camera_cmd_define_cb+0x20c>
                        ( *(pParamVal+paramValLen) != ' ')      &&
                                (paramValLen < 4 ) ){
                paramValLen++;
 800097e:	7dbb      	ldrb	r3, [r7, #22]
 8000980:	3301      	adds	r3, #1
 8000982:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 8000984:	7dbb      	ldrb	r3, [r7, #22]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b0d      	cmp	r3, #13
 800098e:	d008      	beq.n	80009a2 <camera_cmd_define_cb+0x22a>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 8000990:	7dbb      	ldrb	r3, [r7, #22]
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	4413      	add	r3, r2
 8000996:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 8000998:	2b20      	cmp	r3, #32
 800099a:	d002      	beq.n	80009a2 <camera_cmd_define_cb+0x22a>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 800099c:	7dbb      	ldrb	r3, [r7, #22]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d9ed      	bls.n	800097e <camera_cmd_define_cb+0x206>
            };  
            memmove(paramValStr, pParamVal, paramValLen);
 80009a2:	7dba      	ldrb	r2, [r7, #22]
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f012 f9c7 	bl	8012d3e <memmove>
            if ( paramValStr[0] == '0' )
 80009b0:	7a3b      	ldrb	r3, [r7, #8]
 80009b2:	2b30      	cmp	r3, #48	; 0x30
 80009b4:	d104      	bne.n	80009c0 <camera_cmd_define_cb+0x248>
                camera.regVal = 0;
 80009b6:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80009be:	e013      	b.n	80009e8 <camera_cmd_define_cb+0x270>
            else  {
            	paramValStr[3] = '\0';
 80009c0:	2300      	movs	r3, #0
 80009c2:	72fb      	strb	r3, [r7, #11]
                if ( atoi(paramValStr) )
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4618      	mov	r0, r3
 80009ca:	f012 f96f 	bl	8012cac <atoi>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d009      	beq.n	80009e8 <camera_cmd_define_cb+0x270>
                    camera.regVal = atoi(paramValStr);
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	4618      	mov	r0, r3
 80009da:	f012 f967 	bl	8012cac <atoi>
 80009de:	4603      	mov	r3, r0
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80009e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            }          

        }


        if ( camera.powerState == EN ){
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 80009ea:	7b1b      	ldrb	r3, [r3, #12]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d124      	bne.n	8000a3a <camera_cmd_define_cb+0x2c2>
            // Подача питания на камеру и переход в режим готовности
            HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2104      	movs	r1, #4
 80009f4:	481f      	ldr	r0, [pc, #124]	; (8000a74 <camera_cmd_define_cb+0x2fc>)
 80009f6:	f001 fb0d 	bl	8002014 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Pwdn_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2108      	movs	r1, #8
 80009fe:	481e      	ldr	r0, [pc, #120]	; (8000a78 <camera_cmd_define_cb+0x300>)
 8000a00:	f001 fb08 	bl	8002014 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2104      	movs	r1, #4
 8000a08:	481b      	ldr	r0, [pc, #108]	; (8000a78 <camera_cmd_define_cb+0x300>)
 8000a0a:	f001 fb03 	bl	8002014 <HAL_GPIO_WritePin>
            // Включение тактирования
            HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 8000a0e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000a16:	2001      	movs	r0, #1
 8000a18:	f003 febe 	bl	8004798 <HAL_RCC_MCOConfig>
            // Конфигурирование регистра
            /**
             * @todo определять, если регистр уже записан, чтобы не было повтороной записи
             */

            SCCB_write_reg(camera.regAddr, camera.regVal);
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 8000a1e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <camera_cmd_define_cb+0x2f0>)
 8000a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	f7ff fe74 	bl	8000718 <SCCB_write_reg>
            Delay(0xFFFF);
 8000a30:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a34:	f7ff fe90 	bl	8000758 <Delay>
 8000a38:	e00e      	b.n	8000a58 <camera_cmd_define_cb+0x2e0>
            // Нахождение файла конфигурации
            // Создание файла снимка 
            
        } else {
            // Подача питания на камеру и переход в режим готовности
            HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_SET);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2104      	movs	r1, #4
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <camera_cmd_define_cb+0x2fc>)
 8000a40:	f001 fae8 	bl	8002014 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Pwdn_Pin, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	2108      	movs	r1, #8
 8000a48:	480b      	ldr	r0, [pc, #44]	; (8000a78 <camera_cmd_define_cb+0x300>)
 8000a4a:	f001 fae3 	bl	8002014 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	4809      	ldr	r0, [pc, #36]	; (8000a78 <camera_cmd_define_cb+0x300>)
 8000a54:	f001 fade 	bl	8002014 <HAL_GPIO_WritePin>
        }

        return HAL_OK;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e000      	b.n	8000a5e <camera_cmd_define_cb+0x2e6>
    }
    return HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2400005c 	.word	0x2400005c
 8000a6c:	24000070 	.word	0x24000070
 8000a70:	24000080 	.word	0x24000080
 8000a74:	58020800 	.word	0x58020800
 8000a78:	58020000 	.word	0x58020000

08000a7c <stepM_cmd_define_cb>:

HAL_StatusTypeDef stepM_cmd_define_cb(uint8_t *cmdStr){
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
    return HAL_OK;
 8000a84:	2300      	movs	r3, #0
};
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <uart_terminal_init>:
 * @brief Initialize uart handler in uart_terminal
 * @param   huart  Uart handler created by CubeMx
 * @return  HAL_OK - success,
 *          HAL_ERROR - uart handler was not defined
 */
HAL_StatusTypeDef uart_terminal_init(UART_HandleTypeDef *huart){
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]

	if ( huart != NULL ){
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <uart_terminal_init+0x18>
		ghuart = huart;
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <uart_terminal_init+0x24>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6013      	str	r3, [r2, #0]
		return   HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e7ff      	b.n	8000aac <uart_terminal_init+0x18>
	}else{
		// создать сообщение об ошибке, и затем показать её в реестре ошибок.
	}
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	240003ec 	.word	0x240003ec

08000abc <uart_terminal_print>:
 * @brief Print strings by uart transmit
 * @param   string  pointer to char array , consists of letters, words and etc.
 * @return  HAL_OK - success,
 *          HAL_ERROR - string transmission by uart was failed
 */
HAL_StatusTypeDef uart_terminal_print(uint8_t *string){
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

	if ( 0 != strlen(string) ){
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d011      	beq.n	8000af0 <uart_terminal_print+0x34>
		if ( HAL_OK == HAL_UART_Transmit(ghuart, string, strlen(string), UART_STR_PRINT_TIMEOUT) ){
 8000acc:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <uart_terminal_print+0x3c>)
 8000ace:	681c      	ldr	r4, [r3, #0]
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fc05 	bl	80002e0 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f008 fc7d 	bl	80093e0 <HAL_UART_Transmit>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <uart_terminal_print+0x34>
			return HAL_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e7ff      	b.n	8000af0 <uart_terminal_print+0x34>
		}
	}else{
		 // создать сообщение об ошибке, и затем показать её в реестре ошибок.
	}
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	240003ec 	.word	0x240003ec

08000afc <uart_terminal_cmd_def>:
 * @note terminal command format: module_name -function -parameter:x
 * 
 * @todo Сделать проверки корректности заполнения структур модулей,
 * 		 при неправильном заполнении бывает HardFault
 */
HAL_StatusTypeDef uart_terminal_cmd_def(void){
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b099      	sub	sp, #100	; 0x64
 8000b00:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t moduleNmb = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t *rxBuf;
	uint8_t cmdStr[MAX_TERM_CMD_SIZE];
	const char *module_name = NULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	65bb      	str	r3, [r7, #88]	; 0x58
	module_cmd_define_cb_t module_cmd_define_func = NULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54

	if ( NULL != (rxBuf = uart_terminal_scanf()) ){
 8000b16:	f000 f8c1 	bl	8000c9c <uart_terminal_scanf>
 8000b1a:	6538      	str	r0, [r7, #80]	; 0x50
 8000b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f000 80b1 	beq.w	8000c86 <uart_terminal_cmd_def+0x18a>
		memmove(cmdStr, rxBuf, MAX_TERM_CMD_SIZE);
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	224b      	movs	r2, #75	; 0x4b
 8000b28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f012 f907 	bl	8012d3e <memmove>

		while( i < MAX_TERM_CMD_SIZE){
 8000b30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b34:	2b4a      	cmp	r3, #74	; 0x4a
 8000b36:	f200 80a8 	bhi.w	8000c8a <uart_terminal_cmd_def+0x18e>
			if ( CHAR_FILTER(cmdStr[i]) ){		// reach first character of module name, ignore whitespaces
 8000b3a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000b42:	4413      	add	r3, r2
 8000b44:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000b48:	2b2d      	cmp	r3, #45	; 0x2d
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b56:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b5a:	440b      	add	r3, r1
 8000b5c:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000b60:	2b5f      	cmp	r3, #95	; 0x5f
 8000b62:	bf0c      	ite	eq
 8000b64:	2301      	moveq	r3, #1
 8000b66:	2300      	movne	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b72:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000b76:	440b      	add	r3, r1
 8000b78:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000b7c:	2b2f      	cmp	r3, #47	; 0x2f
 8000b7e:	bf8c      	ite	hi
 8000b80:	2301      	movhi	r3, #1
 8000b82:	2300      	movls	r3, #0
 8000b84:	b2d9      	uxtb	r1, r3
 8000b86:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000b8a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000b8e:	4403      	add	r3, r0
 8000b90:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000b94:	2b39      	cmp	r3, #57	; 0x39
 8000b96:	bf94      	ite	ls
 8000b98:	2301      	movls	r3, #1
 8000b9a:	2300      	movhi	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000baa:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000bae:	440b      	add	r3, r1
 8000bb0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000bb4:	2b40      	cmp	r3, #64	; 0x40
 8000bb6:	bf8c      	ite	hi
 8000bb8:	2301      	movhi	r3, #1
 8000bba:	2300      	movls	r3, #0
 8000bbc:	b2d9      	uxtb	r1, r3
 8000bbe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bc2:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000bc6:	4403      	add	r3, r0
 8000bc8:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000bcc:	2b5a      	cmp	r3, #90	; 0x5a
 8000bce:	bf94      	ite	ls
 8000bd0:	2301      	movls	r3, #1
 8000bd2:	2300      	movhi	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	400b      	ands	r3, r1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000be2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000be6:	440b      	add	r3, r1
 8000be8:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000bec:	2b60      	cmp	r3, #96	; 0x60
 8000bee:	bf8c      	ite	hi
 8000bf0:	2301      	movhi	r3, #1
 8000bf2:	2300      	movls	r3, #0
 8000bf4:	b2d9      	uxtb	r1, r3
 8000bf6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bfa:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000bfe:	4403      	add	r3, r0
 8000c00:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c04:	2b7a      	cmp	r3, #122	; 0x7a
 8000c06:	bf94      	ite	ls
 8000c08:	2301      	movls	r3, #1
 8000c0a:	2300      	movhi	r3, #0
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	400b      	ands	r3, r1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4313      	orrs	r3, r2
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d02e      	beq.n	8000c78 <uart_terminal_cmd_def+0x17c>

				for ( moduleNmb = 0 ; moduleNmb < MODULES_NUMBER ; moduleNmb++){
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000c20:	e025      	b.n	8000c6e <uart_terminal_cmd_def+0x172>

					module_name = (const char *) *(psModules[moduleNmb]);
 8000c22:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c26:	4a1b      	ldr	r2, [pc, #108]	; (8000c94 <uart_terminal_cmd_def+0x198>)
 8000c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	65bb      	str	r3, [r7, #88]	; 0x58
					if ( !strncmp(cmdStr+i, module_name, strlen(module_name)) ){
 8000c30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c34:	1d3a      	adds	r2, r7, #4
 8000c36:	18d4      	adds	r4, r2, r3
 8000c38:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000c3a:	f7ff fb51 	bl	80002e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000c44:	4620      	mov	r0, r4
 8000c46:	f012 f953 	bl	8012ef0 <strncmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d109      	bne.n	8000c64 <uart_terminal_cmd_def+0x168>
						// go to function for analyze command to module
						module_cmd_define_func = module_cmd_define_cbs[moduleNmb];
 8000c50:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c54:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <uart_terminal_cmd_def+0x19c>)
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	657b      	str	r3, [r7, #84]	; 0x54
						module_cmd_define_func(cmdStr);
 8000c5c:	1d3a      	adds	r2, r7, #4
 8000c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000c60:	4610      	mov	r0, r2
 8000c62:	4798      	blx	r3
				for ( moduleNmb = 0 ; moduleNmb < MODULES_NUMBER ; moduleNmb++){
 8000c64:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c68:	3301      	adds	r3, #1
 8000c6a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000c6e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d9d5      	bls.n	8000c22 <uart_terminal_cmd_def+0x126>
 8000c76:	e004      	b.n	8000c82 <uart_terminal_cmd_def+0x186>
					}
				}
			} else { i++; };
 8000c78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


			return HAL_OK;
 8000c82:	2300      	movs	r3, #0
 8000c84:	e001      	b.n	8000c8a <uart_terminal_cmd_def+0x18e>
		}
	} else {
		return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e7ff      	b.n	8000c8a <uart_terminal_cmd_def+0x18e>
	}
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3764      	adds	r7, #100	; 0x64
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd90      	pop	{r4, r7, pc}
 8000c92:	bf00      	nop
 8000c94:	24000000 	.word	0x24000000
 8000c98:	2400000c 	.word	0x2400000c

08000c9c <uart_terminal_scanf>:
 * @brief Return the string from terminal received by uart
 * @return  pointer to uart Rx buffer - success,
 *          NULL - memory transmission by uart was failed
 * @note we receive from terminal just short commands, no any large arrays of memory
 */
uint8_t * uart_terminal_scanf(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

	memset(UartTermRxBuf, 0, sizeof(UartTermRxBuf));
 8000ca2:	224b      	movs	r2, #75	; 0x4b
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4812      	ldr	r0, [pc, #72]	; (8000cf0 <uart_terminal_scanf+0x54>)
 8000ca8:	f012 f862 	bl	8012d70 <memset>
	 * 			set uart GPIO pins in High/Very High Speed mode
	 * 		 2. we don`t check the answer of HAL_UART_Receive(), 
	 * 			because this function returns HAL_TIMEOUT 
	 * 			if packet is less than MAX_TERM_CMD_SIZE
	 */
	HAL_UART_Receive(ghuart, UartTermRxBuf, MAX_TERM_CMD_SIZE, UART_CMD_SCAN_TIMEOUT);
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <uart_terminal_scanf+0x58>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	23ff      	movs	r3, #255	; 0xff
 8000cb2:	224b      	movs	r2, #75	; 0x4b
 8000cb4:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <uart_terminal_scanf+0x54>)
 8000cb6:	f008 fc29 	bl	800950c <HAL_UART_Receive>
	if ( strlen(UartTermRxBuf) > 0 ){
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <uart_terminal_scanf+0x54>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d010      	beq.n	8000ce4 <uart_terminal_scanf+0x48>
		// check the end byte of conversation
		for(uint32_t i = 0; i < MAX_TERM_CMD_SIZE ; i++){
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	e00a      	b.n	8000cde <uart_terminal_scanf+0x42>
			if ( 0x0D == UartTermRxBuf[i] )   // CR (0x0D) must be enabled in terminal
 8000cc8:	4a09      	ldr	r2, [pc, #36]	; (8000cf0 <uart_terminal_scanf+0x54>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	d101      	bne.n	8000cd8 <uart_terminal_scanf+0x3c>
						return UartTermRxBuf;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <uart_terminal_scanf+0x54>)
 8000cd6:	e006      	b.n	8000ce6 <uart_terminal_scanf+0x4a>
		for(uint32_t i = 0; i < MAX_TERM_CMD_SIZE ; i++){
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b4a      	cmp	r3, #74	; 0x4a
 8000ce2:	d9f1      	bls.n	8000cc8 <uart_terminal_scanf+0x2c>
		}
	}
	// создать сообщение об ошибке, и затем показать её в реестре ошибок.
	return NULL;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	240003f0 	.word	0x240003f0
 8000cf4:	240003ec 	.word	0x240003ec

08000cf8 <main>:
}

uint32_t myVal;

int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8000cfe:	af00      	add	r7, sp, #0

	 FATFS sdFatFs;
	 FIL sdFile;
	 FRESULT fr;

	HAL_Init();
 8000d00:	f000 fe56 	bl	80019b0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000d04:	f000 f83c 	bl	8000d80 <SystemClock_Config>
  
	MX_GPIO_Init();
 8000d08:	f000 f922 	bl	8000f50 <MX_GPIO_Init>

	MX_TIM16_Init();
 8000d0c:	f000 fa20 	bl	8001150 <MX_TIM16_Init>
	MX_SDMMC2_SD_Init();
 8000d10:	f000 f8fc 	bl	8000f0c <MX_SDMMC2_SD_Init>
	MX_FATFS_Init();
 8000d14:	f00b fe0a 	bl	800c92c <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000d18:	f011 fab0 	bl	801227c <MX_USB_DEVICE_Init>
  
	HAL_Delay(2U);
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 fea3 	bl	8001a68 <HAL_Delay>
  //f_write(&SDFile, line, 7, &numChar );
  // Close the file
  f_close(&sdFile);

*/
  osKernelInitialize();
 8000d22:	f00e fd71 	bl	800f808 <osKernelInitialize>

  controlTaskHandle = osThreadNew(ControlTask, NULL, &controlTask_attributes);
 8000d26:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <main+0x64>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <main+0x68>)
 8000d2c:	f00e fdd6 	bl	800f8dc <osThreadNew>
 8000d30:	4602      	mov	r2, r0
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <main+0x6c>)
 8000d34:	601a      	str	r2, [r3, #0]
  modulesTaskHandle = osThreadNew(ModulesTask, NULL, &modulesTask_attributes);
 8000d36:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <main+0x70>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <main+0x74>)
 8000d3c:	f00e fdce 	bl	800f8dc <osThreadNew>
 8000d40:	4602      	mov	r2, r0
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <main+0x78>)
 8000d44:	601a      	str	r2, [r3, #0]
  storageTaskHandle = osThreadNew(StorageTask, NULL, &storageTask_attributes);
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <main+0x7c>)
 8000d48:	2100      	movs	r1, #0
 8000d4a:	480b      	ldr	r0, [pc, #44]	; (8000d78 <main+0x80>)
 8000d4c:	f00e fdc6 	bl	800f8dc <osThreadNew>
 8000d50:	4602      	mov	r2, r0
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <main+0x84>)
 8000d54:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8000d56:	f00e fd8b 	bl	800f870 <osKernelStart>

    /* Loop forever */
	while(1){
 8000d5a:	e7fe      	b.n	8000d5a <main+0x62>
 8000d5c:	080131f0 	.word	0x080131f0
 8000d60:	080012c5 	.word	0x080012c5
 8000d64:	24004e38 	.word	0x24004e38
 8000d68:	08013214 	.word	0x08013214
 8000d6c:	08001305 	.word	0x08001305
 8000d70:	24004d64 	.word	0x24004d64
 8000d74:	08013238 	.word	0x08013238
 8000d78:	08001325 	.word	0x08001325
 8000d7c:	24004e34 	.word	0x24004e34

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b0cc      	sub	sp, #304	; 0x130
 8000d84:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d8a:	224c      	movs	r2, #76	; 0x4c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f011 ffee 	bl	8012d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000d98:	2220      	movs	r2, #32
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f011 ffe7 	bl	8012d70 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da2:	f107 0308 	add.w	r3, r7, #8
 8000da6:	4618      	mov	r0, r3
 8000da8:	23bc      	movs	r3, #188	; 0xbc
 8000daa:	461a      	mov	r2, r3
 8000dac:	2100      	movs	r1, #0
 8000dae:	f011 ffdf 	bl	8012d70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000db2:	2002      	movs	r0, #2
 8000db4:	f002 fee0 	bl	8003b78 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	4b50      	ldr	r3, [pc, #320]	; (8000f00 <SystemClock_Config+0x180>)
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	4a4f      	ldr	r2, [pc, #316]	; (8000f00 <SystemClock_Config+0x180>)
 8000dc4:	f023 0301 	bic.w	r3, r3, #1
 8000dc8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000dca:	4b4d      	ldr	r3, [pc, #308]	; (8000f00 <SystemClock_Config+0x180>)
 8000dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	4b4b      	ldr	r3, [pc, #300]	; (8000f04 <SystemClock_Config+0x184>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dde:	4a49      	ldr	r2, [pc, #292]	; (8000f04 <SystemClock_Config+0x184>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6193      	str	r3, [r2, #24]
 8000de6:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <SystemClock_Config+0x184>)
 8000de8:	699b      	ldr	r3, [r3, #24]
 8000dea:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000df6:	bf00      	nop
 8000df8:	4b42      	ldr	r3, [pc, #264]	; (8000f04 <SystemClock_Config+0x184>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e04:	d1f8      	bne.n	8000df8 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e06:	2321      	movs	r3, #33	; 0x21
 8000e08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e14:	2301      	movs	r3, #1
 8000e16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000e2c:	2332      	movs	r3, #50	; 0x32
 8000e2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000e3e:	2308      	movs	r3, #8
 8000e40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e44:	2308      	movs	r3, #8
 8000e46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fed6 	bl	8003c0c <HAL_RCC_OscConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e66:	f000 fa81 	bl	800136c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6a:	233f      	movs	r3, #63	; 0x3f
 8000e6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e94:	2340      	movs	r3, #64	; 0x40
 8000e96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fac3 	bl	800442c <HAL_RCC_ClockConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8000eac:	f000 fa5e 	bl	800136c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SDMMC
 8000eb0:	f107 0308 	add.w	r3, r7, #8
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <SystemClock_Config+0x188>)
 8000eb6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000eda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fed2 	bl	8004c8c <HAL_RCCEx_PeriphCLKConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0x172>
  {
    Error_Handler();
 8000eee:	f000 fa3d 	bl	800136c <Error_Handler>
  }
 
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000ef2:	f002 fe7b 	bl	8003bec <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000ef6:	bf00      	nop
 8000ef8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	58000400 	.word	0x58000400
 8000f04:	58024800 	.word	0x58024800
 8000f08:	0005000a 	.word	0x0005000a

08000f0c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  hsd2.Instance = SDMMC2;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <MX_SDMMC2_SD_Init+0x40>)
 8000f14:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f28:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f30:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 4;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	615a      	str	r2, [r3, #20]
  hsd2.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <MX_SDMMC2_SD_Init+0x3c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	619a      	str	r2, [r3, #24]

}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	24004db4 	.word	0x24004db4
 8000f4c:	48022400 	.word	0x48022400

08000f50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7c:	f003 0304 	and.w	r3, r3, #4
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b44      	ldr	r3, [pc, #272]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	4a43      	ldr	r2, [pc, #268]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <MX_GPIO_Init+0x148>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <MX_GPIO_Init+0x148>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a3b      	ldr	r2, [pc, #236]	; (8001098 <MX_GPIO_Init+0x148>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb2:	4b39      	ldr	r3, [pc, #228]	; (8001098 <MX_GPIO_Init+0x148>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0x148>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc6:	4a34      	ldr	r2, [pc, #208]	; (8001098 <MX_GPIO_Init+0x148>)
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd0:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0x148>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	482e      	ldr	r0, [pc, #184]	; (800109c <MX_GPIO_Init+0x14c>)
 8000fe4:	f001 f816 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin|CAM_Pwdn_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	210c      	movs	r1, #12
 8000fec:	482c      	ldr	r0, [pc, #176]	; (80010a0 <MX_GPIO_Init+0x150>)
 8000fee:	f001 f811 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_Dir_Pin|DRV_Step_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	21a0      	movs	r1, #160	; 0xa0
 8000ff6:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_GPIO_Init+0x150>)
 8000ff8:	f001 f80c 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_Reset_GPIO_Port, DRV_Reset_Pin, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	4826      	ldr	r0, [pc, #152]	; (800109c <MX_GPIO_Init+0x14c>)
 8001002:	f001 f807 	bl	8002014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM_En_Pin */
  GPIO_InitStruct.Pin = CAM_En_Pin;
 8001006:	2304      	movs	r3, #4
 8001008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	2301      	movs	r3, #1
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001012:	2301      	movs	r3, #1
 8001014:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_En_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	481f      	ldr	r0, [pc, #124]	; (800109c <MX_GPIO_Init+0x14c>)
 800101e:	f000 fe31 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Reset_Pin CAM_Pwdn_Pin */
  GPIO_InitStruct.Pin = CAM_Reset_Pin|CAM_Pwdn_Pin;
 8001022:	230c      	movs	r3, #12
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800102e:	2301      	movs	r3, #1
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4819      	ldr	r0, [pc, #100]	; (80010a0 <MX_GPIO_Init+0x150>)
 800103a:	f000 fe23 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_Dir_Pin DRV_Step_Pin */
  GPIO_InitStruct.Pin = DRV_Dir_Pin|DRV_Step_Pin;
 800103e:	23a0      	movs	r3, #160	; 0xa0
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_GPIO_Init+0x150>)
 8001056:	f000 fe15 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_Reset_Pin */
  GPIO_InitStruct.Pin = DRV_Reset_Pin;
 800105a:	2320      	movs	r3, #32
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105e:	2301      	movs	r3, #1
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_Reset_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <MX_GPIO_Init+0x14c>)
 8001072:	f000 fe07 	bl	8001c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Detect_SDIO_Pin PB2 */
  GPIO_InitStruct.Pin = Detect_SDIO_Pin|GPIO_PIN_2;
 8001076:	2305      	movs	r3, #5
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_GPIO_Init+0x154>)
 800108a:	f000 fdfb 	bl	8001c84 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	58024400 	.word	0x58024400
 800109c:	58020800 	.word	0x58020800
 80010a0:	58020000 	.word	0x58020000
 80010a4:	58020400 	.word	0x58020400

080010a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_UART4_Init+0xa0>)
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_UART4_Init+0xa4>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010b2:	4b25      	ldr	r3, [pc, #148]	; (8001148 <MX_UART4_Init+0xa0>)
 80010b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_UART4_Init+0xa0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_UART4_Init+0xa0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <MX_UART4_Init+0xa0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <MX_UART4_Init+0xa0>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_UART4_Init+0xa0>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <MX_UART4_Init+0xa0>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010de:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_UART4_Init+0xa0>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_UART4_Init+0xa0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_UART4_Init+0xa0>)
 80010ec:	2230      	movs	r2, #48	; 0x30
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_UART4_Init+0xa0>)
 80010f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80010f8:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_UART4_Init+0xa0>)
 80010fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010fe:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001100:	4811      	ldr	r0, [pc, #68]	; (8001148 <MX_UART4_Init+0xa0>)
 8001102:	f008 f91d 	bl	8009340 <HAL_UART_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800110c:	f000 f92e 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_UART4_Init+0xa0>)
 8001114:	f009 fa1d 	bl	800a552 <HAL_UARTEx_SetTxFifoThreshold>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800111e:	f000 f925 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4808      	ldr	r0, [pc, #32]	; (8001148 <MX_UART4_Init+0xa0>)
 8001126:	f009 fa52 	bl	800a5ce <HAL_UARTEx_SetRxFifoThreshold>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001130:	f000 f91c 	bl	800136c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_UART4_Init+0xa0>)
 8001136:	f009 f9d3 	bl	800a4e0 <HAL_UARTEx_DisableFifoMode>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_UART4_Init+0x9c>
  {
    Error_Handler();
 8001140:	f000 f914 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	24004e3c 	.word	0x24004e3c
 800114c:	40004c00 	.word	0x40004c00

08001150 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b092      	sub	sp, #72	; 0x48
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116a:	463b      	mov	r3, r7
 800116c:	222c      	movs	r2, #44	; 0x2c
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f011 fdfd 	bl	8012d70 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001176:	4b31      	ldr	r3, [pc, #196]	; (800123c <MX_TIM16_Init+0xec>)
 8001178:	4a31      	ldr	r2, [pc, #196]	; (8001240 <MX_TIM16_Init+0xf0>)
 800117a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800117c:	4b2f      	ldr	r3, [pc, #188]	; (800123c <MX_TIM16_Init+0xec>)
 800117e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001182:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001184:	4b2d      	ldr	r3, [pc, #180]	; (800123c <MX_TIM16_Init+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MX_TIM16_Init+0xec>)
 800118c:	22ff      	movs	r2, #255	; 0xff
 800118e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MX_TIM16_Init+0xec>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001196:	4b29      	ldr	r3, [pc, #164]	; (800123c <MX_TIM16_Init+0xec>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_TIM16_Init+0xec>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011a2:	4826      	ldr	r0, [pc, #152]	; (800123c <MX_TIM16_Init+0xec>)
 80011a4:	f006 fff2 	bl	800818c <HAL_TIM_Base_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80011ae:	f000 f8dd 	bl	800136c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80011b2:	4822      	ldr	r0, [pc, #136]	; (800123c <MX_TIM16_Init+0xec>)
 80011b4:	f007 f878 	bl	80082a8 <HAL_TIM_PWM_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80011be:	f000 f8d5 	bl	800136c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c2:	2360      	movs	r3, #96	; 0x60
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 15000;
 80011c6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4814      	ldr	r0, [pc, #80]	; (800123c <MX_TIM16_Init+0xec>)
 80011ea:	f007 fb47 	bl	800887c <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80011f4:	f000 f8ba 	bl	800136c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_TIM16_Init+0xec>)
 8001220:	f007 fff2 	bl	8009208 <HAL_TIMEx_ConfigBreakDeadTime>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800122a:	f000 f89f 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800122e:	4803      	ldr	r0, [pc, #12]	; (800123c <MX_TIM16_Init+0xec>)
 8001230:	f000 fa00 	bl	8001634 <HAL_TIM_MspPostInit>

}
 8001234:	bf00      	nop
 8001236:	3748      	adds	r7, #72	; 0x48
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24004ec8 	.word	0x24004ec8
 8001240:	40014400 	.word	0x40014400

08001244 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_I2C2_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_I2C2_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xD01016F3;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001250:	4a1b      	ldr	r2, [pc, #108]	; (80012c0 <MX_I2C2_Init+0x7c>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_I2C2_Init+0x74>)
 800125c:	2201      	movs	r2, #1
 800125e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_I2C2_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_I2C2_Init+0x74>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800127e:	480e      	ldr	r0, [pc, #56]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001280:	f000 fee2 	bl	8002048 <HAL_I2C_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800128a:	f000 f86f 	bl	800136c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800128e:	2100      	movs	r1, #0
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <MX_I2C2_Init+0x74>)
 8001292:	f001 f9d1 	bl	8002638 <HAL_I2CEx_ConfigAnalogFilter>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800129c:	f000 f866 	bl	800136c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012a0:	2100      	movs	r1, #0
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_I2C2_Init+0x74>)
 80012a4:	f001 fa13 	bl	80026ce <HAL_I2CEx_ConfigDigitalFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 f85d 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	24004d68 	.word	0x24004d68
 80012bc:	40005800 	.word	0x40005800
 80012c0:	d01016f3 	.word	0xd01016f3

080012c4 <ControlTask>:
  * @param  argument: Not used
  * @retval None
  */

void ControlTask(void *argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  MX_I2C2_Init();
 80012cc:	f7ff ffba 	bl	8001244 <MX_I2C2_Init>
  MX_UART4_Init();
 80012d0:	f7ff feea 	bl	80010a8 <MX_UART4_Init>
  uart_terminal_init(&huart4);
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <ControlTask+0x34>)
 80012d6:	f7ff fbdd 	bl	8000a94 <uart_terminal_init>
  uart_terminal_print("Control task start!\n");
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <ControlTask+0x38>)
 80012dc:	f7ff fbee 	bl	8000abc <uart_terminal_print>
  testVal += 1;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <ControlTask+0x3c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <ControlTask+0x3c>)
 80012ea:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    //uart_terminal_print("Loop\n");
    uart_terminal_cmd_def();
 80012ec:	f7ff fc06 	bl	8000afc <uart_terminal_cmd_def>
    osDelay(100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f00e fb99 	bl	800fa28 <osDelay>
  {
 80012f6:	e7f9      	b.n	80012ec <ControlTask+0x28>
 80012f8:	24004e3c 	.word	0x24004e3c
 80012fc:	0801316c 	.word	0x0801316c
 8001300:	2400043b 	.word	0x2400043b

08001304 <ModulesTask>:
  }

}

void ModulesTask(void *argument)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

  testVal += 1;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <ModulesTask+0x1c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <ModulesTask+0x1c>)
 8001316:	701a      	strb	r2, [r3, #0]
  for(;;)
  {
    osDelay(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f00e fb85 	bl	800fa28 <osDelay>
 800131e:	e7fb      	b.n	8001318 <ModulesTask+0x14>
 8001320:	2400043b 	.word	0x2400043b

08001324 <StorageTask>:
  }

}

void StorageTask(void *argument)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  testVal += 1;
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <StorageTask+0x20>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <StorageTask+0x20>)
 8001336:	701a      	strb	r2, [r3, #0]
  MX_USB_DEVICE_Init();
 8001338:	f010 ffa0 	bl	801227c <MX_USB_DEVICE_Init>

  for(;;)
  {
    osDelay(1);
 800133c:	2001      	movs	r0, #1
 800133e:	f00e fb73 	bl	800fa28 <osDelay>
 8001342:	e7fb      	b.n	800133c <StorageTask+0x18>
 8001344:	2400043b 	.word	0x2400043b

08001348 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800135a:	f000 fb65 	bl	8001a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40001c00 	.word	0x40001c00

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001372:	e7fe      	b.n	8001372 <Error_Handler+0x6>

08001374 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <HAL_MspInit+0x38>)
 800137c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001380:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_MspInit+0x38>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_MspInit+0x38>)
 800138c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	210f      	movs	r1, #15
 800139c:	f06f 0001 	mvn.w	r0, #1
 80013a0:	f000 fc48 	bl	8001c34 <HAL_NVIC_SetPriority>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400

080013b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	; 0x30
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a39      	ldr	r2, [pc, #228]	; (80014b4 <HAL_SD_MspInit+0x104>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d16c      	bne.n	80014ac <HAL_SD_MspInit+0xfc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_SD_MspInit+0x108>)
 80013d4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013d8:	4a37      	ldr	r2, [pc, #220]	; (80014b8 <HAL_SD_MspInit+0x108>)
 80013da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013de:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80013e2:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <HAL_SD_MspInit+0x108>)
 80013e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_SD_MspInit+0x108>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a30      	ldr	r2, [pc, #192]	; (80014b8 <HAL_SD_MspInit+0x108>)
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_SD_MspInit+0x108>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0304 	and.w	r3, r3, #4
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_SD_MspInit+0x108>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	4a28      	ldr	r2, [pc, #160]	; (80014b8 <HAL_SD_MspInit+0x108>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <HAL_SD_MspInit+0x108>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142c:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_SD_MspInit+0x108>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	4a21      	ldr	r2, [pc, #132]	; (80014b8 <HAL_SD_MspInit+0x108>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_SD_MspInit+0x108>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDMMC2_D1
    PD7     ------> SDMMC2_CMD
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 800145a:	2309      	movs	r3, #9
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <HAL_SD_MspInit+0x10c>)
 8001466:	f000 fc0d 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 800146a:	f24c 0318 	movw	r3, #49176	; 0xc018
 800146e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 800147c:	2309      	movs	r3, #9
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	480e      	ldr	r0, [pc, #56]	; (80014c0 <HAL_SD_MspInit+0x110>)
 8001488:	f000 fbfc 	bl	8001c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 800149c:	230b      	movs	r3, #11
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <HAL_SD_MspInit+0x114>)
 80014a8:	f000 fbec 	bl	8001c84 <HAL_GPIO_Init>

  }

}
 80014ac:	bf00      	nop
 80014ae:	3730      	adds	r7, #48	; 0x30
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48022400 	.word	0x48022400
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020800 	.word	0x58020800
 80014c0:	58020400 	.word	0x58020400
 80014c4:	58020c00 	.word	0x58020c00

080014c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	; (8001550 <HAL_I2C_MspInit+0x88>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12e      	bne.n	8001548 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a18      	ldr	r2, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800150c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150e:	2312      	movs	r3, #18
 8001510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151a:	2304      	movs	r3, #4
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x90>)
 8001526:	f000 fbad 	bl	8001c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 800152c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 8001532:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001536:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_I2C_MspInit+0x8c>)
 800153c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005800 	.word	0x40005800
 8001554:	58024400 	.word	0x58024400
 8001558:	58020400 	.word	0x58020400

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a1a      	ldr	r2, [pc, #104]	; (80015e4 <HAL_UART_MspInit+0x88>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d12d      	bne.n	80015da <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 8001580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001584:	4a18      	ldr	r2, [pc, #96]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 8001586:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800158a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 8001590:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	4a11      	ldr	r2, [pc, #68]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_UART_MspInit+0x8c>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015ba:	2303      	movs	r3, #3
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ca:	2308      	movs	r3, #8
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_UART_MspInit+0x90>)
 80015d6:	f000 fb55 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	; 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40004c00 	.word	0x40004c00
 80015e8:	58024400 	.word	0x58024400
 80015ec:	58020000 	.word	0x58020000

080015f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_TIM_Base_MspInit+0x3c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d10e      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001608:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 800160a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_TIM_Base_MspInit+0x40>)
 8001614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	40014400 	.word	0x40014400
 8001630:	58024400 	.word	0x58024400

08001634 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b088      	sub	sp, #32
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a13      	ldr	r2, [pc, #76]	; (80016a0 <HAL_TIM_MspPostInit+0x6c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d11f      	bne.n	8001696 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_TIM_MspPostInit+0x70>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_TIM_MspPostInit+0x70>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_TIM_MspPostInit+0x70>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001678:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001686:	2301      	movs	r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 030c 	add.w	r3, r7, #12
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	; (80016a8 <HAL_TIM_MspPostInit+0x74>)
 8001692:	f000 faf7 	bl	8001c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3720      	adds	r7, #32
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40014400 	.word	0x40014400
 80016a4:	58024400 	.word	0x58024400
 80016a8:	58020400 	.word	0x58020400

080016ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b090      	sub	sp, #64	; 0x40
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM13 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b0f      	cmp	r3, #15
 80016b8:	d827      	bhi.n	800170a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 80016ba:	2200      	movs	r2, #0
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	202c      	movs	r0, #44	; 0x2c
 80016c0:	f000 fab8 	bl	8001c34 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80016c4:	202c      	movs	r0, #44	; 0x2c
 80016c6:	f000 facf 	bl	8001c68 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80016ca:	4a29      	ldr	r2, [pc, #164]	; (8001770 <HAL_InitTick+0xc4>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 80016d0:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_InitTick+0xc8>)
 80016d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016d6:	4a27      	ldr	r2, [pc, #156]	; (8001774 <HAL_InitTick+0xc8>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_InitTick+0xc8>)
 80016e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ee:	f107 0210 	add.w	r2, r7, #16
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fa85 	bl	8004c08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	2b00      	cmp	r3, #0
 8001706:	d106      	bne.n	8001716 <HAL_InitTick+0x6a>
 8001708:	e001      	b.n	800170e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02b      	b.n	8001766 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800170e:	f003 fa4f 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8001712:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001714:	e004      	b.n	8001720 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001716:	f003 fa4b 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 800171a:	4603      	mov	r3, r0
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001722:	4a15      	ldr	r2, [pc, #84]	; (8001778 <HAL_InitTick+0xcc>)
 8001724:	fba2 2303 	umull	r2, r3, r2, r3
 8001728:	0c9b      	lsrs	r3, r3, #18
 800172a:	3b01      	subs	r3, #1
 800172c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_InitTick+0xd0>)
 8001730:	4a13      	ldr	r2, [pc, #76]	; (8001780 <HAL_InitTick+0xd4>)
 8001732:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_InitTick+0xd0>)
 8001736:	f240 32e7 	movw	r2, #999	; 0x3e7
 800173a:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 800173c:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_InitTick+0xd0>)
 800173e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001740:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_InitTick+0xd0>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_InitTick+0xd0>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 800174e:	480b      	ldr	r0, [pc, #44]	; (800177c <HAL_InitTick+0xd0>)
 8001750:	f006 fd1c 	bl	800818c <HAL_TIM_Base_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d104      	bne.n	8001764 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 800175a:	4808      	ldr	r0, [pc, #32]	; (800177c <HAL_InitTick+0xd0>)
 800175c:	f006 fd6e 	bl	800823c <HAL_TIM_Base_Start_IT>
 8001760:	4603      	mov	r3, r0
 8001762:	e000      	b.n	8001766 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3740      	adds	r7, #64	; 0x40
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2400009c 	.word	0x2400009c
 8001774:	58024400 	.word	0x58024400
 8001778:	431bde83 	.word	0x431bde83
 800177c:	24004f18 	.word	0x24004f18
 8001780:	40001c00 	.word	0x40001c00

08001784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <NMI_Handler+0x4>

0800178a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178e:	e7fe      	b.n	800178e <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	e7fe      	b.n	8001794 <MemManage_Handler+0x4>

08001796 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001796:	b480      	push	{r7}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179a:	e7fe      	b.n	800179a <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim13);
 80017b4:	4802      	ldr	r0, [pc, #8]	; (80017c0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80017b6:	f006 ff41 	bl	800863c <HAL_TIM_IRQHandler>
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24004f18 	.word	0x24004f18

080017c4 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <OTG_FS_IRQHandler+0x10>)
 80017ca:	f001 f923 	bl	8002a14 <HAL_PCD_IRQHandler>
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	240058e0 	.word	0x240058e0

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f011 fa54 	bl	8012cb4 <__errno>
 800180c:	4602      	mov	r2, r0
 800180e:	230c      	movs	r3, #12
 8001810:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	24080000 	.word	0x24080000
 8001838:	00000400 	.word	0x00000400
 800183c:	2400043c 	.word	0x2400043c
 8001840:	24005cf0 	.word	0x24005cf0

08001844 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001846:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001848:	f000 f826 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <LoopForever+0x6>)
  ldr r1, =_edata
 800184e:	490d      	ldr	r1, [pc, #52]	; (8001884 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <LoopForever+0xe>)
  movs r3, #0
 8001852:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001854:	e002      	b.n	800185c <LoopCopyDataInit>

08001856 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001856:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001858:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185a:	3304      	adds	r3, #4

0800185c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800185c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001860:	d3f9      	bcc.n	8001856 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001864:	4c0a      	ldr	r4, [pc, #40]	; (8001890 <LoopForever+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001868:	e001      	b.n	800186e <LoopFillZerobss>

0800186a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800186c:	3204      	adds	r2, #4

0800186e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001870:	d3fb      	bcc.n	800186a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001872:	f011 fa25 	bl	8012cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001876:	f7ff fa3f 	bl	8000cf8 <main>

0800187a <LoopForever>:

LoopForever:
    b LoopForever
 800187a:	e7fe      	b.n	800187a <LoopForever>
  ldr   r0, =_estack
 800187c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001880:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001884:	240003d0 	.word	0x240003d0
  ldr r2, =_sidata
 8001888:	080133d8 	.word	0x080133d8
  ldr r2, =_sbss
 800188c:	240003d0 	.word	0x240003d0
  ldr r4, =_ebss
 8001890:	24005cec 	.word	0x24005cec

08001894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC1_2_IRQHandler>
	...

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b39      	ldr	r3, [pc, #228]	; (8001984 <SystemInit+0xec>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a38      	ldr	r2, [pc, #224]	; (8001984 <SystemInit+0xec>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018ac:	4b36      	ldr	r3, [pc, #216]	; (8001988 <SystemInit+0xf0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	2b06      	cmp	r3, #6
 80018b6:	d807      	bhi.n	80018c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b8:	4b33      	ldr	r3, [pc, #204]	; (8001988 <SystemInit+0xf0>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 030f 	bic.w	r3, r3, #15
 80018c0:	4a31      	ldr	r2, [pc, #196]	; (8001988 <SystemInit+0xf0>)
 80018c2:	f043 0307 	orr.w	r3, r3, #7
 80018c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c8:	4b30      	ldr	r3, [pc, #192]	; (800198c <SystemInit+0xf4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2f      	ldr	r2, [pc, #188]	; (800198c <SystemInit+0xf4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <SystemInit+0xf4>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <SystemInit+0xf4>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	492b      	ldr	r1, [pc, #172]	; (800198c <SystemInit+0xf4>)
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <SystemInit+0xf8>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018e6:	4b28      	ldr	r3, [pc, #160]	; (8001988 <SystemInit+0xf0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	2b07      	cmp	r3, #7
 80018f0:	d907      	bls.n	8001902 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <SystemInit+0xf0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 030f 	bic.w	r3, r3, #15
 80018fa:	4a23      	ldr	r2, [pc, #140]	; (8001988 <SystemInit+0xf0>)
 80018fc:	f043 0307 	orr.w	r3, r3, #7
 8001900:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001902:	4b22      	ldr	r3, [pc, #136]	; (800198c <SystemInit+0xf4>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <SystemInit+0xf4>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <SystemInit+0xf4>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001914:	4b1d      	ldr	r3, [pc, #116]	; (800198c <SystemInit+0xf4>)
 8001916:	4a1f      	ldr	r2, [pc, #124]	; (8001994 <SystemInit+0xfc>)
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800191a:	4b1c      	ldr	r3, [pc, #112]	; (800198c <SystemInit+0xf4>)
 800191c:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <SystemInit+0x100>)
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001920:	4b1a      	ldr	r3, [pc, #104]	; (800198c <SystemInit+0xf4>)
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <SystemInit+0x104>)
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <SystemInit+0xf4>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800192c:	4b17      	ldr	r3, [pc, #92]	; (800198c <SystemInit+0xf4>)
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <SystemInit+0x104>)
 8001930:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <SystemInit+0xf4>)
 8001934:	2200      	movs	r2, #0
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <SystemInit+0xf4>)
 800193a:	4a18      	ldr	r2, [pc, #96]	; (800199c <SystemInit+0x104>)
 800193c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <SystemInit+0xf4>)
 8001940:	2200      	movs	r2, #0
 8001942:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <SystemInit+0xf4>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <SystemInit+0xf4>)
 800194a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <SystemInit+0xf4>)
 8001952:	2200      	movs	r2, #0
 8001954:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <SystemInit+0x108>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <SystemInit+0x10c>)
 800195c:	4013      	ands	r3, r2
 800195e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001962:	d202      	bcs.n	800196a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001964:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <SystemInit+0x110>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <SystemInit+0x114>)
 800196c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001970:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SystemInit+0xec>)
 8001974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001978:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00
 8001988:	52002000 	.word	0x52002000
 800198c:	58024400 	.word	0x58024400
 8001990:	eaf6ed7f 	.word	0xeaf6ed7f
 8001994:	02020200 	.word	0x02020200
 8001998:	01ff0000 	.word	0x01ff0000
 800199c:	01010280 	.word	0x01010280
 80019a0:	5c001000 	.word	0x5c001000
 80019a4:	ffff0000 	.word	0xffff0000
 80019a8:	51008108 	.word	0x51008108
 80019ac:	52004000 	.word	0x52004000

080019b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b6:	2003      	movs	r0, #3
 80019b8:	f000 f931 	bl	8001c1e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019bc:	f002 ff56 	bl	800486c <HAL_RCC_GetSysClockFreq>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4b15      	ldr	r3, [pc, #84]	; (8001a18 <HAL_Init+0x68>)
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 030f 	and.w	r3, r3, #15
 80019cc:	4a13      	ldr	r2, [pc, #76]	; (8001a1c <HAL_Init+0x6c>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	f003 031f 	and.w	r3, r3, #31
 80019d4:	fa21 f303 	lsr.w	r3, r1, r3
 80019d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <HAL_Init+0x68>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_Init+0x6c>)
 80019e4:	5cd3      	ldrb	r3, [r2, r3]
 80019e6:	f003 031f 	and.w	r3, r3, #31
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <HAL_Init+0x70>)
 80019f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80019f4:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <HAL_Init+0x74>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019fa:	2000      	movs	r0, #0
 80019fc:	f7ff fe56 	bl	80016ac <HAL_InitTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e002      	b.n	8001a10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0a:	f7ff fcb3 	bl	8001374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	0801325c 	.word	0x0801325c
 8001a20:	24000098 	.word	0x24000098
 8001a24:	24000094 	.word	0x24000094

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	240000a0 	.word	0x240000a0
 8001a4c:	24004f64 	.word	0x24004f64

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	24004f64 	.word	0x24004f64

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	240000a0 	.word	0x240000a0

08001aac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ab0:	4b03      	ldr	r3, [pc, #12]	; (8001ac0 <HAL_GetREVID+0x14>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	5c001000 	.word	0x5c001000

08001ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x40>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000ed00 	.word	0xe000ed00
 8001b08:	05fa0000 	.word	0x05fa0000

08001b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <__NVIC_GetPriorityGrouping+0x18>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	0a1b      	lsrs	r3, r3, #8
 8001b16:	f003 0307 	and.w	r3, r3, #7
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	db0b      	blt.n	8001b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	4907      	ldr	r1, [pc, #28]	; (8001b60 <__NVIC_EnableIRQ+0x38>)
 8001b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	2001      	movs	r0, #1
 8001b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000e100 	.word	0xe000e100

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ff4c 	bl	8001ac4 <__NVIC_SetPriorityGrouping>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
 8001c40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c42:	f7ff ff63 	bl	8001b0c <__NVIC_GetPriorityGrouping>
 8001c46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	6978      	ldr	r0, [r7, #20]
 8001c4e:	f7ff ffb3 	bl	8001bb8 <NVIC_EncodePriority>
 8001c52:	4602      	mov	r2, r0
 8001c54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff82 	bl	8001b64 <__NVIC_SetPriority>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff56 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c92:	4b89      	ldr	r3, [pc, #548]	; (8001eb8 <HAL_GPIO_Init+0x234>)
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	e194      	b.n	8001fc2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8186 	beq.w	8001fbc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_GPIO_Init+0x4c>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cc4:	2b11      	cmp	r3, #17
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b12      	cmp	r3, #18
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0xee>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b12      	cmp	r3, #18
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80e0 	beq.w	8001fbc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	; (8001ebc <HAL_GPIO_Init+0x238>)
 8001dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e02:	4a2e      	ldr	r2, [pc, #184]	; (8001ebc <HAL_GPIO_Init+0x238>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_GPIO_Init+0x238>)
 8001e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a29      	ldr	r2, [pc, #164]	; (8001ec0 <HAL_GPIO_Init+0x23c>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_GPIO_Init+0x240>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d052      	beq.n	8001eec <HAL_GPIO_Init+0x268>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <HAL_GPIO_Init+0x244>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d031      	beq.n	8001eb2 <HAL_GPIO_Init+0x22e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1e      	ldr	r2, [pc, #120]	; (8001ecc <HAL_GPIO_Init+0x248>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d02b      	beq.n	8001eae <HAL_GPIO_Init+0x22a>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_GPIO_Init+0x24c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d025      	beq.n	8001eaa <HAL_GPIO_Init+0x226>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_GPIO_Init+0x250>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d01f      	beq.n	8001ea6 <HAL_GPIO_Init+0x222>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1b      	ldr	r2, [pc, #108]	; (8001ed8 <HAL_GPIO_Init+0x254>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d019      	beq.n	8001ea2 <HAL_GPIO_Init+0x21e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <HAL_GPIO_Init+0x258>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a19      	ldr	r2, [pc, #100]	; (8001ee0 <HAL_GPIO_Init+0x25c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a18      	ldr	r2, [pc, #96]	; (8001ee4 <HAL_GPIO_Init+0x260>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <HAL_GPIO_Init+0x264>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e8e:	2309      	movs	r3, #9
 8001e90:	e02d      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e92:	230a      	movs	r3, #10
 8001e94:	e02b      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e96:	2308      	movs	r3, #8
 8001e98:	e029      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e9a:	2307      	movs	r3, #7
 8001e9c:	e027      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001e9e:	2306      	movs	r3, #6
 8001ea0:	e025      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	e023      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	e021      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e01f      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e01d      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e01b      	b.n	8001eee <HAL_GPIO_Init+0x26a>
 8001eb6:	bf00      	nop
 8001eb8:	58000080 	.word	0x58000080
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	58000400 	.word	0x58000400
 8001ec4:	58020000 	.word	0x58020000
 8001ec8:	58020400 	.word	0x58020400
 8001ecc:	58020800 	.word	0x58020800
 8001ed0:	58020c00 	.word	0x58020c00
 8001ed4:	58021000 	.word	0x58021000
 8001ed8:	58021400 	.word	0x58021400
 8001edc:	58021800 	.word	0x58021800
 8001ee0:	58021c00 	.word	0x58021c00
 8001ee4:	58022000 	.word	0x58022000
 8001ee8:	58022400 	.word	0x58022400
 8001eec:	2300      	movs	r3, #0
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	f002 0203 	and.w	r2, r2, #3
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	4093      	lsls	r3, r2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001efe:	4938      	ldr	r1, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x35c>)
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f ae63 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	3724      	adds	r7, #36	; 0x24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	58000400 	.word	0x58000400

08001fe4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
 8002000:	e001      	b.n	8002006 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002006:	7bfb      	ldrb	r3, [r7, #15]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	460b      	mov	r3, r1
 800201e:	807b      	strh	r3, [r7, #2]
 8002020:	4613      	mov	r3, r2
 8002022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002024:	787b      	ldrb	r3, [r7, #1]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800202a:	887a      	ldrh	r2, [r7, #2]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002030:	e003      	b.n	800203a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002032:	887b      	ldrh	r3, [r7, #2]
 8002034:	041a      	lsls	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	619a      	str	r2, [r3, #24]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e07f      	b.n	800215a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d106      	bne.n	8002074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fa2a 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2224      	movs	r2, #36	; 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0201 	bic.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e006      	b.n	80020d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d104      	bne.n	80020e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b1d      	ldr	r3, [pc, #116]	; (8002164 <HAL_I2C_Init+0x11c>)
 80020ee:	430b      	orrs	r3, r1
 80020f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002100:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	ea42 0103 	orr.w	r1, r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	021a      	lsls	r2, r3, #8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69d9      	ldr	r1, [r3, #28]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1a      	ldr	r2, [r3, #32]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f042 0201 	orr.w	r2, r2, #1
 800213a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	02008000 	.word	0x02008000

08002168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	817b      	strh	r3, [r7, #10]
 8002178:	4613      	mov	r3, r2
 800217a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002182:	b2db      	uxtb	r3, r3
 8002184:	2b20      	cmp	r3, #32
 8002186:	f040 80da 	bne.w	800233e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002190:	2b01      	cmp	r3, #1
 8002192:	d101      	bne.n	8002198 <HAL_I2C_Master_Transmit+0x30>
 8002194:	2302      	movs	r3, #2
 8002196:	e0d3      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021a0:	f7ff fc56 	bl	8001a50 <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2319      	movs	r3, #25
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f8f0 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e0be      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2221      	movs	r2, #33	; 0x21
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2210      	movs	r2, #16
 80021ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2bff      	cmp	r3, #255	; 0xff
 80021f2:	d90e      	bls.n	8002212 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	22ff      	movs	r2, #255	; 0xff
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	4b51      	ldr	r3, [pc, #324]	; (8002348 <HAL_I2C_Master_Transmit+0x1e0>)
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9e6 	bl	80025dc <I2C_TransferConfig>
 8002210:	e06c      	b.n	80022ec <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002220:	b2da      	uxtb	r2, r3
 8002222:	8979      	ldrh	r1, [r7, #10]
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_I2C_Master_Transmit+0x1e0>)
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f9d5 	bl	80025dc <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002232:	e05b      	b.n	80022ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	6a39      	ldr	r1, [r7, #32]
 8002238:	68f8      	ldr	r0, [r7, #12]
 800223a:	f000 f8ed 	bl	8002418 <I2C_WaitOnTXISFlagUntilTimeout>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e07b      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227c:	b29b      	uxth	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d034      	beq.n	80022ec <HAL_I2C_Master_Transmit+0x184>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b00      	cmp	r3, #0
 8002288:	d130      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	2200      	movs	r2, #0
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 f87f 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e04d      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2bff      	cmp	r3, #255	; 0xff
 80022ac:	d90e      	bls.n	80022cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	22ff      	movs	r2, #255	; 0xff
 80022b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	8979      	ldrh	r1, [r7, #10]
 80022bc:	2300      	movs	r3, #0
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f989 	bl	80025dc <I2C_TransferConfig>
 80022ca:	e00f      	b.n	80022ec <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	8979      	ldrh	r1, [r7, #10]
 80022de:	2300      	movs	r3, #0
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 f978 	bl	80025dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d19e      	bne.n	8002234 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	6a39      	ldr	r1, [r7, #32]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f8cc 	bl	8002498 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e01a      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2220      	movs	r2, #32
 8002310:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b0b      	ldr	r3, [pc, #44]	; (800234c <HAL_I2C_Master_Transmit+0x1e4>)
 800231e:	400b      	ands	r3, r1
 8002320:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800233a:	2300      	movs	r3, #0
 800233c:	e000      	b.n	8002340 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
  }
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	80002000 	.word	0x80002000
 800234c:	fe00e800 	.word	0xfe00e800

08002350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	619a      	str	r2, [r3, #24]
  }
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a8:	e022      	b.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b0:	d01e      	beq.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7ff fb4d 	bl	8001a50 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d113      	bne.n	80023f0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00f      	b.n	8002410 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	4013      	ands	r3, r2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	429a      	cmp	r2, r3
 800240c:	d0cd      	beq.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002424:	e02c      	b.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f000 f870 	bl	8002510 <I2C_IsAcknowledgeFailed>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e02a      	b.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d01e      	beq.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002442:	f7ff fb05 	bl	8001a50 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	429a      	cmp	r2, r3
 8002450:	d302      	bcc.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d113      	bne.n	8002480 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e007      	b.n	8002490 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d1cb      	bne.n	8002426 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a4:	e028      	b.n	80024f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f830 	bl	8002510 <I2C_IsAcknowledgeFailed>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e026      	b.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024ba:	f7ff fac9 	bl	8001a50 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d302      	bcc.n	80024d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d113      	bne.n	80024f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e007      	b.n	8002508 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b20      	cmp	r3, #32
 8002504:	d1cf      	bne.n	80024a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b10      	cmp	r3, #16
 8002528:	d151      	bne.n	80025ce <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252a:	e022      	b.n	8002572 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002532:	d01e      	beq.n	8002572 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002534:	f7ff fa8c 	bl	8001a50 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	429a      	cmp	r2, r3
 8002542:	d302      	bcc.n	800254a <I2C_IsAcknowledgeFailed+0x3a>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d113      	bne.n	8002572 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f043 0220 	orr.w	r2, r3, #32
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e02e      	b.n	80025d0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0320 	and.w	r3, r3, #32
 800257c:	2b20      	cmp	r3, #32
 800257e:	d1d5      	bne.n	800252c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2220      	movs	r2, #32
 800258e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fedd 	bl	8002350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6859      	ldr	r1, [r3, #4]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <I2C_IsAcknowledgeFailed+0xc8>)
 80025a2:	400b      	ands	r3, r1
 80025a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	fe00e800 	.word	0xfe00e800

080025dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	817b      	strh	r3, [r7, #10]
 80025ea:	4613      	mov	r3, r2
 80025ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	0d5b      	lsrs	r3, r3, #21
 80025f8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <I2C_TransferConfig+0x58>)
 80025fe:	430b      	orrs	r3, r1
 8002600:	43db      	mvns	r3, r3
 8002602:	ea02 0103 	and.w	r1, r2, r3
 8002606:	897b      	ldrh	r3, [r7, #10]
 8002608:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800260c:	7a7b      	ldrb	r3, [r7, #9]
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	03ff63ff 	.word	0x03ff63ff

08002638 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b20      	cmp	r3, #32
 800264c:	d138      	bne.n	80026c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002658:	2302      	movs	r3, #2
 800265a:	e032      	b.n	80026c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2224      	movs	r2, #36	; 0x24
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800268a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6819      	ldr	r1, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2220      	movs	r2, #32
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026bc:	2300      	movs	r3, #0
 80026be:	e000      	b.n	80026c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026c0:	2302      	movs	r3, #2
  }
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b085      	sub	sp, #20
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b20      	cmp	r3, #32
 80026e2:	d139      	bne.n	8002758 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e033      	b.n	800275a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2224      	movs	r2, #36	; 0x24
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002720:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	021b      	lsls	r3, r3, #8
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0201 	orr.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3714      	adds	r7, #20
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002768:	b08f      	sub	sp, #60	; 0x3c
 800276a:	af0a      	add	r7, sp, #40	; 0x28
 800276c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e116      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f00f ff6c 	bl	8012670 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f008 feb1 	bl	800b51e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	687e      	ldr	r6, [r7, #4]
 80027c4:	466d      	mov	r5, sp
 80027c6:	f106 0410 	add.w	r4, r6, #16
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027da:	1d33      	adds	r3, r6, #4
 80027dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f008 fd88 	bl	800b2f4 <USB_CoreInit>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2202      	movs	r2, #2
 80027ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0d7      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f008 fe9f 	bl	800b540 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e04a      	b.n	800289e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002808:	7bfa      	ldrb	r2, [r7, #15]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	333d      	adds	r3, #61	; 0x3d
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	333c      	adds	r3, #60	; 0x3c
 800282c:	7bfa      	ldrb	r2, [r7, #15]
 800282e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002830:	7bfa      	ldrb	r2, [r7, #15]
 8002832:	7bfb      	ldrb	r3, [r7, #15]
 8002834:	b298      	uxth	r0, r3
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3342      	adds	r3, #66	; 0x42
 8002844:	4602      	mov	r2, r0
 8002846:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	333f      	adds	r3, #63	; 0x3f
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	3344      	adds	r3, #68	; 0x44
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	3348      	adds	r3, #72	; 0x48
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3350      	adds	r3, #80	; 0x50
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	3301      	adds	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3af      	bcc.n	8002808 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e044      	b.n	8002938 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80028d6:	7bfa      	ldrb	r2, [r7, #15]
 80028d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	3301      	adds	r3, #1
 8002936:	73fb      	strb	r3, [r7, #15]
 8002938:	7bfa      	ldrb	r2, [r7, #15]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	d3b5      	bcc.n	80028ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	687e      	ldr	r6, [r7, #4]
 800294a:	466d      	mov	r5, sp
 800294c:	f106 0410 	add.w	r4, r6, #16
 8002950:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002952:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002958:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002960:	1d33      	adds	r3, r6, #4
 8002962:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002964:	6838      	ldr	r0, [r7, #0]
 8002966:	f008 fe15 	bl	800b594 <USB_DevInit>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e014      	b.n	80029a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b01      	cmp	r3, #1
 8002992:	d102      	bne.n	800299a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f001 f8bf 	bl	8003b18 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f009 fe54 	bl	800c64c <USB_DevDisconnect>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_PCD_Start+0x1c>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e020      	b.n	8002a0c <HAL_PCD_Start+0x5e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d109      	bne.n	80029ee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d005      	beq.n	80029ee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f009 fe12 	bl	800c61c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 fd7d 	bl	800b4fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	b08d      	sub	sp, #52	; 0x34
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f009 feb9 	bl	800c7a2 <USB_GetMode>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 83ca 	bne.w	80031cc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f009 fe1d 	bl	800c67c <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 83c0 	beq.w	80031ca <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f009 fe14 	bl	800c67c <USB_ReadInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d107      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 0202 	and.w	r2, r2, #2
 8002a6c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f009 fe02 	bl	800c67c <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b10      	cmp	r3, #16
 8002a80:	d161      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699a      	ldr	r2, [r3, #24]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	0c5b      	lsrs	r3, r3, #17
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d124      	bne.n	8002b08 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d035      	beq.n	8002b36 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	461a      	mov	r2, r3
 8002adc:	6a38      	ldr	r0, [r7, #32]
 8002ade:	f009 fc7a 	bl	800c3d6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aee:	441a      	add	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b00:	441a      	add	r2, r3
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	619a      	str	r2, [r3, #24]
 8002b06:	e016      	b.n	8002b36 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	0c5b      	lsrs	r3, r3, #17
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	2b06      	cmp	r3, #6
 8002b12:	d110      	bne.n	8002b36 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6a38      	ldr	r0, [r7, #32]
 8002b20:	f009 fc59 	bl	800c3d6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	699a      	ldr	r2, [r3, #24]
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b30:	441a      	add	r2, r3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0210 	orr.w	r2, r2, #16
 8002b44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f009 fd96 	bl	800c67c <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b5a:	d16e      	bne.n	8002c3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f009 fd9c 	bl	800c6a2 <USB_ReadDevAllOutEpInterrupt>
 8002b6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b6c:	e062      	b.n	8002c34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d057      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	4611      	mov	r1, r2
 8002b82:	4618      	mov	r0, r3
 8002b84:	f009 fdc1 	bl	800c70a <USB_ReadDevOutEPInterrupt>
 8002b88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ba6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fe0b 	bl	80037c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	f003 0308 	and.w	r3, r3, #8
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00c      	beq.n	8002bd2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	015a      	lsls	r2, r3, #5
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2308      	movs	r3, #8
 8002bc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 ff05 	bl	80039dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002be8:	461a      	mov	r2, r3
 8002bea:	2310      	movs	r3, #16
 8002bec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c04:	461a      	mov	r2, r3
 8002c06:	2320      	movs	r3, #32
 8002c08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d199      	bne.n	8002b6e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f009 fd1c 	bl	800c67c <USB_ReadInterrupts>
 8002c44:	4603      	mov	r3, r0
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c4e:	f040 80c0 	bne.w	8002dd2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f009 fd3d 	bl	800c6d6 <USB_ReadDevAllInEpInterrupt>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c62:	e0b2      	b.n	8002dca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a7 	beq.w	8002dbe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	4611      	mov	r1, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f009 fd63 	bl	800c746 <USB_ReadDevInEPInterrupt>
 8002c80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d057      	beq.n	8002d3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	2201      	movs	r2, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69f9      	ldr	r1, [r7, #28]
 8002ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cac:	4013      	ands	r3, r2
 8002cae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d132      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	1a9b      	subs	r3, r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	3348      	adds	r3, #72	; 0x48
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4403      	add	r3, r0
 8002cea:	3344      	adds	r3, #68	; 0x44
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4419      	add	r1, r3
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4403      	add	r3, r0
 8002cfe:	3348      	adds	r3, #72	; 0x48
 8002d00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d113      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x31c>
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3350      	adds	r3, #80	; 0x50
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d108      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	f009 fd6c 	bl	800c808 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f00f fd19 	bl	801276e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d52:	461a      	mov	r2, r3
 8002d54:	2308      	movs	r3, #8
 8002d56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d008      	beq.n	8002d74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d6e:	461a      	mov	r2, r3
 8002d70:	2310      	movs	r3, #16
 8002d72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d008      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2340      	movs	r3, #64	; 0x40
 8002d8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002da6:	461a      	mov	r2, r3
 8002da8:	2302      	movs	r3, #2
 8002daa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002db6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 fc75 	bl	80036a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc6:	085b      	lsrs	r3, r3, #1
 8002dc8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f af49 	bne.w	8002c64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f009 fc50 	bl	800c67c <USB_ReadInterrupts>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002de6:	d122      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df6:	f023 0301 	bic.w	r3, r3, #1
 8002dfa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d108      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fea5 	bl	8003b60 <HAL_PCDEx_LPM_Callback>
 8002e16:	e002      	b.n	8002e1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f00f fd1f 	bl	801285c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f009 fc22 	bl	800c67c <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e42:	d112      	bne.n	8002e6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d102      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f00f fcdb 	bl	8012810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e68:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f009 fc04 	bl	800c67c <USB_ReadInterrupts>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7e:	d121      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002e8e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d111      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	f003 020f 	and.w	r2, r3, #15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fe52 	bl	8003b60 <HAL_PCDEx_LPM_Callback>
 8002ebc:	e002      	b.n	8002ec4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f00f fca6 	bl	8012810 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f009 fbd7 	bl	800c67c <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	f040 80c7 	bne.w	800306a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002eea:	f023 0301 	bic.w	r3, r3, #1
 8002eee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2110      	movs	r1, #16
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f008 fcaa 	bl	800b850 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f00:	e056      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	015a      	lsls	r2, r3, #5
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f26:	0151      	lsls	r1, r2, #5
 8002f28:	69fa      	ldr	r2, [r7, #28]
 8002f2a:	440a      	add	r2, r1
 8002f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f34:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	0151      	lsls	r1, r2, #5
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	440a      	add	r2, r1
 8002f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f62:	461a      	mov	r2, r3
 8002f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6c:	015a      	lsls	r2, r3, #5
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	4413      	add	r3, r2
 8002f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f7a:	0151      	lsls	r1, r2, #5
 8002f7c:	69fa      	ldr	r2, [r7, #28]
 8002f7e:	440a      	add	r2, r1
 8002f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9a:	0151      	lsls	r1, r2, #5
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	440a      	add	r2, r1
 8002fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fa4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fa8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	3301      	adds	r3, #1
 8002fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d3a3      	bcc.n	8002f02 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fc8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fcc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe6:	f043 030b 	orr.w	r3, r3, #11
 8002fea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffc:	f043 030b 	orr.w	r3, r3, #11
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	e015      	b.n	8003030 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	695a      	ldr	r2, [r3, #20]
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003012:	4619      	mov	r1, r3
 8003014:	f242 032b 	movw	r3, #8235	; 0x202b
 8003018:	4313      	orrs	r3, r2
 800301a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	69fa      	ldr	r2, [r7, #28]
 8003026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302a:	f043 030b 	orr.w	r3, r3, #11
 800302e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800303e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003042:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003054:	461a      	mov	r2, r3
 8003056:	f009 fbd7 	bl	800c808 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695a      	ldr	r2, [r3, #20]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003068:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f009 fb04 	bl	800c67c <USB_ReadInterrupts>
 8003074:	4603      	mov	r3, r0
 8003076:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307e:	d124      	bne.n	80030ca <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f009 fb9b 	bl	800c7c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f008 fc3f 	bl	800b912 <USB_GetDevSpeed>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681c      	ldr	r4, [r3, #0]
 80030a0:	f001 fd56 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 80030a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	4620      	mov	r0, r4
 80030b0:	f008 f982 	bl	800b3b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f00f fb82 	bl	80127be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695a      	ldr	r2, [r3, #20]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f009 fad4 	bl	800c67c <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10a      	bne.n	80030f4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f00f fb5f 	bl	80127a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695a      	ldr	r2, [r3, #20]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f002 0208 	and.w	r2, r2, #8
 80030f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f009 fabf 	bl	800c67c <USB_ReadInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003104:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003108:	d10f      	bne.n	800312a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4619      	mov	r1, r3
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f00f fbc1 	bl	801289c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003128:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f009 faa4 	bl	800c67c <USB_ReadInterrupts>
 8003134:	4603      	mov	r3, r0
 8003136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800313e:	d10f      	bne.n	8003160 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f00f fb94 	bl	8012878 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800315e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f009 fa89 	bl	800c67c <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003174:	d10a      	bne.n	800318c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f00f fba2 	bl	80128c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695a      	ldr	r2, [r3, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800318a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f009 fa73 	bl	800c67c <USB_ReadInterrupts>
 8003196:	4603      	mov	r3, r0
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d115      	bne.n	80031cc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f00f fb92 	bl	80128dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	e000      	b.n	80031cc <HAL_PCD_IRQHandler+0x7b8>
      return;
 80031ca:	bf00      	nop
    }
  }
}
 80031cc:	3734      	adds	r7, #52	; 0x34
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd90      	pop	{r4, r7, pc}

080031d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b082      	sub	sp, #8
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_PCD_SetAddress+0x1a>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e013      	b.n	8003214 <HAL_PCD_SetAddress+0x42>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f009 f9e3 	bl	800c5d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	4608      	mov	r0, r1
 8003226:	4611      	mov	r1, r2
 8003228:	461a      	mov	r2, r3
 800322a:	4603      	mov	r3, r0
 800322c:	70fb      	strb	r3, [r7, #3]
 800322e:	460b      	mov	r3, r1
 8003230:	803b      	strh	r3, [r7, #0]
 8003232:	4613      	mov	r3, r2
 8003234:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003236:	2300      	movs	r3, #0
 8003238:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800323a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323e:	2b00      	cmp	r3, #0
 8003240:	da0f      	bge.n	8003262 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2201      	movs	r2, #1
 800325e:	705a      	strb	r2, [r3, #1]
 8003260:	e00f      	b.n	8003282 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	f003 020f 	and.w	r2, r3, #15
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800328e:	883a      	ldrh	r2, [r7, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	78ba      	ldrb	r2, [r7, #2]
 8003298:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d004      	beq.n	80032ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ac:	78bb      	ldrb	r3, [r7, #2]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d102      	bne.n	80032b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_PCD_EP_Open+0xaa>
 80032c2:	2302      	movs	r3, #2
 80032c4:	e00e      	b.n	80032e4 <HAL_PCD_EP_Open+0xc8>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f008 fb41 	bl	800b95c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	da0f      	bge.n	8003320 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	f003 020f 	and.w	r2, r3, #15
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	3338      	adds	r3, #56	; 0x38
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	705a      	strb	r2, [r3, #1]
 800331e:	e00f      	b.n	8003340 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	b2da      	uxtb	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_PCD_EP_Close+0x6e>
 8003356:	2302      	movs	r3, #2
 8003358:	e00e      	b.n	8003378 <HAL_PCD_EP_Close+0x8c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68f9      	ldr	r1, [r7, #12]
 8003368:	4618      	mov	r0, r3
 800336a:	f008 fb7f 	bl	800ba6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	603b      	str	r3, [r7, #0]
 800338c:	460b      	mov	r3, r1
 800338e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 020f 	and.w	r2, r3, #15
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	3304      	adds	r3, #4
 80033a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2200      	movs	r2, #0
 80033ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2200      	movs	r2, #0
 80033c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c2:	7afb      	ldrb	r3, [r7, #11]
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033dc:	7afb      	ldrb	r3, [r7, #11]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	f008 fe62 	bl	800c0bc <USB_EP0StartXfer>
 80033f8:	e008      	b.n	800340c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6818      	ldr	r0, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	461a      	mov	r2, r3
 8003406:	6979      	ldr	r1, [r7, #20]
 8003408:	f008 fc0c 	bl	800bc24 <USB_EPStartXfer>
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	460b      	mov	r3, r1
 8003420:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	f003 020f 	and.w	r2, r3, #15
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003438:	681b      	ldr	r3, [r3, #0]
}
 800343a:	4618      	mov	r0, r3
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b086      	sub	sp, #24
 800344a:	af00      	add	r7, sp, #0
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	460b      	mov	r3, r1
 8003454:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003456:	7afb      	ldrb	r3, [r7, #11]
 8003458:	f003 020f 	and.w	r2, r3, #15
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	3338      	adds	r3, #56	; 0x38
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	4413      	add	r3, r2
 800346a:	3304      	adds	r3, #4
 800346c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2201      	movs	r2, #1
 8003484:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d102      	bne.n	80034a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d109      	bne.n	80034be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	6979      	ldr	r1, [r7, #20]
 80034b8:	f008 fe00 	bl	800c0bc <USB_EP0StartXfer>
 80034bc:	e008      	b.n	80034d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6818      	ldr	r0, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	6979      	ldr	r1, [r7, #20]
 80034cc:	f008 fbaa 	bl	800bc24 <USB_EPStartXfer>
  }

  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	460b      	mov	r3, r1
 80034e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034e6:	78fb      	ldrb	r3, [r7, #3]
 80034e8:	f003 020f 	and.w	r2, r3, #15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d901      	bls.n	80034f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e050      	b.n	800359a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	da0f      	bge.n	8003520 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	f003 020f 	and.w	r2, r3, #15
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3338      	adds	r3, #56	; 0x38
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	705a      	strb	r2, [r3, #1]
 800351e:	e00d      	b.n	800353c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	b2da      	uxtb	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_PCD_EP_SetStall+0x82>
 8003558:	2302      	movs	r3, #2
 800355a:	e01e      	b.n	800359a <HAL_PCD_EP_SetStall+0xc0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68f9      	ldr	r1, [r7, #12]
 800356a:	4618      	mov	r0, r3
 800356c:	f008 ff5c 	bl	800c428 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003570:	78fb      	ldrb	r3, [r7, #3]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	b2d9      	uxtb	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800358a:	461a      	mov	r2, r3
 800358c:	f009 f93c 	bl	800c808 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d901      	bls.n	80035c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e042      	b.n	8003646 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da0f      	bge.n	80035e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	3338      	adds	r3, #56	; 0x38
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	3304      	adds	r3, #4
 80035de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	705a      	strb	r2, [r3, #1]
 80035e6:	e00f      	b.n	8003608 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	f003 020f 	and.w	r2, r3, #15
 80035ee:	4613      	mov	r3, r2
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	3304      	adds	r3, #4
 8003600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_EP_ClrStall+0x86>
 8003624:	2302      	movs	r3, #2
 8003626:	e00e      	b.n	8003646 <HAL_PCD_EP_ClrStall+0xa4>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	f008 ff64 	bl	800c504 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_PCD_EP_Flush+0x1a>
 8003664:	2302      	movs	r3, #2
 8003666:	e01b      	b.n	80036a0 <HAL_PCD_EP_Flush+0x52>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8003670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003674:	2b00      	cmp	r3, #0
 8003676:	da09      	bge.n	800368c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f008 f8e3 	bl	800b850 <USB_FlushTxFifo>
 800368a:	e004      	b.n	8003696 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f008 f903 	bl	800b89c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3708      	adds	r7, #8
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08a      	sub	sp, #40	; 0x28
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	3338      	adds	r3, #56	; 0x38
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	4413      	add	r3, r2
 80036cc:	3304      	adds	r3, #4
 80036ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	695b      	ldr	r3, [r3, #20]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d901      	bls.n	80036e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e06c      	b.n	80037ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	695a      	ldr	r2, [r3, #20]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d902      	bls.n	80036fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3303      	adds	r3, #3
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003704:	e02b      	b.n	800375e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	429a      	cmp	r2, r3
 800371a:	d902      	bls.n	8003722 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3303      	adds	r3, #3
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	68d9      	ldr	r1, [r3, #12]
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	b2da      	uxtb	r2, r3
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800373a:	b2db      	uxtb	r3, r3
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4603      	mov	r3, r0
 8003740:	6978      	ldr	r0, [r7, #20]
 8003742:	f008 fe13 	bl	800c36c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	441a      	add	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	441a      	add	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	b29b      	uxth	r3, r3
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	429a      	cmp	r2, r3
 8003772:	d809      	bhi.n	8003788 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800377c:	429a      	cmp	r2, r3
 800377e:	d203      	bcs.n	8003788 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1be      	bne.n	8003706 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d811      	bhi.n	80037b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	2201      	movs	r2, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	6939      	ldr	r1, [r7, #16]
 80037b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b4:	4013      	ands	r3, r2
 80037b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
	...

080037c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	333c      	adds	r3, #60	; 0x3c
 80037dc:	3304      	adds	r3, #4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	f040 80a0 	bne.w	800393c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d015      	beq.n	8003832 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a72      	ldr	r2, [pc, #456]	; (80039d4 <PCD_EP_OutXfrComplete_int+0x210>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f240 80dd 	bls.w	80039ca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80d7 	beq.w	80039ca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	e0cb      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f003 0320 	and.w	r3, r3, #32
 8003838:	2b00      	cmp	r3, #0
 800383a:	d009      	beq.n	8003850 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003848:	461a      	mov	r2, r3
 800384a:	2320      	movs	r3, #32
 800384c:	6093      	str	r3, [r2, #8]
 800384e:	e0bc      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 80b7 	bne.w	80039ca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a5d      	ldr	r2, [pc, #372]	; (80039d4 <PCD_EP_OutXfrComplete_int+0x210>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d90f      	bls.n	8003884 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	e0a2      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003896:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	0159      	lsls	r1, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	440b      	add	r3, r1
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80038aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4403      	add	r3, r0
 80038ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4613      	mov	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038d2:	6819      	ldr	r1, [r3, #0]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	4613      	mov	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4403      	add	r3, r0
 80038e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4419      	add	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4403      	add	r3, r0
 80038f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d114      	bne.n	800392e <PCD_EP_OutXfrComplete_int+0x16a>
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003926:	461a      	mov	r2, r3
 8003928:	2101      	movs	r1, #1
 800392a:	f008 ff6d 	bl	800c808 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	4619      	mov	r1, r3
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f00e feff 	bl	8012738 <HAL_PCD_DataOutStageCallback>
 800393a:	e046      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4a26      	ldr	r2, [pc, #152]	; (80039d8 <PCD_EP_OutXfrComplete_int+0x214>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d124      	bne.n	800398e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00a      	beq.n	8003964 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003960:	6093      	str	r3, [r2, #8]
 8003962:	e032      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d008      	beq.n	8003980 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	015a      	lsls	r2, r3, #5
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397a:	461a      	mov	r2, r3
 800397c:	2320      	movs	r3, #32
 800397e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f00e fed6 	bl	8012738 <HAL_PCD_DataOutStageCallback>
 800398c:	e01d      	b.n	80039ca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d114      	bne.n	80039be <PCD_EP_OutXfrComplete_int+0x1fa>
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6818      	ldr	r0, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039b6:	461a      	mov	r2, r3
 80039b8:	2100      	movs	r1, #0
 80039ba:	f008 ff25 	bl	800c808 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	4619      	mov	r1, r3
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f00e feb7 	bl	8012738 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	4f54300a 	.word	0x4f54300a
 80039d8:	4f54310a 	.word	0x4f54310a

080039dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	333c      	adds	r3, #60	; 0x3c
 80039f4:	3304      	adds	r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a15      	ldr	r2, [pc, #84]	; (8003a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d90e      	bls.n	8003a30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d009      	beq.n	8003a30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	461a      	mov	r2, r3
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f00e fe6f 	bl	8012714 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4a0a      	ldr	r2, [pc, #40]	; (8003a64 <PCD_EP_OutSetupPacket_int+0x88>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d90c      	bls.n	8003a58 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d108      	bne.n	8003a58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6818      	ldr	r0, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a50:	461a      	mov	r2, r3
 8003a52:	2101      	movs	r1, #1
 8003a54:	f008 fed8 	bl	800c808 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	4f54300a 	.word	0x4f54300a

08003a68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	70fb      	strb	r3, [r7, #3]
 8003a74:	4613      	mov	r3, r2
 8003a76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d107      	bne.n	8003a96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a86:	883b      	ldrh	r3, [r7, #0]
 8003a88:	0419      	lsls	r1, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	629a      	str	r2, [r3, #40]	; 0x28
 8003a94:	e028      	b.n	8003ae8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e00d      	b.n	8003ac6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	3340      	adds	r3, #64	; 0x40
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	0c1b      	lsrs	r3, r3, #16
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	4413      	add	r3, r2
 8003abe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	78fb      	ldrb	r3, [r7, #3]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d3ec      	bcc.n	8003aaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ad0:	883b      	ldrh	r3, [r7, #0]
 8003ad2:	0418      	lsls	r0, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6819      	ldr	r1, [r3, #0]
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4302      	orrs	r2, r0
 8003ae0:	3340      	adds	r3, #64	; 0x40
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	887a      	ldrh	r2, [r7, #2]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_PCDEx_ActivateLPM+0x44>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	10000003 	.word	0x10000003

08003b60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003b80:	4b19      	ldr	r3, [pc, #100]	; (8003be8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003b8c:	4b16      	ldr	r3, [pc, #88]	; (8003be8 <HAL_PWREx_ConfigSupply+0x70>)
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d001      	beq.n	8003b9e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01f      	b.n	8003bde <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e01d      	b.n	8003bde <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ba2:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <HAL_PWREx_ConfigSupply+0x70>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f023 0207 	bic.w	r2, r3, #7
 8003baa:	490f      	ldr	r1, [pc, #60]	; (8003be8 <HAL_PWREx_ConfigSupply+0x70>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003bb2:	f7fd ff4d 	bl	8001a50 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bb8:	e009      	b.n	8003bce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bba:	f7fd ff49 	bl	8001a50 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bc8:	d901      	bls.n	8003bce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e007      	b.n	8003bde <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bce:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_PWREx_ConfigSupply+0x70>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d1ee      	bne.n	8003bba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	58024800 	.word	0x58024800

08003bec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4a04      	ldr	r2, [pc, #16]	; (8003c08 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	60d3      	str	r3, [r2, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	58024800 	.word	0x58024800

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08c      	sub	sp, #48	; 0x30
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e3ff      	b.n	800441e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 8087 	beq.w	8003d3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2c:	4b99      	ldr	r3, [pc, #612]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c36:	4b97      	ldr	r3, [pc, #604]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	2b10      	cmp	r3, #16
 8003c40:	d007      	beq.n	8003c52 <HAL_RCC_OscConfig+0x46>
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	2b18      	cmp	r3, #24
 8003c46:	d110      	bne.n	8003c6a <HAL_RCC_OscConfig+0x5e>
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d10b      	bne.n	8003c6a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c52:	4b90      	ldr	r3, [pc, #576]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d06c      	beq.n	8003d38 <HAL_RCC_OscConfig+0x12c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d168      	bne.n	8003d38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e3d9      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c72:	d106      	bne.n	8003c82 <HAL_RCC_OscConfig+0x76>
 8003c74:	4b87      	ldr	r3, [pc, #540]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a86      	ldr	r2, [pc, #536]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	e02e      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x98>
 8003c8a:	4b82      	ldr	r3, [pc, #520]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a81      	ldr	r2, [pc, #516]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b7f      	ldr	r3, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a7e      	ldr	r2, [pc, #504]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd4>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0xbc>
 8003cae:	4b79      	ldr	r3, [pc, #484]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a78      	ldr	r2, [pc, #480]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b76      	ldr	r3, [pc, #472]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a75      	ldr	r2, [pc, #468]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xd4>
 8003cc8:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a71      	ldr	r2, [pc, #452]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce8:	f7fd feb2 	bl	8001a50 <HAL_GetTick>
 8003cec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fd feae 	bl	8001a50 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e38d      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d02:	4b64      	ldr	r3, [pc, #400]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xe4>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d10:	f7fd fe9e 	bl	8001a50 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fd fe9a 	bl	8001a50 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e379      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x10c>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 80ae 	beq.w	8003ea4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d48:	4b52      	ldr	r3, [pc, #328]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d50:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d52:	4b50      	ldr	r3, [pc, #320]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d56:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <HAL_RCC_OscConfig+0x162>
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2b18      	cmp	r3, #24
 8003d62:	d13a      	bne.n	8003dda <HAL_RCC_OscConfig+0x1ce>
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d135      	bne.n	8003dda <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d6e:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_RCC_OscConfig+0x17a>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e34b      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d86:	f7fd fe91 	bl	8001aac <HAL_GetREVID>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d817      	bhi.n	8003dc4 <HAL_RCC_OscConfig+0x1b8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b40      	cmp	r3, #64	; 0x40
 8003d9a:	d108      	bne.n	8003dae <HAL_RCC_OscConfig+0x1a2>
 8003d9c:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003da4:	4a3b      	ldr	r2, [pc, #236]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003daa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dac:	e07a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dae:	4b39      	ldr	r3, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	031b      	lsls	r3, r3, #12
 8003dbc:	4935      	ldr	r1, [pc, #212]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dc2:	e06f      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	061b      	lsls	r3, r3, #24
 8003dd2:	4930      	ldr	r1, [pc, #192]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd8:	e064      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d045      	beq.n	8003e6e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f023 0219 	bic.w	r2, r3, #25
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	4929      	ldr	r1, [pc, #164]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fe2c 	bl	8001a50 <HAL_GetTick>
 8003df8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dfc:	f7fd fe28 	bl	8001a50 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e307      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e0e:	4b21      	ldr	r3, [pc, #132]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e1a:	f7fd fe47 	bl	8001aac <HAL_GetREVID>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d817      	bhi.n	8003e58 <HAL_RCC_OscConfig+0x24c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b40      	cmp	r3, #64	; 0x40
 8003e2e:	d108      	bne.n	8003e42 <HAL_RCC_OscConfig+0x236>
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3e:	6053      	str	r3, [r2, #4]
 8003e40:	e030      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	031b      	lsls	r3, r3, #12
 8003e50:	4910      	ldr	r1, [pc, #64]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
 8003e56:	e025      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	490b      	ldr	r1, [pc, #44]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e01a      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_RCC_OscConfig+0x288>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fd fde9 	bl	8001a50 <HAL_GetTick>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fd fde5 	bl	8001a50 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d903      	bls.n	8003e98 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e2c4      	b.n	800441e <HAL_RCC_OscConfig+0x812>
 8003e94:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e98:	4ba4      	ldr	r3, [pc, #656]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 80a9 	beq.w	8004004 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003eb2:	4b9e      	ldr	r3, [pc, #632]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ebc:	4b9b      	ldr	r3, [pc, #620]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d007      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2cc>
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	2b18      	cmp	r3, #24
 8003ecc:	d13a      	bne.n	8003f44 <HAL_RCC_OscConfig+0x338>
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d135      	bne.n	8003f44 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ed8:	4b94      	ldr	r3, [pc, #592]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2e4>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69db      	ldr	r3, [r3, #28]
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e296      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ef0:	f7fd fddc 	bl	8001aac <HAL_GetREVID>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	f241 0303 	movw	r3, #4099	; 0x1003
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d817      	bhi.n	8003f2e <HAL_RCC_OscConfig+0x322>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d108      	bne.n	8003f18 <HAL_RCC_OscConfig+0x30c>
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f0e:	4a87      	ldr	r2, [pc, #540]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f16:	e075      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f18:	4b84      	ldr	r3, [pc, #528]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	069b      	lsls	r3, r3, #26
 8003f26:	4981      	ldr	r1, [pc, #516]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f2c:	e06a      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f2e:	4b7f      	ldr	r3, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	497b      	ldr	r1, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f42:	e05f      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d042      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f4c:	4b77      	ldr	r3, [pc, #476]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a76      	ldr	r2, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fd7a 	bl	8001a50 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f60:	f7fd fd76 	bl	8001a50 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e255      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f72:	4b6e      	ldr	r3, [pc, #440]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0f0      	beq.n	8003f60 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f7e:	f7fd fd95 	bl	8001aac <HAL_GetREVID>
 8003f82:	4602      	mov	r2, r0
 8003f84:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d817      	bhi.n	8003fbc <HAL_RCC_OscConfig+0x3b0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d108      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x39a>
 8003f94:	4b65      	ldr	r3, [pc, #404]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f9c:	4a63      	ldr	r2, [pc, #396]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa2:	6053      	str	r3, [r2, #4]
 8003fa4:	e02e      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a1b      	ldr	r3, [r3, #32]
 8003fb2:	069b      	lsls	r3, r3, #26
 8003fb4:	495d      	ldr	r1, [pc, #372]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
 8003fba:	e023      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
 8003fbc:	4b5b      	ldr	r3, [pc, #364]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4958      	ldr	r1, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60cb      	str	r3, [r1, #12]
 8003fd0:	e018      	b.n	8004004 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003fd2:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a55      	ldr	r2, [pc, #340]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fde:	f7fd fd37 	bl	8001a50 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003fe6:	f7fd fd33 	bl	8001a50 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e212      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f0      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d036      	beq.n	800407e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d019      	beq.n	800404c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_OscConfig+0x520>)
 800401a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401c:	4a43      	ldr	r2, [pc, #268]	; (800412c <HAL_RCC_OscConfig+0x520>)
 800401e:	f043 0301 	orr.w	r3, r3, #1
 8004022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004024:	f7fd fd14 	bl	8001a50 <HAL_GetTick>
 8004028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402c:	f7fd fd10 	bl	8001a50 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1ef      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8004040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x420>
 800404a:	e018      	b.n	800407e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800404c:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x520>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	4a36      	ldr	r2, [pc, #216]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8004052:	f023 0301 	bic.w	r3, r3, #1
 8004056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fd fcfa 	bl	8001a50 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fd fcf6 	bl	8001a50 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1d5      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004072:	4b2e      	ldr	r3, [pc, #184]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004092:	4b26      	ldr	r3, [pc, #152]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a25      	ldr	r2, [pc, #148]	; (800412c <HAL_RCC_OscConfig+0x520>)
 8004098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800409c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800409e:	f7fd fcd7 	bl	8001a50 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040a6:	f7fd fcd3 	bl	8001a50 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1b2      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <HAL_RCC_OscConfig+0x520>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x49a>
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040c6:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x520>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x520>)
 80040cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040d2:	f7fd fcbd 	bl	8001a50 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040da:	f7fd fcb9 	bl	8001a50 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e198      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCC_OscConfig+0x520>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8085 	beq.w	8004210 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCC_OscConfig+0x524>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a09      	ldr	r2, [pc, #36]	; (8004130 <HAL_RCC_OscConfig+0x524>)
 800410c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004110:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004112:	f7fd fc9d 	bl	8001a50 <HAL_GetTick>
 8004116:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004118:	e00c      	b.n	8004134 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800411a:	f7fd fc99 	bl	8001a50 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b64      	cmp	r3, #100	; 0x64
 8004126:	d905      	bls.n	8004134 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e178      	b.n	800441e <HAL_RCC_OscConfig+0x812>
 800412c:	58024400 	.word	0x58024400
 8004130:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004134:	4b96      	ldr	r3, [pc, #600]	; (8004390 <HAL_RCC_OscConfig+0x784>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ec      	beq.n	800411a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d106      	bne.n	8004156 <HAL_RCC_OscConfig+0x54a>
 8004148:	4b92      	ldr	r3, [pc, #584]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800414a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414c:	4a91      	ldr	r2, [pc, #580]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	6713      	str	r3, [r2, #112]	; 0x70
 8004154:	e02d      	b.n	80041b2 <HAL_RCC_OscConfig+0x5a6>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10c      	bne.n	8004178 <HAL_RCC_OscConfig+0x56c>
 800415e:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	4a8c      	ldr	r2, [pc, #560]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6713      	str	r3, [r2, #112]	; 0x70
 800416a:	4b8a      	ldr	r3, [pc, #552]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a89      	ldr	r2, [pc, #548]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	6713      	str	r3, [r2, #112]	; 0x70
 8004176:	e01c      	b.n	80041b2 <HAL_RCC_OscConfig+0x5a6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d10c      	bne.n	800419a <HAL_RCC_OscConfig+0x58e>
 8004180:	4b84      	ldr	r3, [pc, #528]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a83      	ldr	r2, [pc, #524]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b81      	ldr	r3, [pc, #516]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a80      	ldr	r2, [pc, #512]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e00b      	b.n	80041b2 <HAL_RCC_OscConfig+0x5a6>
 800419a:	4b7e      	ldr	r3, [pc, #504]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a7d      	ldr	r2, [pc, #500]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d015      	beq.n	80041e6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fc49 	bl	8001a50 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fc45 	bl	8001a50 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e122      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041d8:	4b6e      	ldr	r3, [pc, #440]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCC_OscConfig+0x5b6>
 80041e4:	e014      	b.n	8004210 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e6:	f7fd fc33 	bl	8001a50 <HAL_GetTick>
 80041ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd fc2f 	bl	8001a50 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e10c      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004204:	4b63      	ldr	r3, [pc, #396]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ee      	bne.n	80041ee <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8101 	beq.w	800441c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800421a:	4b5e      	ldr	r3, [pc, #376]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004222:	2b18      	cmp	r3, #24
 8004224:	f000 80bc 	beq.w	80043a0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 8095 	bne.w	800435c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004232:	4b58      	ldr	r3, [pc, #352]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a57      	ldr	r2, [pc, #348]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800423e:	f7fd fc07 	bl	8001a50 <HAL_GetTick>
 8004242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004246:	f7fd fc03 	bl	8001a50 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b02      	cmp	r3, #2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e0e2      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004258:	4b4e      	ldr	r3, [pc, #312]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1f0      	bne.n	8004246 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004264:	4b4b      	ldr	r3, [pc, #300]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004268:	4b4b      	ldr	r3, [pc, #300]	; (8004398 <HAL_RCC_OscConfig+0x78c>)
 800426a:	4013      	ands	r3, r2
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	430a      	orrs	r2, r1
 8004278:	4946      	ldr	r1, [pc, #280]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800427a:	4313      	orrs	r3, r2
 800427c:	628b      	str	r3, [r1, #40]	; 0x28
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	3b01      	subs	r3, #1
 8004284:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	3b01      	subs	r3, #1
 800428e:	025b      	lsls	r3, r3, #9
 8004290:	b29b      	uxth	r3, r3
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	3b01      	subs	r3, #1
 800429a:	041b      	lsls	r3, r3, #16
 800429c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	3b01      	subs	r3, #1
 80042a8:	061b      	lsls	r3, r3, #24
 80042aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042ae:	4939      	ldr	r1, [pc, #228]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80042b4:	4b37      	ldr	r3, [pc, #220]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	4a36      	ldr	r2, [pc, #216]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042c0:	4b34      	ldr	r3, [pc, #208]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042c4:	4b35      	ldr	r3, [pc, #212]	; (800439c <HAL_RCC_OscConfig+0x790>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042cc:	00d2      	lsls	r2, r2, #3
 80042ce:	4931      	ldr	r1, [pc, #196]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80042d4:	4b2f      	ldr	r3, [pc, #188]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d8:	f023 020c 	bic.w	r2, r3, #12
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	492c      	ldr	r1, [pc, #176]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80042e6:	4b2b      	ldr	r3, [pc, #172]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	f023 0202 	bic.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f2:	4928      	ldr	r1, [pc, #160]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4a25      	ldr	r2, [pc, #148]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 80042fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4b23      	ldr	r3, [pc, #140]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	4a22      	ldr	r2, [pc, #136]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004310:	4b20      	ldr	r3, [pc, #128]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	4a1f      	ldr	r2, [pc, #124]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004316:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800431a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800431c:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004328:	4b1a      	ldr	r3, [pc, #104]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a19      	ldr	r2, [pc, #100]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fd fb8c 	bl	8001a50 <HAL_GetTick>
 8004338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fb88 	bl	8001a50 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e067      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800434e:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x730>
 800435a:	e05f      	b.n	800441c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435c:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a0c      	ldr	r2, [pc, #48]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004362:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fd fb72 	bl	8001a50 <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fb6e 	bl	8001a50 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e04d      	b.n	800441e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <HAL_RCC_OscConfig+0x788>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x764>
 800438e:	e045      	b.n	800441c <HAL_RCC_OscConfig+0x810>
 8004390:	58024800 	.word	0x58024800
 8004394:	58024400 	.word	0x58024400
 8004398:	fffffc0c 	.word	0xfffffc0c
 800439c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043a0:	4b21      	ldr	r3, [pc, #132]	; (8004428 <HAL_RCC_OscConfig+0x81c>)
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043a6:	4b20      	ldr	r3, [pc, #128]	; (8004428 <HAL_RCC_OscConfig+0x81c>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d031      	beq.n	8004418 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 0203 	and.w	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043be:	429a      	cmp	r2, r3
 80043c0:	d12a      	bne.n	8004418 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d122      	bne.n	8004418 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d11a      	bne.n	8004418 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d111      	bne.n	8004418 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0c1b      	lsrs	r3, r3, #16
 80043f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004400:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d108      	bne.n	8004418 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	0e1b      	lsrs	r3, r3, #24
 800440a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004412:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d001      	beq.n	800441c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e000      	b.n	800441e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3730      	adds	r7, #48	; 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400

0800442c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d101      	bne.n	8004440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e19c      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004440:	4b8a      	ldr	r3, [pc, #552]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d910      	bls.n	8004470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b87      	ldr	r3, [pc, #540]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 020f 	bic.w	r2, r3, #15
 8004456:	4985      	ldr	r1, [pc, #532]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b83      	ldr	r3, [pc, #524]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e184      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	4b7b      	ldr	r3, [pc, #492]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004488:	429a      	cmp	r2, r3
 800448a:	d908      	bls.n	800449e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800448c:	4b78      	ldr	r3, [pc, #480]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	4975      	ldr	r1, [pc, #468]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800449a:	4313      	orrs	r3, r2
 800449c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	4b70      	ldr	r3, [pc, #448]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d908      	bls.n	80044cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	496a      	ldr	r1, [pc, #424]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d010      	beq.n	80044fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d908      	bls.n	80044fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80044e8:	4b61      	ldr	r3, [pc, #388]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044ea:	69db      	ldr	r3, [r3, #28]
 80044ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	495e      	ldr	r1, [pc, #376]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0320 	and.w	r3, r3, #32
 8004502:	2b00      	cmp	r3, #0
 8004504:	d010      	beq.n	8004528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69da      	ldr	r2, [r3, #28]
 800450a:	4b59      	ldr	r3, [pc, #356]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004512:	429a      	cmp	r2, r3
 8004514:	d908      	bls.n	8004528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004516:	4b56      	ldr	r3, [pc, #344]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	4953      	ldr	r1, [pc, #332]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004524:	4313      	orrs	r3, r2
 8004526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d010      	beq.n	8004556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	f003 030f 	and.w	r3, r3, #15
 8004540:	429a      	cmp	r2, r3
 8004542:	d908      	bls.n	8004556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	f023 020f 	bic.w	r2, r3, #15
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4947      	ldr	r1, [pc, #284]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004552:	4313      	orrs	r3, r2
 8004554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d055      	beq.n	800460e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004562:	4b43      	ldr	r3, [pc, #268]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4940      	ldr	r1, [pc, #256]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004570:	4313      	orrs	r3, r2
 8004572:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b02      	cmp	r3, #2
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800457c:	4b3c      	ldr	r3, [pc, #240]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d121      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0f6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d107      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004594:	4b36      	ldr	r3, [pc, #216]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d115      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0ea      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d107      	bne.n	80045bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d109      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0de      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045bc:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e0d6      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f023 0207 	bic.w	r2, r3, #7
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4925      	ldr	r1, [pc, #148]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045da:	4313      	orrs	r3, r2
 80045dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045de:	f7fd fa37 	bl	8001a50 <HAL_GetTick>
 80045e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e4:	e00a      	b.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e6:	f7fd fa33 	bl	8001a50 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e0be      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fc:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	429a      	cmp	r2, r3
 800460c:	d1eb      	bne.n	80045e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d010      	beq.n	800463c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	4b14      	ldr	r3, [pc, #80]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	429a      	cmp	r2, r3
 8004628:	d208      	bcs.n	800463c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f023 020f 	bic.w	r2, r3, #15
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCC_ClockConfig+0x244>)
 8004638:	4313      	orrs	r3, r2
 800463a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d214      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4906      	ldr	r1, [pc, #24]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b04      	ldr	r3, [pc, #16]	; (800466c <HAL_RCC_ClockConfig+0x240>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d005      	beq.n	8004674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e086      	b.n	800477a <HAL_RCC_ClockConfig+0x34e>
 800466c:	52002000 	.word	0x52002000
 8004670:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	4b3f      	ldr	r3, [pc, #252]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800468c:	429a      	cmp	r2, r3
 800468e:	d208      	bcs.n	80046a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004690:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	4939      	ldr	r1, [pc, #228]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d010      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	4b34      	ldr	r3, [pc, #208]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d208      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046be:	4b31      	ldr	r3, [pc, #196]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	492e      	ldr	r1, [pc, #184]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0310 	and.w	r3, r3, #16
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d010      	beq.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699a      	ldr	r2, [r3, #24]
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d208      	bcs.n	80046fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	4922      	ldr	r1, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0320 	and.w	r3, r3, #32
 8004706:	2b00      	cmp	r3, #0
 8004708:	d010      	beq.n	800472c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004716:	429a      	cmp	r2, r3
 8004718:	d208      	bcs.n	800472c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800471c:	6a1b      	ldr	r3, [r3, #32]
 800471e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	4917      	ldr	r1, [pc, #92]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004728:	4313      	orrs	r3, r2
 800472a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800472c:	f000 f89e 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004730:	4601      	mov	r1, r0
 8004732:	4b14      	ldr	r3, [pc, #80]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	4a12      	ldr	r2, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x35c>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	fa21 f303 	lsr.w	r3, r1, r3
 8004748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <HAL_RCC_ClockConfig+0x358>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <HAL_RCC_ClockConfig+0x35c>)
 8004754:	5cd3      	ldrb	r3, [r2, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	693a      	ldr	r2, [r7, #16]
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	4a0a      	ldr	r2, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x360>)
 8004762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x364>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800476a:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RCC_ClockConfig+0x368>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc ff9c 	bl	80016ac <HAL_InitTick>
 8004774:	4603      	mov	r3, r0
 8004776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004778:	7bfb      	ldrb	r3, [r7, #15]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	58024400 	.word	0x58024400
 8004788:	0801325c 	.word	0x0801325c
 800478c:	24000098 	.word	0x24000098
 8004790:	24000094 	.word	0x24000094
 8004794:	2400009c 	.word	0x2400009c

08004798 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b08c      	sub	sp, #48	; 0x30
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d12a      	bne.n	8004800 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80047aa:	4b2d      	ldr	r3, [pc, #180]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 80047ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047ba:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 80047bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80047c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	2302      	movs	r3, #2
 80047d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047d2:	2303      	movs	r3, #3
 80047d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80047da:	2300      	movs	r3, #0
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80047de:	f107 031c 	add.w	r3, r7, #28
 80047e2:	4619      	mov	r1, r3
 80047e4:	481f      	ldr	r0, [pc, #124]	; (8004864 <HAL_RCC_MCOConfig+0xcc>)
 80047e6:	f7fd fa4d 	bl	8001c84 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80047ea:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80047f2:	68b9      	ldr	r1, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	430b      	orrs	r3, r1
 80047f8:	4919      	ldr	r1, [pc, #100]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80047fe:	e02a      	b.n	8004856 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 8004802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 8004812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800481e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004824:	2302      	movs	r3, #2
 8004826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004828:	2303      	movs	r3, #3
 800482a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482c:	2300      	movs	r3, #0
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004834:	f107 031c 	add.w	r3, r7, #28
 8004838:	4619      	mov	r1, r3
 800483a:	480b      	ldr	r0, [pc, #44]	; (8004868 <HAL_RCC_MCOConfig+0xd0>)
 800483c:	f7fd fa22 	bl	8001c84 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	01d9      	lsls	r1, r3, #7
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	430b      	orrs	r3, r1
 8004850:	4903      	ldr	r1, [pc, #12]	; (8004860 <HAL_RCC_MCOConfig+0xc8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	610b      	str	r3, [r1, #16]
}
 8004856:	bf00      	nop
 8004858:	3730      	adds	r7, #48	; 0x30
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	58024400 	.word	0x58024400
 8004864:	58020000 	.word	0x58020000
 8004868:	58020800 	.word	0x58020800

0800486c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	; 0x24
 8004870:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004872:	4baf      	ldr	r3, [pc, #700]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487a:	2b18      	cmp	r3, #24
 800487c:	f200 814e 	bhi.w	8004b1c <HAL_RCC_GetSysClockFreq+0x2b0>
 8004880:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	080048ed 	.word	0x080048ed
 800488c:	08004b1d 	.word	0x08004b1d
 8004890:	08004b1d 	.word	0x08004b1d
 8004894:	08004b1d 	.word	0x08004b1d
 8004898:	08004b1d 	.word	0x08004b1d
 800489c:	08004b1d 	.word	0x08004b1d
 80048a0:	08004b1d 	.word	0x08004b1d
 80048a4:	08004b1d 	.word	0x08004b1d
 80048a8:	08004913 	.word	0x08004913
 80048ac:	08004b1d 	.word	0x08004b1d
 80048b0:	08004b1d 	.word	0x08004b1d
 80048b4:	08004b1d 	.word	0x08004b1d
 80048b8:	08004b1d 	.word	0x08004b1d
 80048bc:	08004b1d 	.word	0x08004b1d
 80048c0:	08004b1d 	.word	0x08004b1d
 80048c4:	08004b1d 	.word	0x08004b1d
 80048c8:	08004919 	.word	0x08004919
 80048cc:	08004b1d 	.word	0x08004b1d
 80048d0:	08004b1d 	.word	0x08004b1d
 80048d4:	08004b1d 	.word	0x08004b1d
 80048d8:	08004b1d 	.word	0x08004b1d
 80048dc:	08004b1d 	.word	0x08004b1d
 80048e0:	08004b1d 	.word	0x08004b1d
 80048e4:	08004b1d 	.word	0x08004b1d
 80048e8:	0800491f 	.word	0x0800491f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ec:	4b90      	ldr	r3, [pc, #576]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048f8:	4b8d      	ldr	r3, [pc, #564]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	08db      	lsrs	r3, r3, #3
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	4a8c      	ldr	r2, [pc, #560]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004904:	fa22 f303 	lsr.w	r3, r2, r3
 8004908:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800490a:	e10a      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800490c:	4b89      	ldr	r3, [pc, #548]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800490e:	61bb      	str	r3, [r7, #24]
    break;
 8004910:	e107      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004912:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004914:	61bb      	str	r3, [r7, #24]
    break;
 8004916:	e104      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004918:	4b88      	ldr	r3, [pc, #544]	; (8004b3c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800491a:	61bb      	str	r3, [r7, #24]
    break;
 800491c:	e101      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800491e:	4b84      	ldr	r3, [pc, #528]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004928:	4b81      	ldr	r3, [pc, #516]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004932:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004934:	4b7e      	ldr	r3, [pc, #504]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800493e:	4b7c      	ldr	r3, [pc, #496]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004942:	08db      	lsrs	r3, r3, #3
 8004944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80da 	beq.w	8004b16 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d05a      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x1b2>
 8004968:	2b01      	cmp	r3, #1
 800496a:	d302      	bcc.n	8004972 <HAL_RCC_GetSysClockFreq+0x106>
 800496c:	2b02      	cmp	r3, #2
 800496e:	d078      	beq.n	8004a62 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004970:	e099      	b.n	8004aa6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004972:	4b6f      	ldr	r3, [pc, #444]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d02d      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800497e:	4b6c      	ldr	r3, [pc, #432]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	08db      	lsrs	r3, r3, #3
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	4a6a      	ldr	r2, [pc, #424]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049a8:	4b61      	ldr	r3, [pc, #388]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80049bc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 80049c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80049d8:	e087      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004b44 <HAL_RCC_GetSysClockFreq+0x2d8>
 80049e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ec:	4b50      	ldr	r3, [pc, #320]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	ee07 3a90 	vmov	s15, r3
 80049f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a00:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a1c:	e065      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a28:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a30:	4b3f      	ldr	r3, [pc, #252]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a40:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a44:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a60:	e043      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004b4c <HAL_RCC_GetSysClockFreq+0x2e0>
 8004a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a74:	4b2e      	ldr	r3, [pc, #184]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a7c:	ee07 3a90 	vmov	s15, r3
 8004a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a88:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aa4:	e021      	b.n	8004aea <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004b48 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004acc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004b40 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ae8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	0a5b      	lsrs	r3, r3, #9
 8004af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af4:	3301      	adds	r3, #1
 8004af6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	ee07 3a90 	vmov	s15, r3
 8004afe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0e:	ee17 3a90 	vmov	r3, s15
 8004b12:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004b14:	e005      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
    break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004b1e:	61bb      	str	r3, [r7, #24]
    break;
 8004b20:	bf00      	nop
  }

  return sysclockfreq;
 8004b22:	69bb      	ldr	r3, [r7, #24]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3724      	adds	r7, #36	; 0x24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	58024400 	.word	0x58024400
 8004b34:	03d09000 	.word	0x03d09000
 8004b38:	003d0900 	.word	0x003d0900
 8004b3c:	016e3600 	.word	0x016e3600
 8004b40:	46000000 	.word	0x46000000
 8004b44:	4c742400 	.word	0x4c742400
 8004b48:	4a742400 	.word	0x4a742400
 8004b4c:	4bb71b00 	.word	0x4bb71b00

08004b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004b56:	f7ff fe89 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4601      	mov	r1, r0
 8004b5c:	4b10      	ldr	r3, [pc, #64]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	4a0f      	ldr	r2, [pc, #60]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b68:	5cd3      	ldrb	r3, [r2, r3]
 8004b6a:	f003 031f 	and.w	r3, r3, #31
 8004b6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8a:	4a07      	ldr	r2, [pc, #28]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004b8e:	4a07      	ldr	r2, [pc, #28]	; (8004bac <HAL_RCC_GetHCLKFreq+0x5c>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004b94:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004b96:	681b      	ldr	r3, [r3, #0]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3708      	adds	r7, #8
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	58024400 	.word	0x58024400
 8004ba4:	0801325c 	.word	0x0801325c
 8004ba8:	24000098 	.word	0x24000098
 8004bac:	24000094 	.word	0x24000094

08004bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004bb4:	f7ff ffcc 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004bb8:	4601      	mov	r1, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bc6:	5cd3      	ldrb	r3, [r2, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	0801325c 	.word	0x0801325c

08004bdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004be0:	f7ff ffb6 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8004be4:	4601      	mov	r1, r0
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bf2:	5cd3      	ldrb	r3, [r2, r3]
 8004bf4:	f003 031f 	and.w	r3, r3, #31
 8004bf8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	58024400 	.word	0x58024400
 8004c04:	0801325c 	.word	0x0801325c

08004c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	223f      	movs	r2, #63	; 0x3f
 8004c16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c18:	4b1a      	ldr	r3, [pc, #104]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f003 0207 	and.w	r2, r3, #7
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004c24:	4b17      	ldr	r3, [pc, #92]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004c30:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 020f 	and.w	r2, r3, #15
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004c54:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004c60:	4b08      	ldr	r3, [pc, #32]	; (8004c84 <HAL_RCC_GetClockConfig+0x7c>)
 8004c62:	6a1b      	ldr	r3, [r3, #32]
 8004c64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <HAL_RCC_GetClockConfig+0x80>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	601a      	str	r2, [r3, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	58024400 	.word	0x58024400
 8004c88:	52002000 	.word	0x52002000

08004c8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c94:	2300      	movs	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c98:	2300      	movs	r3, #0
 8004c9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d03d      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb0:	d013      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cb6:	d802      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d007      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004cbc:	e01f      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc2:	d013      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004cc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cc8:	d01c      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004cca:	e018      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ccc:	4baf      	ldr	r3, [pc, #700]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	4aae      	ldr	r2, [pc, #696]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cd8:	e015      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	2102      	movs	r1, #2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 fd33 	bl	800674c <RCCEx_PLL2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cea:	e00c      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3324      	adds	r3, #36	; 0x24
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fddc 	bl	80068b0 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	75fb      	strb	r3, [r7, #23]
      break;
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d0c:	4b9f      	ldr	r3, [pc, #636]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d18:	499c      	ldr	r1, [pc, #624]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	650b      	str	r3, [r1, #80]	; 0x50
 8004d1e:	e001      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7dfb      	ldrb	r3, [r7, #23]
 8004d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d03d      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d826      	bhi.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d55 	.word	0x08004d55
 8004d44:	08004d63 	.word	0x08004d63
 8004d48:	08004d75 	.word	0x08004d75
 8004d4c:	08004d8d 	.word	0x08004d8d
 8004d50:	08004d8d 	.word	0x08004d8d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d54:	4b8d      	ldr	r3, [pc, #564]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	4a8c      	ldr	r2, [pc, #560]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d60:	e015      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	3304      	adds	r3, #4
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fcef 	bl	800674c <RCCEx_PLL2_Config>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d72:	e00c      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3324      	adds	r3, #36	; 0x24
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fd98 	bl	80068b0 <RCCEx_PLL3_Config>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d84:	e003      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d109      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d94:	4b7d      	ldr	r3, [pc, #500]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	f023 0207 	bic.w	r2, r3, #7
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da0:	497a      	ldr	r1, [pc, #488]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	650b      	str	r3, [r1, #80]	; 0x50
 8004da6:	e001      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d03e      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d01c      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004dc0:	2b80      	cmp	r3, #128	; 0x80
 8004dc2:	d804      	bhi.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d008      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d00d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004dcc:	e01e      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004dce:	2bc0      	cmp	r3, #192	; 0xc0
 8004dd0:	d01f      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	d01e      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004dd8:	e018      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dda:	4b6c      	ldr	r3, [pc, #432]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dde:	4a6b      	ldr	r2, [pc, #428]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004de4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004de6:	e017      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3304      	adds	r3, #4
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f001 fcac 	bl	800674c <RCCEx_PLL2_Config>
 8004df4:	4603      	mov	r3, r0
 8004df6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004df8:	e00e      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3324      	adds	r3, #36	; 0x24
 8004dfe:	2100      	movs	r1, #0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f001 fd55 	bl	80068b0 <RCCEx_PLL3_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e0a:	e005      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e10:	e002      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004e16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e18:	7dfb      	ldrb	r3, [r7, #23]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d109      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e1e:	4b5b      	ldr	r3, [pc, #364]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2a:	4958      	ldr	r1, [pc, #352]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	650b      	str	r3, [r1, #80]	; 0x50
 8004e30:	e001      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e32:	7dfb      	ldrb	r3, [r7, #23]
 8004e34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d044      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4c:	d01f      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d805      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5c:	d00e      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004e5e:	e01f      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004e60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e64:	d01f      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004e66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6a:	d01e      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004e6c:	e018      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e6e:	4b47      	ldr	r3, [pc, #284]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a46      	ldr	r2, [pc, #280]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e7a:	e017      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f001 fc62 	bl	800674c <RCCEx_PLL2_Config>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e8c:	e00e      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3324      	adds	r3, #36	; 0x24
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 fd0b 	bl	80068b0 <RCCEx_PLL3_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea4:	e002      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e000      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004eb2:	4b36      	ldr	r3, [pc, #216]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eb6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ec0:	4932      	ldr	r1, [pc, #200]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ec6:	e001      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	7dfb      	ldrb	r3, [r7, #23]
 8004eca:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d044      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee2:	d01f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee8:	d805      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004eee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef2:	d00e      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ef4:	e01f      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004ef6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004efa:	d01f      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004efc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f00:	d01e      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004f02:	e018      	b.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	4a20      	ldr	r2, [pc, #128]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f10:	e017      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f001 fc17 	bl	800674c <RCCEx_PLL2_Config>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f22:	e00e      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3324      	adds	r3, #36	; 0x24
 8004f28:	2100      	movs	r1, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f001 fcc0 	bl	80068b0 <RCCEx_PLL3_Config>
 8004f30:	4603      	mov	r3, r0
 8004f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f34:	e005      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	75fb      	strb	r3, [r7, #23]
      break;
 8004f3a:	e002      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004f3c:	bf00      	nop
 8004f3e:	e000      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f42:	7dfb      	ldrb	r3, [r7, #23]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f56:	490d      	ldr	r1, [pc, #52]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8004f5c:	e001      	b.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	7dfb      	ldrb	r3, [r7, #23]
 8004f60:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d035      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d00c      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d802      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d01b      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004f7e:	e017      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d00c      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d018      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004f88:	e012      	b.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f90:	4baf      	ldr	r3, [pc, #700]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	4aae      	ldr	r2, [pc, #696]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f9c:	e00e      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2102      	movs	r1, #2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fbd1 	bl	800674c <RCCEx_PLL2_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004fae:	e005      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb4:	e002      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e000      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004fba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fbc:	7dfb      	ldrb	r3, [r7, #23]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d109      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fc2:	4ba3      	ldr	r3, [pc, #652]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fce:	49a0      	ldr	r1, [pc, #640]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004fd4:	e001      	b.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd6:	7dfb      	ldrb	r3, [r7, #23]
 8004fd8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d042      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d01f      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff4:	d805      	bhi.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	d00e      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8005000:	e01f      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005002:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005006:	d01f      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800500c:	d01e      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800500e:	e018      	b.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005010:	4b8f      	ldr	r3, [pc, #572]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005014:	4a8e      	ldr	r2, [pc, #568]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800501a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800501c:	e017      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3304      	adds	r3, #4
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fb91 	bl	800674c <RCCEx_PLL2_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800502e:	e00e      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3324      	adds	r3, #36	; 0x24
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f001 fc3a 	bl	80068b0 <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005040:	e005      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
      break;
 8005046:	e002      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8005048:	bf00      	nop
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7dfb      	ldrb	r3, [r7, #23]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005054:	4b7e      	ldr	r3, [pc, #504]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005058:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005060:	497b      	ldr	r1, [pc, #492]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005062:	4313      	orrs	r3, r2
 8005064:	650b      	str	r3, [r1, #80]	; 0x50
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7dfb      	ldrb	r3, [r7, #23]
 800506a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005074:	2b00      	cmp	r3, #0
 8005076:	d042      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005080:	d01b      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005082:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005086:	d805      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005088:	2b00      	cmp	r3, #0
 800508a:	d022      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d00a      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005092:	e01b      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005094:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005098:	d01d      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800509a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800509e:	d01c      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80050a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050a4:	d01b      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x452>
 80050a6:	e011      	b.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	2101      	movs	r1, #1
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 fb4c 	bl	800674c <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050b8:	e012      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3324      	adds	r3, #36	; 0x24
 80050be:	2101      	movs	r1, #1
 80050c0:	4618      	mov	r0, r3
 80050c2:	f001 fbf5 	bl	80068b0 <RCCEx_PLL3_Config>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80050ca:	e009      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	e006      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050d2:	bf00      	nop
 80050d4:	e004      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80050de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050e0:	7dfb      	ldrb	r3, [r7, #23]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050e6:	4b5a      	ldr	r3, [pc, #360]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	4957      	ldr	r1, [pc, #348]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	650b      	str	r3, [r1, #80]	; 0x50
 80050f8:	e001      	b.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050fa:	7dfb      	ldrb	r3, [r7, #23]
 80050fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d044      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005114:	d01b      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800511a:	d805      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d022      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005120:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005124:	d00a      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005126:	e01b      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d01d      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800512e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005132:	d01c      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005134:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005138:	d01b      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800513a:	e011      	b.n	8005160 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fb02 	bl	800674c <RCCEx_PLL2_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800514c:	e012      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fbab 	bl	80068b0 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800515e:	e009      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	75fb      	strb	r3, [r7, #23]
      break;
 8005164:	e006      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005166:	bf00      	nop
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800516a:	bf00      	nop
 800516c:	e002      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800516e:	bf00      	nop
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800517a:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005188:	4931      	ldr	r1, [pc, #196]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518a:	4313      	orrs	r3, r2
 800518c:	658b      	str	r3, [r1, #88]	; 0x58
 800518e:	e001      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d02d      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a8:	d005      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80051aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ae:	d009      	beq.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d013      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x550>
 80051b4:	e00f      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	4a25      	ldr	r2, [pc, #148]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051c2:	e00c      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	2101      	movs	r1, #1
 80051ca:	4618      	mov	r0, r3
 80051cc:	f001 fabe 	bl	800674c <RCCEx_PLL2_Config>
 80051d0:	4603      	mov	r3, r0
 80051d2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
      break;
 80051da:	e000      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80051dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051de:	7dfb      	ldrb	r3, [r7, #23]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d109      	bne.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051e4:	4b1a      	ldr	r3, [pc, #104]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f0:	4917      	ldr	r1, [pc, #92]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	650b      	str	r3, [r1, #80]	; 0x50
 80051f6:	e001      	b.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d035      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520c:	2b03      	cmp	r3, #3
 800520e:	d81b      	bhi.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005210:	a201      	add	r2, pc, #4	; (adr r2, 8005218 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005216:	bf00      	nop
 8005218:	08005255 	.word	0x08005255
 800521c:	08005229 	.word	0x08005229
 8005220:	08005237 	.word	0x08005237
 8005224:	08005255 	.word	0x08005255
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005228:	4b09      	ldr	r3, [pc, #36]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800522a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522c:	4a08      	ldr	r2, [pc, #32]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005234:	e00f      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2102      	movs	r1, #2
 800523c:	4618      	mov	r0, r3
 800523e:	f001 fa85 	bl	800674c <RCCEx_PLL2_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005246:	e006      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	75fb      	strb	r3, [r7, #23]
      break;
 800524c:	e003      	b.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800524e:	bf00      	nop
 8005250:	58024400 	.word	0x58024400
      break;
 8005254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800525c:	4bba      	ldr	r3, [pc, #744]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005260:	f023 0203 	bic.w	r2, r3, #3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005268:	49b7      	ldr	r1, [pc, #732]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800526e:	e001      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005270:	7dfb      	ldrb	r3, [r7, #23]
 8005272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 8086 	beq.w	800538e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005282:	4bb2      	ldr	r3, [pc, #712]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4ab1      	ldr	r2, [pc, #708]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800528e:	f7fc fbdf 	bl	8001a50 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7fc fbdb 	bl	8001a50 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b64      	cmp	r3, #100	; 0x64
 80052a2:	d902      	bls.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	75fb      	strb	r3, [r7, #23]
        break;
 80052a8:	e005      	b.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052aa:	4ba8      	ldr	r3, [pc, #672]	; (800554c <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d0ef      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d166      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80052bc:	4ba2      	ldr	r3, [pc, #648]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052c6:	4053      	eors	r3, r2
 80052c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052d0:	4b9d      	ldr	r3, [pc, #628]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052da:	4b9b      	ldr	r3, [pc, #620]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052de:	4a9a      	ldr	r2, [pc, #616]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052e6:	4b98      	ldr	r3, [pc, #608]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	4a97      	ldr	r2, [pc, #604]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80052f2:	4a95      	ldr	r2, [pc, #596]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005302:	d115      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005304:	f7fc fba4 	bl	8001a50 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800530a:	e00b      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7fc fba0 	bl	8001a50 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d902      	bls.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	75fb      	strb	r3, [r7, #23]
            break;
 8005322:	e005      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005324:	4b88      	ldr	r3, [pc, #544]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ed      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005330:	7dfb      	ldrb	r3, [r7, #23]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d126      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800533c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005344:	d10d      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8005346:	4b80      	ldr	r3, [pc, #512]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005354:	0919      	lsrs	r1, r3, #4
 8005356:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005358:	400b      	ands	r3, r1
 800535a:	497b      	ldr	r1, [pc, #492]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800535c:	4313      	orrs	r3, r2
 800535e:	610b      	str	r3, [r1, #16]
 8005360:	e005      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8005362:	4b79      	ldr	r3, [pc, #484]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	4a78      	ldr	r2, [pc, #480]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800536c:	6113      	str	r3, [r2, #16]
 800536e:	4b76      	ldr	r3, [pc, #472]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005370:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537c:	4972      	ldr	r1, [pc, #456]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	670b      	str	r3, [r1, #112]	; 0x70
 8005382:	e004      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	75bb      	strb	r3, [r7, #22]
 8005388:	e001      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d07d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539e:	2b28      	cmp	r3, #40	; 0x28
 80053a0:	d866      	bhi.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80053a2:	a201      	add	r2, pc, #4	; (adr r2, 80053a8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80053a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a8:	08005477 	.word	0x08005477
 80053ac:	08005471 	.word	0x08005471
 80053b0:	08005471 	.word	0x08005471
 80053b4:	08005471 	.word	0x08005471
 80053b8:	08005471 	.word	0x08005471
 80053bc:	08005471 	.word	0x08005471
 80053c0:	08005471 	.word	0x08005471
 80053c4:	08005471 	.word	0x08005471
 80053c8:	0800544d 	.word	0x0800544d
 80053cc:	08005471 	.word	0x08005471
 80053d0:	08005471 	.word	0x08005471
 80053d4:	08005471 	.word	0x08005471
 80053d8:	08005471 	.word	0x08005471
 80053dc:	08005471 	.word	0x08005471
 80053e0:	08005471 	.word	0x08005471
 80053e4:	08005471 	.word	0x08005471
 80053e8:	0800545f 	.word	0x0800545f
 80053ec:	08005471 	.word	0x08005471
 80053f0:	08005471 	.word	0x08005471
 80053f4:	08005471 	.word	0x08005471
 80053f8:	08005471 	.word	0x08005471
 80053fc:	08005471 	.word	0x08005471
 8005400:	08005471 	.word	0x08005471
 8005404:	08005471 	.word	0x08005471
 8005408:	08005477 	.word	0x08005477
 800540c:	08005471 	.word	0x08005471
 8005410:	08005471 	.word	0x08005471
 8005414:	08005471 	.word	0x08005471
 8005418:	08005471 	.word	0x08005471
 800541c:	08005471 	.word	0x08005471
 8005420:	08005471 	.word	0x08005471
 8005424:	08005471 	.word	0x08005471
 8005428:	08005477 	.word	0x08005477
 800542c:	08005471 	.word	0x08005471
 8005430:	08005471 	.word	0x08005471
 8005434:	08005471 	.word	0x08005471
 8005438:	08005471 	.word	0x08005471
 800543c:	08005471 	.word	0x08005471
 8005440:	08005471 	.word	0x08005471
 8005444:	08005471 	.word	0x08005471
 8005448:	08005477 	.word	0x08005477
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	3304      	adds	r3, #4
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f001 f97a 	bl	800674c <RCCEx_PLL2_Config>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800545c:	e00c      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2101      	movs	r1, #1
 8005464:	4618      	mov	r0, r3
 8005466:	f001 fa23 	bl	80068b0 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800546e:	e003      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75fb      	strb	r3, [r7, #23]
      break;
 8005474:	e000      	b.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005478:	7dfb      	ldrb	r3, [r7, #23]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800547e:	4b32      	ldr	r3, [pc, #200]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005482:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800548a:	492f      	ldr	r1, [pc, #188]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800548c:	4313      	orrs	r3, r2
 800548e:	654b      	str	r3, [r1, #84]	; 0x54
 8005490:	e001      	b.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
 8005494:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d037      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d820      	bhi.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x860>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054f3 	.word	0x080054f3
 80054b4:	080054c9 	.word	0x080054c9
 80054b8:	080054db 	.word	0x080054db
 80054bc:	080054f3 	.word	0x080054f3
 80054c0:	080054f3 	.word	0x080054f3
 80054c4:	080054f3 	.word	0x080054f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3304      	adds	r3, #4
 80054cc:	2101      	movs	r1, #1
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 f93c 	bl	800674c <RCCEx_PLL2_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054d8:	e00c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3324      	adds	r3, #36	; 0x24
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f9e5 	bl	80068b0 <RCCEx_PLL3_Config>
 80054e6:	4603      	mov	r3, r0
 80054e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80054ea:	e003      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80054f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80054fa:	4b13      	ldr	r3, [pc, #76]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f023 0207 	bic.w	r2, r3, #7
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	4910      	ldr	r1, [pc, #64]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	654b      	str	r3, [r1, #84]	; 0x54
 800550c:	e001      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
 8005510:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d040      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	2b05      	cmp	r3, #5
 8005526:	d827      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005528:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800552a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552e:	bf00      	nop
 8005530:	0800557f 	.word	0x0800557f
 8005534:	08005555 	.word	0x08005555
 8005538:	08005567 	.word	0x08005567
 800553c:	0800557f 	.word	0x0800557f
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800557f 	.word	0x0800557f
 8005548:	58024400 	.word	0x58024400
 800554c:	58024800 	.word	0x58024800
 8005550:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	2101      	movs	r1, #1
 800555a:	4618      	mov	r0, r3
 800555c:	f001 f8f6 	bl	800674c <RCCEx_PLL2_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005564:	e00c      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3324      	adds	r3, #36	; 0x24
 800556a:	2101      	movs	r1, #1
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f99f 	bl	80068b0 <RCCEx_PLL3_Config>
 8005572:	4603      	mov	r3, r0
 8005574:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005576:	e003      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	75fb      	strb	r3, [r7, #23]
      break;
 800557c:	e000      	b.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800557e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005580:	7dfb      	ldrb	r3, [r7, #23]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005586:	4bb2      	ldr	r3, [pc, #712]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800558a:	f023 0207 	bic.w	r2, r3, #7
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005594:	49ae      	ldr	r1, [pc, #696]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005596:	4313      	orrs	r3, r2
 8005598:	658b      	str	r3, [r1, #88]	; 0x58
 800559a:	e001      	b.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
 800559e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0320 	and.w	r3, r3, #32
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d044      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b6:	d01b      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d805      	bhi.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d022      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80055c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x952>
 80055c8:	e01b      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ce:	d01d      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x980>
 80055d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055d4:	d01c      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80055d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055da:	d01b      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80055dc:	e011      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3304      	adds	r3, #4
 80055e2:	2100      	movs	r1, #0
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 f8b1 	bl	800674c <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80055ee:	e012      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3324      	adds	r3, #36	; 0x24
 80055f4:	2102      	movs	r1, #2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f001 f95a 	bl	80068b0 <RCCEx_PLL3_Config>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005600:	e009      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	75fb      	strb	r3, [r7, #23]
      break;
 8005606:	e006      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005608:	bf00      	nop
 800560a:	e004      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800560c:	bf00      	nop
 800560e:	e002      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005610:	bf00      	nop
 8005612:	e000      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005616:	7dfb      	ldrb	r3, [r7, #23]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800561c:	4b8c      	ldr	r3, [pc, #560]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800561e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005620:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800562a:	4989      	ldr	r1, [pc, #548]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	654b      	str	r3, [r1, #84]	; 0x54
 8005630:	e001      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	7dfb      	ldrb	r3, [r7, #23]
 8005634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d044      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564c:	d01b      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800564e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005652:	d805      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d022      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800565e:	e01b      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8005660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005664:	d01d      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005666:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800566a:	d01c      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800566c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005670:	d01b      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8005672:	e011      	b.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f001 f866 	bl	800674c <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005684:	e012      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3324      	adds	r3, #36	; 0x24
 800568a:	2102      	movs	r1, #2
 800568c:	4618      	mov	r0, r3
 800568e:	f001 f90f 	bl	80068b0 <RCCEx_PLL3_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005696:	e009      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
      break;
 800569c:	e006      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800569e:	bf00      	nop
 80056a0:	e004      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056a2:	bf00      	nop
 80056a4:	e002      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80056aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b2:	4b67      	ldr	r3, [pc, #412]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c0:	4963      	ldr	r1, [pc, #396]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	658b      	str	r3, [r1, #88]	; 0x58
 80056c6:	e001      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c8:	7dfb      	ldrb	r3, [r7, #23]
 80056ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d044      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e2:	d01b      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80056e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056e8:	d805      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d022      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80056f4:	e01b      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fa:	d01d      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80056fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005700:	d01c      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005702:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005706:	d01b      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005708:	e011      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3304      	adds	r3, #4
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f001 f81b 	bl	800674c <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800571a:	e012      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f001 f8c4 	bl	80068b0 <RCCEx_PLL3_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800572c:	e009      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
      break;
 8005732:	e006      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005734:	bf00      	nop
 8005736:	e004      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005738:	bf00      	nop
 800573a:	e002      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800573c:	bf00      	nop
 800573e:	e000      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005740:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10a      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005748:	4b41      	ldr	r3, [pc, #260]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800574a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800574c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005756:	493e      	ldr	r1, [pc, #248]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	658b      	str	r3, [r1, #88]	; 0x58
 800575c:	e001      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	7dfb      	ldrb	r3, [r7, #23]
 8005760:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0308 	and.w	r3, r3, #8
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01a      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005778:	d10a      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	2102      	movs	r1, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f895 	bl	80068b0 <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005790:	4b2f      	ldr	r3, [pc, #188]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579e:	492c      	ldr	r1, [pc, #176]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01a      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ba:	d10a      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3324      	adds	r3, #36	; 0x24
 80057c0:	2102      	movs	r1, #2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 f874 	bl	80068b0 <RCCEx_PLL3_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057d2:	4b1f      	ldr	r3, [pc, #124]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e0:	491b      	ldr	r1, [pc, #108]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d032      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057fc:	d00d      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80057fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005802:	d016      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005804:	2b00      	cmp	r3, #0
 8005806:	d111      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f000 ff9c 	bl	800674c <RCCEx_PLL2_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005818:	e00c      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3324      	adds	r3, #36	; 0x24
 800581e:	2102      	movs	r1, #2
 8005820:	4618      	mov	r0, r3
 8005822:	f001 f845 	bl	80068b0 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800582a:	e003      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	75fb      	strb	r3, [r7, #23]
      break;
 8005830:	e000      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005834:	7dfb      	ldrb	r3, [r7, #23]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10c      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800583a:	4b05      	ldr	r3, [pc, #20]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800583c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005848:	4901      	ldr	r1, [pc, #4]	; (8005850 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800584a:	4313      	orrs	r3, r2
 800584c:	658b      	str	r3, [r1, #88]	; 0x58
 800584e:	e003      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8005850:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d02f      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800586e:	d00c      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005870:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005874:	d015      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800587a:	d10f      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800587c:	4b79      	ldr	r3, [pc, #484]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800587e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005880:	4a78      	ldr	r2, [pc, #480]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005886:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005888:	e00c      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	3324      	adds	r3, #36	; 0x24
 800588e:	2101      	movs	r1, #1
 8005890:	4618      	mov	r0, r3
 8005892:	f001 f80d 	bl	80068b0 <RCCEx_PLL3_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800589a:	e003      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	75fb      	strb	r3, [r7, #23]
      break;
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80058a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80058aa:	4b6e      	ldr	r3, [pc, #440]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b8:	496a      	ldr	r1, [pc, #424]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	654b      	str	r3, [r1, #84]	; 0x54
 80058be:	e001      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d029      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80058d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058dc:	d007      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80058de:	e00f      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e0:	4b60      	ldr	r3, [pc, #384]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	4a5f      	ldr	r2, [pc, #380]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058ec:	e00b      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3304      	adds	r3, #4
 80058f2:	2102      	movs	r1, #2
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 ff29 	bl	800674c <RCCEx_PLL2_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80058fe:	e002      	b.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	75fb      	strb	r3, [r7, #23]
      break;
 8005904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005906:	7dfb      	ldrb	r3, [r7, #23]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d109      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800590c:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800590e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005918:	4952      	ldr	r1, [pc, #328]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800591a:	4313      	orrs	r3, r2
 800591c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800591e:	e001      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005920:	7dfb      	ldrb	r3, [r7, #23]
 8005922:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3324      	adds	r3, #36	; 0x24
 8005934:	2102      	movs	r1, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f000 ffba 	bl	80068b0 <RCCEx_PLL3_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594e:	2b00      	cmp	r3, #0
 8005950:	d02f      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800595a:	d00c      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800595c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005960:	d802      	bhi.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005966:	e00d      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d00f      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800596e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005972:	d00e      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005974:	e006      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005976:	4b3b      	ldr	r3, [pc, #236]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597a:	4a3a      	ldr	r2, [pc, #232]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800597c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005980:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005982:	e007      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
      break;
 8005988:	e004      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800598a:	bf00      	nop
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800598e:	bf00      	nop
 8005990:	e000      	b.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005994:	7dfb      	ldrb	r3, [r7, #23]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d109      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a6:	492f      	ldr	r1, [pc, #188]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	654b      	str	r3, [r1, #84]	; 0x54
 80059ac:	e001      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d008      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059be:	4b29      	ldr	r3, [pc, #164]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ca:	4926      	ldr	r1, [pc, #152]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d009      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80059dc:	4b21      	ldr	r3, [pc, #132]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ea:	491e      	ldr	r1, [pc, #120]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a08:	4916      	ldr	r1, [pc, #88]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00d      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a1a:	4b12      	ldr	r3, [pc, #72]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	4a11      	ldr	r2, [pc, #68]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a28:	691a      	ldr	r2, [r3, #16]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005a30:	490c      	ldr	r1, [pc, #48]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da08      	bge.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a3e:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	4906      	ldr	r1, [pc, #24]	; (8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005a50:	7dbb      	ldrb	r3, [r7, #22]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8005a56:	2300      	movs	r3, #0
 8005a58:	e000      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	58024400 	.word	0x58024400

08005a68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b090      	sub	sp, #64	; 0x40
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a76:	d150      	bne.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005a78:	4ba1      	ldr	r3, [pc, #644]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d844      	bhi.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8005a88:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005aa5 	.word	0x08005aa5
 8005a94:	08005ab5 	.word	0x08005ab5
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005b0d 	.word	0x08005b0d
 8005aa0:	08005ad5 	.word	0x08005ad5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fd03 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab2:	e241      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ab4:	f107 0318 	add.w	r3, r7, #24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fa63 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ac2:	e239      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac4:	f107 030c 	add.w	r3, r7, #12
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f000 fba7 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad2:	e231      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ad4:	4b8a      	ldr	r3, [pc, #552]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005adc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d102      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005ae4:	4b87      	ldr	r3, [pc, #540]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005ae8:	e226      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af0:	d102      	bne.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8005af2:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af6:	e21f      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005afa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005afe:	d102      	bne.n	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8005b00:	4b82      	ldr	r3, [pc, #520]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b04:	e218      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b0a:	e215      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005b0c:	4b80      	ldr	r3, [pc, #512]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b10:	e212      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005b12:	2300      	movs	r3, #0
 8005b14:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b16:	bf00      	nop
 8005b18:	e20e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b20:	d14f      	bne.n	8005bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005b22:	4b77      	ldr	r3, [pc, #476]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	2b80      	cmp	r3, #128	; 0x80
 8005b30:	d01c      	beq.n	8005b6c <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d804      	bhi.n	8005b40 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8005b3a:	2b40      	cmp	r3, #64	; 0x40
 8005b3c:	d00e      	beq.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8005b3e:	e03c      	b.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8005b40:	2bc0      	cmp	r3, #192	; 0xc0
 8005b42:	d037      	beq.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8005b44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b48:	d018      	beq.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8005b4a:	e036      	b.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fcaf 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b5a:	e1ed      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b5c:	f107 0318 	add.w	r3, r7, #24
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fa0f 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b6a:	e1e5      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b6c:	f107 030c 	add.w	r3, r7, #12
 8005b70:	4618      	mov	r0, r3
 8005b72:	f000 fb53 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b7a:	e1dd      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b7c:	4b60      	ldr	r3, [pc, #384]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b84:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005b8c:	4b5d      	ldr	r3, [pc, #372]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005b90:	e1d2      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b98:	d102      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8005b9a:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b9e:	e1cb      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba6:	d102      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8005ba8:	4b58      	ldr	r3, [pc, #352]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bac:	e1c4      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb2:	e1c1      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bb4:	4b56      	ldr	r3, [pc, #344]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb8:	e1be      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bbe:	bf00      	nop
 8005bc0:	e1ba      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc8:	d153      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005bca:	4b4d      	ldr	r3, [pc, #308]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bda:	d01f      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005be0:	d805      	bhi.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8005be6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bea:	d00f      	beq.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005bec:	e03d      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8005bee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005bf2:	d037      	beq.n	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8005bf4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bf8:	d018      	beq.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8005bfa:	e036      	b.n	8005c6a <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fc57 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c0a:	e195      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c0c:	f107 0318 	add.w	r3, r7, #24
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 f9b7 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c1a:	e18d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fafb 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c2a:	e185      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c2c:	4b34      	ldr	r3, [pc, #208]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c34:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d102      	bne.n	8005c42 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005c3c:	4b31      	ldr	r3, [pc, #196]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005c40:	e17a      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c48:	d102      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c4e:	e173      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c56:	d102      	bne.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8005c58:	4b2c      	ldr	r3, [pc, #176]	; (8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5c:	e16c      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c62:	e169      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c64:	4b2a      	ldr	r3, [pc, #168]	; (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c68:	e166      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c6e:	bf00      	nop
 8005c70:	e162      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c78:	d15d      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005c7a:	4b21      	ldr	r3, [pc, #132]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005c82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c8a:	d01f      	beq.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c90:	d805      	bhi.n	8005c9e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005c96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c9a:	d00f      	beq.n	8005cbc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8005c9c:	e047      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8005c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005ca2:	d041      	beq.n	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8005ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca8:	d018      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8005caa:	e040      	b.n	8005d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fbff 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cba:	e13d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cbc:	f107 0318 	add.w	r3, r7, #24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 f95f 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cca:	e135      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ccc:	f107 030c 	add.w	r3, r7, #12
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 faa3 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cda:	e12d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d102      	bne.n	8005cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005cf0:	e122      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cf8:	d10c      	bne.n	8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cfe:	e11b      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8005d00:	58024400 	.word	0x58024400
 8005d04:	03d09000 	.word	0x03d09000
 8005d08:	003d0900 	.word	0x003d0900
 8005d0c:	016e3600 	.word	0x016e3600
 8005d10:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d1a:	d102      	bne.n	8005d22 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8005d1c:	4b89      	ldr	r3, [pc, #548]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d20:	e10a      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d26:	e107      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d28:	4b87      	ldr	r3, [pc, #540]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d2c:	e104      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d32:	bf00      	nop
 8005d34:	e100      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d3c:	d153      	bne.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005d3e:	4b83      	ldr	r3, [pc, #524]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005d46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4e:	d01f      	beq.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005d50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d54:	d805      	bhi.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8005d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5e:	d00f      	beq.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8005d60:	e03d      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8005d62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d66:	d037      	beq.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d018      	beq.n	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005d6e:	e036      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 fb9d 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d7e:	e0db      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d80:	f107 0318 	add.w	r3, r7, #24
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f8fd 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d8e:	e0d3      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d90:	f107 030c 	add.w	r3, r7, #12
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 fa41 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d9e:	e0cb      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005da0:	4b6a      	ldr	r3, [pc, #424]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005db0:	4b67      	ldr	r3, [pc, #412]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005db2:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005db4:	e0c0      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dbc:	d102      	bne.n	8005dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8005dbe:	4b65      	ldr	r3, [pc, #404]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dc2:	e0b9      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dca:	d102      	bne.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dd0:	e0b2      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dd6:	e0af      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005dd8:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ddc:	e0ac      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005de2:	bf00      	nop
 8005de4:	e0a8      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dec:	d13d      	bne.n	8005e6a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005dee:	4b57      	ldr	r3, [pc, #348]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005df6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfe:	d00c      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005e00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e04:	d011      	beq.n	8005e2a <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d12b      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e0a:	f107 0318 	add.w	r3, r7, #24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 f8b8 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e18:	e08e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e1a:	f107 030c 	add.w	r3, r7, #12
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 f9fc 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e28:	e086      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e2a:	4b48      	ldr	r3, [pc, #288]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8005e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d102      	bne.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8005e3a:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8005e3e:	e07b      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8005e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e46:	d102      	bne.n	8005e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8005e48:	4b42      	ldr	r3, [pc, #264]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4c:	e074      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e54:	d102      	bne.n	8005e5c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 8005e56:	4b3b      	ldr	r3, [pc, #236]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e5a:	e06d      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e60:	e06a      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e66:	bf00      	nop
 8005e68:	e066      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d11f      	bne.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e72:	4b36      	ldr	r3, [pc, #216]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e86:	d008      	beq.n	8005e9a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005e88:	e00f      	b.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 fb10 	bl	80064b4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e98:	e04e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e9a:	f107 0318 	add.w	r3, r7, #24
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 f870 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea8:	e046      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005eae:	bf00      	nop
 8005eb0:	e042      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005eb8:	d13c      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8005ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ebe:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005ec2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eca:	d01e      	beq.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8005ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ed0:	d805      	bhi.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8005ed6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005eda:	d00e      	beq.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8005edc:	e026      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8005ee4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005ee8:	d01d      	beq.n	8005f26 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005eee:	d014      	beq.n	8005f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8005ef0:	e01c      	b.n	8005f2c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ef2:	f000 f831 	bl	8005f58 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ef6:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005ef8:	e01e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0318 	add.w	r3, r7, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f840 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f08:	e016      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 f984 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f18:	e00e      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8005f1a:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8005f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f1e:	e00b      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8005f20:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8005f22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f24:	e008      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8005f28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f30:	bf00      	nop
 8005f32:	e001      	b.n	8005f38 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3740      	adds	r7, #64	; 0x40
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	016e3600 	.word	0x016e3600
 8005f48:	00bb8000 	.word	0x00bb8000
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	03d09000 	.word	0x03d09000
 8005f54:	003d0900 	.word	0x003d0900

08005f58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f5c:	f7fe fdf8 	bl	8004b50 <HAL_RCC_GetHCLKFreq>
 8005f60:	4601      	mov	r1, r0
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	091b      	lsrs	r3, r3, #4
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	4a04      	ldr	r2, [pc, #16]	; (8005f80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f6e:	5cd3      	ldrb	r3, [r2, r3]
 8005f70:	f003 031f 	and.w	r3, r3, #31
 8005f74:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	0801325c 	.word	0x0801325c

08005f84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b089      	sub	sp, #36	; 0x24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f8c:	4b9d      	ldr	r3, [pc, #628]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005f96:	4b9b      	ldr	r3, [pc, #620]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9a:	0b1b      	lsrs	r3, r3, #12
 8005f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fa0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fa2:	4b98      	ldr	r3, [pc, #608]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	091b      	lsrs	r3, r3, #4
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005fae:	4b95      	ldr	r3, [pc, #596]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	08db      	lsrs	r3, r3, #3
 8005fb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	fb02 f303 	mul.w	r3, r2, r3
 8005fbe:	ee07 3a90 	vmov	s15, r3
 8005fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 810a 	beq.w	80061e6 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d05a      	beq.n	800608e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d302      	bcc.n	8005fe2 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d078      	beq.n	80060d2 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005fe0:	e099      	b.n	8006116 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fe2:	4b88      	ldr	r3, [pc, #544]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d02d      	beq.n	800604a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fee:	4b85      	ldr	r3, [pc, #532]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	4a83      	ldr	r2, [pc, #524]	; (8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8005ffe:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006018:	4b7a      	ldr	r3, [pc, #488]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006028:	ed97 6a03 	vldr	s12, [r7, #12]
 800602c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006044:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006048:	e087      	b.n	800615a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8006058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605c:	4b69      	ldr	r3, [pc, #420]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800605e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006070:	eddf 5a66 	vldr	s11, [pc, #408]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800608c:	e065      	b.n	800615a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	ee07 3a90 	vmov	s15, r3
 8006094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006098:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800609c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060a0:	4b58      	ldr	r3, [pc, #352]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a8:	ee07 3a90 	vmov	s15, r3
 80060ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060d0:	e043      	b.n	800615a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060dc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006218 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 80060e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e4:	4b47      	ldr	r3, [pc, #284]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ec:	ee07 3a90 	vmov	s15, r3
 80060f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80060fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006110:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006114:	e021      	b.n	800615a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	ee07 3a90 	vmov	s15, r3
 800611c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006120:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006214 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8006124:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006130:	ee07 3a90 	vmov	s15, r3
 8006134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006138:	ed97 6a03 	vldr	s12, [r7, #12]
 800613c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8006140:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006144:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800614c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006150:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006154:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006158:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800615a:	4b2a      	ldr	r3, [pc, #168]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800615c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615e:	0a5b      	lsrs	r3, r3, #9
 8006160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006174:	edd7 6a07 	vldr	s13, [r7, #28]
 8006178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800617c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006180:	ee17 2a90 	vmov	r2, s15
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006188:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	0c1b      	lsrs	r3, r3, #16
 800618e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800619e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80061a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ae:	ee17 2a90 	vmov	r2, s15
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80061b6:	4b13      	ldr	r3, [pc, #76]	; (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	0e1b      	lsrs	r3, r3, #24
 80061bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061dc:	ee17 2a90 	vmov	r2, s15
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061e4:	e008      	b.n	80061f8 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2200      	movs	r2, #0
 80061f0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	609a      	str	r2, [r3, #8]
}
 80061f8:	bf00      	nop
 80061fa:	3724      	adds	r7, #36	; 0x24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	58024400 	.word	0x58024400
 8006208:	03d09000 	.word	0x03d09000
 800620c:	46000000 	.word	0x46000000
 8006210:	4c742400 	.word	0x4c742400
 8006214:	4a742400 	.word	0x4a742400
 8006218:	4bb71b00 	.word	0x4bb71b00

0800621c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	; 0x24
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006224:	4b9d      	ldr	r3, [pc, #628]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0303 	and.w	r3, r3, #3
 800622c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800622e:	4b9b      	ldr	r3, [pc, #620]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	0d1b      	lsrs	r3, r3, #20
 8006234:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006238:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800623a:	4b98      	ldr	r3, [pc, #608]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006246:	4b95      	ldr	r3, [pc, #596]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 810a 	beq.w	800647e <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d05a      	beq.n	8006326 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8006270:	2b01      	cmp	r3, #1
 8006272:	d302      	bcc.n	800627a <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8006274:	2b02      	cmp	r3, #2
 8006276:	d078      	beq.n	800636a <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8006278:	e099      	b.n	80063ae <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800627a:	4b88      	ldr	r3, [pc, #544]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d02d      	beq.n	80062e2 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006286:	4b85      	ldr	r3, [pc, #532]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	08db      	lsrs	r3, r3, #3
 800628c:	f003 0303 	and.w	r3, r3, #3
 8006290:	4a83      	ldr	r2, [pc, #524]	; (80064a0 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8006292:	fa22 f303 	lsr.w	r3, r2, r3
 8006296:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062b0:	4b7a      	ldr	r3, [pc, #488]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b8:	ee07 3a90 	vmov	s15, r3
 80062bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80062c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80062c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80062e0:	e087      	b.n	80063f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 80062f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f4:	4b69      	ldr	r3, [pc, #420]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006304:	ed97 6a03 	vldr	s12, [r7, #12]
 8006308:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800630c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800631c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006320:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006324:	e065      	b.n	80063f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006334:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006338:	4b58      	ldr	r3, [pc, #352]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006348:	ed97 6a03 	vldr	s12, [r7, #12]
 800634c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006350:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006354:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006358:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800635c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006360:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006364:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006368:	e043      	b.n	80063f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	ee07 3a90 	vmov	s15, r3
 8006370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006374:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800637c:	4b47      	ldr	r3, [pc, #284]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006384:	ee07 3a90 	vmov	s15, r3
 8006388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800638c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006390:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006394:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006398:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800639c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063ac:	e021      	b.n	80063f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	ee07 3a90 	vmov	s15, r3
 80063b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80064ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80063bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c0:	4b36      	ldr	r3, [pc, #216]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80063d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063f0:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80063f2:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	0a5b      	lsrs	r3, r3, #9
 80063f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006408:	ee37 7a87 	vadd.f32	s14, s15, s14
 800640c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006418:	ee17 2a90 	vmov	r2, s15
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006420:	4b1e      	ldr	r3, [pc, #120]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006432:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006436:	ee37 7a87 	vadd.f32	s14, s15, s14
 800643a:	edd7 6a07 	vldr	s13, [r7, #28]
 800643e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006442:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006446:	ee17 2a90 	vmov	r2, s15
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	0e1b      	lsrs	r3, r3, #24
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006464:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006468:	edd7 6a07 	vldr	s13, [r7, #28]
 800646c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006474:	ee17 2a90 	vmov	r2, s15
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800647c:	e008      	b.n	8006490 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	609a      	str	r2, [r3, #8]
}
 8006490:	bf00      	nop
 8006492:	3724      	adds	r7, #36	; 0x24
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	58024400 	.word	0x58024400
 80064a0:	03d09000 	.word	0x03d09000
 80064a4:	46000000 	.word	0x46000000
 80064a8:	4c742400 	.word	0x4c742400
 80064ac:	4a742400 	.word	0x4a742400
 80064b0:	4bb71b00 	.word	0x4bb71b00

080064b4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b089      	sub	sp, #36	; 0x24
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064bc:	4b9d      	ldr	r3, [pc, #628]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c0:	f003 0303 	and.w	r3, r3, #3
 80064c4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80064c6:	4b9b      	ldr	r3, [pc, #620]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	091b      	lsrs	r3, r3, #4
 80064cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064d0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80064d2:	4b98      	ldr	r3, [pc, #608]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80064dc:	4b95      	ldr	r3, [pc, #596]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80064de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	fb02 f303 	mul.w	r3, r2, r3
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f000 810a 	beq.w	8006714 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b01      	cmp	r3, #1
 8006504:	d05a      	beq.n	80065bc <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8006506:	2b01      	cmp	r3, #1
 8006508:	d302      	bcc.n	8006510 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800650a:	2b02      	cmp	r3, #2
 800650c:	d078      	beq.n	8006600 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800650e:	e099      	b.n	8006644 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006510:	4b88      	ldr	r3, [pc, #544]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 0320 	and.w	r3, r3, #32
 8006518:	2b00      	cmp	r3, #0
 800651a:	d02d      	beq.n	8006578 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800651c:	4b85      	ldr	r3, [pc, #532]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	08db      	lsrs	r3, r3, #3
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	4a84      	ldr	r2, [pc, #528]	; (8006738 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8006528:	fa22 f303 	lsr.w	r3, r2, r3
 800652c:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	ee07 3a90 	vmov	s15, r3
 8006534:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006546:	4b7b      	ldr	r3, [pc, #492]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654e:	ee07 3a90 	vmov	s15, r3
 8006552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006556:	ed97 6a03 	vldr	s12, [r7, #12]
 800655a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800673c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800655e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800656e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006572:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006576:	e087      	b.n	8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006740 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8006586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658a:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800658c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006592:	ee07 3a90 	vmov	s15, r3
 8006596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659a:	ed97 6a03 	vldr	s12, [r7, #12]
 800659e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800673c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065ba:	e065      	b.n	8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006744 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80065ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ce:	4b59      	ldr	r3, [pc, #356]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065de:	ed97 6a03 	vldr	s12, [r7, #12]
 80065e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800673c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80065e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065fe:	e043      	b.n	8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006748 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800660e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006612:	4b48      	ldr	r3, [pc, #288]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006622:	ed97 6a03 	vldr	s12, [r7, #12]
 8006626:	eddf 5a45 	vldr	s11, [pc, #276]	; 800673c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800662a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006642:	e021      	b.n	8006688 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	ee07 3a90 	vmov	s15, r3
 800664a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006744 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8006652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006656:	4b37      	ldr	r3, [pc, #220]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	ee07 3a90 	vmov	s15, r3
 8006662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006666:	ed97 6a03 	vldr	s12, [r7, #12]
 800666a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800673c <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800666e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800667a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006682:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006686:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006688:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668c:	0a5b      	lsrs	r3, r3, #9
 800668e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800669e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ae:	ee17 2a90 	vmov	r2, s15
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80066b6:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	0c1b      	lsrs	r3, r3, #16
 80066bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066dc:	ee17 2a90 	vmov	r2, s15
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80066e4:	4b13      	ldr	r3, [pc, #76]	; (8006734 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80066e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e8:	0e1b      	lsrs	r3, r3, #24
 80066ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ee:	ee07 3a90 	vmov	s15, r3
 80066f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800670a:	ee17 2a90 	vmov	r2, s15
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006712:	e008      	b.n	8006726 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	609a      	str	r2, [r3, #8]
}
 8006726:	bf00      	nop
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	58024400 	.word	0x58024400
 8006738:	03d09000 	.word	0x03d09000
 800673c:	46000000 	.word	0x46000000
 8006740:	4c742400 	.word	0x4c742400
 8006744:	4a742400 	.word	0x4a742400
 8006748:	4bb71b00 	.word	0x4bb71b00

0800674c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800675a:	4b53      	ldr	r3, [pc, #332]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d101      	bne.n	800676a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e099      	b.n	800689e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800676a:	4b4f      	ldr	r3, [pc, #316]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a4e      	ldr	r2, [pc, #312]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006770:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006776:	f7fb f96b 	bl	8001a50 <HAL_GetTick>
 800677a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800677c:	e008      	b.n	8006790 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800677e:	f7fb f967 	bl	8001a50 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e086      	b.n	800689e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006790:	4b45      	ldr	r3, [pc, #276]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800679c:	4b42      	ldr	r3, [pc, #264]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800679e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	493f      	ldr	r1, [pc, #252]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	628b      	str	r3, [r1, #40]	; 0x28
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	3b01      	subs	r3, #1
 80067c0:	025b      	lsls	r3, r3, #9
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	431a      	orrs	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	041b      	lsls	r3, r3, #16
 80067ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80067d2:	431a      	orrs	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	3b01      	subs	r3, #1
 80067da:	061b      	lsls	r3, r3, #24
 80067dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80067e0:	4931      	ldr	r1, [pc, #196]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80067e6:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	492d      	ldr	r1, [pc, #180]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80067f8:	4b2b      	ldr	r3, [pc, #172]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 80067fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fc:	f023 0220 	bic.w	r2, r3, #32
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	4928      	ldr	r1, [pc, #160]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006806:	4313      	orrs	r3, r2
 8006808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800680a:	4b27      	ldr	r3, [pc, #156]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800680c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800680e:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006810:	f023 0310 	bic.w	r3, r3, #16
 8006814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <RCCEx_PLL2_Config+0x160>)
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	69d2      	ldr	r2, [r2, #28]
 8006822:	00d2      	lsls	r2, r2, #3
 8006824:	4920      	ldr	r1, [pc, #128]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006826:	4313      	orrs	r3, r2
 8006828:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800682a:	4b1f      	ldr	r3, [pc, #124]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	4a1e      	ldr	r2, [pc, #120]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006830:	f043 0310 	orr.w	r3, r3, #16
 8006834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d106      	bne.n	800684a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a19      	ldr	r2, [pc, #100]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006842:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006848:	e00f      	b.n	800686a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d106      	bne.n	800685e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006850:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006854:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800685c:	e005      	b.n	800686a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800685e:	4b12      	ldr	r3, [pc, #72]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006864:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800686a:	4b0f      	ldr	r3, [pc, #60]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a0e      	ldr	r2, [pc, #56]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006876:	f7fb f8eb 	bl	8001a50 <HAL_GetTick>
 800687a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800687c:	e008      	b.n	8006890 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800687e:	f7fb f8e7 	bl	8001a50 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	2b02      	cmp	r3, #2
 800688a:	d901      	bls.n	8006890 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800688c:	2303      	movs	r3, #3
 800688e:	e006      	b.n	800689e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <RCCEx_PLL2_Config+0x15c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d0f0      	beq.n	800687e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800689c:	7bfb      	ldrb	r3, [r7, #15]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
 80068ac:	ffff0007 	.word	0xffff0007

080068b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068be:	4b53      	ldr	r3, [pc, #332]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d101      	bne.n	80068ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e099      	b.n	8006a02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80068ce:	4b4f      	ldr	r3, [pc, #316]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a4e      	ldr	r2, [pc, #312]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80068d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068da:	f7fb f8b9 	bl	8001a50 <HAL_GetTick>
 80068de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068e0:	e008      	b.n	80068f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80068e2:	f7fb f8b5 	bl	8001a50 <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d901      	bls.n	80068f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	e086      	b.n	8006a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068f4:	4b45      	ldr	r3, [pc, #276]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1f0      	bne.n	80068e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006900:	4b42      	ldr	r3, [pc, #264]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	051b      	lsls	r3, r3, #20
 800690e:	493f      	ldr	r1, [pc, #252]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006910:	4313      	orrs	r3, r2
 8006912:	628b      	str	r3, [r1, #40]	; 0x28
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	3b01      	subs	r3, #1
 800691a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	3b01      	subs	r3, #1
 8006924:	025b      	lsls	r3, r3, #9
 8006926:	b29b      	uxth	r3, r3
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	3b01      	subs	r3, #1
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	3b01      	subs	r3, #1
 800693e:	061b      	lsls	r3, r3, #24
 8006940:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006944:	4931      	ldr	r1, [pc, #196]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006946:	4313      	orrs	r3, r2
 8006948:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800694a:	4b30      	ldr	r3, [pc, #192]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 800694c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	492d      	ldr	r1, [pc, #180]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006958:	4313      	orrs	r3, r2
 800695a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800695c:	4b2b      	ldr	r3, [pc, #172]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	4928      	ldr	r1, [pc, #160]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 800696a:	4313      	orrs	r3, r2
 800696c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800696e:	4b27      	ldr	r3, [pc, #156]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006972:	4a26      	ldr	r2, [pc, #152]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800697a:	4b24      	ldr	r3, [pc, #144]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 800697c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800697e:	4b24      	ldr	r3, [pc, #144]	; (8006a10 <RCCEx_PLL3_Config+0x160>)
 8006980:	4013      	ands	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	69d2      	ldr	r2, [r2, #28]
 8006986:	00d2      	lsls	r2, r2, #3
 8006988:	4920      	ldr	r1, [pc, #128]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 800698a:	4313      	orrs	r3, r2
 800698c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800698e:	4b1f      	ldr	r3, [pc, #124]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 8006994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006998:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d106      	bne.n	80069ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069a0:	4b1a      	ldr	r3, [pc, #104]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	4a19      	ldr	r2, [pc, #100]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069ac:	e00f      	b.n	80069ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d106      	bne.n	80069c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80069b4:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80069be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069c0:	e005      	b.n	80069ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a11      	ldr	r2, [pc, #68]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80069ce:	4b0f      	ldr	r3, [pc, #60]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a0e      	ldr	r2, [pc, #56]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069da:	f7fb f839 	bl	8001a50 <HAL_GetTick>
 80069de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069e0:	e008      	b.n	80069f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80069e2:	f7fb f835 	bl	8001a50 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e006      	b.n	8006a02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80069f4:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <RCCEx_PLL3_Config+0x15c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0f0      	beq.n	80069e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	58024400 	.word	0x58024400
 8006a10:	ffff0007 	.word	0xffff0007

08006a14 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b08a      	sub	sp, #40	; 0x28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e07c      	b.n	8006b20 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10c      	bne.n	8006a4c <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fa fcb2 	bl	80013b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2203      	movs	r2, #3
 8006a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f867 	bl	8006b28 <HAL_SD_InitCard>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d001      	beq.n	8006a64 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e05d      	b.n	8006b20 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006a64:	f107 0308 	add.w	r3, r7, #8
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 fdbe 	bl	80075ec <HAL_SD_GetCardStatus>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d001      	beq.n	8006a7a <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e052      	b.n	8006b20 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006a7a:	7e3b      	ldrb	r3, [r7, #24]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006a80:	7e7b      	ldrb	r3, [r7, #25]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d10a      	bne.n	8006aa4 <HAL_SD_Init+0x90>
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d102      	bne.n	8006a9a <HAL_SD_Init+0x86>
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d004      	beq.n	8006aa4 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aa2:	e00b      	b.n	8006abc <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d104      	bne.n	8006ab6 <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ab2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab4:	e002      	b.n	8006abc <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fe74 	bl	80077b0 <HAL_SD_ConfigWideBusOperation>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e026      	b.n	8006b20 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006ad2:	f7fa ffbd 	bl	8001a50 <HAL_GetTick>
 8006ad6:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006ad8:	e011      	b.n	8006afe <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8006ada:	f7fa ffb9 	bl	8001a50 <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae8:	d109      	bne.n	8006afe <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e010      	b.n	8006b20 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 ff00 	bl	8007904 <HAL_SD_GetCardState>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d1e7      	bne.n	8006ada <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006b28:	b5b0      	push	{r4, r5, r7, lr}
 8006b2a:	b08e      	sub	sp, #56	; 0x38
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006b40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006b44:	f7fe ff90 	bl	8005a68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006b48:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	4a40      	ldr	r2, [pc, #256]	; (8006c50 <HAL_SD_InitCard+0x128>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d107      	bne.n	8006b70 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0210 	orr.w	r2, r2, #16
 8006b6e:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681d      	ldr	r5, [r3, #0]
 8006b74:	466c      	mov	r4, sp
 8006b76:	f107 0314 	add.w	r3, r7, #20
 8006b7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b82:	f107 0308 	add.w	r3, r7, #8
 8006b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b88:	4628      	mov	r0, r5
 8006b8a:	f003 fdc7 	bl	800a71c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f003 fe0a 	bl	800a7ac <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8006baa:	4a2a      	ldr	r2, [pc, #168]	; (8006c54 <HAL_SD_InitCard+0x12c>)
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fa ff57 	bl	8001a68 <HAL_Delay>
 8006bba:	e002      	b.n	8006bc2 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8006bbc:	2002      	movs	r0, #2
 8006bbe:	f7fa ff53 	bl	8001a68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 ff7c 	bl	8007ac0 <SD_PowerON>
 8006bc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e02e      	b.n	8006c46 <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 feab 	bl	8007944 <SD_InitCard>
 8006bee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00b      	beq.n	8006c0e <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	431a      	orrs	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e01b      	b.n	8006c46 <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c16:	4618      	mov	r0, r3
 8006c18:	f003 fe5e 	bl	800a8d8 <SDMMC_CmdBlockLength>
 8006c1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00f      	beq.n	8006c44 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a0b      	ldr	r2, [pc, #44]	; (8006c58 <HAL_SD_InitCard+0x130>)
 8006c2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3728      	adds	r7, #40	; 0x28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	014f8b59 	.word	0x014f8b59
 8006c54:	00012110 	.word	0x00012110
 8006c58:	1fe00fff 	.word	0x1fe00fff

08006c5c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b092      	sub	sp, #72	; 0x48
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c6a:	f7fa fef1 	bl	8001a50 <HAL_GetTick>
 8006c6e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d107      	bne.n	8006c8e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e167      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f040 815a 	bne.w	8006f50 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	441a      	add	r2, r3
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d907      	bls.n	8006cc0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e14e      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2203      	movs	r2, #3
 8006cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d002      	beq.n	8006cde <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006cde:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	025b      	lsls	r3, r3, #9
 8006ce8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cea:	2390      	movs	r3, #144	; 0x90
 8006cec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f107 0214 	add.w	r2, r7, #20
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f003 fdbb 	bl	800a880 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68da      	ldr	r2, [r3, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d18:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d90a      	bls.n	8006d36 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2202      	movs	r2, #2
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f003 fe19 	bl	800a964 <SDMMC_CmdReadMultiBlock>
 8006d32:	6478      	str	r0, [r7, #68]	; 0x44
 8006d34:	e009      	b.n	8006d4a <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d42:	4618      	mov	r0, r3
 8006d44:	f003 fdeb 	bl	800a91e <SDMMC_CmdReadSingleBlock>
 8006d48:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d012      	beq.n	8006d76 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a84      	ldr	r2, [pc, #528]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006d56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e0f3      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006d7a:	e058      	b.n	8006e2e <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d033      	beq.n	8006df2 <HAL_SD_ReadBlocks+0x196>
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d8c:	2b1f      	cmp	r3, #31
 8006d8e:	d930      	bls.n	8006df2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8006d90:	2300      	movs	r3, #0
 8006d92:	643b      	str	r3, [r7, #64]	; 0x40
 8006d94:	e027      	b.n	8006de6 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f003 fce8 	bl	800a770 <SDMMC_ReadFIFO>
 8006da0:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	b2da      	uxtb	r2, r3
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dac:	3301      	adds	r3, #1
 8006dae:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	0c1b      	lsrs	r3, r3, #16
 8006dc4:	b2da      	uxtb	r2, r3
 8006dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dcc:	3301      	adds	r3, #1
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	0e1b      	lsrs	r3, r3, #24
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	3301      	adds	r3, #1
 8006dde:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8006de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de2:	3301      	adds	r3, #1
 8006de4:	643b      	str	r3, [r7, #64]	; 0x40
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	2b07      	cmp	r3, #7
 8006dea:	d9d4      	bls.n	8006d96 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	3b20      	subs	r3, #32
 8006df0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006df2:	f7fa fe2d 	bl	8001a50 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d902      	bls.n	8006e08 <HAL_SD_ReadBlocks+0x1ac>
 8006e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d112      	bne.n	8006e2e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a56      	ldr	r2, [pc, #344]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006e0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e097      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d09f      	beq.n	8006d7c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e4a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d022      	beq.n	8006ea0 <HAL_SD_ReadBlocks+0x244>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d91f      	bls.n	8006ea0 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d01b      	beq.n	8006ea0 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f003 fde3 	bl	800aa38 <SDMMC_CmdStopTransfer>
 8006e72:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8006e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d012      	beq.n	8006ea0 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a3a      	ldr	r2, [pc, #232]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e05e      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2d      	ldr	r2, [pc, #180]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eba:	f043 0208 	orr.w	r2, r3, #8
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e044      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eee:	f043 0202 	orr.w	r2, r3, #2
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e02a      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d012      	beq.n	8006f3c <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <HAL_SD_ReadBlocks+0x30c>)
 8006f1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f22:	f043 0220 	orr.w	r2, r3, #32
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e010      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <HAL_SD_ReadBlocks+0x310>)
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	e006      	b.n	8006f5e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
  }
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3748      	adds	r7, #72	; 0x48
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	1fe00fff 	.word	0x1fe00fff
 8006f6c:	18000f3a 	.word	0x18000f3a

08006f70 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b092      	sub	sp, #72	; 0x48
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006f7e:	f7fa fd67 	bl	8001a50 <HAL_GetTick>
 8006f82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d107      	bne.n	8006fa2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e16b      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	f040 815e 	bne.w	800726c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006fb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	441a      	add	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d907      	bls.n	8006fd4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e152      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2203      	movs	r2, #3
 8006fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d002      	beq.n	8006ff2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	025b      	lsls	r3, r3, #9
 8006ff0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	025b      	lsls	r3, r3, #9
 8006ffc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006ffe:	2390      	movs	r3, #144	; 0x90
 8007000:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007006:	2300      	movs	r3, #0
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800700a:	2300      	movs	r3, #0
 800700c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f107 0218 	add.w	r2, r7, #24
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f003 fc31 	bl	800a880 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800702c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d90a      	bls.n	800704a <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2220      	movs	r2, #32
 8007038:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007040:	4618      	mov	r0, r3
 8007042:	f003 fcd5 	bl	800a9f0 <SDMMC_CmdWriteMultiBlock>
 8007046:	6478      	str	r0, [r7, #68]	; 0x44
 8007048:	e009      	b.n	800705e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2210      	movs	r2, #16
 800704e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007056:	4618      	mov	r0, r3
 8007058:	f003 fca7 	bl	800a9aa <SDMMC_CmdWriteSingleBlock>
 800705c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800705e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a86      	ldr	r2, [pc, #536]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 800706a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007072:	431a      	orrs	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e0f7      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800708e:	e05c      	b.n	800714a <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d037      	beq.n	800710e <HAL_SD_WriteBlocks+0x19e>
 800709e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a0:	2b1f      	cmp	r3, #31
 80070a2:	d934      	bls.n	800710e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80070a4:	2300      	movs	r3, #0
 80070a6:	643b      	str	r3, [r7, #64]	; 0x40
 80070a8:	e02b      	b.n	8007102 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80070aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	3301      	adds	r3, #1
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	021a      	lsls	r2, r3, #8
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c4:	3301      	adds	r3, #1
 80070c6:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 80070c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	041a      	lsls	r2, r3, #16
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d6:	3301      	adds	r3, #1
 80070d8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 80070da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	061a      	lsls	r2, r3, #24
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80070e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e8:	3301      	adds	r3, #1
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f107 0214 	add.w	r2, r7, #20
 80070f4:	4611      	mov	r1, r2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f003 fb47 	bl	800a78a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80070fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070fe:	3301      	adds	r3, #1
 8007100:	643b      	str	r3, [r7, #64]	; 0x40
 8007102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007104:	2b07      	cmp	r3, #7
 8007106:	d9d0      	bls.n	80070aa <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8007108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800710a:	3b20      	subs	r3, #32
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800710e:	f7fa fc9f 	bl	8001a50 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800711a:	429a      	cmp	r2, r3
 800711c:	d902      	bls.n	8007124 <HAL_SD_WriteBlocks+0x1b4>
 800711e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007120:	2b00      	cmp	r3, #0
 8007122:	d112      	bne.n	800714a <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a56      	ldr	r2, [pc, #344]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007132:	431a      	orrs	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e097      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007154:	2b00      	cmp	r3, #0
 8007156:	d09b      	beq.n	8007090 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68da      	ldr	r2, [r3, #12]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007166:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d022      	beq.n	80071bc <HAL_SD_WriteBlocks+0x24c>
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d91f      	bls.n	80071bc <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	2b03      	cmp	r3, #3
 8007182:	d01b      	beq.n	80071bc <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f003 fc55 	bl	800aa38 <SDMMC_CmdStopTransfer>
 800718e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007192:	2b00      	cmp	r3, #0
 8007194:	d012      	beq.n	80071bc <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a3a      	ldr	r2, [pc, #232]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 800719c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e05e      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d012      	beq.n	80071f0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a2d      	ldr	r2, [pc, #180]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 80071d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	f043 0208 	orr.w	r2, r3, #8
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e044      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d012      	beq.n	8007224 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a20      	ldr	r2, [pc, #128]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	f043 0202 	orr.w	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e02a      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f003 0310 	and.w	r3, r3, #16
 800722e:	2b00      	cmp	r3, #0
 8007230:	d012      	beq.n	8007258 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a13      	ldr	r2, [pc, #76]	; (8007284 <HAL_SD_WriteBlocks+0x314>)
 8007238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	f043 0210 	orr.w	r2, r3, #16
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e010      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a0a      	ldr	r2, [pc, #40]	; (8007288 <HAL_SD_WriteBlocks+0x318>)
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	e006      	b.n	800727a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
  }
}
 800727a:	4618      	mov	r0, r3
 800727c:	3748      	adds	r7, #72	; 0x48
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	1fe00fff 	.word	0x1fe00fff
 8007288:	18000f3a 	.word	0x18000f3a

0800728c <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
	...

080072a4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b2:	0f9b      	lsrs	r3, r3, #30
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072be:	0e9b      	lsrs	r3, r3, #26
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	b2da      	uxtb	r2, r3
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d0:	0e1b      	lsrs	r3, r3, #24
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e2:	0c1b      	lsrs	r3, r3, #16
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007304:	0d1b      	lsrs	r3, r3, #20
 8007306:	b29a      	uxth	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007310:	0c1b      	lsrs	r3, r3, #16
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	b2da      	uxtb	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007322:	0bdb      	lsrs	r3, r3, #15
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007334:	0b9b      	lsrs	r3, r3, #14
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007346:	0b5b      	lsrs	r3, r3, #13
 8007348:	b2db      	uxtb	r3, r3
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	b2da      	uxtb	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007358:	0b1b      	lsrs	r3, r3, #12
 800735a:	b2db      	uxtb	r3, r3
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	b2da      	uxtb	r2, r3
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d163      	bne.n	800743c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007378:	009a      	lsls	r2, r3, #2
 800737a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800737e:	4013      	ands	r3, r2
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007384:	0f92      	lsrs	r2, r2, #30
 8007386:	431a      	orrs	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007390:	0edb      	lsrs	r3, r3, #27
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	b2da      	uxtb	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073a2:	0e1b      	lsrs	r3, r3, #24
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073b4:	0d5b      	lsrs	r3, r3, #21
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c6:	0c9b      	lsrs	r3, r3, #18
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073d8:	0bdb      	lsrs	r3, r3, #15
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	691b      	ldr	r3, [r3, #16]
 80073ea:	1c5a      	adds	r2, r3, #1
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	7e1b      	ldrb	r3, [r3, #24]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	3302      	adds	r3, #2
 80073fc:	2201      	movs	r2, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007406:	fb02 f203 	mul.w	r2, r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	7a1b      	ldrb	r3, [r3, #8]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 030f 	and.w	r3, r3, #15
 8007418:	2201      	movs	r2, #1
 800741a:	409a      	lsls	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007428:	0a52      	lsrs	r2, r2, #9
 800742a:	fb02 f203 	mul.w	r2, r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007438:	659a      	str	r2, [r3, #88]	; 0x58
 800743a:	e031      	b.n	80074a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d11d      	bne.n	8007480 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007452:	0c1b      	lsrs	r3, r3, #16
 8007454:	431a      	orrs	r2, r3
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	3301      	adds	r3, #1
 8007460:	029a      	lsls	r2, r3, #10
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007474:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	659a      	str	r2, [r3, #88]	; 0x58
 800747e:	e00f      	b.n	80074a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a58      	ldr	r2, [pc, #352]	; (80075e8 <HAL_SD_GetCardCSD+0x344>)
 8007486:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e09d      	b.n	80075dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a4:	0b9b      	lsrs	r3, r3, #14
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b6:	09db      	lsrs	r3, r3, #7
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d8:	0fdb      	lsrs	r3, r3, #31
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074e4:	0f5b      	lsrs	r3, r3, #29
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074f6:	0e9b      	lsrs	r3, r3, #26
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007508:	0d9b      	lsrs	r3, r3, #22
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 030f 	and.w	r3, r3, #15
 8007510:	b2da      	uxtb	r2, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800751a:	0d5b      	lsrs	r3, r3, #21
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	b2da      	uxtb	r2, r3
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007536:	0c1b      	lsrs	r3, r3, #16
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800754a:	0bdb      	lsrs	r3, r3, #15
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755e:	0b9b      	lsrs	r3, r3, #14
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	b2da      	uxtb	r2, r3
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	0b5b      	lsrs	r3, r3, #13
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	b2da      	uxtb	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007586:	0b1b      	lsrs	r3, r3, #12
 8007588:	b2db      	uxtb	r3, r3
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	b2da      	uxtb	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	0a9b      	lsrs	r3, r3, #10
 800759c:	b2db      	uxtb	r3, r3
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ae:	0a1b      	lsrs	r3, r3, #8
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c2:	085b      	lsrs	r3, r3, #1
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr
 80075e8:	1fe00fff 	.word	0x1fe00fff

080075ec <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b094      	sub	sp, #80	; 0x50
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80075fc:	f107 0308 	add.w	r3, r7, #8
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb64 	bl	8007cd0 <SD_SendSDStatus>
 8007608:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800760a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760c:	2b00      	cmp	r3, #0
 800760e:	d011      	beq.n	8007634 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a4f      	ldr	r2, [pc, #316]	; (8007754 <HAL_SD_GetCardStatus+0x168>)
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800761c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761e:	431a      	orrs	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007632:	e070      	b.n	8007716 <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	099b      	lsrs	r3, r3, #6
 8007638:	b2db      	uxtb	r3, r3
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	b2da      	uxtb	r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	095b      	lsrs	r3, r3, #5
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	0a1b      	lsrs	r3, r3, #8
 8007658:	b29b      	uxth	r3, r3
 800765a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800765e:	b29a      	uxth	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	0e1b      	lsrs	r3, r3, #24
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	061a      	lsls	r2, r3, #24
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800767a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	0a1b      	lsrs	r3, r3, #8
 8007680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007684:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	b2da      	uxtb	r2, r3
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	b2da      	uxtb	r2, r3
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	0d1b      	lsrs	r3, r3, #20
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	0c1b      	lsrs	r3, r3, #16
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076bc:	b29a      	uxth	r2, r3
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	4313      	orrs	r3, r2
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	0a9b      	lsrs	r3, r3, #10
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	0a1b      	lsrs	r3, r3, #8
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	091b      	lsrs	r3, r3, #4
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 030f 	and.w	r3, r3, #15
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	b2da      	uxtb	r2, r3
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	0e1b      	lsrs	r3, r3, #24
 8007710:	b2da      	uxtb	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800771e:	4618      	mov	r0, r3
 8007720:	f003 f8da 	bl	800a8d8 <SDMMC_CmdBlockLength>
 8007724:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8007726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a08      	ldr	r2, [pc, #32]	; (8007754 <HAL_SD_GetCardStatus+0x168>)
 8007732:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007738:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8007748:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800774c:	4618      	mov	r0, r3
 800774e:	3750      	adds	r7, #80	; 0x50
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	1fe00fff 	.word	0x1fe00fff

08007758 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80077a2:	2300      	movs	r3, #0
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80077b0:	b5b0      	push	{r4, r5, r7, lr}
 80077b2:	b08e      	sub	sp, #56	; 0x38
 80077b4:	af04      	add	r7, sp, #16
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2203      	movs	r2, #3
 80077c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077cc:	2b03      	cmp	r3, #3
 80077ce:	d02e      	beq.n	800782e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077d6:	d106      	bne.n	80077e6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	639a      	str	r2, [r3, #56]	; 0x38
 80077e4:	e029      	b.n	800783a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077ec:	d10a      	bne.n	8007804 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fb66 	bl	8007ec0 <SD_WideBus_Enable>
 80077f4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	639a      	str	r2, [r3, #56]	; 0x38
 8007802:	e01a      	b.n	800783a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fba3 	bl	8007f56 <SD_WideBus_Disable>
 8007810:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007816:	6a3b      	ldr	r3, [r7, #32]
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	639a      	str	r2, [r3, #56]	; 0x38
 800781e:	e00c      	b.n	800783a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007824:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	639a      	str	r2, [r3, #56]	; 0x38
 800782c:	e005      	b.n	800783a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	2b00      	cmp	r3, #0
 8007840:	d007      	beq.n	8007852 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a2e      	ldr	r2, [pc, #184]	; (8007900 <HAL_SD_ConfigWideBusOperation+0x150>)
 8007848:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007850:	e034      	b.n	80078bc <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	695b      	ldr	r3, [r3, #20]
 800786c:	2b03      	cmp	r3, #3
 800786e:	d903      	bls.n	8007878 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	695b      	ldr	r3, [r3, #20]
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e012      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007880:	d103      	bne.n	800788a <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	e009      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d102      	bne.n	800789a <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8007894:	2302      	movs	r3, #2
 8007896:	61bb      	str	r3, [r7, #24]
 8007898:	e001      	b.n	800789e <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800789a:	2304      	movs	r3, #4
 800789c:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681d      	ldr	r5, [r3, #0]
 80078a2:	466c      	mov	r4, sp
 80078a4:	f107 0314 	add.w	r3, r7, #20
 80078a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80078ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80078b0:	f107 0308 	add.w	r3, r7, #8
 80078b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078b6:	4628      	mov	r0, r5
 80078b8:	f002 ff30 	bl	800a71c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078c4:	4618      	mov	r0, r3
 80078c6:	f003 f807 	bl	800a8d8 <SDMMC_CmdBlockLength>
 80078ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078cc:	6a3b      	ldr	r3, [r7, #32]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00c      	beq.n	80078ec <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <HAL_SD_ConfigWideBusOperation+0x150>)
 80078d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80078f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3728      	adds	r7, #40	; 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bdb0      	pop	{r4, r5, r7, pc}
 8007900:	1fe00fff 	.word	0x1fe00fff

08007904 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800790c:	2300      	movs	r3, #0
 800790e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007910:	f107 030c 	add.w	r3, r7, #12
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 faaa 	bl	8007e70 <SD_SendStatus>
 800791c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	431a      	orrs	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0a5b      	lsrs	r3, r3, #9
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800793a:	693b      	ldr	r3, [r7, #16]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3718      	adds	r7, #24
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b091      	sub	sp, #68	; 0x44
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800794c:	2301      	movs	r3, #1
 800794e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4618      	mov	r0, r3
 8007956:	f002 ff3a 	bl	800a7ce <SDMMC_GetPowerState>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007960:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007964:	e0a8      	b.n	8007ab8 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800796a:	2b03      	cmp	r3, #3
 800796c:	d02e      	beq.n	80079cc <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4618      	mov	r0, r3
 8007974:	f003 f986 	bl	800ac84 <SDMMC_CmdSendCID>
 8007978:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800797a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <SD_InitCard+0x40>
    {
      return errorstate;
 8007980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007982:	e099      	b.n	8007ab8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f002 ff65 	bl	800a85a <SDMMC_GetResponse>
 8007990:	4602      	mov	r2, r0
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2104      	movs	r1, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f002 ff5c 	bl	800a85a <SDMMC_GetResponse>
 80079a2:	4602      	mov	r2, r0
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	2108      	movs	r1, #8
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 ff53 	bl	800a85a <SDMMC_GetResponse>
 80079b4:	4602      	mov	r2, r0
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	210c      	movs	r1, #12
 80079c0:	4618      	mov	r0, r3
 80079c2:	f002 ff4a 	bl	800a85a <SDMMC_GetResponse>
 80079c6:	4602      	mov	r2, r0
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d0:	2b03      	cmp	r3, #3
 80079d2:	d00d      	beq.n	80079f0 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f107 020e 	add.w	r2, r7, #14
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f003 f98f 	bl	800ad02 <SDMMC_CmdSetRelAdd>
 80079e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80079e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <SD_InitCard+0xac>
    {
      return errorstate;
 80079ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079ee:	e063      	b.n	8007ab8 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d036      	beq.n	8007a66 <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80079f8:	89fb      	ldrh	r3, [r7, #14]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	f003 f958 	bl	800acc2 <SDMMC_CmdSendCSD>
 8007a12:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d001      	beq.n	8007a1e <SD_InitCard+0xda>
    {
      return errorstate;
 8007a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1c:	e04c      	b.n	8007ab8 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f002 ff18 	bl	800a85a <SDMMC_GetResponse>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2104      	movs	r1, #4
 8007a36:	4618      	mov	r0, r3
 8007a38:	f002 ff0f 	bl	800a85a <SDMMC_GetResponse>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2108      	movs	r1, #8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f002 ff06 	bl	800a85a <SDMMC_GetResponse>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	210c      	movs	r1, #12
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f002 fefd 	bl	800a85a <SDMMC_GetResponse>
 8007a60:	4602      	mov	r2, r0
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2104      	movs	r1, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f002 fef4 	bl	800a85a <SDMMC_GetResponse>
 8007a72:	4603      	mov	r3, r0
 8007a74:	0d1a      	lsrs	r2, r3, #20
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007a7a:	f107 0310 	add.w	r3, r7, #16
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f7ff fc0f 	bl	80072a4 <HAL_SD_GetCardCSD>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007a8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007a90:	e012      	b.n	8007ab8 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	041b      	lsls	r3, r3, #16
 8007a9c:	f04f 0400 	mov.w	r4, #0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	f003 f803 	bl	800aab0 <SDMMC_CmdSelDesel>
 8007aaa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d001      	beq.n	8007ab6 <SD_InitCard+0x172>
  {
    return errorstate;
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ab4:	e000      	b.n	8007ab8 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3744      	adds	r7, #68	; 0x44
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd90      	pop	{r4, r7, pc}

08007ac0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	61fb      	str	r3, [r7, #28]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8007ad4:	f7f9 ffbc 	bl	8001a50 <HAL_GetTick>
 8007ad8:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f003 f80a 	bl	800aaf8 <SDMMC_CmdGoIdleState>
 8007ae4:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <SD_PowerON+0x30>
  {
    return errorstate;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	e0e9      	b.n	8007cc4 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f003 f81d 	bl	800ab34 <SDMMC_CmdOperCond>
 8007afa:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f002 fff3 	bl	800aaf8 <SDMMC_CmdGoIdleState>
 8007b12:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d004      	beq.n	8007b24 <SD_PowerON+0x64>
    {
      return errorstate;
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	e0d2      	b.n	8007cc4 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d137      	bne.n	8007b9c <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2100      	movs	r1, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	f003 f81e 	bl	800ab74 <SDMMC_CmdAppCommand>
 8007b38:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02d      	beq.n	8007b9c <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b44:	e0be      	b.n	8007cc4 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f003 f811 	bl	800ab74 <SDMMC_CmdAppCommand>
 8007b52:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <SD_PowerON+0x9e>
    {
      return errorstate;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	e0b2      	b.n	8007cc4 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	495a      	ldr	r1, [pc, #360]	; (8007ccc <SD_PowerON+0x20c>)
 8007b64:	4618      	mov	r0, r3
 8007b66:	f003 f828 	bl	800abba <SDMMC_CmdAppOperCommand>
 8007b6a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b76:	e0a5      	b.n	8007cc4 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f002 fe6b 	bl	800a85a <SDMMC_GetResponse>
 8007b84:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	0fdb      	lsrs	r3, r3, #31
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d101      	bne.n	8007b92 <SD_PowerON+0xd2>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <SD_PowerON+0xd4>
 8007b92:	2300      	movs	r3, #0
 8007b94:	61bb      	str	r3, [r7, #24]

    count++;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d802      	bhi.n	8007bac <SD_PowerON+0xec>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0cc      	beq.n	8007b46 <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d902      	bls.n	8007bbc <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bba:	e083      	b.n	8007cc4 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d07d      	beq.n	8007cc2 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d176      	bne.n	8007cc2 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d071      	beq.n	8007cc2 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007be4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0208 	orr.w	r2, r2, #8
 8007bf4:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f003 f8e8 	bl	800add0 <SDMMC_CmdVoltageSwitch>
 8007c00:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00c      	beq.n	8007c22 <SD_PowerON+0x162>
        {
          return errorstate;
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	e05b      	b.n	8007cc4 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c0c:	f7f9 ff20 	bl	8001a50 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1a:	d102      	bne.n	8007c22 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8007c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c20:	e050      	b.n	8007cc4 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c30:	d1ec      	bne.n	8007c0c <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4a:	d002      	beq.n	8007c52 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8007c4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c50:	e038      	b.n	8007cc4 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8007c52:	2001      	movs	r0, #1
 8007c54:	f7ff fb1a 	bl	800728c <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0204 	orr.w	r2, r2, #4
 8007c66:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007c68:	e00a      	b.n	8007c80 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007c6a:	f7f9 fef1 	bl	8001a50 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d102      	bne.n	8007c80 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8007c7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c7e:	e021      	b.n	8007cc4 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c8e:	d1ec      	bne.n	8007c6a <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca8:	d102      	bne.n	8007cb0 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cae:	e009      	b.n	8007cc4 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2213      	movs	r2, #19
 8007cb6:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3720      	adds	r7, #32
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	c1100000 	.word	0xc1100000

08007cd0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08c      	sub	sp, #48	; 0x30
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cda:	f7f9 feb9 	bl	8001a50 <HAL_GetTick>
 8007cde:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2100      	movs	r1, #0
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 fdb5 	bl	800a85a <SDMMC_GetResponse>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfa:	d102      	bne.n	8007d02 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007cfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d00:	e0b0      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2140      	movs	r1, #64	; 0x40
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f002 fde5 	bl	800a8d8 <SDMMC_CmdBlockLength>
 8007d0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d10:	6a3b      	ldr	r3, [r7, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	e0a0      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d2a:	041b      	lsls	r3, r3, #16
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	4610      	mov	r0, r2
 8007d30:	f002 ff20 	bl	800ab74 <SDMMC_CmdAppCommand>
 8007d34:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	e08d      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d48:	f04f 33ff 	mov.w	r3, #4294967295
 8007d4c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007d4e:	2340      	movs	r3, #64	; 0x40
 8007d50:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007d52:	2360      	movs	r3, #96	; 0x60
 8007d54:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d56:	2302      	movs	r3, #2
 8007d58:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	4611      	mov	r1, r2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f002 fd87 	bl	800a880 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f003 f808 	bl	800ad8c <SDMMC_CmdStatusRegister>
 8007d7c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02b      	beq.n	8007ddc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	e069      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d013      	beq.n	8007dc6 <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da2:	e00d      	b.n	8007dc0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f002 fce1 	bl	800a770 <SDMMC_ReadFIFO>
 8007dae:	4602      	mov	r2, r0
 8007db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db2:	601a      	str	r2, [r3, #0]
        pData++;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	3304      	adds	r3, #4
 8007db8:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	d9ee      	bls.n	8007da4 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dc6:	f7f9 fe43 	bl	8001a50 <HAL_GetTick>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	1ad3      	subs	r3, r2, r3
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d102      	bne.n	8007ddc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dda:	e043      	b.n	8007e64 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d0d2      	beq.n	8007d90 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007df8:	2308      	movs	r3, #8
 8007dfa:	e033      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e02a      	b.n	8007e64 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d017      	beq.n	8007e4c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e1c:	2320      	movs	r3, #32
 8007e1e:	e021      	b.n	8007e64 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f002 fca3 	bl	800a770 <SDMMC_ReadFIFO>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	601a      	str	r2, [r3, #0]
    pData++;
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	3304      	adds	r3, #4
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e36:	f7f9 fe0b 	bl	8001a50 <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d102      	bne.n	8007e4c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e4a:	e00b      	b.n	8007e64 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1e2      	bne.n	8007e20 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a03      	ldr	r2, [pc, #12]	; (8007e6c <SD_SendSDStatus+0x19c>)
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3730      	adds	r7, #48	; 0x30
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	18000f3a 	.word	0x18000f3a

08007e70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007e80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e84:	e018      	b.n	8007eb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	f002 ff57 	bl	800ad46 <SDMMC_CmdSendStatus>
 8007e98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	e009      	b.n	8007eb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 fcd5 	bl	800a85a <SDMMC_GetResponse>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007eb6:	2300      	movs	r3, #0
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f002 fcbf 	bl	800a85a <SDMMC_GetResponse>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ee2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ee6:	d102      	bne.n	8007eee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eec:	e02f      	b.n	8007f4e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007eee:	f107 030c 	add.w	r3, r7, #12
 8007ef2:	4619      	mov	r1, r3
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f879 	bl	8007fec <SD_FindSCR>
 8007efa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	e023      	b.n	8007f4e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01c      	beq.n	8007f4a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f002 fe29 	bl	800ab74 <SDMMC_CmdAppCommand>
 8007f22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	e00f      	b.n	8007f4e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2102      	movs	r1, #2
 8007f34:	4618      	mov	r0, r3
 8007f36:	f002 fe60 	bl	800abfa <SDMMC_CmdBusWidth>
 8007f3a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d001      	beq.n	8007f46 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	e003      	b.n	8007f4e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e001      	b.n	8007f4e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f5e:	2300      	movs	r3, #0
 8007f60:	60fb      	str	r3, [r7, #12]
 8007f62:	2300      	movs	r3, #0
 8007f64:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f002 fc74 	bl	800a85a <SDMMC_GetResponse>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f7c:	d102      	bne.n	8007f84 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f82:	e02f      	b.n	8007fe4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f84:	f107 030c 	add.w	r3, r7, #12
 8007f88:	4619      	mov	r1, r3
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f82e 	bl	8007fec <SD_FindSCR>
 8007f90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	e023      	b.n	8007fe4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01c      	beq.n	8007fe0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	f002 fdde 	bl	800ab74 <SDMMC_CmdAppCommand>
 8007fb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	e00f      	b.n	8007fe4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f002 fe15 	bl	800abfa <SDMMC_CmdBusWidth>
 8007fd0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	e003      	b.n	8007fe4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	e001      	b.n	8007fe4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fe0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b08e      	sub	sp, #56	; 0x38
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ff6:	f7f9 fd2b 	bl	8001a50 <HAL_GetTick>
 8007ffa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008000:	2300      	movs	r3, #0
 8008002:	60bb      	str	r3, [r7, #8]
 8008004:	2300      	movs	r3, #0
 8008006:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2108      	movs	r1, #8
 8008012:	4618      	mov	r0, r3
 8008014:	f002 fc60 	bl	800a8d8 <SDMMC_CmdBlockLength>
 8008018:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800801a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	e0ad      	b.n	8008180 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	4619      	mov	r1, r3
 8008030:	4610      	mov	r0, r2
 8008032:	f002 fd9f 	bl	800ab74 <SDMMC_CmdAppCommand>
 8008036:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <SD_FindSCR+0x56>
  {
    return errorstate;
 800803e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008040:	e09e      	b.n	8008180 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008042:	f04f 33ff 	mov.w	r3, #4294967295
 8008046:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008048:	2308      	movs	r3, #8
 800804a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800804c:	2330      	movs	r3, #48	; 0x30
 800804e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008050:	2302      	movs	r3, #2
 8008052:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008054:	2300      	movs	r3, #0
 8008056:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008058:	2301      	movs	r3, #1
 800805a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f107 0210 	add.w	r2, r7, #16
 8008064:	4611      	mov	r1, r2
 8008066:	4618      	mov	r0, r3
 8008068:	f002 fc0a 	bl	800a880 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f002 fde5 	bl	800ac40 <SDMMC_CmdSendSCR>
 8008076:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807a:	2b00      	cmp	r3, #0
 800807c:	d027      	beq.n	80080ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800807e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008080:	e07e      	b.n	8008180 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d113      	bne.n	80080b8 <SD_FindSCR+0xcc>
 8008090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f002 fb68 	bl	800a770 <SDMMC_ReadFIFO>
 80080a0:	4603      	mov	r3, r0
 80080a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4618      	mov	r0, r3
 80080aa:	f002 fb61 	bl	800a770 <SDMMC_ReadFIFO>
 80080ae:	4603      	mov	r3, r0
 80080b0:	60fb      	str	r3, [r7, #12]
      index++;
 80080b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b4:	3301      	adds	r3, #1
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080b8:	f7f9 fcca 	bl	8001a50 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d102      	bne.n	80080ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080cc:	e058      	b.n	8008180 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080d4:	f240 532a 	movw	r3, #1322	; 0x52a
 80080d8:	4013      	ands	r3, r2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0d1      	beq.n	8008082 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d005      	beq.n	80080f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2208      	movs	r2, #8
 80080f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80080f4:	2308      	movs	r3, #8
 80080f6:	e043      	b.n	8008180 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2202      	movs	r2, #2
 800810c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800810e:	2302      	movs	r3, #2
 8008110:	e036      	b.n	8008180 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008118:	f003 0320 	and.w	r3, r3, #32
 800811c:	2b00      	cmp	r3, #0
 800811e:	d005      	beq.n	800812c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2220      	movs	r2, #32
 8008126:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008128:	2320      	movs	r3, #32
 800812a:	e029      	b.n	8008180 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a15      	ldr	r2, [pc, #84]	; (8008188 <SD_FindSCR+0x19c>)
 8008132:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	061a      	lsls	r2, r3, #24
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	021b      	lsls	r3, r3, #8
 800813c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008140:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	0a1b      	lsrs	r3, r3, #8
 8008146:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800814a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	0e1b      	lsrs	r3, r3, #24
 8008150:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	601a      	str	r2, [r3, #0]
    scr++;
 8008156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008158:	3304      	adds	r3, #4
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	061a      	lsls	r2, r3, #24
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008168:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008172:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	0e1b      	lsrs	r3, r3, #24
 8008178:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3738      	adds	r7, #56	; 0x38
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	18000f3a 	.word	0x18000f3a

0800818c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	e049      	b.n	8008232 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d106      	bne.n	80081b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7f9 fa1c 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f000 fc8e 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3708      	adds	r7, #8
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824a:	b2db      	uxtb	r3, r3
 800824c:	2b01      	cmp	r3, #1
 800824e:	d001      	beq.n	8008254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e021      	b.n	8008298 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f042 0201 	orr.w	r2, r2, #1
 800826a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	4b0c      	ldr	r3, [pc, #48]	; (80082a4 <HAL_TIM_Base_Start_IT+0x68>)
 8008274:	4013      	ands	r3, r2
 8008276:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b06      	cmp	r3, #6
 800827c:	d00b      	beq.n	8008296 <HAL_TIM_Base_Start_IT+0x5a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008284:	d007      	beq.n	8008296 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0201 	orr.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr
 80082a4:	00010007 	.word	0x00010007

080082a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d101      	bne.n	80082ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e049      	b.n	800834e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 f841 	bl	8008356 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	3304      	adds	r3, #4
 80082e4:	4619      	mov	r1, r3
 80082e6:	4610      	mov	r0, r2
 80082e8:	f000 fc00 	bl	8008aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2201      	movs	r2, #1
 8008348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
	...

0800836c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d109      	bne.n	8008390 <HAL_TIM_PWM_Start+0x24>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b01      	cmp	r3, #1
 8008386:	bf14      	ite	ne
 8008388:	2301      	movne	r3, #1
 800838a:	2300      	moveq	r3, #0
 800838c:	b2db      	uxtb	r3, r3
 800838e:	e03c      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b04      	cmp	r3, #4
 8008394:	d109      	bne.n	80083aa <HAL_TIM_PWM_Start+0x3e>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	bf14      	ite	ne
 80083a2:	2301      	movne	r3, #1
 80083a4:	2300      	moveq	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	e02f      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d109      	bne.n	80083c4 <HAL_TIM_PWM_Start+0x58>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	bf14      	ite	ne
 80083bc:	2301      	movne	r3, #1
 80083be:	2300      	moveq	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e022      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	2b0c      	cmp	r3, #12
 80083c8:	d109      	bne.n	80083de <HAL_TIM_PWM_Start+0x72>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	bf14      	ite	ne
 80083d6:	2301      	movne	r3, #1
 80083d8:	2300      	moveq	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	e015      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d109      	bne.n	80083f8 <HAL_TIM_PWM_Start+0x8c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	bf14      	ite	ne
 80083f0:	2301      	movne	r3, #1
 80083f2:	2300      	moveq	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	e008      	b.n	800840a <HAL_TIM_PWM_Start+0x9e>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b01      	cmp	r3, #1
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e06e      	b.n	80084f0 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0xb6>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008420:	e023      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d104      	bne.n	8008432 <HAL_TIM_PWM_Start+0xc6>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008430:	e01b      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d104      	bne.n	8008442 <HAL_TIM_PWM_Start+0xd6>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008440:	e013      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b0c      	cmp	r3, #12
 8008446:	d104      	bne.n	8008452 <HAL_TIM_PWM_Start+0xe6>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008450:	e00b      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	2b10      	cmp	r3, #16
 8008456:	d104      	bne.n	8008462 <HAL_TIM_PWM_Start+0xf6>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2202      	movs	r2, #2
 800845c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008460:	e003      	b.n	800846a <HAL_TIM_PWM_Start+0xfe>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2201      	movs	r2, #1
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	4618      	mov	r0, r3
 8008474:	f000 fea2 	bl	80091bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1e      	ldr	r2, [pc, #120]	; (80084f8 <HAL_TIM_PWM_Start+0x18c>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <HAL_TIM_PWM_Start+0x13e>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <HAL_TIM_PWM_Start+0x190>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d00e      	beq.n	80084aa <HAL_TIM_PWM_Start+0x13e>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1b      	ldr	r2, [pc, #108]	; (8008500 <HAL_TIM_PWM_Start+0x194>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <HAL_TIM_PWM_Start+0x13e>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1a      	ldr	r2, [pc, #104]	; (8008504 <HAL_TIM_PWM_Start+0x198>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_TIM_PWM_Start+0x13e>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a18      	ldr	r2, [pc, #96]	; (8008508 <HAL_TIM_PWM_Start+0x19c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d101      	bne.n	80084ae <HAL_TIM_PWM_Start+0x142>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <HAL_TIM_PWM_Start+0x144>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689a      	ldr	r2, [r3, #8]
 80084ca:	4b10      	ldr	r3, [pc, #64]	; (800850c <HAL_TIM_PWM_Start+0x1a0>)
 80084cc:	4013      	ands	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2b06      	cmp	r3, #6
 80084d4:	d00b      	beq.n	80084ee <HAL_TIM_PWM_Start+0x182>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084dc:	d007      	beq.n	80084ee <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f042 0201 	orr.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3710      	adds	r7, #16
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	40010000 	.word	0x40010000
 80084fc:	40010400 	.word	0x40010400
 8008500:	40014000 	.word	0x40014000
 8008504:	40014400 	.word	0x40014400
 8008508:	40014800 	.word	0x40014800
 800850c:	00010007 	.word	0x00010007

08008510 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b082      	sub	sp, #8
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2200      	movs	r2, #0
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fe4a 	bl	80091bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a3e      	ldr	r2, [pc, #248]	; (8008628 <HAL_TIM_PWM_Stop+0x118>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d013      	beq.n	800855a <HAL_TIM_PWM_Stop+0x4a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a3d      	ldr	r2, [pc, #244]	; (800862c <HAL_TIM_PWM_Stop+0x11c>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00e      	beq.n	800855a <HAL_TIM_PWM_Stop+0x4a>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a3b      	ldr	r2, [pc, #236]	; (8008630 <HAL_TIM_PWM_Stop+0x120>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d009      	beq.n	800855a <HAL_TIM_PWM_Stop+0x4a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3a      	ldr	r2, [pc, #232]	; (8008634 <HAL_TIM_PWM_Stop+0x124>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d004      	beq.n	800855a <HAL_TIM_PWM_Stop+0x4a>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a38      	ldr	r2, [pc, #224]	; (8008638 <HAL_TIM_PWM_Stop+0x128>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d101      	bne.n	800855e <HAL_TIM_PWM_Stop+0x4e>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <HAL_TIM_PWM_Stop+0x50>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d017      	beq.n	8008594 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a1a      	ldr	r2, [r3, #32]
 800856a:	f241 1311 	movw	r3, #4369	; 0x1111
 800856e:	4013      	ands	r3, r2
 8008570:	2b00      	cmp	r3, #0
 8008572:	d10f      	bne.n	8008594 <HAL_TIM_PWM_Stop+0x84>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	f240 4344 	movw	r3, #1092	; 0x444
 800857e:	4013      	ands	r3, r2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_TIM_PWM_Stop+0x84>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6a1a      	ldr	r2, [r3, #32]
 800859a:	f241 1311 	movw	r3, #4369	; 0x1111
 800859e:	4013      	ands	r3, r2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10f      	bne.n	80085c4 <HAL_TIM_PWM_Stop+0xb4>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a1a      	ldr	r2, [r3, #32]
 80085aa:	f240 4344 	movw	r3, #1092	; 0x444
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d107      	bne.n	80085c4 <HAL_TIM_PWM_Stop+0xb4>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0201 	bic.w	r2, r2, #1
 80085c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d104      	bne.n	80085d4 <HAL_TIM_PWM_Stop+0xc4>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d2:	e023      	b.n	800861c <HAL_TIM_PWM_Stop+0x10c>
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d104      	bne.n	80085e4 <HAL_TIM_PWM_Stop+0xd4>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e2:	e01b      	b.n	800861c <HAL_TIM_PWM_Stop+0x10c>
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d104      	bne.n	80085f4 <HAL_TIM_PWM_Stop+0xe4>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085f2:	e013      	b.n	800861c <HAL_TIM_PWM_Stop+0x10c>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b0c      	cmp	r3, #12
 80085f8:	d104      	bne.n	8008604 <HAL_TIM_PWM_Stop+0xf4>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008602:	e00b      	b.n	800861c <HAL_TIM_PWM_Stop+0x10c>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b10      	cmp	r3, #16
 8008608:	d104      	bne.n	8008614 <HAL_TIM_PWM_Stop+0x104>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008612:	e003      	b.n	800861c <HAL_TIM_PWM_Stop+0x10c>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	40010000 	.word	0x40010000
 800862c:	40010400 	.word	0x40010400
 8008630:	40014000 	.word	0x40014000
 8008634:	40014400 	.word	0x40014400
 8008638:	40014800 	.word	0x40014800

0800863c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b02      	cmp	r3, #2
 8008650:	d122      	bne.n	8008698 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d11b      	bne.n	8008698 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f06f 0202 	mvn.w	r2, #2
 8008668:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 0303 	and.w	r3, r3, #3
 800867a:	2b00      	cmp	r3, #0
 800867c:	d003      	beq.n	8008686 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fa16 	bl	8008ab0 <HAL_TIM_IC_CaptureCallback>
 8008684:	e005      	b.n	8008692 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa08 	bl	8008a9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fa19 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0304 	and.w	r3, r3, #4
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d122      	bne.n	80086ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f003 0304 	and.w	r3, r3, #4
 80086b0:	2b04      	cmp	r3, #4
 80086b2:	d11b      	bne.n	80086ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f06f 0204 	mvn.w	r2, #4
 80086bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2202      	movs	r2, #2
 80086c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699b      	ldr	r3, [r3, #24]
 80086ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d003      	beq.n	80086da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f9ec 	bl	8008ab0 <HAL_TIM_IC_CaptureCallback>
 80086d8:	e005      	b.n	80086e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f9de 	bl	8008a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f9ef 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d122      	bne.n	8008740 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b08      	cmp	r3, #8
 8008706:	d11b      	bne.n	8008740 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f06f 0208 	mvn.w	r2, #8
 8008710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2204      	movs	r2, #4
 8008716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	f003 0303 	and.w	r3, r3, #3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d003      	beq.n	800872e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 f9c2 	bl	8008ab0 <HAL_TIM_IC_CaptureCallback>
 800872c:	e005      	b.n	800873a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f9b4 	bl	8008a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f9c5 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	f003 0310 	and.w	r3, r3, #16
 800874a:	2b10      	cmp	r3, #16
 800874c:	d122      	bne.n	8008794 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b10      	cmp	r3, #16
 800875a:	d11b      	bne.n	8008794 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f06f 0210 	mvn.w	r2, #16
 8008764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2208      	movs	r2, #8
 800876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f998 	bl	8008ab0 <HAL_TIM_IC_CaptureCallback>
 8008780:	e005      	b.n	800878e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f98a 	bl	8008a9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f99b 	bl	8008ac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	f003 0301 	and.w	r3, r3, #1
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d10e      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d107      	bne.n	80087c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f06f 0201 	mvn.w	r2, #1
 80087b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f7f8 fdc4 	bl	8001348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d10e      	bne.n	80087ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087d8:	2b80      	cmp	r3, #128	; 0x80
 80087da:	d107      	bne.n	80087ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 fd96 	bl	8009318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087fa:	d10e      	bne.n	800881a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008806:	2b80      	cmp	r3, #128	; 0x80
 8008808:	d107      	bne.n	800881a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fd89 	bl	800932c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008824:	2b40      	cmp	r3, #64	; 0x40
 8008826:	d10e      	bne.n	8008846 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008832:	2b40      	cmp	r3, #64	; 0x40
 8008834:	d107      	bne.n	8008846 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f949 	bl	8008ad8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f003 0320 	and.w	r3, r3, #32
 8008850:	2b20      	cmp	r3, #32
 8008852:	d10e      	bne.n	8008872 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	f003 0320 	and.w	r3, r3, #32
 800885e:	2b20      	cmp	r3, #32
 8008860:	d107      	bne.n	8008872 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f06f 0220 	mvn.w	r2, #32
 800886a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 fd49 	bl	8009304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800888e:	2b01      	cmp	r3, #1
 8008890:	d101      	bne.n	8008896 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008892:	2302      	movs	r3, #2
 8008894:	e0fd      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x216>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b14      	cmp	r3, #20
 80088a2:	f200 80f0 	bhi.w	8008a86 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <HAL_TIM_PWM_ConfigChannel+0x30>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	08008901 	.word	0x08008901
 80088b0:	08008a87 	.word	0x08008a87
 80088b4:	08008a87 	.word	0x08008a87
 80088b8:	08008a87 	.word	0x08008a87
 80088bc:	08008941 	.word	0x08008941
 80088c0:	08008a87 	.word	0x08008a87
 80088c4:	08008a87 	.word	0x08008a87
 80088c8:	08008a87 	.word	0x08008a87
 80088cc:	08008983 	.word	0x08008983
 80088d0:	08008a87 	.word	0x08008a87
 80088d4:	08008a87 	.word	0x08008a87
 80088d8:	08008a87 	.word	0x08008a87
 80088dc:	080089c3 	.word	0x080089c3
 80088e0:	08008a87 	.word	0x08008a87
 80088e4:	08008a87 	.word	0x08008a87
 80088e8:	08008a87 	.word	0x08008a87
 80088ec:	08008a05 	.word	0x08008a05
 80088f0:	08008a87 	.word	0x08008a87
 80088f4:	08008a87 	.word	0x08008a87
 80088f8:	08008a87 	.word	0x08008a87
 80088fc:	08008a45 	.word	0x08008a45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68b9      	ldr	r1, [r7, #8]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f98a 	bl	8008c20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0204 	bic.w	r2, r2, #4
 800892a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6999      	ldr	r1, [r3, #24]
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	619a      	str	r2, [r3, #24]
      break;
 800893e:	e0a3      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68b9      	ldr	r1, [r7, #8]
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f9fa 	bl	8008d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	699a      	ldr	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6999      	ldr	r1, [r3, #24]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	021a      	lsls	r2, r3, #8
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	430a      	orrs	r2, r1
 800897e:	619a      	str	r2, [r3, #24]
      break;
 8008980:	e082      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	4618      	mov	r0, r3
 800898a:	f000 fa63 	bl	8008e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	69da      	ldr	r2, [r3, #28]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f042 0208 	orr.w	r2, r2, #8
 800899c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0204 	bic.w	r2, r2, #4
 80089ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69d9      	ldr	r1, [r3, #28]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	691a      	ldr	r2, [r3, #16]
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	61da      	str	r2, [r3, #28]
      break;
 80089c0:	e062      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f000 fac9 	bl	8008f60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	69da      	ldr	r2, [r3, #28]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69d9      	ldr	r1, [r3, #28]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	021a      	lsls	r2, r3, #8
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	61da      	str	r2, [r3, #28]
      break;
 8008a02:	e041      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68b9      	ldr	r1, [r7, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fb10 	bl	8009030 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f042 0208 	orr.w	r2, r2, #8
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0204 	bic.w	r2, r2, #4
 8008a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	691a      	ldr	r2, [r3, #16]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a42:	e021      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 fb52 	bl	80090f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	021a      	lsls	r2, r3, #8
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a84:	e000      	b.n	8008a88 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008a86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop

08008a9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a40      	ldr	r2, [pc, #256]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d013      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0a:	d00f      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	4a3d      	ldr	r2, [pc, #244]	; (8008c04 <TIM_Base_SetConfig+0x118>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d00b      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a3c      	ldr	r2, [pc, #240]	; (8008c08 <TIM_Base_SetConfig+0x11c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d007      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <TIM_Base_SetConfig+0x120>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d003      	beq.n	8008b2c <TIM_Base_SetConfig+0x40>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	4a3a      	ldr	r2, [pc, #232]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d108      	bne.n	8008b3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a2f      	ldr	r2, [pc, #188]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d01f      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4c:	d01b      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a2c      	ldr	r2, [pc, #176]	; (8008c04 <TIM_Base_SetConfig+0x118>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d017      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a2b      	ldr	r2, [pc, #172]	; (8008c08 <TIM_Base_SetConfig+0x11c>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d013      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a2a      	ldr	r2, [pc, #168]	; (8008c0c <TIM_Base_SetConfig+0x120>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00f      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a29      	ldr	r2, [pc, #164]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d00b      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a28      	ldr	r2, [pc, #160]	; (8008c14 <TIM_Base_SetConfig+0x128>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d007      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <TIM_Base_SetConfig+0x12c>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d003      	beq.n	8008b86 <TIM_Base_SetConfig+0x9a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a26      	ldr	r2, [pc, #152]	; (8008c1c <TIM_Base_SetConfig+0x130>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d108      	bne.n	8008b98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a10      	ldr	r2, [pc, #64]	; (8008c00 <TIM_Base_SetConfig+0x114>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d00f      	beq.n	8008be4 <TIM_Base_SetConfig+0xf8>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a12      	ldr	r2, [pc, #72]	; (8008c10 <TIM_Base_SetConfig+0x124>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00b      	beq.n	8008be4 <TIM_Base_SetConfig+0xf8>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <TIM_Base_SetConfig+0x128>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d007      	beq.n	8008be4 <TIM_Base_SetConfig+0xf8>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a10      	ldr	r2, [pc, #64]	; (8008c18 <TIM_Base_SetConfig+0x12c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0xf8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a0f      	ldr	r2, [pc, #60]	; (8008c1c <TIM_Base_SetConfig+0x130>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d103      	bne.n	8008bec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	691a      	ldr	r2, [r3, #16]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	615a      	str	r2, [r3, #20]
}
 8008bf2:	bf00      	nop
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40010400 	.word	0x40010400
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40014400 	.word	0x40014400
 8008c1c:	40014800 	.word	0x40014800

08008c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	f023 0201 	bic.w	r2, r3, #1
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a1b      	ldr	r3, [r3, #32]
 8008c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	4b37      	ldr	r3, [pc, #220]	; (8008d28 <TIM_OC1_SetConfig+0x108>)
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0303 	bic.w	r3, r3, #3
 8008c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f023 0302 	bic.w	r3, r3, #2
 8008c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	697a      	ldr	r2, [r7, #20]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a2d      	ldr	r2, [pc, #180]	; (8008d2c <TIM_OC1_SetConfig+0x10c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00f      	beq.n	8008c9c <TIM_OC1_SetConfig+0x7c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a2c      	ldr	r2, [pc, #176]	; (8008d30 <TIM_OC1_SetConfig+0x110>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00b      	beq.n	8008c9c <TIM_OC1_SetConfig+0x7c>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a2b      	ldr	r2, [pc, #172]	; (8008d34 <TIM_OC1_SetConfig+0x114>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d007      	beq.n	8008c9c <TIM_OC1_SetConfig+0x7c>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a2a      	ldr	r2, [pc, #168]	; (8008d38 <TIM_OC1_SetConfig+0x118>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_OC1_SetConfig+0x7c>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a29      	ldr	r2, [pc, #164]	; (8008d3c <TIM_OC1_SetConfig+0x11c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d10c      	bne.n	8008cb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	f023 0308 	bic.w	r3, r3, #8
 8008ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f023 0304 	bic.w	r3, r3, #4
 8008cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	; (8008d2c <TIM_OC1_SetConfig+0x10c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00f      	beq.n	8008cde <TIM_OC1_SetConfig+0xbe>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a1b      	ldr	r2, [pc, #108]	; (8008d30 <TIM_OC1_SetConfig+0x110>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d00b      	beq.n	8008cde <TIM_OC1_SetConfig+0xbe>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a1a      	ldr	r2, [pc, #104]	; (8008d34 <TIM_OC1_SetConfig+0x114>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d007      	beq.n	8008cde <TIM_OC1_SetConfig+0xbe>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a19      	ldr	r2, [pc, #100]	; (8008d38 <TIM_OC1_SetConfig+0x118>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d003      	beq.n	8008cde <TIM_OC1_SetConfig+0xbe>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a18      	ldr	r2, [pc, #96]	; (8008d3c <TIM_OC1_SetConfig+0x11c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d111      	bne.n	8008d02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	693a      	ldr	r2, [r7, #16]
 8008d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	621a      	str	r2, [r3, #32]
}
 8008d1c:	bf00      	nop
 8008d1e:	371c      	adds	r7, #28
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	fffeff8f 	.word	0xfffeff8f
 8008d2c:	40010000 	.word	0x40010000
 8008d30:	40010400 	.word	0x40010400
 8008d34:	40014000 	.word	0x40014000
 8008d38:	40014400 	.word	0x40014400
 8008d3c:	40014800 	.word	0x40014800

08008d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	f023 0210 	bic.w	r2, r3, #16
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <TIM_OC2_SetConfig+0xfc>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	021b      	lsls	r3, r3, #8
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	f023 0320 	bic.w	r3, r3, #32
 8008d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	011b      	lsls	r3, r3, #4
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a29      	ldr	r2, [pc, #164]	; (8008e40 <TIM_OC2_SetConfig+0x100>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d003      	beq.n	8008da8 <TIM_OC2_SetConfig+0x68>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a28      	ldr	r2, [pc, #160]	; (8008e44 <TIM_OC2_SetConfig+0x104>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d10d      	bne.n	8008dc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	4a1e      	ldr	r2, [pc, #120]	; (8008e40 <TIM_OC2_SetConfig+0x100>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d00f      	beq.n	8008dec <TIM_OC2_SetConfig+0xac>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a1d      	ldr	r2, [pc, #116]	; (8008e44 <TIM_OC2_SetConfig+0x104>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d00b      	beq.n	8008dec <TIM_OC2_SetConfig+0xac>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a1c      	ldr	r2, [pc, #112]	; (8008e48 <TIM_OC2_SetConfig+0x108>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d007      	beq.n	8008dec <TIM_OC2_SetConfig+0xac>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a1b      	ldr	r2, [pc, #108]	; (8008e4c <TIM_OC2_SetConfig+0x10c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d003      	beq.n	8008dec <TIM_OC2_SetConfig+0xac>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a1a      	ldr	r2, [pc, #104]	; (8008e50 <TIM_OC2_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d113      	bne.n	8008e14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	685a      	ldr	r2, [r3, #4]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	feff8fff 	.word	0xfeff8fff
 8008e40:	40010000 	.word	0x40010000
 8008e44:	40010400 	.word	0x40010400
 8008e48:	40014000 	.word	0x40014000
 8008e4c:	40014400 	.word	0x40014400
 8008e50:	40014800 	.word	0x40014800

08008e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	021b      	lsls	r3, r3, #8
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a27      	ldr	r2, [pc, #156]	; (8008f4c <TIM_OC3_SetConfig+0xf8>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d003      	beq.n	8008eba <TIM_OC3_SetConfig+0x66>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a26      	ldr	r2, [pc, #152]	; (8008f50 <TIM_OC3_SetConfig+0xfc>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d10d      	bne.n	8008ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	021b      	lsls	r3, r3, #8
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a1c      	ldr	r2, [pc, #112]	; (8008f4c <TIM_OC3_SetConfig+0xf8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00f      	beq.n	8008efe <TIM_OC3_SetConfig+0xaa>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a1b      	ldr	r2, [pc, #108]	; (8008f50 <TIM_OC3_SetConfig+0xfc>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00b      	beq.n	8008efe <TIM_OC3_SetConfig+0xaa>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1a      	ldr	r2, [pc, #104]	; (8008f54 <TIM_OC3_SetConfig+0x100>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d007      	beq.n	8008efe <TIM_OC3_SetConfig+0xaa>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a19      	ldr	r2, [pc, #100]	; (8008f58 <TIM_OC3_SetConfig+0x104>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d003      	beq.n	8008efe <TIM_OC3_SetConfig+0xaa>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a18      	ldr	r2, [pc, #96]	; (8008f5c <TIM_OC3_SetConfig+0x108>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d113      	bne.n	8008f26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	621a      	str	r2, [r3, #32]
}
 8008f40:	bf00      	nop
 8008f42:	371c      	adds	r7, #28
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	40010400 	.word	0x40010400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	40014400 	.word	0x40014400
 8008f5c:	40014800 	.word	0x40014800

08008f60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b087      	sub	sp, #28
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008faa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a18      	ldr	r2, [pc, #96]	; (800901c <TIM_OC4_SetConfig+0xbc>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00f      	beq.n	8008fe0 <TIM_OC4_SetConfig+0x80>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	4a17      	ldr	r2, [pc, #92]	; (8009020 <TIM_OC4_SetConfig+0xc0>)
 8008fc4:	4293      	cmp	r3, r2
 8008fc6:	d00b      	beq.n	8008fe0 <TIM_OC4_SetConfig+0x80>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a16      	ldr	r2, [pc, #88]	; (8009024 <TIM_OC4_SetConfig+0xc4>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d007      	beq.n	8008fe0 <TIM_OC4_SetConfig+0x80>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a15      	ldr	r2, [pc, #84]	; (8009028 <TIM_OC4_SetConfig+0xc8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_OC4_SetConfig+0x80>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a14      	ldr	r2, [pc, #80]	; (800902c <TIM_OC4_SetConfig+0xcc>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d109      	bne.n	8008ff4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fe6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	019b      	lsls	r3, r3, #6
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	693a      	ldr	r2, [r7, #16]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40010000 	.word	0x40010000
 8009020:	40010400 	.word	0x40010400
 8009024:	40014000 	.word	0x40014000
 8009028:	40014400 	.word	0x40014400
 800902c:	40014800 	.word	0x40014800

08009030 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009070:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	041b      	lsls	r3, r3, #16
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a17      	ldr	r2, [pc, #92]	; (80090e0 <TIM_OC5_SetConfig+0xb0>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d00f      	beq.n	80090a6 <TIM_OC5_SetConfig+0x76>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a16      	ldr	r2, [pc, #88]	; (80090e4 <TIM_OC5_SetConfig+0xb4>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d00b      	beq.n	80090a6 <TIM_OC5_SetConfig+0x76>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a15      	ldr	r2, [pc, #84]	; (80090e8 <TIM_OC5_SetConfig+0xb8>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d007      	beq.n	80090a6 <TIM_OC5_SetConfig+0x76>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	4a14      	ldr	r2, [pc, #80]	; (80090ec <TIM_OC5_SetConfig+0xbc>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d003      	beq.n	80090a6 <TIM_OC5_SetConfig+0x76>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a13      	ldr	r2, [pc, #76]	; (80090f0 <TIM_OC5_SetConfig+0xc0>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d109      	bne.n	80090ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	021b      	lsls	r3, r3, #8
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	697a      	ldr	r2, [r7, #20]
 80090be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	685a      	ldr	r2, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	621a      	str	r2, [r3, #32]
}
 80090d4:	bf00      	nop
 80090d6:	371c      	adds	r7, #28
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	40010000 	.word	0x40010000
 80090e4:	40010400 	.word	0x40010400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40014400 	.word	0x40014400
 80090f0:	40014800 	.word	0x40014800

080090f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	021b      	lsls	r3, r3, #8
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	4313      	orrs	r3, r2
 800912e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	051b      	lsls	r3, r3, #20
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a18      	ldr	r2, [pc, #96]	; (80091a8 <TIM_OC6_SetConfig+0xb4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00f      	beq.n	800916c <TIM_OC6_SetConfig+0x78>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a17      	ldr	r2, [pc, #92]	; (80091ac <TIM_OC6_SetConfig+0xb8>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d00b      	beq.n	800916c <TIM_OC6_SetConfig+0x78>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a16      	ldr	r2, [pc, #88]	; (80091b0 <TIM_OC6_SetConfig+0xbc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d007      	beq.n	800916c <TIM_OC6_SetConfig+0x78>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a15      	ldr	r2, [pc, #84]	; (80091b4 <TIM_OC6_SetConfig+0xc0>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d003      	beq.n	800916c <TIM_OC6_SetConfig+0x78>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a14      	ldr	r2, [pc, #80]	; (80091b8 <TIM_OC6_SetConfig+0xc4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d109      	bne.n	8009180 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009172:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	029b      	lsls	r3, r3, #10
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	4313      	orrs	r3, r2
 800917e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40010000 	.word	0x40010000
 80091ac:	40010400 	.word	0x40010400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40014400 	.word	0x40014400
 80091b8:	40014800 	.word	0x40014800

080091bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 031f 	and.w	r3, r3, #31
 80091ce:	2201      	movs	r2, #1
 80091d0:	fa02 f303 	lsl.w	r3, r2, r3
 80091d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1a      	ldr	r2, [r3, #32]
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	43db      	mvns	r3, r3
 80091de:	401a      	ands	r2, r3
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1a      	ldr	r2, [r3, #32]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 031f 	and.w	r3, r3, #31
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	fa01 f303 	lsl.w	r3, r1, r3
 80091f4:	431a      	orrs	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	621a      	str	r2, [r3, #32]
}
 80091fa:	bf00      	nop
 80091fc:	371c      	adds	r7, #28
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009212:	2300      	movs	r3, #0
 8009214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921c:	2b01      	cmp	r3, #1
 800921e:	d101      	bne.n	8009224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009220:	2302      	movs	r3, #2
 8009222:	e065      	b.n	80092f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2201      	movs	r2, #1
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	4313      	orrs	r3, r2
 800927e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	4313      	orrs	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	041b      	lsls	r3, r3, #16
 800929a:	4313      	orrs	r3, r2
 800929c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a16      	ldr	r2, [pc, #88]	; (80092fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d004      	beq.n	80092b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a14      	ldr	r2, [pc, #80]	; (8009300 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d115      	bne.n	80092de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	051b      	lsls	r3, r3, #20
 80092be:	4313      	orrs	r3, r2
 80092c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	69db      	ldr	r3, [r3, #28]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3714      	adds	r7, #20
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	40010000 	.word	0x40010000
 8009300:	40010400 	.word	0x40010400

08009304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009304:	b480      	push	{r7}
 8009306:	b083      	sub	sp, #12
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009334:	bf00      	nop
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e042      	b.n	80093d8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009358:	2b00      	cmp	r3, #0
 800935a:	d106      	bne.n	800936a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f7f8 f8f9 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2224      	movs	r2, #36	; 0x24
 800936e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0201 	bic.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f992 	bl	80096ac <UART_SetConfig>
 8009388:	4603      	mov	r3, r0
 800938a:	2b01      	cmp	r3, #1
 800938c:	d101      	bne.n	8009392 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e022      	b.n	80093d8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009396:	2b00      	cmp	r3, #0
 8009398:	d002      	beq.n	80093a0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 ff36 	bl	800a20c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0201 	orr.w	r2, r2, #1
 80093ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 ffbd 	bl	800a350 <UART_CheckIdleState>
 80093d6:	4603      	mov	r3, r0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08a      	sub	sp, #40	; 0x28
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	603b      	str	r3, [r7, #0]
 80093ec:	4613      	mov	r3, r2
 80093ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	f040 8083 	bne.w	8009502 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <HAL_UART_Transmit+0x28>
 8009402:	88fb      	ldrh	r3, [r7, #6]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	e07b      	b.n	8009504 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009412:	2b01      	cmp	r3, #1
 8009414:	d101      	bne.n	800941a <HAL_UART_Transmit+0x3a>
 8009416:	2302      	movs	r3, #2
 8009418:	e074      	b.n	8009504 <HAL_UART_Transmit+0x124>
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2221      	movs	r2, #33	; 0x21
 800942e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009432:	f7f8 fb0d 	bl	8001a50 <HAL_GetTick>
 8009436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	88fa      	ldrh	r2, [r7, #6]
 800943c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	88fa      	ldrh	r2, [r7, #6]
 8009444:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	689b      	ldr	r3, [r3, #8]
 800944c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009450:	d108      	bne.n	8009464 <HAL_UART_Transmit+0x84>
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d104      	bne.n	8009464 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800945a:	2300      	movs	r3, #0
 800945c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	61bb      	str	r3, [r7, #24]
 8009462:	e003      	b.n	800946c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8009474:	e02c      	b.n	80094d0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	697b      	ldr	r3, [r7, #20]
 800947c:	2200      	movs	r2, #0
 800947e:	2180      	movs	r1, #128	; 0x80
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f000 ffad 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e039      	b.n	8009504 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009490:	69fb      	ldr	r3, [r7, #28]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10b      	bne.n	80094ae <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	3302      	adds	r3, #2
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	e007      	b.n	80094be <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	781a      	ldrb	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	3301      	adds	r3, #1
 80094bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1cc      	bne.n	8009476 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2200      	movs	r2, #0
 80094e4:	2140      	movs	r1, #64	; 0x40
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	f000 ff7a 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e006      	b.n	8009504 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e000      	b.n	8009504 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009502:	2302      	movs	r3, #2
  }
}
 8009504:	4618      	mov	r0, r3
 8009506:	3720      	adds	r7, #32
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}

0800950c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b08a      	sub	sp, #40	; 0x28
 8009510:	af02      	add	r7, sp, #8
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	4613      	mov	r3, r2
 800951a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	2b20      	cmp	r3, #32
 8009524:	f040 80bd 	bne.w	80096a2 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <HAL_UART_Receive+0x28>
 800952e:	88fb      	ldrh	r3, [r7, #6]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0b5      	b.n	80096a4 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <HAL_UART_Receive+0x3a>
 8009542:	2302      	movs	r3, #2
 8009544:	e0ae      	b.n	80096a4 <HAL_UART_Receive+0x198>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2200      	movs	r2, #0
 8009552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2222      	movs	r2, #34	; 0x22
 800955a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800955e:	f7f8 fa77 	bl	8001a50 <HAL_GetTick>
 8009562:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	88fa      	ldrh	r2, [r7, #6]
 8009570:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800957c:	d10e      	bne.n	800959c <HAL_UART_Receive+0x90>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d105      	bne.n	8009592 <HAL_UART_Receive+0x86>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f240 12ff 	movw	r2, #511	; 0x1ff
 800958c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009590:	e02d      	b.n	80095ee <HAL_UART_Receive+0xe2>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	22ff      	movs	r2, #255	; 0xff
 8009596:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800959a:	e028      	b.n	80095ee <HAL_UART_Receive+0xe2>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <HAL_UART_Receive+0xb4>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d104      	bne.n	80095b6 <HAL_UART_Receive+0xaa>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	22ff      	movs	r2, #255	; 0xff
 80095b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095b4:	e01b      	b.n	80095ee <HAL_UART_Receive+0xe2>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	227f      	movs	r2, #127	; 0x7f
 80095ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095be:	e016      	b.n	80095ee <HAL_UART_Receive+0xe2>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095c8:	d10d      	bne.n	80095e6 <HAL_UART_Receive+0xda>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d104      	bne.n	80095dc <HAL_UART_Receive+0xd0>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	227f      	movs	r2, #127	; 0x7f
 80095d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095da:	e008      	b.n	80095ee <HAL_UART_Receive+0xe2>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	223f      	movs	r2, #63	; 0x3f
 80095e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80095e4:	e003      	b.n	80095ee <HAL_UART_Receive+0xe2>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fe:	d108      	bne.n	8009612 <HAL_UART_Receive+0x106>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d104      	bne.n	8009612 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8009608:	2300      	movs	r3, #0
 800960a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	61bb      	str	r3, [r7, #24]
 8009610:	e003      	b.n	800961a <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2200      	movs	r2, #0
 800961e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009622:	e032      	b.n	800968a <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	2200      	movs	r2, #0
 800962c:	2120      	movs	r1, #32
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 fed6 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 8009634:	4603      	mov	r3, r0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d001      	beq.n	800963e <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e032      	b.n	80096a4 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10c      	bne.n	800965e <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	b29a      	uxth	r2, r3
 800964c:	8a7b      	ldrh	r3, [r7, #18]
 800964e:	4013      	ands	r3, r2
 8009650:	b29a      	uxth	r2, r3
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	3302      	adds	r3, #2
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	e00c      	b.n	8009678 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009664:	b2da      	uxtb	r2, r3
 8009666:	8a7b      	ldrh	r3, [r7, #18]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	4013      	ands	r3, r2
 800966c:	b2da      	uxtb	r2, r3
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	3301      	adds	r3, #1
 8009676:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800967e:	b29b      	uxth	r3, r3
 8009680:	3b01      	subs	r3, #1
 8009682:	b29a      	uxth	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1c6      	bne.n	8009624 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	e000      	b.n	80096a4 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80096a2:	2302      	movs	r3, #2
  }
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3720      	adds	r7, #32
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096ac:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80096b0:	b08e      	sub	sp, #56	; 0x38
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	431a      	orrs	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096da:	4313      	orrs	r3, r2
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4bc1      	ldr	r3, [pc, #772]	; (80099ec <UART_SetConfig+0x340>)
 80096e6:	4013      	ands	r3, r2
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6812      	ldr	r2, [r2, #0]
 80096ec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80096ee:	430b      	orrs	r3, r1
 80096f0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	430a      	orrs	r2, r1
 8009706:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	699b      	ldr	r3, [r3, #24]
 800970c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4ab7      	ldr	r2, [pc, #732]	; (80099f0 <UART_SetConfig+0x344>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d004      	beq.n	8009722 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a1b      	ldr	r3, [r3, #32]
 800971c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800971e:	4313      	orrs	r3, r2
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	4bb2      	ldr	r3, [pc, #712]	; (80099f4 <UART_SetConfig+0x348>)
 800972a:	4013      	ands	r3, r2
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	6812      	ldr	r2, [r2, #0]
 8009730:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009732:	430b      	orrs	r3, r1
 8009734:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	f023 010f 	bic.w	r1, r3, #15
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	430a      	orrs	r2, r1
 800974a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4aa9      	ldr	r2, [pc, #676]	; (80099f8 <UART_SetConfig+0x34c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d177      	bne.n	8009846 <UART_SetConfig+0x19a>
 8009756:	4ba9      	ldr	r3, [pc, #676]	; (80099fc <UART_SetConfig+0x350>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800975e:	2b28      	cmp	r3, #40	; 0x28
 8009760:	d86c      	bhi.n	800983c <UART_SetConfig+0x190>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0xbc>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	0800980d 	.word	0x0800980d
 800976c:	0800983d 	.word	0x0800983d
 8009770:	0800983d 	.word	0x0800983d
 8009774:	0800983d 	.word	0x0800983d
 8009778:	0800983d 	.word	0x0800983d
 800977c:	0800983d 	.word	0x0800983d
 8009780:	0800983d 	.word	0x0800983d
 8009784:	0800983d 	.word	0x0800983d
 8009788:	08009815 	.word	0x08009815
 800978c:	0800983d 	.word	0x0800983d
 8009790:	0800983d 	.word	0x0800983d
 8009794:	0800983d 	.word	0x0800983d
 8009798:	0800983d 	.word	0x0800983d
 800979c:	0800983d 	.word	0x0800983d
 80097a0:	0800983d 	.word	0x0800983d
 80097a4:	0800983d 	.word	0x0800983d
 80097a8:	0800981d 	.word	0x0800981d
 80097ac:	0800983d 	.word	0x0800983d
 80097b0:	0800983d 	.word	0x0800983d
 80097b4:	0800983d 	.word	0x0800983d
 80097b8:	0800983d 	.word	0x0800983d
 80097bc:	0800983d 	.word	0x0800983d
 80097c0:	0800983d 	.word	0x0800983d
 80097c4:	0800983d 	.word	0x0800983d
 80097c8:	08009825 	.word	0x08009825
 80097cc:	0800983d 	.word	0x0800983d
 80097d0:	0800983d 	.word	0x0800983d
 80097d4:	0800983d 	.word	0x0800983d
 80097d8:	0800983d 	.word	0x0800983d
 80097dc:	0800983d 	.word	0x0800983d
 80097e0:	0800983d 	.word	0x0800983d
 80097e4:	0800983d 	.word	0x0800983d
 80097e8:	0800982d 	.word	0x0800982d
 80097ec:	0800983d 	.word	0x0800983d
 80097f0:	0800983d 	.word	0x0800983d
 80097f4:	0800983d 	.word	0x0800983d
 80097f8:	0800983d 	.word	0x0800983d
 80097fc:	0800983d 	.word	0x0800983d
 8009800:	0800983d 	.word	0x0800983d
 8009804:	0800983d 	.word	0x0800983d
 8009808:	08009835 	.word	0x08009835
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e233      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009814:	2304      	movs	r3, #4
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e22f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800981c:	2308      	movs	r3, #8
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e22b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009824:	2310      	movs	r3, #16
 8009826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800982a:	e227      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800982c:	2320      	movs	r3, #32
 800982e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009832:	e223      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009834:	2340      	movs	r3, #64	; 0x40
 8009836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800983a:	e21f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800983c:	2380      	movs	r3, #128	; 0x80
 800983e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009842:	bf00      	nop
 8009844:	e21a      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a6d      	ldr	r2, [pc, #436]	; (8009a00 <UART_SetConfig+0x354>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d132      	bne.n	80098b6 <UART_SetConfig+0x20a>
 8009850:	4b6a      	ldr	r3, [pc, #424]	; (80099fc <UART_SetConfig+0x350>)
 8009852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	2b05      	cmp	r3, #5
 800985a:	d827      	bhi.n	80098ac <UART_SetConfig+0x200>
 800985c:	a201      	add	r2, pc, #4	; (adr r2, 8009864 <UART_SetConfig+0x1b8>)
 800985e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009862:	bf00      	nop
 8009864:	0800987d 	.word	0x0800987d
 8009868:	08009885 	.word	0x08009885
 800986c:	0800988d 	.word	0x0800988d
 8009870:	08009895 	.word	0x08009895
 8009874:	0800989d 	.word	0x0800989d
 8009878:	080098a5 	.word	0x080098a5
 800987c:	2300      	movs	r3, #0
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e1fb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009884:	2304      	movs	r3, #4
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e1f7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800988c:	2308      	movs	r3, #8
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e1f3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009894:	2310      	movs	r3, #16
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e1ef      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800989c:	2320      	movs	r3, #32
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e1eb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098aa:	e1e7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098ac:	2380      	movs	r3, #128	; 0x80
 80098ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b2:	bf00      	nop
 80098b4:	e1e2      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a52      	ldr	r2, [pc, #328]	; (8009a04 <UART_SetConfig+0x358>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d132      	bne.n	8009926 <UART_SetConfig+0x27a>
 80098c0:	4b4e      	ldr	r3, [pc, #312]	; (80099fc <UART_SetConfig+0x350>)
 80098c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	2b05      	cmp	r3, #5
 80098ca:	d827      	bhi.n	800991c <UART_SetConfig+0x270>
 80098cc:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <UART_SetConfig+0x228>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	080098ed 	.word	0x080098ed
 80098d8:	080098f5 	.word	0x080098f5
 80098dc:	080098fd 	.word	0x080098fd
 80098e0:	08009905 	.word	0x08009905
 80098e4:	0800990d 	.word	0x0800990d
 80098e8:	08009915 	.word	0x08009915
 80098ec:	2300      	movs	r3, #0
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e1c3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098f4:	2304      	movs	r3, #4
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e1bf      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80098fc:	2308      	movs	r3, #8
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e1bb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009904:	2310      	movs	r3, #16
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e1b7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800990c:	2320      	movs	r3, #32
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e1b3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e1af      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	bf00      	nop
 8009924:	e1aa      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a37      	ldr	r2, [pc, #220]	; (8009a08 <UART_SetConfig+0x35c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d132      	bne.n	8009996 <UART_SetConfig+0x2ea>
 8009930:	4b32      	ldr	r3, [pc, #200]	; (80099fc <UART_SetConfig+0x350>)
 8009932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	2b05      	cmp	r3, #5
 800993a:	d827      	bhi.n	800998c <UART_SetConfig+0x2e0>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0x298>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	0800995d 	.word	0x0800995d
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e18b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e187      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e183      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e17f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e17b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e177      	b.n	8009c7c <UART_SetConfig+0x5d0>
 800998c:	2380      	movs	r3, #128	; 0x80
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	bf00      	nop
 8009994:	e172      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1c      	ldr	r2, [pc, #112]	; (8009a0c <UART_SetConfig+0x360>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d144      	bne.n	8009a2a <UART_SetConfig+0x37e>
 80099a0:	4b16      	ldr	r3, [pc, #88]	; (80099fc <UART_SetConfig+0x350>)
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	d839      	bhi.n	8009a20 <UART_SetConfig+0x374>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x308>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	08009a11 	.word	0x08009a11
 80099c8:	08009a19 	.word	0x08009a19
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e153      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e14f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e14b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e147      	b.n	8009c7c <UART_SetConfig+0x5d0>
 80099ec:	cfff69f3 	.word	0xcfff69f3
 80099f0:	58000c00 	.word	0x58000c00
 80099f4:	11fff4ff 	.word	0x11fff4ff
 80099f8:	40011000 	.word	0x40011000
 80099fc:	58024400 	.word	0x58024400
 8009a00:	40004400 	.word	0x40004400
 8009a04:	40004800 	.word	0x40004800
 8009a08:	40004c00 	.word	0x40004c00
 8009a0c:	40005000 	.word	0x40005000
 8009a10:	2320      	movs	r3, #32
 8009a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a16:	e131      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a18:	2340      	movs	r3, #64	; 0x40
 8009a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1e:	e12d      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a20:	2380      	movs	r3, #128	; 0x80
 8009a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a26:	bf00      	nop
 8009a28:	e128      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4ab6      	ldr	r2, [pc, #728]	; (8009d08 <UART_SetConfig+0x65c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d178      	bne.n	8009b26 <UART_SetConfig+0x47a>
 8009a34:	4bb5      	ldr	r3, [pc, #724]	; (8009d0c <UART_SetConfig+0x660>)
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a3c:	2b28      	cmp	r3, #40	; 0x28
 8009a3e:	d86d      	bhi.n	8009b1c <UART_SetConfig+0x470>
 8009a40:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0x39c>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009aed 	.word	0x08009aed
 8009a4c:	08009b1d 	.word	0x08009b1d
 8009a50:	08009b1d 	.word	0x08009b1d
 8009a54:	08009b1d 	.word	0x08009b1d
 8009a58:	08009b1d 	.word	0x08009b1d
 8009a5c:	08009b1d 	.word	0x08009b1d
 8009a60:	08009b1d 	.word	0x08009b1d
 8009a64:	08009b1d 	.word	0x08009b1d
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009b1d 	.word	0x08009b1d
 8009a70:	08009b1d 	.word	0x08009b1d
 8009a74:	08009b1d 	.word	0x08009b1d
 8009a78:	08009b1d 	.word	0x08009b1d
 8009a7c:	08009b1d 	.word	0x08009b1d
 8009a80:	08009b1d 	.word	0x08009b1d
 8009a84:	08009b1d 	.word	0x08009b1d
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009b1d 	.word	0x08009b1d
 8009a90:	08009b1d 	.word	0x08009b1d
 8009a94:	08009b1d 	.word	0x08009b1d
 8009a98:	08009b1d 	.word	0x08009b1d
 8009a9c:	08009b1d 	.word	0x08009b1d
 8009aa0:	08009b1d 	.word	0x08009b1d
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b1d 	.word	0x08009b1d
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009b1d 	.word	0x08009b1d
 8009ac0:	08009b1d 	.word	0x08009b1d
 8009ac4:	08009b1d 	.word	0x08009b1d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b1d 	.word	0x08009b1d
 8009ad0:	08009b1d 	.word	0x08009b1d
 8009ad4:	08009b1d 	.word	0x08009b1d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b1d 	.word	0x08009b1d
 8009ae0:	08009b1d 	.word	0x08009b1d
 8009ae4:	08009b1d 	.word	0x08009b1d
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af2:	e0c3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afa:	e0bf      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b02:	e0bb      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b0a:	e0b7      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b12:	e0b3      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b1a:	e0af      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b22:	bf00      	nop
 8009b24:	e0aa      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a79      	ldr	r2, [pc, #484]	; (8009d10 <UART_SetConfig+0x664>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d132      	bne.n	8009b96 <UART_SetConfig+0x4ea>
 8009b30:	4b76      	ldr	r3, [pc, #472]	; (8009d0c <UART_SetConfig+0x660>)
 8009b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b34:	f003 0307 	and.w	r3, r3, #7
 8009b38:	2b05      	cmp	r3, #5
 8009b3a:	d827      	bhi.n	8009b8c <UART_SetConfig+0x4e0>
 8009b3c:	a201      	add	r2, pc, #4	; (adr r2, 8009b44 <UART_SetConfig+0x498>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b5d 	.word	0x08009b5d
 8009b48:	08009b65 	.word	0x08009b65
 8009b4c:	08009b6d 	.word	0x08009b6d
 8009b50:	08009b75 	.word	0x08009b75
 8009b54:	08009b7d 	.word	0x08009b7d
 8009b58:	08009b85 	.word	0x08009b85
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b62:	e08b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b64:	2304      	movs	r3, #4
 8009b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6a:	e087      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b6c:	2308      	movs	r3, #8
 8009b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b72:	e083      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b74:	2310      	movs	r3, #16
 8009b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b7a:	e07f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b82:	e07b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b84:	2340      	movs	r3, #64	; 0x40
 8009b86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8a:	e077      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b8c:	2380      	movs	r3, #128	; 0x80
 8009b8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b92:	bf00      	nop
 8009b94:	e072      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a5e      	ldr	r2, [pc, #376]	; (8009d14 <UART_SetConfig+0x668>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d132      	bne.n	8009c06 <UART_SetConfig+0x55a>
 8009ba0:	4b5a      	ldr	r3, [pc, #360]	; (8009d0c <UART_SetConfig+0x660>)
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba4:	f003 0307 	and.w	r3, r3, #7
 8009ba8:	2b05      	cmp	r3, #5
 8009baa:	d827      	bhi.n	8009bfc <UART_SetConfig+0x550>
 8009bac:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0x508>)
 8009bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb2:	bf00      	nop
 8009bb4:	08009bcd 	.word	0x08009bcd
 8009bb8:	08009bd5 	.word	0x08009bd5
 8009bbc:	08009bdd 	.word	0x08009bdd
 8009bc0:	08009be5 	.word	0x08009be5
 8009bc4:	08009bed 	.word	0x08009bed
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e053      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e04f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e04b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e047      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e043      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e03f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	bf00      	nop
 8009c04:	e03a      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a43      	ldr	r2, [pc, #268]	; (8009d18 <UART_SetConfig+0x66c>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d132      	bne.n	8009c76 <UART_SetConfig+0x5ca>
 8009c10:	4b3e      	ldr	r3, [pc, #248]	; (8009d0c <UART_SetConfig+0x660>)
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	2b05      	cmp	r3, #5
 8009c1a:	d827      	bhi.n	8009c6c <UART_SetConfig+0x5c0>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x578>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e01b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e017      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e013      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e00f      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e00b      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e007      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	bf00      	nop
 8009c74:	e002      	b.n	8009c7c <UART_SetConfig+0x5d0>
 8009c76:	2380      	movs	r3, #128	; 0x80
 8009c78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a25      	ldr	r2, [pc, #148]	; (8009d18 <UART_SetConfig+0x66c>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f040 80b8 	bne.w	8009df8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d019      	beq.n	8009cc4 <UART_SetConfig+0x618>
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	dc04      	bgt.n	8009c9e <UART_SetConfig+0x5f2>
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d009      	beq.n	8009cac <UART_SetConfig+0x600>
 8009c98:	2b04      	cmp	r3, #4
 8009c9a:	d00b      	beq.n	8009cb4 <UART_SetConfig+0x608>
 8009c9c:	e042      	b.n	8009d24 <UART_SetConfig+0x678>
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d02b      	beq.n	8009cfa <UART_SetConfig+0x64e>
 8009ca2:	2b40      	cmp	r3, #64	; 0x40
 8009ca4:	d02c      	beq.n	8009d00 <UART_SetConfig+0x654>
 8009ca6:	2b10      	cmp	r3, #16
 8009ca8:	d014      	beq.n	8009cd4 <UART_SetConfig+0x628>
 8009caa:	e03b      	b.n	8009d24 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cac:	f7fc f954 	bl	8005f58 <HAL_RCCEx_GetD3PCLK1Freq>
 8009cb0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009cb2:	e03d      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fc f963 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cc2:	e035      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7fc faa7 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cd2:	e02d      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	; (8009d0c <UART_SetConfig+0x660>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f003 0320 	and.w	r3, r3, #32
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d009      	beq.n	8009cf4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ce0:	4b0a      	ldr	r3, [pc, #40]	; (8009d0c <UART_SetConfig+0x660>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	08db      	lsrs	r3, r3, #3
 8009ce6:	f003 0303 	and.w	r3, r3, #3
 8009cea:	4a0c      	ldr	r2, [pc, #48]	; (8009d1c <UART_SetConfig+0x670>)
 8009cec:	fa22 f303 	lsr.w	r3, r2, r3
 8009cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009cf2:	e01d      	b.n	8009d30 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <UART_SetConfig+0x670>)
 8009cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf8:	e01a      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009cfa:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <UART_SetConfig+0x674>)
 8009cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cfe:	e017      	b.n	8009d30 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d06:	e013      	b.n	8009d30 <UART_SetConfig+0x684>
 8009d08:	40011400 	.word	0x40011400
 8009d0c:	58024400 	.word	0x58024400
 8009d10:	40007800 	.word	0x40007800
 8009d14:	40007c00 	.word	0x40007c00
 8009d18:	58000c00 	.word	0x58000c00
 8009d1c:	03d09000 	.word	0x03d09000
 8009d20:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009d24:	2300      	movs	r3, #0
 8009d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 824d 	beq.w	800a1d2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	4aad      	ldr	r2, [pc, #692]	; (8009ff4 <UART_SetConfig+0x948>)
 8009d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d4a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685a      	ldr	r2, [r3, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	4413      	add	r3, r2
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d305      	bcc.n	8009d68 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d62:	6a3a      	ldr	r2, [r7, #32]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d903      	bls.n	8009d70 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d6e:	e230      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	4618      	mov	r0, r3
 8009d74:	f04f 0100 	mov.w	r1, #0
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	4a9d      	ldr	r2, [pc, #628]	; (8009ff4 <UART_SetConfig+0x948>)
 8009d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f04f 0400 	mov.w	r4, #0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	4623      	mov	r3, r4
 8009d8c:	f7f6 fab0 	bl	80002f0 <__aeabi_uldivmod>
 8009d90:	4603      	mov	r3, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	4619      	mov	r1, r3
 8009d96:	4622      	mov	r2, r4
 8009d98:	f04f 0300 	mov.w	r3, #0
 8009d9c:	f04f 0400 	mov.w	r4, #0
 8009da0:	0214      	lsls	r4, r2, #8
 8009da2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009da6:	020b      	lsls	r3, r1, #8
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	6852      	ldr	r2, [r2, #4]
 8009dac:	0852      	lsrs	r2, r2, #1
 8009dae:	4611      	mov	r1, r2
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	eb13 0b01 	adds.w	fp, r3, r1
 8009db8:	eb44 0c02 	adc.w	ip, r4, r2
 8009dbc:	4658      	mov	r0, fp
 8009dbe:	4661      	mov	r1, ip
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f04f 0400 	mov.w	r4, #0
 8009dc8:	461a      	mov	r2, r3
 8009dca:	4623      	mov	r3, r4
 8009dcc:	f7f6 fa90 	bl	80002f0 <__aeabi_uldivmod>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ddc:	d308      	bcc.n	8009df0 <UART_SetConfig+0x744>
 8009dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009de4:	d204      	bcs.n	8009df0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dec:	60da      	str	r2, [r3, #12]
 8009dee:	e1f0      	b.n	800a1d2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
 8009df2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009df6:	e1ec      	b.n	800a1d2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e00:	f040 8100 	bne.w	800a004 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009e04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e08:	2b40      	cmp	r3, #64	; 0x40
 8009e0a:	f200 80b7 	bhi.w	8009f7c <UART_SetConfig+0x8d0>
 8009e0e:	a201      	add	r2, pc, #4	; (adr r2, 8009e14 <UART_SetConfig+0x768>)
 8009e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e14:	08009f19 	.word	0x08009f19
 8009e18:	08009f21 	.word	0x08009f21
 8009e1c:	08009f7d 	.word	0x08009f7d
 8009e20:	08009f7d 	.word	0x08009f7d
 8009e24:	08009f29 	.word	0x08009f29
 8009e28:	08009f7d 	.word	0x08009f7d
 8009e2c:	08009f7d 	.word	0x08009f7d
 8009e30:	08009f7d 	.word	0x08009f7d
 8009e34:	08009f39 	.word	0x08009f39
 8009e38:	08009f7d 	.word	0x08009f7d
 8009e3c:	08009f7d 	.word	0x08009f7d
 8009e40:	08009f7d 	.word	0x08009f7d
 8009e44:	08009f7d 	.word	0x08009f7d
 8009e48:	08009f7d 	.word	0x08009f7d
 8009e4c:	08009f7d 	.word	0x08009f7d
 8009e50:	08009f7d 	.word	0x08009f7d
 8009e54:	08009f49 	.word	0x08009f49
 8009e58:	08009f7d 	.word	0x08009f7d
 8009e5c:	08009f7d 	.word	0x08009f7d
 8009e60:	08009f7d 	.word	0x08009f7d
 8009e64:	08009f7d 	.word	0x08009f7d
 8009e68:	08009f7d 	.word	0x08009f7d
 8009e6c:	08009f7d 	.word	0x08009f7d
 8009e70:	08009f7d 	.word	0x08009f7d
 8009e74:	08009f7d 	.word	0x08009f7d
 8009e78:	08009f7d 	.word	0x08009f7d
 8009e7c:	08009f7d 	.word	0x08009f7d
 8009e80:	08009f7d 	.word	0x08009f7d
 8009e84:	08009f7d 	.word	0x08009f7d
 8009e88:	08009f7d 	.word	0x08009f7d
 8009e8c:	08009f7d 	.word	0x08009f7d
 8009e90:	08009f7d 	.word	0x08009f7d
 8009e94:	08009f6f 	.word	0x08009f6f
 8009e98:	08009f7d 	.word	0x08009f7d
 8009e9c:	08009f7d 	.word	0x08009f7d
 8009ea0:	08009f7d 	.word	0x08009f7d
 8009ea4:	08009f7d 	.word	0x08009f7d
 8009ea8:	08009f7d 	.word	0x08009f7d
 8009eac:	08009f7d 	.word	0x08009f7d
 8009eb0:	08009f7d 	.word	0x08009f7d
 8009eb4:	08009f7d 	.word	0x08009f7d
 8009eb8:	08009f7d 	.word	0x08009f7d
 8009ebc:	08009f7d 	.word	0x08009f7d
 8009ec0:	08009f7d 	.word	0x08009f7d
 8009ec4:	08009f7d 	.word	0x08009f7d
 8009ec8:	08009f7d 	.word	0x08009f7d
 8009ecc:	08009f7d 	.word	0x08009f7d
 8009ed0:	08009f7d 	.word	0x08009f7d
 8009ed4:	08009f7d 	.word	0x08009f7d
 8009ed8:	08009f7d 	.word	0x08009f7d
 8009edc:	08009f7d 	.word	0x08009f7d
 8009ee0:	08009f7d 	.word	0x08009f7d
 8009ee4:	08009f7d 	.word	0x08009f7d
 8009ee8:	08009f7d 	.word	0x08009f7d
 8009eec:	08009f7d 	.word	0x08009f7d
 8009ef0:	08009f7d 	.word	0x08009f7d
 8009ef4:	08009f7d 	.word	0x08009f7d
 8009ef8:	08009f7d 	.word	0x08009f7d
 8009efc:	08009f7d 	.word	0x08009f7d
 8009f00:	08009f7d 	.word	0x08009f7d
 8009f04:	08009f7d 	.word	0x08009f7d
 8009f08:	08009f7d 	.word	0x08009f7d
 8009f0c:	08009f7d 	.word	0x08009f7d
 8009f10:	08009f7d 	.word	0x08009f7d
 8009f14:	08009f75 	.word	0x08009f75
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f18:	f7fa fe4a 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 8009f1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f1e:	e033      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f20:	f7fa fe5c 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 8009f24:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f26:	e02f      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f28:	f107 0314 	add.w	r3, r7, #20
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fc f829 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f36:	e027      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f38:	f107 0308 	add.w	r3, r7, #8
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7fc f96d 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f46:	e01f      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f48:	4b2b      	ldr	r3, [pc, #172]	; (8009ff8 <UART_SetConfig+0x94c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0320 	and.w	r3, r3, #32
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f54:	4b28      	ldr	r3, [pc, #160]	; (8009ff8 <UART_SetConfig+0x94c>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	08db      	lsrs	r3, r3, #3
 8009f5a:	f003 0303 	and.w	r3, r3, #3
 8009f5e:	4a27      	ldr	r2, [pc, #156]	; (8009ffc <UART_SetConfig+0x950>)
 8009f60:	fa22 f303 	lsr.w	r3, r2, r3
 8009f64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f66:	e00f      	b.n	8009f88 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8009f68:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <UART_SetConfig+0x950>)
 8009f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f6c:	e00c      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f6e:	4b24      	ldr	r3, [pc, #144]	; (800a000 <UART_SetConfig+0x954>)
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f72:	e009      	b.n	8009f88 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f7a:	e005      	b.n	8009f88 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 8121 	beq.w	800a1d2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	4a17      	ldr	r2, [pc, #92]	; (8009ff4 <UART_SetConfig+0x948>)
 8009f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fa2:	005a      	lsls	r2, r3, #1
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	441a      	add	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fba:	2b0f      	cmp	r3, #15
 8009fbc:	d916      	bls.n	8009fec <UART_SetConfig+0x940>
 8009fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc4:	d212      	bcs.n	8009fec <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	f023 030f 	bic.w	r3, r3, #15
 8009fce:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd2:	085b      	lsrs	r3, r3, #1
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	e0f2      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ff2:	e0ee      	b.n	800a1d2 <UART_SetConfig+0xb26>
 8009ff4:	0801326c 	.word	0x0801326c
 8009ff8:	58024400 	.word	0x58024400
 8009ffc:	03d09000 	.word	0x03d09000
 800a000:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a004:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a008:	2b40      	cmp	r3, #64	; 0x40
 800a00a:	f200 80b7 	bhi.w	800a17c <UART_SetConfig+0xad0>
 800a00e:	a201      	add	r2, pc, #4	; (adr r2, 800a014 <UART_SetConfig+0x968>)
 800a010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a014:	0800a119 	.word	0x0800a119
 800a018:	0800a121 	.word	0x0800a121
 800a01c:	0800a17d 	.word	0x0800a17d
 800a020:	0800a17d 	.word	0x0800a17d
 800a024:	0800a129 	.word	0x0800a129
 800a028:	0800a17d 	.word	0x0800a17d
 800a02c:	0800a17d 	.word	0x0800a17d
 800a030:	0800a17d 	.word	0x0800a17d
 800a034:	0800a139 	.word	0x0800a139
 800a038:	0800a17d 	.word	0x0800a17d
 800a03c:	0800a17d 	.word	0x0800a17d
 800a040:	0800a17d 	.word	0x0800a17d
 800a044:	0800a17d 	.word	0x0800a17d
 800a048:	0800a17d 	.word	0x0800a17d
 800a04c:	0800a17d 	.word	0x0800a17d
 800a050:	0800a17d 	.word	0x0800a17d
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a17d 	.word	0x0800a17d
 800a05c:	0800a17d 	.word	0x0800a17d
 800a060:	0800a17d 	.word	0x0800a17d
 800a064:	0800a17d 	.word	0x0800a17d
 800a068:	0800a17d 	.word	0x0800a17d
 800a06c:	0800a17d 	.word	0x0800a17d
 800a070:	0800a17d 	.word	0x0800a17d
 800a074:	0800a17d 	.word	0x0800a17d
 800a078:	0800a17d 	.word	0x0800a17d
 800a07c:	0800a17d 	.word	0x0800a17d
 800a080:	0800a17d 	.word	0x0800a17d
 800a084:	0800a17d 	.word	0x0800a17d
 800a088:	0800a17d 	.word	0x0800a17d
 800a08c:	0800a17d 	.word	0x0800a17d
 800a090:	0800a17d 	.word	0x0800a17d
 800a094:	0800a16f 	.word	0x0800a16f
 800a098:	0800a17d 	.word	0x0800a17d
 800a09c:	0800a17d 	.word	0x0800a17d
 800a0a0:	0800a17d 	.word	0x0800a17d
 800a0a4:	0800a17d 	.word	0x0800a17d
 800a0a8:	0800a17d 	.word	0x0800a17d
 800a0ac:	0800a17d 	.word	0x0800a17d
 800a0b0:	0800a17d 	.word	0x0800a17d
 800a0b4:	0800a17d 	.word	0x0800a17d
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a17d 	.word	0x0800a17d
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a17d 	.word	0x0800a17d
 800a0d0:	0800a17d 	.word	0x0800a17d
 800a0d4:	0800a17d 	.word	0x0800a17d
 800a0d8:	0800a17d 	.word	0x0800a17d
 800a0dc:	0800a17d 	.word	0x0800a17d
 800a0e0:	0800a17d 	.word	0x0800a17d
 800a0e4:	0800a17d 	.word	0x0800a17d
 800a0e8:	0800a17d 	.word	0x0800a17d
 800a0ec:	0800a17d 	.word	0x0800a17d
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a17d 	.word	0x0800a17d
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a17d 	.word	0x0800a17d
 800a100:	0800a17d 	.word	0x0800a17d
 800a104:	0800a17d 	.word	0x0800a17d
 800a108:	0800a17d 	.word	0x0800a17d
 800a10c:	0800a17d 	.word	0x0800a17d
 800a110:	0800a17d 	.word	0x0800a17d
 800a114:	0800a175 	.word	0x0800a175
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a118:	f7fa fd4a 	bl	8004bb0 <HAL_RCC_GetPCLK1Freq>
 800a11c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a11e:	e033      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a120:	f7fa fd5c 	bl	8004bdc <HAL_RCC_GetPCLK2Freq>
 800a124:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a126:	e02f      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a128:	f107 0314 	add.w	r3, r7, #20
 800a12c:	4618      	mov	r0, r3
 800a12e:	f7fb ff29 	bl	8005f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a136:	e027      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a138:	f107 0308 	add.w	r3, r7, #8
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7fc f86d 	bl	800621c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a146:	e01f      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a148:	4b2c      	ldr	r3, [pc, #176]	; (800a1fc <UART_SetConfig+0xb50>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 0320 	and.w	r3, r3, #32
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a154:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <UART_SetConfig+0xb50>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	08db      	lsrs	r3, r3, #3
 800a15a:	f003 0303 	and.w	r3, r3, #3
 800a15e:	4a28      	ldr	r2, [pc, #160]	; (800a200 <UART_SetConfig+0xb54>)
 800a160:	fa22 f303 	lsr.w	r3, r2, r3
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a166:	e00f      	b.n	800a188 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a168:	4b25      	ldr	r3, [pc, #148]	; (800a200 <UART_SetConfig+0xb54>)
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a16c:	e00c      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a16e:	4b25      	ldr	r3, [pc, #148]	; (800a204 <UART_SetConfig+0xb58>)
 800a170:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a172:	e009      	b.n	800a188 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a178:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a17a:	e005      	b.n	800a188 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a180:	2301      	movs	r3, #1
 800a182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a186:	bf00      	nop
    }

    if (pclk != 0U)
 800a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d021      	beq.n	800a1d2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	4a1d      	ldr	r2, [pc, #116]	; (800a208 <UART_SetConfig+0xb5c>)
 800a194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a198:	461a      	mov	r2, r3
 800a19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	085b      	lsrs	r3, r3, #1
 800a1a6:	441a      	add	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b6:	2b0f      	cmp	r3, #15
 800a1b8:	d908      	bls.n	800a1cc <UART_SetConfig+0xb20>
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c0:	d204      	bcs.n	800a1cc <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c8:	60da      	str	r2, [r3, #12]
 800a1ca:	e002      	b.n	800a1d2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2201      	movs	r2, #1
 800a1de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a1ee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3738      	adds	r7, #56	; 0x38
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a1fc:	58024400 	.word	0x58024400
 800a200:	03d09000 	.word	0x03d09000
 800a204:	003d0900 	.word	0x003d0900
 800a208:	0801326c 	.word	0x0801326c

0800a20c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a27e:	f003 0308 	and.w	r3, r3, #8
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	430a      	orrs	r2, r1
 800a29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a0:	f003 0310 	and.w	r3, r3, #16
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00a      	beq.n	800a2be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2c2:	f003 0320 	and.w	r3, r3, #32
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00a      	beq.n	800a2e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	430a      	orrs	r2, r1
 800a2de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d01a      	beq.n	800a322 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a30a:	d10a      	bne.n	800a322 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00a      	beq.n	800a344 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	605a      	str	r2, [r3, #4]
  }
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b086      	sub	sp, #24
 800a354:	af02      	add	r7, sp, #8
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a360:	f7f7 fb76 	bl	8001a50 <HAL_GetTick>
 800a364:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0308 	and.w	r3, r3, #8
 800a370:	2b08      	cmp	r3, #8
 800a372:	d10e      	bne.n	800a392 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a374:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f82c 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d001      	beq.n	800a392 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e022      	b.n	800a3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d10e      	bne.n	800a3be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f816 	bl	800a3e0 <UART_WaitOnFlagUntilTimeout>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e00c      	b.n	800a3d8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2220      	movs	r2, #32
 800a3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	603b      	str	r3, [r7, #0]
 800a3ec:	4613      	mov	r3, r2
 800a3ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3f0:	e062      	b.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f8:	d05e      	beq.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3fa:	f7f7 fb29 	bl	8001a50 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	429a      	cmp	r2, r3
 800a408:	d302      	bcc.n	800a410 <UART_WaitOnFlagUntilTimeout+0x30>
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d11d      	bne.n	800a44c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a41e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 0201 	bic.w	r2, r2, #1
 800a42e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2220      	movs	r2, #32
 800a43c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e045      	b.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d02e      	beq.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a464:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a468:	d126      	bne.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a472:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681a      	ldr	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a482:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2220      	movs	r2, #32
 800a498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2220      	movs	r2, #32
 800a4a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e00f      	b.n	800a4d8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	69da      	ldr	r2, [r3, #28]
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	bf0c      	ite	eq
 800a4c8:	2301      	moveq	r3, #1
 800a4ca:	2300      	movne	r3, #0
 800a4cc:	b2db      	uxtb	r3, r3
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	79fb      	ldrb	r3, [r7, #7]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d08d      	beq.n	800a3f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4d6:	2300      	movs	r3, #0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	e027      	b.n	800a546 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2224      	movs	r2, #36	; 0x24
 800a502:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 0201 	bic.w	r2, r2, #1
 800a51c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a524:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2220      	movs	r2, #32
 800a538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2200      	movs	r2, #0
 800a540:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3714      	adds	r7, #20
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b084      	sub	sp, #16
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a566:	2302      	movs	r3, #2
 800a568:	e02d      	b.n	800a5c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2224      	movs	r2, #36	; 0x24
 800a576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f022 0201 	bic.w	r2, r2, #1
 800a590:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	430a      	orrs	r2, r1
 800a5a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 f850 	bl	800a64c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3710      	adds	r7, #16
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}

0800a5ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
 800a5d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d101      	bne.n	800a5e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e02d      	b.n	800a642 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2224      	movs	r2, #36	; 0x24
 800a5f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0201 	bic.w	r2, r2, #1
 800a60c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	430a      	orrs	r2, r1
 800a620:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f812 	bl	800a64c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	68fa      	ldr	r2, [r7, #12]
 800a62e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2220      	movs	r2, #32
 800a634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2200      	movs	r2, #0
 800a63c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b089      	sub	sp, #36	; 0x24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a654:	4a2f      	ldr	r2, [pc, #188]	; (800a714 <UARTEx_SetNbDataToProcess+0xc8>)
 800a656:	f107 0314 	add.w	r3, r7, #20
 800a65a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a65e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a662:	4a2d      	ldr	r2, [pc, #180]	; (800a718 <UARTEx_SetNbDataToProcess+0xcc>)
 800a664:	f107 030c 	add.w	r3, r7, #12
 800a668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a66c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a674:	2b00      	cmp	r3, #0
 800a676:	d108      	bne.n	800a68a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a688:	e03d      	b.n	800a706 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a68a:	2310      	movs	r3, #16
 800a68c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a68e:	2310      	movs	r3, #16
 800a690:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	0e5b      	lsrs	r3, r3, #25
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	0f5b      	lsrs	r3, r3, #29
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	f003 0307 	and.w	r3, r3, #7
 800a6b0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a6b2:	7fbb      	ldrb	r3, [r7, #30]
 800a6b4:	7f3a      	ldrb	r2, [r7, #28]
 800a6b6:	f107 0120 	add.w	r1, r7, #32
 800a6ba:	440a      	add	r2, r1
 800a6bc:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a6c0:	fb02 f303 	mul.w	r3, r2, r3
 800a6c4:	7f3a      	ldrb	r2, [r7, #28]
 800a6c6:	f107 0120 	add.w	r1, r7, #32
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a6d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a6dc:	7ffb      	ldrb	r3, [r7, #31]
 800a6de:	7f7a      	ldrb	r2, [r7, #29]
 800a6e0:	f107 0120 	add.w	r1, r7, #32
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a6ea:	fb02 f303 	mul.w	r3, r2, r3
 800a6ee:	7f7a      	ldrb	r2, [r7, #29]
 800a6f0:	f107 0120 	add.w	r1, r7, #32
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a6fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6fe:	b29a      	uxth	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a706:	bf00      	nop
 800a708:	3724      	adds	r7, #36	; 0x24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	08013184 	.word	0x08013184
 800a718:	0801318c 	.word	0x0801318c

0800a71c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a71c:	b084      	sub	sp, #16
 800a71e:	b480      	push	{r7}
 800a720:	b085      	sub	sp, #20
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	f107 001c 	add.w	r0, r7, #28
 800a72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a732:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a734:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a736:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a73a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a73e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a742:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a744:	68fa      	ldr	r2, [r7, #12]
 800a746:	4313      	orrs	r3, r2
 800a748:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	4b07      	ldr	r3, [pc, #28]	; (800a76c <SDMMC_Init+0x50>)
 800a750:	4013      	ands	r3, r2
 800a752:	68fa      	ldr	r2, [r7, #12]
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	b004      	add	sp, #16
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop
 800a76c:	ffc02c00 	.word	0xffc02c00

0800a770 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a77e:	4618      	mov	r0, r3
 800a780:	370c      	adds	r7, #12
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a78a:	b480      	push	{r7}
 800a78c:	b083      	sub	sp, #12
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f043 0203 	orr.w	r2, r3, #3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b083      	sub	sp, #12
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0303 	and.w	r3, r3, #3
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	370c      	adds	r7, #12
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a80a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a810:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a816:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	68da      	ldr	r2, [r3, #12]
 800a822:	4b06      	ldr	r3, [pc, #24]	; (800a83c <SDMMC_SendCommand+0x50>)
 800a824:	4013      	ands	r3, r2
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	431a      	orrs	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3714      	adds	r7, #20
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	fffee0c0 	.word	0xfffee0c0

0800a840 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	691b      	ldr	r3, [r3, #16]
 800a84c:	b2db      	uxtb	r3, r3
}
 800a84e:	4618      	mov	r0, r3
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a85a:	b480      	push	{r7}
 800a85c:	b085      	sub	sp, #20
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3314      	adds	r3, #20
 800a868:	461a      	mov	r2, r3
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	4413      	add	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a8a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a8ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a8b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	431a      	orrs	r2, r3
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a8ca:	2300      	movs	r3, #0

}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b088      	sub	sp, #32
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
 800a8e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a8e6:	2310      	movs	r3, #16
 800a8e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8fa:	f107 0308 	add.w	r3, r7, #8
 800a8fe:	4619      	mov	r1, r3
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f7ff ff73 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a906:	f241 3288 	movw	r2, #5000	; 0x1388
 800a90a:	2110      	movs	r1, #16
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 faaf 	bl	800ae70 <SDMMC_GetCmdResp1>
 800a912:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a914:	69fb      	ldr	r3, [r7, #28]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b088      	sub	sp, #32
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a92c:	2311      	movs	r3, #17
 800a92e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a930:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a934:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a936:	2300      	movs	r3, #0
 800a938:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a93a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a93e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a940:	f107 0308 	add.w	r3, r7, #8
 800a944:	4619      	mov	r1, r3
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff ff50 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a950:	2111      	movs	r1, #17
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f000 fa8c 	bl	800ae70 <SDMMC_GetCmdResp1>
 800a958:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a95a:	69fb      	ldr	r3, [r7, #28]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3720      	adds	r7, #32
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a972:	2312      	movs	r3, #18
 800a974:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a97a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a984:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a986:	f107 0308 	add.w	r3, r7, #8
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f7ff ff2d 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a992:	f241 3288 	movw	r2, #5000	; 0x1388
 800a996:	2112      	movs	r1, #18
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f000 fa69 	bl	800ae70 <SDMMC_GetCmdResp1>
 800a99e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9a0:	69fb      	ldr	r3, [r7, #28]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3720      	adds	r7, #32
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}

0800a9aa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a9aa:	b580      	push	{r7, lr}
 800a9ac:	b088      	sub	sp, #32
 800a9ae:	af00      	add	r7, sp, #0
 800a9b0:	6078      	str	r0, [r7, #4]
 800a9b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a9b8:	2318      	movs	r3, #24
 800a9ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f7ff ff0a 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9dc:	2118      	movs	r1, #24
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fa46 	bl	800ae70 <SDMMC_GetCmdResp1>
 800a9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9e6:	69fb      	ldr	r3, [r7, #28]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3720      	adds	r7, #32
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a9fe:	2319      	movs	r3, #25
 800aa00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa12:	f107 0308 	add.w	r3, r7, #8
 800aa16:	4619      	mov	r1, r3
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f7ff fee7 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aa1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa22:	2119      	movs	r1, #25
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fa23 	bl	800ae70 <SDMMC_GetCmdResp1>
 800aa2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa2c:	69fb      	ldr	r3, [r7, #28]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aa44:	230c      	movs	r3, #12
 800aa46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa48:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa56:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	68db      	ldr	r3, [r3, #12]
 800aa68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa70:	f107 0308 	add.w	r3, r7, #8
 800aa74:	4619      	mov	r1, r3
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff feb8 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aa7c:	4a0b      	ldr	r2, [pc, #44]	; (800aaac <SDMMC_CmdStopTransfer+0x74>)
 800aa7e:	210c      	movs	r1, #12
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 f9f5 	bl	800ae70 <SDMMC_GetCmdResp1>
 800aa86:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa9a:	d101      	bne.n	800aaa0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3720      	adds	r7, #32
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	05f5e100 	.word	0x05f5e100

0800aab0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b08a      	sub	sp, #40	; 0x28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aac0:	2307      	movs	r3, #7
 800aac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aac8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaca:	2300      	movs	r3, #0
 800aacc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aace:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aad2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad4:	f107 0310 	add.w	r3, r7, #16
 800aad8:	4619      	mov	r1, r3
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7ff fe86 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae4:	2107      	movs	r1, #7
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f000 f9c2 	bl	800ae70 <SDMMC_GetCmdResp1>
 800aaec:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3728      	adds	r7, #40	; 0x28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab16:	f107 0308 	add.w	r3, r7, #8
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f7ff fe65 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 f976 	bl	800ae14 <SDMMC_GetCmdError>
 800ab28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3720      	adds	r7, #32
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ab3c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ab40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ab42:	2308      	movs	r3, #8
 800ab44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab56:	f107 0308 	add.w	r3, r7, #8
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7ff fe45 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 fb78 	bl	800b258 <SDMMC_GetCmdResp7>
 800ab68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab6a:	69fb      	ldr	r3, [r7, #28]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3720      	adds	r7, #32
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b088      	sub	sp, #32
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ab82:	2337      	movs	r3, #55	; 0x37
 800ab84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab94:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab96:	f107 0308 	add.w	r3, r7, #8
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f7ff fe25 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aba2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba6:	2137      	movs	r1, #55	; 0x37
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f961 	bl	800ae70 <SDMMC_GetCmdResp1>
 800abae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abb0:	69fb      	ldr	r3, [r7, #28]
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3720      	adds	r7, #32
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}

0800abba <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800abba:	b580      	push	{r7, lr}
 800abbc:	b088      	sub	sp, #32
 800abbe:	af00      	add	r7, sp, #0
 800abc0:	6078      	str	r0, [r7, #4]
 800abc2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800abc8:	2329      	movs	r3, #41	; 0x29
 800abca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abda:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abdc:	f107 0308 	add.w	r3, r7, #8
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7ff fe02 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 fa7d 	bl	800b0e8 <SDMMC_GetCmdResp3>
 800abee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abf0:	69fb      	ldr	r3, [r7, #28]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3720      	adds	r7, #32
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b088      	sub	sp, #32
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ac08:	2306      	movs	r3, #6
 800ac0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac12:	2300      	movs	r3, #0
 800ac14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff fde2 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	2106      	movs	r1, #6
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f91e 	bl	800ae70 <SDMMC_GetCmdResp1>
 800ac34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac36:	69fb      	ldr	r3, [r7, #28]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3720      	adds	r7, #32
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ac4c:	2333      	movs	r3, #51	; 0x33
 800ac4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac56:	2300      	movs	r3, #0
 800ac58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff fdc0 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ac6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac70:	2133      	movs	r1, #51	; 0x33
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f8fc 	bl	800ae70 <SDMMC_GetCmdResp1>
 800ac78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ac90:	2302      	movs	r3, #2
 800ac92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ac94:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca4:	f107 0308 	add.w	r3, r7, #8
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff fd9e 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 f9cf 	bl	800b054 <SDMMC_GetCmdResp2>
 800acb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acb8:	69fb      	ldr	r3, [r7, #28]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3720      	adds	r7, #32
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b088      	sub	sp, #32
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	6078      	str	r0, [r7, #4]
 800acca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800acd0:	2309      	movs	r3, #9
 800acd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800acd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800acd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acda:	2300      	movs	r3, #0
 800acdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ace2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace4:	f107 0308 	add.w	r3, r7, #8
 800ace8:	4619      	mov	r1, r3
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f7ff fd7e 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f9af 	bl	800b054 <SDMMC_GetCmdResp2>
 800acf6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acf8:	69fb      	ldr	r3, [r7, #28]
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3720      	adds	r7, #32
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b088      	sub	sp, #32
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
 800ad0a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ad10:	2303      	movs	r3, #3
 800ad12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad24:	f107 0308 	add.w	r3, r7, #8
 800ad28:	4619      	mov	r1, r3
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7ff fd5e 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ad30:	683a      	ldr	r2, [r7, #0]
 800ad32:	2103      	movs	r1, #3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa17 	bl	800b168 <SDMMC_GetCmdResp6>
 800ad3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3720      	adds	r7, #32
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b088      	sub	sp, #32
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ad54:	230d      	movs	r3, #13
 800ad56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff fd3c 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	210d      	movs	r1, #13
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f878 	bl	800ae70 <SDMMC_GetCmdResp1>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ad98:	230d      	movs	r3, #13
 800ad9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff fd1a 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800adb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adbc:	210d      	movs	r1, #13
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f856 	bl	800ae70 <SDMMC_GetCmdResp1>
 800adc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc6:	69fb      	ldr	r3, [r7, #28]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800add8:	2300      	movs	r3, #0
 800adda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800addc:	230b      	movs	r3, #11
 800adde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf0:	f107 0308 	add.w	r3, r7, #8
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fcf8 	bl	800a7ec <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800adfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae00:	210b      	movs	r1, #11
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f834 	bl	800ae70 <SDMMC_GetCmdResp1>
 800ae08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ae1c:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <SDMMC_GetCmdError+0x50>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4a11      	ldr	r2, [pc, #68]	; (800ae68 <SDMMC_GetCmdError+0x54>)
 800ae22:	fba2 2303 	umull	r2, r3, r2, r3
 800ae26:	0a5b      	lsrs	r3, r3, #9
 800ae28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae2c:	fb02 f303 	mul.w	r3, r2, r3
 800ae30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	1e5a      	subs	r2, r3, #1
 800ae36:	60fa      	str	r2, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d102      	bne.n	800ae42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ae40:	e009      	b.n	800ae56 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d0f1      	beq.n	800ae32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a06      	ldr	r2, [pc, #24]	; (800ae6c <SDMMC_GetCmdError+0x58>)
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3714      	adds	r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	24000094 	.word	0x24000094
 800ae68:	10624dd3 	.word	0x10624dd3
 800ae6c:	002000c5 	.word	0x002000c5

0800ae70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b088      	sub	sp, #32
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ae7e:	4b70      	ldr	r3, [pc, #448]	; (800b040 <SDMMC_GetCmdResp1+0x1d0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a70      	ldr	r2, [pc, #448]	; (800b044 <SDMMC_GetCmdResp1+0x1d4>)
 800ae84:	fba2 2303 	umull	r2, r3, r2, r3
 800ae88:	0a5a      	lsrs	r2, r3, #9
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	fb02 f303 	mul.w	r3, r2, r3
 800ae90:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	61fa      	str	r2, [r7, #28]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d102      	bne.n	800aea2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ae9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aea0:	e0c9      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800aea8:	69ba      	ldr	r2, [r7, #24]
 800aeaa:	4b67      	ldr	r3, [pc, #412]	; (800b048 <SDMMC_GetCmdResp1+0x1d8>)
 800aeac:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0ef      	beq.n	800ae92 <SDMMC_GetCmdResp1+0x22>
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1ea      	bne.n	800ae92 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec0:	f003 0304 	and.w	r3, r3, #4
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d004      	beq.n	800aed2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2204      	movs	r2, #4
 800aecc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aece:	2304      	movs	r3, #4
 800aed0:	e0b1      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d004      	beq.n	800aee8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e0a6      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	4a58      	ldr	r2, [pc, #352]	; (800b04c <SDMMC_GetCmdResp1+0x1dc>)
 800aeec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aeee:	68f8      	ldr	r0, [r7, #12]
 800aef0:	f7ff fca6 	bl	800a840 <SDMMC_GetCommandResponse>
 800aef4:	4603      	mov	r3, r0
 800aef6:	461a      	mov	r2, r3
 800aef8:	7afb      	ldrb	r3, [r7, #11]
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d001      	beq.n	800af02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aefe:	2301      	movs	r3, #1
 800af00:	e099      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800af02:	2100      	movs	r1, #0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fca8 	bl	800a85a <SDMMC_GetResponse>
 800af0a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af0c:	697a      	ldr	r2, [r7, #20]
 800af0e:	4b50      	ldr	r3, [pc, #320]	; (800b050 <SDMMC_GetCmdResp1+0x1e0>)
 800af10:	4013      	ands	r3, r2
 800af12:	2b00      	cmp	r3, #0
 800af14:	d101      	bne.n	800af1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800af16:	2300      	movs	r3, #0
 800af18:	e08d      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da02      	bge.n	800af26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800af20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af24:	e087      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	e080      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d001      	beq.n	800af42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800af3e:	2380      	movs	r3, #128	; 0x80
 800af40:	e079      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d002      	beq.n	800af52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800af4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af50:	e071      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800af5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af60:	e069      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d002      	beq.n	800af72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800af6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af70:	e061      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d002      	beq.n	800af82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800af7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af80:	e059      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800af8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af90:	e051      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d002      	beq.n	800afa2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800af9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afa0:	e049      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800afac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afb0:	e041      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d002      	beq.n	800afc2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800afbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afc0:	e039      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d002      	beq.n	800afd2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800afcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800afd0:	e031      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d002      	beq.n	800afe2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800afdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800afe0:	e029      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800afec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aff0:	e021      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800affc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b000:	e019      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d002      	beq.n	800b012 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b00c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b010:	e011      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d002      	beq.n	800b022 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b01c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b020:	e009      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f003 0308 	and.w	r3, r3, #8
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b02c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b030:	e001      	b.n	800b036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b036:	4618      	mov	r0, r3
 800b038:	3720      	adds	r7, #32
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	24000094 	.word	0x24000094
 800b044:	10624dd3 	.word	0x10624dd3
 800b048:	00200045 	.word	0x00200045
 800b04c:	002000c5 	.word	0x002000c5
 800b050:	fdffe008 	.word	0xfdffe008

0800b054 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b054:	b480      	push	{r7}
 800b056:	b085      	sub	sp, #20
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b05c:	4b1f      	ldr	r3, [pc, #124]	; (800b0dc <SDMMC_GetCmdResp2+0x88>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a1f      	ldr	r2, [pc, #124]	; (800b0e0 <SDMMC_GetCmdResp2+0x8c>)
 800b062:	fba2 2303 	umull	r2, r3, r2, r3
 800b066:	0a5b      	lsrs	r3, r3, #9
 800b068:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06c:	fb02 f303 	mul.w	r3, r2, r3
 800b070:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	1e5a      	subs	r2, r3, #1
 800b076:	60fa      	str	r2, [r7, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b07c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b080:	e026      	b.n	800b0d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b086:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d0ef      	beq.n	800b072 <SDMMC_GetCmdResp2+0x1e>
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d1ea      	bne.n	800b072 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a0:	f003 0304 	and.w	r3, r3, #4
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d004      	beq.n	800b0b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ae:	2304      	movs	r3, #4
 800b0b0:	e00e      	b.n	800b0d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e003      	b.n	800b0d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4a06      	ldr	r2, [pc, #24]	; (800b0e4 <SDMMC_GetCmdResp2+0x90>)
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b0ce:	2300      	movs	r3, #0
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3714      	adds	r7, #20
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr
 800b0dc:	24000094 	.word	0x24000094
 800b0e0:	10624dd3 	.word	0x10624dd3
 800b0e4:	002000c5 	.word	0x002000c5

0800b0e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b0f0:	4b1a      	ldr	r3, [pc, #104]	; (800b15c <SDMMC_GetCmdResp3+0x74>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a1a      	ldr	r2, [pc, #104]	; (800b160 <SDMMC_GetCmdResp3+0x78>)
 800b0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800b0fa:	0a5b      	lsrs	r3, r3, #9
 800b0fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	1e5a      	subs	r2, r3, #1
 800b10a:	60fa      	str	r2, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b110:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b114:	e01b      	b.n	800b14e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b11a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b122:	2b00      	cmp	r3, #0
 800b124:	d0ef      	beq.n	800b106 <SDMMC_GetCmdResp3+0x1e>
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1ea      	bne.n	800b106 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b134:	f003 0304 	and.w	r3, r3, #4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d004      	beq.n	800b146 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2204      	movs	r2, #4
 800b140:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b142:	2304      	movs	r3, #4
 800b144:	e003      	b.n	800b14e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	4a06      	ldr	r2, [pc, #24]	; (800b164 <SDMMC_GetCmdResp3+0x7c>)
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop
 800b15c:	24000094 	.word	0x24000094
 800b160:	10624dd3 	.word	0x10624dd3
 800b164:	002000c5 	.word	0x002000c5

0800b168 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	460b      	mov	r3, r1
 800b172:	607a      	str	r2, [r7, #4]
 800b174:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b176:	4b35      	ldr	r3, [pc, #212]	; (800b24c <SDMMC_GetCmdResp6+0xe4>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a35      	ldr	r2, [pc, #212]	; (800b250 <SDMMC_GetCmdResp6+0xe8>)
 800b17c:	fba2 2303 	umull	r2, r3, r2, r3
 800b180:	0a5b      	lsrs	r3, r3, #9
 800b182:	f241 3288 	movw	r2, #5000	; 0x1388
 800b186:	fb02 f303 	mul.w	r3, r2, r3
 800b18a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	1e5a      	subs	r2, r3, #1
 800b190:	61fa      	str	r2, [r7, #28]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d102      	bne.n	800b19c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b196:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b19a:	e052      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0ef      	beq.n	800b18c <SDMMC_GetCmdResp6+0x24>
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1ea      	bne.n	800b18c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ba:	f003 0304 	and.w	r3, r3, #4
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2204      	movs	r2, #4
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1c8:	2304      	movs	r3, #4
 800b1ca:	e03a      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d004      	beq.n	800b1e2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e02f      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fb2c 	bl	800a840 <SDMMC_GetCommandResponse>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d001      	beq.n	800b1f6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e025      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a16      	ldr	r2, [pc, #88]	; (800b254 <SDMMC_GetCmdResp6+0xec>)
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7ff fb2b 	bl	800a85a <SDMMC_GetResponse>
 800b204:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d106      	bne.n	800b21e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	0c1b      	lsrs	r3, r3, #16
 800b214:	b29a      	uxth	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b21a:	2300      	movs	r3, #0
 800b21c:	e011      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b228:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b22c:	e009      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b23c:	e001      	b.n	800b242 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b23e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b242:	4618      	mov	r0, r3
 800b244:	3720      	adds	r7, #32
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	24000094 	.word	0x24000094
 800b250:	10624dd3 	.word	0x10624dd3
 800b254:	002000c5 	.word	0x002000c5

0800b258 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b260:	4b22      	ldr	r3, [pc, #136]	; (800b2ec <SDMMC_GetCmdResp7+0x94>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a22      	ldr	r2, [pc, #136]	; (800b2f0 <SDMMC_GetCmdResp7+0x98>)
 800b266:	fba2 2303 	umull	r2, r3, r2, r3
 800b26a:	0a5b      	lsrs	r3, r3, #9
 800b26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b270:	fb02 f303 	mul.w	r3, r2, r3
 800b274:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	1e5a      	subs	r2, r3, #1
 800b27a:	60fa      	str	r2, [r7, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d102      	bne.n	800b286 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b284:	e02c      	b.n	800b2e0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b28a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b292:	2b00      	cmp	r3, #0
 800b294:	d0ef      	beq.n	800b276 <SDMMC_GetCmdResp7+0x1e>
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1ea      	bne.n	800b276 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a4:	f003 0304 	and.w	r3, r3, #4
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2b2:	2304      	movs	r3, #4
 800b2b4:	e014      	b.n	800b2e0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d004      	beq.n	800b2cc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	e009      	b.n	800b2e0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2240      	movs	r2, #64	; 0x40
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2de:	2300      	movs	r3, #0

}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3714      	adds	r7, #20
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr
 800b2ec:	24000094 	.word	0x24000094
 800b2f0:	10624dd3 	.word	0x10624dd3

0800b2f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	f107 001c 	add.w	r0, r7, #28
 800b302:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d120      	bne.n	800b34e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	4b25      	ldr	r3, [pc, #148]	; (800b3b4 <USB_CoreInit+0xc0>)
 800b31e:	4013      	ands	r3, r2
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b332:	2b01      	cmp	r3, #1
 800b334:	d105      	bne.n	800b342 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fabe 	bl	800c8c4 <USB_CoreReset>
 800b348:	4603      	mov	r3, r0
 800b34a:	73fb      	strb	r3, [r7, #15]
 800b34c:	e01a      	b.n	800b384 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 fab2 	bl	800c8c4 <USB_CoreReset>
 800b360:	4603      	mov	r3, r0
 800b362:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d106      	bne.n	800b378 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b36e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	639a      	str	r2, [r3, #56]	; 0x38
 800b376:	e005      	b.n	800b384 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b386:	2b01      	cmp	r3, #1
 800b388:	d10b      	bne.n	800b3a2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f043 0206 	orr.w	r2, r3, #6
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f043 0220 	orr.w	r2, r3, #32
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3710      	adds	r7, #16
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3ae:	b004      	add	sp, #16
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	ffbdffbf 	.word	0xffbdffbf

0800b3b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3c6:	79fb      	ldrb	r3, [r7, #7]
 800b3c8:	2b02      	cmp	r3, #2
 800b3ca:	d165      	bne.n	800b498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	4a41      	ldr	r2, [pc, #260]	; (800b4d4 <USB_SetTurnaroundTime+0x11c>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d906      	bls.n	800b3e2 <USB_SetTurnaroundTime+0x2a>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	4a40      	ldr	r2, [pc, #256]	; (800b4d8 <USB_SetTurnaroundTime+0x120>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d802      	bhi.n	800b3e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b3dc:	230f      	movs	r3, #15
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	e062      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	4a3c      	ldr	r2, [pc, #240]	; (800b4d8 <USB_SetTurnaroundTime+0x120>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d906      	bls.n	800b3f8 <USB_SetTurnaroundTime+0x40>
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	4a3b      	ldr	r2, [pc, #236]	; (800b4dc <USB_SetTurnaroundTime+0x124>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d802      	bhi.n	800b3f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b3f2:	230e      	movs	r3, #14
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e057      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4a38      	ldr	r2, [pc, #224]	; (800b4dc <USB_SetTurnaroundTime+0x124>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d906      	bls.n	800b40e <USB_SetTurnaroundTime+0x56>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4a37      	ldr	r2, [pc, #220]	; (800b4e0 <USB_SetTurnaroundTime+0x128>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d802      	bhi.n	800b40e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b408:	230d      	movs	r3, #13
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e04c      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4a33      	ldr	r2, [pc, #204]	; (800b4e0 <USB_SetTurnaroundTime+0x128>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d906      	bls.n	800b424 <USB_SetTurnaroundTime+0x6c>
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4a32      	ldr	r2, [pc, #200]	; (800b4e4 <USB_SetTurnaroundTime+0x12c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d802      	bhi.n	800b424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b41e:	230c      	movs	r3, #12
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e041      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4a2f      	ldr	r2, [pc, #188]	; (800b4e4 <USB_SetTurnaroundTime+0x12c>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d906      	bls.n	800b43a <USB_SetTurnaroundTime+0x82>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4a2e      	ldr	r2, [pc, #184]	; (800b4e8 <USB_SetTurnaroundTime+0x130>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d802      	bhi.n	800b43a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b434:	230b      	movs	r3, #11
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e036      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	4a2a      	ldr	r2, [pc, #168]	; (800b4e8 <USB_SetTurnaroundTime+0x130>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d906      	bls.n	800b450 <USB_SetTurnaroundTime+0x98>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4a29      	ldr	r2, [pc, #164]	; (800b4ec <USB_SetTurnaroundTime+0x134>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d802      	bhi.n	800b450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b44a:	230a      	movs	r3, #10
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	e02b      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4a26      	ldr	r2, [pc, #152]	; (800b4ec <USB_SetTurnaroundTime+0x134>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d906      	bls.n	800b466 <USB_SetTurnaroundTime+0xae>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	4a25      	ldr	r2, [pc, #148]	; (800b4f0 <USB_SetTurnaroundTime+0x138>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d802      	bhi.n	800b466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b460:	2309      	movs	r3, #9
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e020      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	4a21      	ldr	r2, [pc, #132]	; (800b4f0 <USB_SetTurnaroundTime+0x138>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d906      	bls.n	800b47c <USB_SetTurnaroundTime+0xc4>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	4a20      	ldr	r2, [pc, #128]	; (800b4f4 <USB_SetTurnaroundTime+0x13c>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d802      	bhi.n	800b47c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b476:	2308      	movs	r3, #8
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	e015      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	4a1d      	ldr	r2, [pc, #116]	; (800b4f4 <USB_SetTurnaroundTime+0x13c>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d906      	bls.n	800b492 <USB_SetTurnaroundTime+0xda>
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4a1c      	ldr	r2, [pc, #112]	; (800b4f8 <USB_SetTurnaroundTime+0x140>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d802      	bhi.n	800b492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b48c:	2307      	movs	r3, #7
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e00a      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b492:	2306      	movs	r3, #6
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e007      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b49e:	2309      	movs	r3, #9
 800b4a0:	617b      	str	r3, [r7, #20]
 800b4a2:	e001      	b.n	800b4a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b4a4:	2309      	movs	r3, #9
 800b4a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	029b      	lsls	r3, r3, #10
 800b4bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	371c      	adds	r7, #28
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	00d8acbf 	.word	0x00d8acbf
 800b4d8:	00e4e1bf 	.word	0x00e4e1bf
 800b4dc:	00f423ff 	.word	0x00f423ff
 800b4e0:	0106737f 	.word	0x0106737f
 800b4e4:	011a499f 	.word	0x011a499f
 800b4e8:	01312cff 	.word	0x01312cff
 800b4ec:	014ca43f 	.word	0x014ca43f
 800b4f0:	016e35ff 	.word	0x016e35ff
 800b4f4:	01a6ab1f 	.word	0x01a6ab1f
 800b4f8:	01e847ff 	.word	0x01e847ff

0800b4fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fc:	b480      	push	{r7}
 800b4fe:	b083      	sub	sp, #12
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f043 0201 	orr.w	r2, r3, #1
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b51e:	b480      	push	{r7}
 800b520:	b083      	sub	sp, #12
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	f023 0201 	bic.w	r2, r3, #1
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b558:	78fb      	ldrb	r3, [r7, #3]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d106      	bne.n	800b56c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	68db      	ldr	r3, [r3, #12]
 800b562:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	60da      	str	r2, [r3, #12]
 800b56a:	e00b      	b.n	800b584 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60da      	str	r2, [r3, #12]
 800b57e:	e001      	b.n	800b584 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e003      	b.n	800b58c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b584:	2032      	movs	r0, #50	; 0x32
 800b586:	f7f6 fa6f 	bl	8001a68 <HAL_Delay>

  return HAL_OK;
 800b58a:	2300      	movs	r3, #0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b594:	b084      	sub	sp, #16
 800b596:	b580      	push	{r7, lr}
 800b598:	b086      	sub	sp, #24
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b5a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	613b      	str	r3, [r7, #16]
 800b5b2:	e009      	b.n	800b5c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	3340      	adds	r3, #64	; 0x40
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	613b      	str	r3, [r7, #16]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	2b0e      	cmp	r3, #14
 800b5cc:	d9f2      	bls.n	800b5b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b5ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11c      	bne.n	800b60e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5e2:	f043 0302 	orr.w	r3, r3, #2
 800b5e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	e005      	b.n	800b61a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b612:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b620:	461a      	mov	r2, r3
 800b622:	2300      	movs	r3, #0
 800b624:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b62c:	4619      	mov	r1, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b634:	461a      	mov	r2, r3
 800b636:	680b      	ldr	r3, [r1, #0]
 800b638:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d10c      	bne.n	800b65a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d104      	bne.n	800b650 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b646:	2100      	movs	r1, #0
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 f949 	bl	800b8e0 <USB_SetDevSpeed>
 800b64e:	e008      	b.n	800b662 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b650:	2101      	movs	r1, #1
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f944 	bl	800b8e0 <USB_SetDevSpeed>
 800b658:	e003      	b.n	800b662 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b65a:	2103      	movs	r1, #3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f93f 	bl	800b8e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b662:	2110      	movs	r1, #16
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f8f3 	bl	800b850 <USB_FlushTxFifo>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f911 	bl	800b89c <USB_FlushRxFifo>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b68a:	461a      	mov	r2, r3
 800b68c:	2300      	movs	r3, #0
 800b68e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b696:	461a      	mov	r2, r3
 800b698:	2300      	movs	r3, #0
 800b69a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	613b      	str	r3, [r7, #16]
 800b6ac:	e043      	b.n	800b736 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6c4:	d118      	bne.n	800b6f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d10a      	bne.n	800b6e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	015a      	lsls	r2, r3, #5
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4413      	add	r3, r2
 800b6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d8:	461a      	mov	r2, r3
 800b6da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	e013      	b.n	800b70a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	015a      	lsls	r2, r3, #5
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6f4:	6013      	str	r3, [r2, #0]
 800b6f6:	e008      	b.n	800b70a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	015a      	lsls	r2, r3, #5
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	4413      	add	r3, r2
 800b700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b704:	461a      	mov	r2, r3
 800b706:	2300      	movs	r3, #0
 800b708:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	015a      	lsls	r2, r3, #5
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	4413      	add	r3, r2
 800b712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b716:	461a      	mov	r2, r3
 800b718:	2300      	movs	r3, #0
 800b71a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	015a      	lsls	r2, r3, #5
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4413      	add	r3, r2
 800b724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b728:	461a      	mov	r2, r3
 800b72a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b72e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	3301      	adds	r3, #1
 800b734:	613b      	str	r3, [r7, #16]
 800b736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d3b7      	bcc.n	800b6ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b73e:	2300      	movs	r3, #0
 800b740:	613b      	str	r3, [r7, #16]
 800b742:	e043      	b.n	800b7cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b75a:	d118      	bne.n	800b78e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d10a      	bne.n	800b778 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	461a      	mov	r2, r3
 800b770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	e013      	b.n	800b7a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b784:	461a      	mov	r2, r3
 800b786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b78a:	6013      	str	r3, [r2, #0]
 800b78c:	e008      	b.n	800b7a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	461a      	mov	r2, r3
 800b79c:	2300      	movs	r3, #0
 800b79e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	015a      	lsls	r2, r3, #5
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b7b2:	693b      	ldr	r3, [r7, #16]
 800b7b4:	015a      	lsls	r2, r3, #5
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7be:	461a      	mov	r2, r3
 800b7c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	613b      	str	r3, [r7, #16]
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d3b7      	bcc.n	800b744 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d105      	bne.n	800b808 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	699b      	ldr	r3, [r3, #24]
 800b800:	f043 0210 	orr.w	r2, r3, #16
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	699a      	ldr	r2, [r3, #24]
 800b80c:	4b0e      	ldr	r3, [pc, #56]	; (800b848 <USB_DevInit+0x2b4>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f043 0208 	orr.w	r2, r3, #8
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d105      	bne.n	800b838 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	699a      	ldr	r2, [r3, #24]
 800b830:	4b06      	ldr	r3, [pc, #24]	; (800b84c <USB_DevInit+0x2b8>)
 800b832:	4313      	orrs	r3, r2
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b838:	7dfb      	ldrb	r3, [r7, #23]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b844:	b004      	add	sp, #16
 800b846:	4770      	bx	lr
 800b848:	803c3800 	.word	0x803c3800
 800b84c:	40000004 	.word	0x40000004

0800b850 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	019b      	lsls	r3, r3, #6
 800b862:	f043 0220 	orr.w	r2, r3, #32
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	4a09      	ldr	r2, [pc, #36]	; (800b898 <USB_FlushTxFifo+0x48>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d901      	bls.n	800b87c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b878:	2303      	movs	r3, #3
 800b87a:	e006      	b.n	800b88a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	f003 0320 	and.w	r3, r3, #32
 800b884:	2b20      	cmp	r3, #32
 800b886:	d0f0      	beq.n	800b86a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
 800b896:	bf00      	nop
 800b898:	00030d40 	.word	0x00030d40

0800b89c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2210      	movs	r2, #16
 800b8ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	60fb      	str	r3, [r7, #12]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4a09      	ldr	r2, [pc, #36]	; (800b8dc <USB_FlushRxFifo+0x40>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d901      	bls.n	800b8c0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b8bc:	2303      	movs	r3, #3
 800b8be:	e006      	b.n	800b8ce <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	f003 0310 	and.w	r3, r3, #16
 800b8c8:	2b10      	cmp	r3, #16
 800b8ca:	d0f0      	beq.n	800b8ae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	00030d40 	.word	0x00030d40

0800b8e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	78fb      	ldrb	r3, [r7, #3]
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b900:	4313      	orrs	r3, r2
 800b902:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b912:	b480      	push	{r7}
 800b914:	b087      	sub	sp, #28
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 0306 	and.w	r3, r3, #6
 800b92a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d102      	bne.n	800b938 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b932:	2300      	movs	r3, #0
 800b934:	75fb      	strb	r3, [r7, #23]
 800b936:	e00a      	b.n	800b94e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d002      	beq.n	800b944 <USB_GetDevSpeed+0x32>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2b06      	cmp	r3, #6
 800b942:	d102      	bne.n	800b94a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b944:	2302      	movs	r3, #2
 800b946:	75fb      	strb	r3, [r7, #23]
 800b948:	e001      	b.n	800b94e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b94a:	230f      	movs	r3, #15
 800b94c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b950:	4618      	mov	r0, r3
 800b952:	371c      	adds	r7, #28
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d139      	bne.n	800b9ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97e:	69da      	ldr	r2, [r3, #28]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	f003 030f 	and.w	r3, r3, #15
 800b988:	2101      	movs	r1, #1
 800b98a:	fa01 f303 	lsl.w	r3, r1, r3
 800b98e:	b29b      	uxth	r3, r3
 800b990:	68f9      	ldr	r1, [r7, #12]
 800b992:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b996:	4313      	orrs	r3, r2
 800b998:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	015a      	lsls	r2, r3, #5
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d153      	bne.n	800ba58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	78db      	ldrb	r3, [r3, #3]
 800b9ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	059b      	lsls	r3, r3, #22
 800b9d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	0159      	lsls	r1, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	440b      	add	r3, r1
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	4b20      	ldr	r3, [pc, #128]	; (800ba68 <USB_ActivateEndpoint+0x10c>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	600b      	str	r3, [r1, #0]
 800b9ea:	e035      	b.n	800ba58 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	fa01 f303 	lsl.w	r3, r1, r3
 800ba02:	041b      	lsls	r3, r3, #16
 800ba04:	68f9      	ldr	r1, [r7, #12]
 800ba06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	015a      	lsls	r2, r3, #5
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4413      	add	r3, r2
 800ba16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d119      	bne.n	800ba58 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	78db      	ldrb	r3, [r3, #3]
 800ba3e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ba40:	430b      	orrs	r3, r1
 800ba42:	431a      	orrs	r2, r3
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	0159      	lsls	r1, r3, #5
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	440b      	add	r3, r1
 800ba4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba50:	4619      	mov	r1, r3
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <USB_ActivateEndpoint+0x10c>)
 800ba54:	4313      	orrs	r3, r2
 800ba56:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	10008000 	.word	0x10008000

0800ba6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	785b      	ldrb	r3, [r3, #1]
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d161      	bne.n	800bb4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	015a      	lsls	r2, r3, #5
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4413      	add	r3, r2
 800ba90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba9e:	d11f      	bne.n	800bae0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	015a      	lsls	r2, r3, #5
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4413      	add	r3, r2
 800baa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68ba      	ldr	r2, [r7, #8]
 800bab0:	0151      	lsls	r1, r2, #5
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	440a      	add	r2, r1
 800bab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800baba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800babe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	015a      	lsls	r2, r3, #5
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	4413      	add	r3, r2
 800bac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68ba      	ldr	r2, [r7, #8]
 800bad0:	0151      	lsls	r1, r2, #5
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	440a      	add	r2, r1
 800bad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bada:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bade:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	f003 030f 	and.w	r3, r3, #15
 800baf0:	2101      	movs	r1, #1
 800baf2:	fa01 f303 	lsl.w	r3, r1, r3
 800baf6:	b29b      	uxth	r3, r3
 800baf8:	43db      	mvns	r3, r3
 800bafa:	68f9      	ldr	r1, [r7, #12]
 800bafc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb00:	4013      	ands	r3, r2
 800bb02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	69da      	ldr	r2, [r3, #28]
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	f003 030f 	and.w	r3, r3, #15
 800bb14:	2101      	movs	r1, #1
 800bb16:	fa01 f303 	lsl.w	r3, r1, r3
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	43db      	mvns	r3, r3
 800bb1e:	68f9      	ldr	r1, [r7, #12]
 800bb20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb24:	4013      	ands	r3, r2
 800bb26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	0159      	lsls	r1, r3, #5
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	440b      	add	r3, r1
 800bb3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb42:	4619      	mov	r1, r3
 800bb44:	4b35      	ldr	r3, [pc, #212]	; (800bc1c <USB_DeactivateEndpoint+0x1b0>)
 800bb46:	4013      	ands	r3, r2
 800bb48:	600b      	str	r3, [r1, #0]
 800bb4a:	e060      	b.n	800bc0e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb62:	d11f      	bne.n	800bba4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	015a      	lsls	r2, r3, #5
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	0151      	lsls	r1, r2, #5
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	440a      	add	r2, r1
 800bb7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	0151      	lsls	r1, r2, #5
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	440a      	add	r2, r1
 800bb9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bba2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 030f 	and.w	r3, r3, #15
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbba:	041b      	lsls	r3, r3, #16
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	68f9      	ldr	r1, [r7, #12]
 800bbc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbce:	69da      	ldr	r2, [r3, #28]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	f003 030f 	and.w	r3, r3, #15
 800bbd8:	2101      	movs	r1, #1
 800bbda:	fa01 f303 	lsl.w	r3, r1, r3
 800bbde:	041b      	lsls	r3, r3, #16
 800bbe0:	43db      	mvns	r3, r3
 800bbe2:	68f9      	ldr	r1, [r7, #12]
 800bbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe8:	4013      	ands	r3, r2
 800bbea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	0159      	lsls	r1, r3, #5
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	440b      	add	r3, r1
 800bc02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc06:	4619      	mov	r1, r3
 800bc08:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <USB_DeactivateEndpoint+0x1b4>)
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	ec337800 	.word	0xec337800
 800bc20:	eff37800 	.word	0xeff37800

0800bc24 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b08a      	sub	sp, #40	; 0x28
 800bc28:	af02      	add	r7, sp, #8
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	785b      	ldrb	r3, [r3, #1]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	f040 8163 	bne.w	800bf0c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d132      	bne.n	800bcb4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5a:	691a      	ldr	r2, [r3, #16]
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	0159      	lsls	r1, r3, #5
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	440b      	add	r3, r1
 800bc64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4ba5      	ldr	r3, [pc, #660]	; (800bf00 <USB_EPStartXfer+0x2dc>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	0151      	lsls	r1, r2, #5
 800bc82:	69fa      	ldr	r2, [r7, #28]
 800bc84:	440a      	add	r2, r1
 800bc86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	015a      	lsls	r2, r3, #5
 800bc94:	69fb      	ldr	r3, [r7, #28]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc9c:	691a      	ldr	r2, [r3, #16]
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	0159      	lsls	r1, r3, #5
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	440b      	add	r3, r1
 800bca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4b95      	ldr	r3, [pc, #596]	; (800bf04 <USB_EPStartXfer+0x2e0>)
 800bcae:	4013      	ands	r3, r2
 800bcb0:	610b      	str	r3, [r1, #16]
 800bcb2:	e074      	b.n	800bd9e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc0:	691a      	ldr	r2, [r3, #16]
 800bcc2:	69bb      	ldr	r3, [r7, #24]
 800bcc4:	0159      	lsls	r1, r3, #5
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	440b      	add	r3, r1
 800bcca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4b8c      	ldr	r3, [pc, #560]	; (800bf04 <USB_EPStartXfer+0x2e0>)
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	015a      	lsls	r2, r3, #5
 800bcda:	69fb      	ldr	r3, [r7, #28]
 800bcdc:	4413      	add	r3, r2
 800bcde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce2:	691a      	ldr	r2, [r3, #16]
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	0159      	lsls	r1, r3, #5
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	440b      	add	r3, r1
 800bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	4b83      	ldr	r3, [pc, #524]	; (800bf00 <USB_EPStartXfer+0x2dc>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	015a      	lsls	r2, r3, #5
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd04:	691a      	ldr	r2, [r3, #16]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	6959      	ldr	r1, [r3, #20]
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	440b      	add	r3, r1
 800bd10:	1e59      	subs	r1, r3, #1
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd1a:	04d9      	lsls	r1, r3, #19
 800bd1c:	4b7a      	ldr	r3, [pc, #488]	; (800bf08 <USB_EPStartXfer+0x2e4>)
 800bd1e:	400b      	ands	r3, r1
 800bd20:	69b9      	ldr	r1, [r7, #24]
 800bd22:	0148      	lsls	r0, r1, #5
 800bd24:	69f9      	ldr	r1, [r7, #28]
 800bd26:	4401      	add	r1, r0
 800bd28:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3c:	691a      	ldr	r2, [r3, #16]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd46:	69b9      	ldr	r1, [r7, #24]
 800bd48:	0148      	lsls	r0, r1, #5
 800bd4a:	69f9      	ldr	r1, [r7, #28]
 800bd4c:	4401      	add	r1, r0
 800bd4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd52:	4313      	orrs	r3, r2
 800bd54:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	78db      	ldrb	r3, [r3, #3]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d11f      	bne.n	800bd9e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	69ba      	ldr	r2, [r7, #24]
 800bd6e:	0151      	lsls	r1, r2, #5
 800bd70:	69fa      	ldr	r2, [r7, #28]
 800bd72:	440a      	add	r2, r1
 800bd74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd78:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bd7c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	015a      	lsls	r2, r3, #5
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	4413      	add	r3, r2
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	69ba      	ldr	r2, [r7, #24]
 800bd8e:	0151      	lsls	r1, r2, #5
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	440a      	add	r2, r1
 800bd94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd9c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d14b      	bne.n	800be3c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	015a      	lsls	r2, r3, #5
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb8:	461a      	mov	r2, r3
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	78db      	ldrb	r3, [r3, #3]
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d128      	bne.n	800be1a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d110      	bne.n	800bdfa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69ba      	ldr	r2, [r7, #24]
 800bde8:	0151      	lsls	r1, r2, #5
 800bdea:	69fa      	ldr	r2, [r7, #28]
 800bdec:	440a      	add	r2, r1
 800bdee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdf6:	6013      	str	r3, [r2, #0]
 800bdf8:	e00f      	b.n	800be1a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	015a      	lsls	r2, r3, #5
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	4413      	add	r3, r2
 800be02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	0151      	lsls	r1, r2, #5
 800be0c:	69fa      	ldr	r2, [r7, #28]
 800be0e:	440a      	add	r2, r1
 800be10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be18:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	015a      	lsls	r2, r3, #5
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	4413      	add	r3, r2
 800be22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	0151      	lsls	r1, r2, #5
 800be2c:	69fa      	ldr	r2, [r7, #28]
 800be2e:	440a      	add	r2, r1
 800be30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be38:	6013      	str	r3, [r2, #0]
 800be3a:	e133      	b.n	800c0a4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	015a      	lsls	r2, r3, #5
 800be40:	69fb      	ldr	r3, [r7, #28]
 800be42:	4413      	add	r3, r2
 800be44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	69ba      	ldr	r2, [r7, #24]
 800be4c:	0151      	lsls	r1, r2, #5
 800be4e:	69fa      	ldr	r2, [r7, #28]
 800be50:	440a      	add	r2, r1
 800be52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800be5a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	78db      	ldrb	r3, [r3, #3]
 800be60:	2b01      	cmp	r3, #1
 800be62:	d015      	beq.n	800be90 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	695b      	ldr	r3, [r3, #20]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 811b 	beq.w	800c0a4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800be6e:	69fb      	ldr	r3, [r7, #28]
 800be70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	f003 030f 	and.w	r3, r3, #15
 800be7e:	2101      	movs	r1, #1
 800be80:	fa01 f303 	lsl.w	r3, r1, r3
 800be84:	69f9      	ldr	r1, [r7, #28]
 800be86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be8a:	4313      	orrs	r3, r2
 800be8c:	634b      	str	r3, [r1, #52]	; 0x34
 800be8e:	e109      	b.n	800c0a4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d110      	bne.n	800bec2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	69ba      	ldr	r2, [r7, #24]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	69fa      	ldr	r2, [r7, #28]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bebe:	6013      	str	r3, [r2, #0]
 800bec0:	e00f      	b.n	800bee2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	69ba      	ldr	r2, [r7, #24]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bedc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bee0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	68d9      	ldr	r1, [r3, #12]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	781a      	ldrb	r2, [r3, #0]
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	b298      	uxth	r0, r3
 800bef0:	79fb      	ldrb	r3, [r7, #7]
 800bef2:	9300      	str	r3, [sp, #0]
 800bef4:	4603      	mov	r3, r0
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f000 fa38 	bl	800c36c <USB_WritePacket>
 800befc:	e0d2      	b.n	800c0a4 <USB_EPStartXfer+0x480>
 800befe:	bf00      	nop
 800bf00:	e007ffff 	.word	0xe007ffff
 800bf04:	fff80000 	.word	0xfff80000
 800bf08:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf0c:	69bb      	ldr	r3, [r7, #24]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf18:	691a      	ldr	r2, [r3, #16]
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	0159      	lsls	r1, r3, #5
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	440b      	add	r3, r1
 800bf22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf26:	4619      	mov	r1, r3
 800bf28:	4b61      	ldr	r3, [pc, #388]	; (800c0b0 <USB_EPStartXfer+0x48c>)
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	691a      	ldr	r2, [r3, #16]
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	0159      	lsls	r1, r3, #5
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	440b      	add	r3, r1
 800bf44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf48:	4619      	mov	r1, r3
 800bf4a:	4b5a      	ldr	r3, [pc, #360]	; (800c0b4 <USB_EPStartXfer+0x490>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d123      	bne.n	800bfa0 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	015a      	lsls	r2, r3, #5
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	4413      	add	r3, r2
 800bf60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf64:	691a      	ldr	r2, [r3, #16]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf6e:	69b9      	ldr	r1, [r7, #24]
 800bf70:	0148      	lsls	r0, r1, #5
 800bf72:	69f9      	ldr	r1, [r7, #28]
 800bf74:	4401      	add	r1, r0
 800bf76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	69fa      	ldr	r2, [r7, #28]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf9c:	6113      	str	r3, [r2, #16]
 800bf9e:	e033      	b.n	800c008 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	695a      	ldr	r2, [r3, #20]
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	1e5a      	subs	r2, r3, #1
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfc2:	691a      	ldr	r2, [r3, #16]
 800bfc4:	8afb      	ldrh	r3, [r7, #22]
 800bfc6:	04d9      	lsls	r1, r3, #19
 800bfc8:	4b3b      	ldr	r3, [pc, #236]	; (800c0b8 <USB_EPStartXfer+0x494>)
 800bfca:	400b      	ands	r3, r1
 800bfcc:	69b9      	ldr	r1, [r7, #24]
 800bfce:	0148      	lsls	r0, r1, #5
 800bfd0:	69f9      	ldr	r1, [r7, #28]
 800bfd2:	4401      	add	r1, r0
 800bfd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bfdc:	69bb      	ldr	r3, [r7, #24]
 800bfde:	015a      	lsls	r2, r3, #5
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfe8:	691a      	ldr	r2, [r3, #16]
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	8af9      	ldrh	r1, [r7, #22]
 800bff0:	fb01 f303 	mul.w	r3, r1, r3
 800bff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bff8:	69b9      	ldr	r1, [r7, #24]
 800bffa:	0148      	lsls	r0, r1, #5
 800bffc:	69f9      	ldr	r1, [r7, #28]
 800bffe:	4401      	add	r1, r0
 800c000:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c004:	4313      	orrs	r3, r2
 800c006:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c008:	79fb      	ldrb	r3, [r7, #7]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d10d      	bne.n	800c02a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	68d9      	ldr	r1, [r3, #12]
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	015a      	lsls	r2, r3, #5
 800c01e:	69fb      	ldr	r3, [r7, #28]
 800c020:	4413      	add	r3, r2
 800c022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c026:	460a      	mov	r2, r1
 800c028:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	78db      	ldrb	r3, [r3, #3]
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d128      	bne.n	800c084 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c038:	689b      	ldr	r3, [r3, #8]
 800c03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d110      	bne.n	800c064 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	69ba      	ldr	r2, [r7, #24]
 800c052:	0151      	lsls	r1, r2, #5
 800c054:	69fa      	ldr	r2, [r7, #28]
 800c056:	440a      	add	r2, r1
 800c058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c05c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c060:	6013      	str	r3, [r2, #0]
 800c062:	e00f      	b.n	800c084 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	015a      	lsls	r2, r3, #5
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	4413      	add	r3, r2
 800c06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69ba      	ldr	r2, [r7, #24]
 800c074:	0151      	lsls	r1, r2, #5
 800c076:	69fa      	ldr	r2, [r7, #28]
 800c078:	440a      	add	r2, r1
 800c07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c07e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c082:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c084:	69bb      	ldr	r3, [r7, #24]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	69fb      	ldr	r3, [r7, #28]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	69ba      	ldr	r2, [r7, #24]
 800c094:	0151      	lsls	r1, r2, #5
 800c096:	69fa      	ldr	r2, [r7, #28]
 800c098:	440a      	add	r2, r1
 800c09a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c09e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c0a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3720      	adds	r7, #32
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	fff80000 	.word	0xfff80000
 800c0b4:	e007ffff 	.word	0xe007ffff
 800c0b8:	1ff80000 	.word	0x1ff80000

0800c0bc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	60b9      	str	r1, [r7, #8]
 800c0c6:	4613      	mov	r3, r2
 800c0c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	781b      	ldrb	r3, [r3, #0]
 800c0d2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	785b      	ldrb	r3, [r3, #1]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	f040 80cd 	bne.w	800c278 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c0de:	68bb      	ldr	r3, [r7, #8]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d132      	bne.n	800c14c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	691a      	ldr	r2, [r3, #16]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	0159      	lsls	r1, r3, #5
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	4619      	mov	r1, r3
 800c102:	4b98      	ldr	r3, [pc, #608]	; (800c364 <USB_EP0StartXfer+0x2a8>)
 800c104:	4013      	ands	r3, r2
 800c106:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	015a      	lsls	r2, r3, #5
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	4413      	add	r3, r2
 800c110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	693a      	ldr	r2, [r7, #16]
 800c118:	0151      	lsls	r1, r2, #5
 800c11a:	697a      	ldr	r2, [r7, #20]
 800c11c:	440a      	add	r2, r1
 800c11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c122:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c126:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	015a      	lsls	r2, r3, #5
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	4413      	add	r3, r2
 800c130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c134:	691a      	ldr	r2, [r3, #16]
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	0159      	lsls	r1, r3, #5
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	440b      	add	r3, r1
 800c13e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c142:	4619      	mov	r1, r3
 800c144:	4b88      	ldr	r3, [pc, #544]	; (800c368 <USB_EP0StartXfer+0x2ac>)
 800c146:	4013      	ands	r3, r2
 800c148:	610b      	str	r3, [r1, #16]
 800c14a:	e04e      	b.n	800c1ea <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	015a      	lsls	r2, r3, #5
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	4413      	add	r3, r2
 800c154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c158:	691a      	ldr	r2, [r3, #16]
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	0159      	lsls	r1, r3, #5
 800c15e:	697b      	ldr	r3, [r7, #20]
 800c160:	440b      	add	r3, r1
 800c162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c166:	4619      	mov	r1, r3
 800c168:	4b7f      	ldr	r3, [pc, #508]	; (800c368 <USB_EP0StartXfer+0x2ac>)
 800c16a:	4013      	ands	r3, r2
 800c16c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	4413      	add	r3, r2
 800c176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c17a:	691a      	ldr	r2, [r3, #16]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	0159      	lsls	r1, r3, #5
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	440b      	add	r3, r1
 800c184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c188:	4619      	mov	r1, r3
 800c18a:	4b76      	ldr	r3, [pc, #472]	; (800c364 <USB_EP0StartXfer+0x2a8>)
 800c18c:	4013      	ands	r3, r2
 800c18e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	695a      	ldr	r2, [r3, #20]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d903      	bls.n	800c1a4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	689a      	ldr	r2, [r3, #8]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	693a      	ldr	r2, [r7, #16]
 800c1b4:	0151      	lsls	r1, r2, #5
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	440a      	add	r2, r1
 800c1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d0:	691a      	ldr	r2, [r3, #16]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1da:	6939      	ldr	r1, [r7, #16]
 800c1dc:	0148      	lsls	r0, r1, #5
 800c1de:	6979      	ldr	r1, [r7, #20]
 800c1e0:	4401      	add	r1, r0
 800c1e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d11e      	bne.n	800c22e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c204:	461a      	mov	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	691b      	ldr	r3, [r3, #16]
 800c20a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	0151      	lsls	r1, r2, #5
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	440a      	add	r2, r1
 800c222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c226:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c22a:	6013      	str	r3, [r2, #0]
 800c22c:	e092      	b.n	800c354 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	4413      	add	r3, r2
 800c236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	693a      	ldr	r2, [r7, #16]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	440a      	add	r2, r1
 800c244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c248:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c24c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	695b      	ldr	r3, [r3, #20]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d07e      	beq.n	800c354 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c25c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	f003 030f 	and.w	r3, r3, #15
 800c266:	2101      	movs	r1, #1
 800c268:	fa01 f303 	lsl.w	r3, r1, r3
 800c26c:	6979      	ldr	r1, [r7, #20]
 800c26e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c272:	4313      	orrs	r3, r2
 800c274:	634b      	str	r3, [r1, #52]	; 0x34
 800c276:	e06d      	b.n	800c354 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	015a      	lsls	r2, r3, #5
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	4413      	add	r3, r2
 800c280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c284:	691a      	ldr	r2, [r3, #16]
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	0159      	lsls	r1, r3, #5
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	440b      	add	r3, r1
 800c28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c292:	4619      	mov	r1, r3
 800c294:	4b34      	ldr	r3, [pc, #208]	; (800c368 <USB_EP0StartXfer+0x2ac>)
 800c296:	4013      	ands	r3, r2
 800c298:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a6:	691a      	ldr	r2, [r3, #16]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	0159      	lsls	r1, r3, #5
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	440b      	add	r3, r1
 800c2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4b2b      	ldr	r3, [pc, #172]	; (800c364 <USB_EP0StartXfer+0x2a8>)
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	695b      	ldr	r3, [r3, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d003      	beq.n	800c2cc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	689a      	ldr	r2, [r3, #8]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	015a      	lsls	r2, r3, #5
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	0151      	lsls	r1, r2, #5
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	440a      	add	r2, r1
 800c2e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f8:	691a      	ldr	r2, [r3, #16]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c302:	6939      	ldr	r1, [r7, #16]
 800c304:	0148      	lsls	r0, r1, #5
 800c306:	6979      	ldr	r1, [r7, #20]
 800c308:	4401      	add	r1, r0
 800c30a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c30e:	4313      	orrs	r3, r2
 800c310:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c312:	79fb      	ldrb	r3, [r7, #7]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d10d      	bne.n	800c334 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	68db      	ldr	r3, [r3, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d009      	beq.n	800c334 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	68d9      	ldr	r1, [r3, #12]
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	015a      	lsls	r2, r3, #5
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	4413      	add	r3, r2
 800c32c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c330:	460a      	mov	r2, r1
 800c332:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	0151      	lsls	r1, r2, #5
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	440a      	add	r2, r1
 800c34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c34e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	371c      	adds	r7, #28
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	e007ffff 	.word	0xe007ffff
 800c368:	fff80000 	.word	0xfff80000

0800c36c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b089      	sub	sp, #36	; 0x24
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	4611      	mov	r1, r2
 800c378:	461a      	mov	r2, r3
 800c37a:	460b      	mov	r3, r1
 800c37c:	71fb      	strb	r3, [r7, #7]
 800c37e:	4613      	mov	r3, r2
 800c380:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c38a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d11a      	bne.n	800c3c8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c392:	88bb      	ldrh	r3, [r7, #4]
 800c394:	3303      	adds	r3, #3
 800c396:	089b      	lsrs	r3, r3, #2
 800c398:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c39a:	2300      	movs	r3, #0
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	e00f      	b.n	800c3c0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c3a0:	79fb      	ldrb	r3, [r7, #7]
 800c3a2:	031a      	lsls	r2, r3, #12
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c3b4:	69fb      	ldr	r3, [r7, #28]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c3ba:	69bb      	ldr	r3, [r7, #24]
 800c3bc:	3301      	adds	r3, #1
 800c3be:	61bb      	str	r3, [r7, #24]
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d3eb      	bcc.n	800c3a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3724      	adds	r7, #36	; 0x24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr

0800c3d6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c3d6:	b480      	push	{r7}
 800c3d8:	b089      	sub	sp, #36	; 0x24
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c3ec:	88fb      	ldrh	r3, [r7, #6]
 800c3ee:	3303      	adds	r3, #3
 800c3f0:	089b      	lsrs	r3, r3, #2
 800c3f2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	61bb      	str	r3, [r7, #24]
 800c3f8:	e00b      	b.n	800c412 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	601a      	str	r2, [r3, #0]
    pDest++;
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	3304      	adds	r3, #4
 800c40a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c40c:	69bb      	ldr	r3, [r7, #24]
 800c40e:	3301      	adds	r3, #1
 800c410:	61bb      	str	r3, [r7, #24]
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	429a      	cmp	r2, r3
 800c418:	d3ef      	bcc.n	800c3fa <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c41a:	69fb      	ldr	r3, [r7, #28]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3724      	adds	r7, #36	; 0x24
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c428:	b480      	push	{r7}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	785b      	ldrb	r3, [r3, #1]
 800c440:	2b01      	cmp	r3, #1
 800c442:	d12c      	bne.n	800c49e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	015a      	lsls	r2, r3, #5
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	4413      	add	r3, r2
 800c44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	db12      	blt.n	800c47c <USB_EPSetStall+0x54>
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00f      	beq.n	800c47c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	015a      	lsls	r2, r3, #5
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	4413      	add	r3, r2
 800c464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	0151      	lsls	r1, r2, #5
 800c46e:	68fa      	ldr	r2, [r7, #12]
 800c470:	440a      	add	r2, r1
 800c472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c476:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c47a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	015a      	lsls	r2, r3, #5
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4413      	add	r3, r2
 800c484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	0151      	lsls	r1, r2, #5
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	440a      	add	r2, r1
 800c492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c496:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	e02b      	b.n	800c4f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	015a      	lsls	r2, r3, #5
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	db12      	blt.n	800c4d6 <USB_EPSetStall+0xae>
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00f      	beq.n	800c4d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	015a      	lsls	r2, r3, #5
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	4413      	add	r3, r2
 800c4be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	0151      	lsls	r1, r2, #5
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	440a      	add	r2, r1
 800c4cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c4d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	015a      	lsls	r2, r3, #5
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	4413      	add	r3, r2
 800c4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	0151      	lsls	r1, r2, #5
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	440a      	add	r2, r1
 800c4ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c4f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c4f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3714      	adds	r7, #20
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	785b      	ldrb	r3, [r3, #1]
 800c51c:	2b01      	cmp	r3, #1
 800c51e:	d128      	bne.n	800c572 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	015a      	lsls	r2, r3, #5
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	4413      	add	r3, r2
 800c528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68ba      	ldr	r2, [r7, #8]
 800c530:	0151      	lsls	r1, r2, #5
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	440a      	add	r2, r1
 800c536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c53a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c53e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	78db      	ldrb	r3, [r3, #3]
 800c544:	2b03      	cmp	r3, #3
 800c546:	d003      	beq.n	800c550 <USB_EPClearStall+0x4c>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	78db      	ldrb	r3, [r3, #3]
 800c54c:	2b02      	cmp	r3, #2
 800c54e:	d138      	bne.n	800c5c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	015a      	lsls	r2, r3, #5
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	4413      	add	r3, r2
 800c558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	68ba      	ldr	r2, [r7, #8]
 800c560:	0151      	lsls	r1, r2, #5
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	440a      	add	r2, r1
 800c566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c56a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c56e:	6013      	str	r3, [r2, #0]
 800c570:	e027      	b.n	800c5c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	015a      	lsls	r2, r3, #5
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	4413      	add	r3, r2
 800c57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	0151      	lsls	r1, r2, #5
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	440a      	add	r2, r1
 800c588:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c58c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c590:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	78db      	ldrb	r3, [r3, #3]
 800c596:	2b03      	cmp	r3, #3
 800c598:	d003      	beq.n	800c5a2 <USB_EPClearStall+0x9e>
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	78db      	ldrb	r3, [r3, #3]
 800c59e:	2b02      	cmp	r3, #2
 800c5a0:	d10f      	bne.n	800c5c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	015a      	lsls	r2, r3, #5
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68ba      	ldr	r2, [r7, #8]
 800c5b2:	0151      	lsls	r1, r2, #5
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	440a      	add	r2, r1
 800c5b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	460b      	mov	r3, r1
 800c5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c5ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c5f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	011b      	lsls	r3, r3, #4
 800c600:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c604:	68f9      	ldr	r1, [r7, #12]
 800c606:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c60a:	4313      	orrs	r3, r2
 800c60c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3714      	adds	r7, #20
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c636:	f023 0302 	bic.w	r3, r3, #2
 800c63a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c63c:	2003      	movs	r0, #3
 800c63e:	f7f5 fa13 	bl	8001a68 <HAL_Delay>

  return HAL_OK;
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	3710      	adds	r7, #16
 800c648:	46bd      	mov	sp, r7
 800c64a:	bd80      	pop	{r7, pc}

0800c64c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	b084      	sub	sp, #16
 800c650:	af00      	add	r7, sp, #0
 800c652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c666:	f043 0302 	orr.w	r3, r3, #2
 800c66a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c66c:	2003      	movs	r0, #3
 800c66e:	f7f5 f9fb 	bl	8001a68 <HAL_Delay>

  return HAL_OK;
 800c672:	2300      	movs	r3, #0
}
 800c674:	4618      	mov	r0, r3
 800c676:	3710      	adds	r7, #16
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c67c:	b480      	push	{r7}
 800c67e:	b085      	sub	sp, #20
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	695b      	ldr	r3, [r3, #20]
 800c688:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	699b      	ldr	r3, [r3, #24]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	4013      	ands	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c694:	68fb      	ldr	r3, [r7, #12]
}
 800c696:	4618      	mov	r0, r3
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr

0800c6a2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6a2:	b480      	push	{r7}
 800c6a4:	b085      	sub	sp, #20
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6be:	69db      	ldr	r3, [r3, #28]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	0c1b      	lsrs	r3, r3, #16
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6f2:	69db      	ldr	r3, [r3, #28]
 800c6f4:	68ba      	ldr	r2, [r7, #8]
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	b29b      	uxth	r3, r3
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr

0800c70a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
 800c712:	460b      	mov	r3, r1
 800c714:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c71a:	78fb      	ldrb	r3, [r7, #3]
 800c71c:	015a      	lsls	r2, r3, #5
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	68ba      	ldr	r2, [r7, #8]
 800c734:	4013      	ands	r3, r2
 800c736:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c738:	68bb      	ldr	r3, [r7, #8]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c746:	b480      	push	{r7}
 800c748:	b087      	sub	sp, #28
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	460b      	mov	r3, r1
 800c750:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c768:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c76a:	78fb      	ldrb	r3, [r7, #3]
 800c76c:	f003 030f 	and.w	r3, r3, #15
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	fa22 f303 	lsr.w	r3, r2, r3
 800c776:	01db      	lsls	r3, r3, #7
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c780:	78fb      	ldrb	r3, [r7, #3]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	4413      	add	r3, r2
 800c788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	4013      	ands	r3, r2
 800c792:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c794:	68bb      	ldr	r3, [r7, #8]
}
 800c796:	4618      	mov	r0, r3
 800c798:	371c      	adds	r7, #28
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr

0800c7a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c7a2:	b480      	push	{r7}
 800c7a4:	b083      	sub	sp, #12
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	f003 0301 	and.w	r3, r3, #1
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
	...

0800c7c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b085      	sub	sp, #20
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <USB_ActivateSetup+0x44>)
 800c7de:	4013      	ands	r3, r2
 800c7e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c7f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c7f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr
 800c804:	fffff800 	.word	0xfffff800

0800c808 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	460b      	mov	r3, r1
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	333c      	adds	r3, #60	; 0x3c
 800c81e:	3304      	adds	r3, #4
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	4a26      	ldr	r2, [pc, #152]	; (800c8c0 <USB_EP0_OutStart+0xb8>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d90a      	bls.n	800c842 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c838:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c83c:	d101      	bne.n	800c842 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	e037      	b.n	800c8b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c848:	461a      	mov	r2, r3
 800c84a:	2300      	movs	r3, #0
 800c84c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c85c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c860:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c870:	f043 0318 	orr.w	r3, r3, #24
 800c874:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c884:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c888:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c88a:	7afb      	ldrb	r3, [r7, #11]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d10f      	bne.n	800c8b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	697a      	ldr	r2, [r7, #20]
 800c8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c8aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c8ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	4f54300a 	.word	0x4f54300a

0800c8c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b085      	sub	sp, #20
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	60fb      	str	r3, [r7, #12]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	4a13      	ldr	r2, [pc, #76]	; (800c928 <USB_CoreReset+0x64>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d901      	bls.n	800c8e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c8de:	2303      	movs	r3, #3
 800c8e0:	e01b      	b.n	800c91a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	daf2      	bge.n	800c8d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	f043 0201 	orr.w	r2, r3, #1
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	60fb      	str	r3, [r7, #12]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	4a09      	ldr	r2, [pc, #36]	; (800c928 <USB_CoreReset+0x64>)
 800c904:	4293      	cmp	r3, r2
 800c906:	d901      	bls.n	800c90c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c908:	2303      	movs	r3, #3
 800c90a:	e006      	b.n	800c91a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b01      	cmp	r3, #1
 800c916:	d0f0      	beq.n	800c8fa <USB_CoreReset+0x36>

  return HAL_OK;
 800c918:	2300      	movs	r3, #0
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	3714      	adds	r7, #20
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	00030d40 	.word	0x00030d40

0800c92c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c930:	4904      	ldr	r1, [pc, #16]	; (800c944 <MX_FATFS_Init+0x18>)
 800c932:	4805      	ldr	r0, [pc, #20]	; (800c948 <MX_FATFS_Init+0x1c>)
 800c934:	f002 ff52 	bl	800f7dc <FATFS_LinkDriver>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	4b03      	ldr	r3, [pc, #12]	; (800c94c <MX_FATFS_Init+0x20>)
 800c93e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c940:	bf00      	nop
 800c942:	bd80      	pop	{r7, pc}
 800c944:	24004f6c 	.word	0x24004f6c
 800c948:	08013284 	.word	0x08013284
 800c94c:	24004f68 	.word	0x24004f68

0800c950 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c95a:	f000 f879 	bl	800ca50 <BSP_SD_IsDetected>
 800c95e:	4603      	mov	r3, r0
 800c960:	2b01      	cmp	r3, #1
 800c962:	d001      	beq.n	800c968 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c964:	2302      	movs	r3, #2
 800c966:	e012      	b.n	800c98e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800c968:	480b      	ldr	r0, [pc, #44]	; (800c998 <BSP_SD_Init+0x48>)
 800c96a:	f7fa f853 	bl	8006a14 <HAL_SD_Init>
 800c96e:	4603      	mov	r3, r0
 800c970:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c972:	79fb      	ldrb	r3, [r7, #7]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d109      	bne.n	800c98c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800c978:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800c97c:	4806      	ldr	r0, [pc, #24]	; (800c998 <BSP_SD_Init+0x48>)
 800c97e:	f7fa ff17 	bl	80077b0 <HAL_SD_ConfigWideBusOperation>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c988:	2301      	movs	r3, #1
 800c98a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c98c:	79fb      	ldrb	r3, [r7, #7]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	24004db4 	.word	0x24004db4

0800c99c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b088      	sub	sp, #32
 800c9a0:	af02      	add	r7, sp, #8
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
 800c9a8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	9300      	str	r3, [sp, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68ba      	ldr	r2, [r7, #8]
 800c9b6:	68f9      	ldr	r1, [r7, #12]
 800c9b8:	4806      	ldr	r0, [pc, #24]	; (800c9d4 <BSP_SD_ReadBlocks+0x38>)
 800c9ba:	f7fa f94f 	bl	8006c5c <HAL_SD_ReadBlocks>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d001      	beq.n	800c9c8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3718      	adds	r7, #24
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	24004db4 	.word	0x24004db4

0800c9d8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b088      	sub	sp, #32
 800c9dc:	af02      	add	r7, sp, #8
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	68f9      	ldr	r1, [r7, #12]
 800c9f4:	4806      	ldr	r0, [pc, #24]	; (800ca10 <BSP_SD_WriteBlocks+0x38>)
 800c9f6:	f7fa fabb 	bl	8006f70 <HAL_SD_WriteBlocks>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d001      	beq.n	800ca04 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca00:	2301      	movs	r3, #1
 800ca02:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3718      	adds	r7, #24
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	24004db4 	.word	0x24004db4

0800ca14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca18:	4805      	ldr	r0, [pc, #20]	; (800ca30 <BSP_SD_GetCardState+0x1c>)
 800ca1a:	f7fa ff73 	bl	8007904 <HAL_SD_GetCardState>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	bf14      	ite	ne
 800ca24:	2301      	movne	r3, #1
 800ca26:	2300      	moveq	r3, #0
 800ca28:	b2db      	uxtb	r3, r3
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	24004db4 	.word	0x24004db4

0800ca34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	4803      	ldr	r0, [pc, #12]	; (800ca4c <BSP_SD_GetCardInfo+0x18>)
 800ca40:	f7fa fe8a 	bl	8007758 <HAL_SD_GetCardInfo>
}
 800ca44:	bf00      	nop
 800ca46:	3708      	adds	r7, #8
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	24004db4 	.word	0x24004db4

0800ca50 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b082      	sub	sp, #8
 800ca54:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca56:	2301      	movs	r3, #1
 800ca58:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca5a:	f000 f80b 	bl	800ca74 <BSP_PlatformIsDetected>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d101      	bne.n	800ca68 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca64:	2300      	movs	r3, #0
 800ca66:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca68:	79fb      	ldrb	r3, [r7, #7]
 800ca6a:	b2db      	uxtb	r3, r3
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca7e:	2104      	movs	r1, #4
 800ca80:	4806      	ldr	r0, [pc, #24]	; (800ca9c <BSP_PlatformIsDetected+0x28>)
 800ca82:	f7f5 faaf 	bl	8001fe4 <HAL_GPIO_ReadPin>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ca90:	79fb      	ldrb	r3, [r7, #7]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3708      	adds	r7, #8
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop
 800ca9c:	58020400 	.word	0x58020400

0800caa0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800caaa:	4b0b      	ldr	r3, [pc, #44]	; (800cad8 <SD_CheckStatus+0x38>)
 800caac:	2201      	movs	r2, #1
 800caae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cab0:	f7ff ffb0 	bl	800ca14 <BSP_SD_GetCardState>
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d107      	bne.n	800caca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800caba:	4b07      	ldr	r3, [pc, #28]	; (800cad8 <SD_CheckStatus+0x38>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	f023 0301 	bic.w	r3, r3, #1
 800cac4:	b2da      	uxtb	r2, r3
 800cac6:	4b04      	ldr	r3, [pc, #16]	; (800cad8 <SD_CheckStatus+0x38>)
 800cac8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800caca:	4b03      	ldr	r3, [pc, #12]	; (800cad8 <SD_CheckStatus+0x38>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	b2db      	uxtb	r3, r3
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	240000a1 	.word	0x240000a1

0800cadc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cae6:	4b0b      	ldr	r3, [pc, #44]	; (800cb14 <SD_initialize+0x38>)
 800cae8:	2201      	movs	r2, #1
 800caea:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800caec:	f7ff ff30 	bl	800c950 <BSP_SD_Init>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d107      	bne.n	800cb06 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7ff ffd1 	bl	800caa0 <SD_CheckStatus>
 800cafe:	4603      	mov	r3, r0
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b04      	ldr	r3, [pc, #16]	; (800cb14 <SD_initialize+0x38>)
 800cb04:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cb06:	4b03      	ldr	r3, [pc, #12]	; (800cb14 <SD_initialize+0x38>)
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	b2db      	uxtb	r3, r3
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	240000a1 	.word	0x240000a1

0800cb18 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4603      	mov	r3, r0
 800cb20:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff ffbb 	bl	800caa0 <SD_CheckStatus>
 800cb2a:	4603      	mov	r3, r0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3708      	adds	r7, #8
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
 800cb3e:	603b      	str	r3, [r7, #0]
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cb48:	f04f 33ff 	mov.w	r3, #4294967295
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	68b8      	ldr	r0, [r7, #8]
 800cb52:	f7ff ff23 	bl	800c99c <BSP_SD_ReadBlocks>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d107      	bne.n	800cb6c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb5c:	bf00      	nop
 800cb5e:	f7ff ff59 	bl	800ca14 <BSP_SD_GetCardState>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1fa      	bne.n	800cb5e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3718      	adds	r7, #24
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b086      	sub	sp, #24
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	607a      	str	r2, [r7, #4]
 800cb80:	603b      	str	r3, [r7, #0]
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb86:	2301      	movs	r3, #1
 800cb88:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	6879      	ldr	r1, [r7, #4]
 800cb92:	68b8      	ldr	r0, [r7, #8]
 800cb94:	f7ff ff20 	bl	800c9d8 <BSP_SD_WriteBlocks>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d107      	bne.n	800cbae <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cb9e:	bf00      	nop
 800cba0:	f7ff ff38 	bl	800ca14 <BSP_SD_GetCardState>
 800cba4:	4603      	mov	r3, r0
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d1fa      	bne.n	800cba0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3718      	adds	r7, #24
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08c      	sub	sp, #48	; 0x30
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	603a      	str	r2, [r7, #0]
 800cbc2:	71fb      	strb	r3, [r7, #7]
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbce:	4b25      	ldr	r3, [pc, #148]	; (800cc64 <SD_ioctl+0xac>)
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	b2db      	uxtb	r3, r3
 800cbd4:	f003 0301 	and.w	r3, r3, #1
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d001      	beq.n	800cbe0 <SD_ioctl+0x28>
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e03c      	b.n	800cc5a <SD_ioctl+0xa2>

  switch (cmd)
 800cbe0:	79bb      	ldrb	r3, [r7, #6]
 800cbe2:	2b03      	cmp	r3, #3
 800cbe4:	d834      	bhi.n	800cc50 <SD_ioctl+0x98>
 800cbe6:	a201      	add	r2, pc, #4	; (adr r2, 800cbec <SD_ioctl+0x34>)
 800cbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbec:	0800cbfd 	.word	0x0800cbfd
 800cbf0:	0800cc05 	.word	0x0800cc05
 800cbf4:	0800cc1d 	.word	0x0800cc1d
 800cbf8:	0800cc37 	.word	0x0800cc37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc02:	e028      	b.n	800cc56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc04:	f107 0308 	add.w	r3, r7, #8
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff ff13 	bl	800ca34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc0e:	6a3a      	ldr	r2, [r7, #32]
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc14:	2300      	movs	r3, #0
 800cc16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc1a:	e01c      	b.n	800cc56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc1c:	f107 0308 	add.w	r3, r7, #8
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7ff ff07 	bl	800ca34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc34:	e00f      	b.n	800cc56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc36:	f107 0308 	add.w	r3, r7, #8
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7ff fefa 	bl	800ca34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc42:	0a5a      	lsrs	r2, r3, #9
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc4e:	e002      	b.n	800cc56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc50:	2304      	movs	r3, #4
 800cc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3730      	adds	r7, #48	; 0x30
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	240000a1 	.word	0x240000a1

0800cc68 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	460b      	mov	r3, r1
 800cc72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cc74:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cc78:	f006 f846 	bl	8012d08 <malloc>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d105      	bne.n	800cc92 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cc8e:	2302      	movs	r3, #2
 800cc90:	e034      	b.n	800ccfc <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	7c1b      	ldrb	r3, [r3, #16]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d115      	bne.n	800ccce <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cca6:	2202      	movs	r2, #2
 800cca8:	2101      	movs	r1, #1
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f005 fe8f 	bl	80129ce <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800ccb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccbc:	2202      	movs	r2, #2
 800ccbe:	2181      	movs	r1, #129	; 0x81
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f005 fe84 	bl	80129ce <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2201      	movs	r2, #1
 800ccca:	871a      	strh	r2, [r3, #56]	; 0x38
 800cccc:	e012      	b.n	800ccf4 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800ccce:	2340      	movs	r3, #64	; 0x40
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	2101      	movs	r1, #1
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f005 fe7a 	bl	80129ce <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cce2:	2340      	movs	r3, #64	; 0x40
 800cce4:	2202      	movs	r2, #2
 800cce6:	2181      	movs	r1, #129	; 0x81
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f005 fe70 	bl	80129ce <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 f98e 	bl	800d016 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800cd10:	2101      	movs	r1, #1
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f005 fe81 	bl	8012a1a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800cd20:	2181      	movs	r1, #129	; 0x81
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f005 fe79 	bl	8012a1a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 f9c7 	bl	800d0c2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d009      	beq.n	800cd52 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd44:	4618      	mov	r0, r3
 800cd46:	f005 ffe7 	bl	8012d18 <free>
    pdev->pClassData = NULL;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3708      	adds	r7, #8
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd6c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800cd72:	2300      	movs	r3, #0
 800cd74:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d04d      	beq.n	800ce1e <USBD_MSC_Setup+0xc2>
 800cd82:	2b20      	cmp	r3, #32
 800cd84:	f040 80c6 	bne.w	800cf14 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	785b      	ldrb	r3, [r3, #1]
 800cd8c:	2bfe      	cmp	r3, #254	; 0xfe
 800cd8e:	d002      	beq.n	800cd96 <USBD_MSC_Setup+0x3a>
 800cd90:	2bff      	cmp	r3, #255	; 0xff
 800cd92:	d024      	beq.n	800cdde <USBD_MSC_Setup+0x82>
 800cd94:	e03b      	b.n	800ce0e <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	885b      	ldrh	r3, [r3, #2]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d118      	bne.n	800cdd0 <USBD_MSC_Setup+0x74>
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	88db      	ldrh	r3, [r3, #6]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d114      	bne.n	800cdd0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	da0f      	bge.n	800cdd0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	4798      	blx	r3
 800cdba:	4603      	mov	r3, r0
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800cdc2:	693b      	ldr	r3, [r7, #16]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f002 fc58 	bl	800f67e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cdce:	e025      	b.n	800ce1c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f002 fbe2 	bl	800f59c <USBD_CtlError>
        ret = USBD_FAIL;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	75fb      	strb	r3, [r7, #23]
      break;
 800cddc:	e01e      	b.n	800ce1c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	885b      	ldrh	r3, [r3, #2]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10c      	bne.n	800ce00 <USBD_MSC_Setup+0xa4>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	88db      	ldrh	r3, [r3, #6]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d108      	bne.n	800ce00 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	db03      	blt.n	800ce00 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f000 f940 	bl	800d07e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cdfe:	e00d      	b.n	800ce1c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f002 fbca 	bl	800f59c <USBD_CtlError>
        ret = USBD_FAIL;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	75fb      	strb	r3, [r7, #23]
      break;
 800ce0c:	e006      	b.n	800ce1c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f002 fbc3 	bl	800f59c <USBD_CtlError>
      ret = USBD_FAIL;
 800ce16:	2303      	movs	r3, #3
 800ce18:	75fb      	strb	r3, [r7, #23]
      break;
 800ce1a:	bf00      	nop
    }
    break;
 800ce1c:	e081      	b.n	800cf22 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	785b      	ldrb	r3, [r3, #1]
 800ce22:	2b0b      	cmp	r3, #11
 800ce24:	d86d      	bhi.n	800cf02 <USBD_MSC_Setup+0x1a6>
 800ce26:	a201      	add	r2, pc, #4	; (adr r2, 800ce2c <USBD_MSC_Setup+0xd0>)
 800ce28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce2c:	0800ce5d 	.word	0x0800ce5d
 800ce30:	0800ced3 	.word	0x0800ced3
 800ce34:	0800cf03 	.word	0x0800cf03
 800ce38:	0800cf03 	.word	0x0800cf03
 800ce3c:	0800cf03 	.word	0x0800cf03
 800ce40:	0800cf03 	.word	0x0800cf03
 800ce44:	0800cf03 	.word	0x0800cf03
 800ce48:	0800cf03 	.word	0x0800cf03
 800ce4c:	0800cf03 	.word	0x0800cf03
 800ce50:	0800cf03 	.word	0x0800cf03
 800ce54:	0800ce85 	.word	0x0800ce85
 800ce58:	0800cead 	.word	0x0800cead
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce62:	2b03      	cmp	r3, #3
 800ce64:	d107      	bne.n	800ce76 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce66:	f107 030e 	add.w	r3, r7, #14
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f002 fc05 	bl	800f67e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ce74:	e04d      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f002 fb8f 	bl	800f59c <USBD_CtlError>
        ret = USBD_FAIL;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	75fb      	strb	r3, [r7, #23]
      break;
 800ce82:	e046      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d107      	bne.n	800ce9e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	3304      	adds	r3, #4
 800ce92:	2201      	movs	r2, #1
 800ce94:	4619      	mov	r1, r3
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f002 fbf1 	bl	800f67e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ce9c:	e039      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f002 fb7b 	bl	800f59c <USBD_CtlError>
        ret = USBD_FAIL;
 800cea6:	2303      	movs	r3, #3
 800cea8:	75fb      	strb	r3, [r7, #23]
      break;
 800ceaa:	e032      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d106      	bne.n	800cec4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	885b      	ldrh	r3, [r3, #2]
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	461a      	mov	r2, r3
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cec2:	e026      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f002 fb68 	bl	800f59c <USBD_CtlError>
        ret = USBD_FAIL;
 800cecc:	2303      	movs	r3, #3
 800cece:	75fb      	strb	r3, [r7, #23]
      break;
 800ced0:	e01f      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced8:	2b03      	cmp	r3, #3
 800ceda:	d119      	bne.n	800cf10 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	885b      	ldrh	r3, [r3, #2]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d115      	bne.n	800cf10 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	889b      	ldrh	r3, [r3, #4]
 800cee8:	b2db      	uxtb	r3, r3
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f005 fdb3 	bl	8012a58 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	889b      	ldrh	r3, [r3, #4]
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa5a 	bl	800d3b4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800cf00:	e006      	b.n	800cf10 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f002 fb49 	bl	800f59c <USBD_CtlError>
      ret = USBD_FAIL;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	75fb      	strb	r3, [r7, #23]
      break;
 800cf0e:	e000      	b.n	800cf12 <USBD_MSC_Setup+0x1b6>
      break;
 800cf10:	bf00      	nop
    }
    break;
 800cf12:	e006      	b.n	800cf22 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800cf14:	6839      	ldr	r1, [r7, #0]
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f002 fb40 	bl	800f59c <USBD_CtlError>
    ret = USBD_FAIL;
 800cf1c:	2303      	movs	r3, #3
 800cf1e:	75fb      	strb	r3, [r7, #23]
    break;
 800cf20:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3718      	adds	r7, #24
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	460b      	mov	r3, r1
 800cf36:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800cf38:	78fb      	ldrb	r3, [r7, #3]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	6878      	ldr	r0, [r7, #4]
 800cf3e:	f000 f8d1 	bl	800d0e4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3708      	adds	r7, #8
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800cf58:	78fb      	ldrb	r3, [r7, #3]
 800cf5a:	4619      	mov	r1, r3
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 f8f2 	bl	800d146 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2220      	movs	r2, #32
 800cf78:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800cf7a:	4b03      	ldr	r3, [pc, #12]	; (800cf88 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	240000dc 	.word	0x240000dc

0800cf8c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2220      	movs	r2, #32
 800cf98:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800cf9a:	4b03      	ldr	r3, [pc, #12]	; (800cfa8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	370c      	adds	r7, #12
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa6:	4770      	bx	lr
 800cfa8:	240000fc 	.word	0x240000fc

0800cfac <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2220      	movs	r2, #32
 800cfb8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800cfba:	4b03      	ldr	r3, [pc, #12]	; (800cfc8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	2400011c 	.word	0x2400011c

0800cfcc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	220a      	movs	r2, #10
 800cfd8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800cfda:	4b03      	ldr	r3, [pc, #12]	; (800cfe8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	370c      	adds	r7, #12
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr
 800cfe8:	2400013c 	.word	0x2400013c

0800cfec <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b083      	sub	sp, #12
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cffc:	2303      	movs	r3, #3
 800cffe:	e004      	b.n	800d00a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	683a      	ldr	r2, [r7, #0]
 800d004:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d024:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	2200      	movs	r2, #0
 800d03e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2000      	movs	r0, #0
 800d054:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d056:	2101      	movs	r1, #1
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f005 fcfd 	bl	8012a58 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d05e:	2181      	movs	r1, #129	; 0x81
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f005 fcf9 	bl	8012a58 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d06c:	231f      	movs	r3, #31
 800d06e:	2101      	movs	r1, #1
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f005 fdba 	bl	8012bea <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d076:	bf00      	nop
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d08c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2200      	movs	r2, #0
 800d092:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2201      	movs	r2, #1
 800d098:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d09a:	2181      	movs	r1, #129	; 0x81
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f005 fd19 	bl	8012ad4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d0a2:	2101      	movs	r1, #1
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f005 fd15 	bl	8012ad4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d0b0:	231f      	movs	r3, #31
 800d0b2:	2101      	movs	r1, #1
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f005 fd98 	bl	8012bea <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d0ba:	bf00      	nop
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d0c2:	b480      	push	{r7}
 800d0c4:	b085      	sub	sp, #20
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0d0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	721a      	strb	r2, [r3, #8]
}
 800d0d8:	bf00      	nop
 800d0da:	3714      	adds	r7, #20
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
 800d0ec:	460b      	mov	r3, r1
 800d0ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0f6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	7a1b      	ldrb	r3, [r3, #8]
 800d0fc:	2b02      	cmp	r3, #2
 800d0fe:	d004      	beq.n	800d10a <MSC_BOT_DataIn+0x26>
 800d100:	2b02      	cmp	r3, #2
 800d102:	db19      	blt.n	800d138 <MSC_BOT_DataIn+0x54>
 800d104:	2b04      	cmp	r3, #4
 800d106:	dc17      	bgt.n	800d138 <MSC_BOT_DataIn+0x54>
 800d108:	e011      	b.n	800d12e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d116:	461a      	mov	r2, r3
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 f973 	bl	800d404 <SCSI_ProcessCmd>
 800d11e:	4603      	mov	r3, r0
 800d120:	2b00      	cmp	r3, #0
 800d122:	da0b      	bge.n	800d13c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d124:	2101      	movs	r1, #1
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f8ea 	bl	800d300 <MSC_BOT_SendCSW>
    }
    break;
 800d12c:	e006      	b.n	800d13c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d12e:	2100      	movs	r1, #0
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f8e5 	bl	800d300 <MSC_BOT_SendCSW>
    break;
 800d136:	e002      	b.n	800d13e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d138:	bf00      	nop
 800d13a:	e000      	b.n	800d13e <MSC_BOT_DataIn+0x5a>
    break;
 800d13c:	bf00      	nop
  }
}
 800d13e:	bf00      	nop
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	460b      	mov	r3, r1
 800d150:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d158:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	7a1b      	ldrb	r3, [r3, #8]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d002      	beq.n	800d168 <MSC_BOT_DataOut+0x22>
 800d162:	2b01      	cmp	r3, #1
 800d164:	d004      	beq.n	800d170 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d166:	e015      	b.n	800d194 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d168:	6878      	ldr	r0, [r7, #4]
 800d16a:	f000 f817 	bl	800d19c <MSC_BOT_CBW_Decode>
      break;
 800d16e:	e011      	b.n	800d194 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d17c:	461a      	mov	r2, r3
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 f940 	bl	800d404 <SCSI_ProcessCmd>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	da03      	bge.n	800d192 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d18a:	2101      	movs	r1, #1
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f8b7 	bl	800d300 <MSC_BOT_SendCSW>
      break;
 800d192:	bf00      	nop
  }
}
 800d194:	bf00      	nop
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d19c:	b580      	push	{r7, lr}
 800d19e:	b084      	sub	sp, #16
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1aa:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f005 fd30 	bl	8012c2c <USBD_LL_GetRxDataSize>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b1f      	cmp	r3, #31
 800d1d0:	d114      	bne.n	800d1fc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d1d8:	4a32      	ldr	r2, [pc, #200]	; (800d2a4 <MSC_BOT_CBW_Decode+0x108>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d10e      	bne.n	800d1fc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d809      	bhi.n	800d1fc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d004      	beq.n	800d1fc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d1f8:	2b10      	cmp	r3, #16
 800d1fa:	d90e      	bls.n	800d21a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d202:	2320      	movs	r3, #32
 800d204:	2205      	movs	r2, #5
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fcc9 	bl	800db9e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2202      	movs	r2, #2
 800d210:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 f8a0 	bl	800d358 <MSC_BOT_Abort>
 800d218:	e041      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d226:	461a      	mov	r2, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 f8eb 	bl	800d404 <SCSI_ProcessCmd>
 800d22e:	4603      	mov	r3, r0
 800d230:	2b00      	cmp	r3, #0
 800d232:	da0c      	bge.n	800d24e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	7a1b      	ldrb	r3, [r3, #8]
 800d238:	2b05      	cmp	r3, #5
 800d23a:	d104      	bne.n	800d246 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d23c:	2101      	movs	r1, #1
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f85e 	bl	800d300 <MSC_BOT_SendCSW>
 800d244:	e02b      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f886 	bl	800d358 <MSC_BOT_Abort>
 800d24c:	e027      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	7a1b      	ldrb	r3, [r3, #8]
 800d252:	2b02      	cmp	r3, #2
 800d254:	d022      	beq.n	800d29c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	d01e      	beq.n	800d29c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d262:	2b03      	cmp	r3, #3
 800d264:	d01a      	beq.n	800d29c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f103 0110 	add.w	r1, r3, #16
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	68db      	ldr	r3, [r3, #12]
 800d278:	461a      	mov	r2, r3
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f814 	bl	800d2a8 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d280:	e00d      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d104      	bne.n	800d294 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d28a:	2100      	movs	r1, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 f837 	bl	800d300 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d292:	e004      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 f85f 	bl	800d358 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d29a:	e000      	b.n	800d29e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d29c:	bf00      	nop
    }
  }
}
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	43425355 	.word	0x43425355

0800d2a8 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2ba:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bf28      	it	cs
 800d2c8:	4613      	movcs	r3, r2
 800d2ca:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	1ad2      	subs	r2, r2, r3
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	2204      	movs	r2, #4
 800d2e8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	68ba      	ldr	r2, [r7, #8]
 800d2ee:	2181      	movs	r1, #129	; 0x81
 800d2f0:	68f8      	ldr	r0, [r7, #12]
 800d2f2:	f005 fc59 	bl	8012ba8 <USBD_LL_Transmit>
}
 800d2f6:	bf00      	nop
 800d2f8:	3718      	adds	r7, #24
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
	...

0800d300 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
 800d308:	460b      	mov	r3, r1
 800d30a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d312:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a0f      	ldr	r2, [pc, #60]	; (800d354 <MSC_BOT_SendCSW+0x54>)
 800d318:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2200      	movs	r2, #0
 800d328:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d330:	230d      	movs	r3, #13
 800d332:	2181      	movs	r1, #129	; 0x81
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f005 fc37 	bl	8012ba8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d340:	231f      	movs	r3, #31
 800d342:	2101      	movs	r1, #1
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f005 fc50 	bl	8012bea <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d34a:	bf00      	nop
 800d34c:	3710      	adds	r7, #16
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	53425355 	.word	0x53425355

0800d358 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b084      	sub	sp, #16
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d366:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d10c      	bne.n	800d38c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d380:	2b00      	cmp	r3, #0
 800d382:	d103      	bne.n	800d38c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d384:	2101      	movs	r1, #1
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f005 fb85 	bl	8012a96 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d38c:	2181      	movs	r1, #129	; 0x81
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f005 fb81 	bl	8012a96 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	7a5b      	ldrb	r3, [r3, #9]
 800d398:	2b02      	cmp	r3, #2
 800d39a:	d107      	bne.n	800d3ac <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d39c:	2181      	movs	r1, #129	; 0x81
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f005 fb79 	bl	8012a96 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d3a4:	2101      	movs	r1, #1
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f005 fb75 	bl	8012a96 <USBD_LL_StallEP>
  }
}
 800d3ac:	bf00      	nop
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3c6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	7a5b      	ldrb	r3, [r3, #9]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d108      	bne.n	800d3e2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d3d0:	2181      	movs	r1, #129	; 0x81
 800d3d2:	6878      	ldr	r0, [r7, #4]
 800d3d4:	f005 fb5f 	bl	8012a96 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d3d8:	2101      	movs	r1, #1
 800d3da:	6878      	ldr	r0, [r7, #4]
 800d3dc:	f005 fb5b 	bl	8012a96 <USBD_LL_StallEP>
 800d3e0:	e00d      	b.n	800d3fe <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d3e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	da08      	bge.n	800d3fc <MSC_BOT_CplClrFeature+0x48>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	7a5b      	ldrb	r3, [r3, #9]
 800d3ee:	2b01      	cmp	r3, #1
 800d3f0:	d004      	beq.n	800d3fc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f7ff ff83 	bl	800d300 <MSC_BOT_SendCSW>
 800d3fa:	e000      	b.n	800d3fe <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d3fc:	bf00      	nop
  }
}
 800d3fe:	3710      	adds	r7, #16
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	460b      	mov	r3, r1
 800d40e:	607a      	str	r2, [r7, #4]
 800d410:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d418:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	2b25      	cmp	r3, #37	; 0x25
 800d420:	d06e      	beq.n	800d500 <SCSI_ProcessCmd+0xfc>
 800d422:	2b25      	cmp	r3, #37	; 0x25
 800d424:	dc11      	bgt.n	800d44a <SCSI_ProcessCmd+0x46>
 800d426:	2b1a      	cmp	r3, #26
 800d428:	d04f      	beq.n	800d4ca <SCSI_ProcessCmd+0xc6>
 800d42a:	2b1a      	cmp	r3, #26
 800d42c:	dc06      	bgt.n	800d43c <SCSI_ProcessCmd+0x38>
 800d42e:	2b03      	cmp	r3, #3
 800d430:	d027      	beq.n	800d482 <SCSI_ProcessCmd+0x7e>
 800d432:	2b12      	cmp	r3, #18
 800d434:	d02e      	beq.n	800d494 <SCSI_ProcessCmd+0x90>
 800d436:	2b00      	cmp	r3, #0
 800d438:	d01a      	beq.n	800d470 <SCSI_ProcessCmd+0x6c>
 800d43a:	e0a0      	b.n	800d57e <SCSI_ProcessCmd+0x17a>
 800d43c:	2b1e      	cmp	r3, #30
 800d43e:	d03b      	beq.n	800d4b8 <SCSI_ProcessCmd+0xb4>
 800d440:	2b23      	cmp	r3, #35	; 0x23
 800d442:	d054      	beq.n	800d4ee <SCSI_ProcessCmd+0xea>
 800d444:	2b1b      	cmp	r3, #27
 800d446:	d02e      	beq.n	800d4a6 <SCSI_ProcessCmd+0xa2>
 800d448:	e099      	b.n	800d57e <SCSI_ProcessCmd+0x17a>
 800d44a:	2b5a      	cmp	r3, #90	; 0x5a
 800d44c:	d046      	beq.n	800d4dc <SCSI_ProcessCmd+0xd8>
 800d44e:	2b5a      	cmp	r3, #90	; 0x5a
 800d450:	dc07      	bgt.n	800d462 <SCSI_ProcessCmd+0x5e>
 800d452:	2b2a      	cmp	r3, #42	; 0x2a
 800d454:	d078      	beq.n	800d548 <SCSI_ProcessCmd+0x144>
 800d456:	2b2f      	cmp	r3, #47	; 0x2f
 800d458:	f000 8088 	beq.w	800d56c <SCSI_ProcessCmd+0x168>
 800d45c:	2b28      	cmp	r3, #40	; 0x28
 800d45e:	d061      	beq.n	800d524 <SCSI_ProcessCmd+0x120>
 800d460:	e08d      	b.n	800d57e <SCSI_ProcessCmd+0x17a>
 800d462:	2ba8      	cmp	r3, #168	; 0xa8
 800d464:	d067      	beq.n	800d536 <SCSI_ProcessCmd+0x132>
 800d466:	2baa      	cmp	r3, #170	; 0xaa
 800d468:	d077      	beq.n	800d55a <SCSI_ProcessCmd+0x156>
 800d46a:	2b9e      	cmp	r3, #158	; 0x9e
 800d46c:	d051      	beq.n	800d512 <SCSI_ProcessCmd+0x10e>
 800d46e:	e086      	b.n	800d57e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d470:	7afb      	ldrb	r3, [r7, #11]
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	4619      	mov	r1, r3
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f000 f893 	bl	800d5a2 <SCSI_TestUnitReady>
 800d47c:	4603      	mov	r3, r0
 800d47e:	75fb      	strb	r3, [r7, #23]
    break;
 800d480:	e089      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d482:	7afb      	ldrb	r3, [r7, #11]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	4619      	mov	r1, r3
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 fb0f 	bl	800daac <SCSI_RequestSense>
 800d48e:	4603      	mov	r3, r0
 800d490:	75fb      	strb	r3, [r7, #23]
    break;
 800d492:	e080      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	4619      	mov	r1, r3
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f000 f8cc 	bl	800d638 <SCSI_Inquiry>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	75fb      	strb	r3, [r7, #23]
    break;
 800d4a4:	e077      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d4a6:	7afb      	ldrb	r3, [r7, #11]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 fbb9 	bl	800dc24 <SCSI_StartStopUnit>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	75fb      	strb	r3, [r7, #23]
    break;
 800d4b6:	e06e      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d4b8:	7afb      	ldrb	r3, [r7, #11]
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	4619      	mov	r1, r3
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 fbfb 	bl	800dcba <SCSI_AllowPreventRemovable>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75fb      	strb	r3, [r7, #23]
    break;
 800d4c8:	e065      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d4ca:	7afb      	ldrb	r3, [r7, #11]
 800d4cc:	687a      	ldr	r2, [r7, #4]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f000 fa9f 	bl	800da14 <SCSI_ModeSense6>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75fb      	strb	r3, [r7, #23]
    break;
 800d4da:	e05c      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d4dc:	7afb      	ldrb	r3, [r7, #11]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	68f8      	ldr	r0, [r7, #12]
 800d4e4:	f000 fabc 	bl	800da60 <SCSI_ModeSense10>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	75fb      	strb	r3, [r7, #23]
    break;
 800d4ec:	e053      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d4ee:	7afb      	ldrb	r3, [r7, #11]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f000 fa20 	bl	800d93a <SCSI_ReadFormatCapacity>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	75fb      	strb	r3, [r7, #23]
    break;
 800d4fe:	e04a      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d500:	7afb      	ldrb	r3, [r7, #11]
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	4619      	mov	r1, r3
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	f000 f904 	bl	800d714 <SCSI_ReadCapacity10>
 800d50c:	4603      	mov	r3, r0
 800d50e:	75fb      	strb	r3, [r7, #23]
    break;
 800d510:	e041      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d512:	7afb      	ldrb	r3, [r7, #11]
 800d514:	687a      	ldr	r2, [r7, #4]
 800d516:	4619      	mov	r1, r3
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	f000 f96a 	bl	800d7f2 <SCSI_ReadCapacity16>
 800d51e:	4603      	mov	r3, r0
 800d520:	75fb      	strb	r3, [r7, #23]
    break;
 800d522:	e038      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d524:	7afb      	ldrb	r3, [r7, #11]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	4619      	mov	r1, r3
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f000 fbe8 	bl	800dd00 <SCSI_Read10>
 800d530:	4603      	mov	r3, r0
 800d532:	75fb      	strb	r3, [r7, #23]
    break;
 800d534:	e02f      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d536:	7afb      	ldrb	r3, [r7, #11]
 800d538:	687a      	ldr	r2, [r7, #4]
 800d53a:	4619      	mov	r1, r3
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 fc79 	bl	800de34 <SCSI_Read12>
 800d542:	4603      	mov	r3, r0
 800d544:	75fb      	strb	r3, [r7, #23]
    break;
 800d546:	e026      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d548:	7afb      	ldrb	r3, [r7, #11]
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	4619      	mov	r1, r3
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f000 fd15 	bl	800df7e <SCSI_Write10>
 800d554:	4603      	mov	r3, r0
 800d556:	75fb      	strb	r3, [r7, #23]
    break;
 800d558:	e01d      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d55a:	7afb      	ldrb	r3, [r7, #11]
 800d55c:	687a      	ldr	r2, [r7, #4]
 800d55e:	4619      	mov	r1, r3
 800d560:	68f8      	ldr	r0, [r7, #12]
 800d562:	f000 fdcb 	bl	800e0fc <SCSI_Write12>
 800d566:	4603      	mov	r3, r0
 800d568:	75fb      	strb	r3, [r7, #23]
    break;
 800d56a:	e014      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d56c:	7afb      	ldrb	r3, [r7, #11]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	4619      	mov	r1, r3
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 fe91 	bl	800e29a <SCSI_Verify10>
 800d578:	4603      	mov	r3, r0
 800d57a:	75fb      	strb	r3, [r7, #23]
    break;
 800d57c:	e00b      	b.n	800d596 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d57e:	7af9      	ldrb	r1, [r7, #11]
 800d580:	2320      	movs	r3, #32
 800d582:	2205      	movs	r2, #5
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f000 fb0a 	bl	800db9e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	2202      	movs	r2, #2
 800d58e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d590:	23ff      	movs	r3, #255	; 0xff
 800d592:	75fb      	strb	r3, [r7, #23]
    break;
 800d594:	bf00      	nop
  }

  return ret;
 800d596:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b086      	sub	sp, #24
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	60f8      	str	r0, [r7, #12]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	607a      	str	r2, [r7, #4]
 800d5ae:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d5b6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	2205      	movs	r2, #5
 800d5cc:	68f8      	ldr	r0, [r7, #12]
 800d5ce:	f000 fae6 	bl	800db9e <SCSI_SenseCode>

    return -1;
 800d5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d6:	e02a      	b.n	800d62e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d10b      	bne.n	800d5fa <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d5e2:	7af9      	ldrb	r1, [r7, #11]
 800d5e4:	233a      	movs	r3, #58	; 0x3a
 800d5e6:	2202      	movs	r2, #2
 800d5e8:	68f8      	ldr	r0, [r7, #12]
 800d5ea:	f000 fad8 	bl	800db9e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	2205      	movs	r2, #5
 800d5f2:	721a      	strb	r2, [r3, #8]
    return -1;
 800d5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d5f8:	e019      	b.n	800d62e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	7afa      	ldrb	r2, [r7, #11]
 800d604:	4610      	mov	r0, r2
 800d606:	4798      	blx	r3
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00b      	beq.n	800d626 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d60e:	7af9      	ldrb	r1, [r7, #11]
 800d610:	233a      	movs	r3, #58	; 0x3a
 800d612:	2202      	movs	r2, #2
 800d614:	68f8      	ldr	r0, [r7, #12]
 800d616:	f000 fac2 	bl	800db9e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2205      	movs	r2, #5
 800d61e:	721a      	strb	r2, [r3, #8]

    return -1;
 800d620:	f04f 33ff 	mov.w	r3, #4294967295
 800d624:	e003      	b.n	800d62e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	2200      	movs	r2, #0
 800d62a:	60da      	str	r2, [r3, #12]

  return 0;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	60f8      	str	r0, [r7, #12]
 800d640:	460b      	mov	r3, r1
 800d642:	607a      	str	r2, [r7, #4]
 800d644:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d64c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10a      	bne.n	800d66e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d65e:	2320      	movs	r3, #32
 800d660:	2205      	movs	r2, #5
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 fa9b 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800d668:	f04f 33ff 	mov.w	r3, #4294967295
 800d66c:	e04a      	b.n	800d704 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	3301      	adds	r3, #1
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d020      	beq.n	800d6be <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	3302      	adds	r3, #2
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d105      	bne.n	800d692 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d686:	2206      	movs	r2, #6
 800d688:	4920      	ldr	r1, [pc, #128]	; (800d70c <SCSI_Inquiry+0xd4>)
 800d68a:	69b8      	ldr	r0, [r7, #24]
 800d68c:	f000 ff50 	bl	800e530 <SCSI_UpdateBotData>
 800d690:	e037      	b.n	800d702 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	3302      	adds	r3, #2
 800d696:	781b      	ldrb	r3, [r3, #0]
 800d698:	2b80      	cmp	r3, #128	; 0x80
 800d69a:	d105      	bne.n	800d6a8 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d69c:	2208      	movs	r2, #8
 800d69e:	491c      	ldr	r1, [pc, #112]	; (800d710 <SCSI_Inquiry+0xd8>)
 800d6a0:	69b8      	ldr	r0, [r7, #24]
 800d6a2:	f000 ff45 	bl	800e530 <SCSI_UpdateBotData>
 800d6a6:	e02c      	b.n	800d702 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d6ae:	2324      	movs	r3, #36	; 0x24
 800d6b0:	2205      	movs	r2, #5
 800d6b2:	68f8      	ldr	r0, [r7, #12]
 800d6b4:	f000 fa73 	bl	800db9e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d6bc:	e022      	b.n	800d704 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6c4:	69d9      	ldr	r1, [r3, #28]
 800d6c6:	7afa      	ldrb	r2, [r7, #11]
 800d6c8:	4613      	mov	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	4413      	add	r3, r2
 800d6ce:	009b      	lsls	r3, r3, #2
 800d6d0:	440b      	add	r3, r1
 800d6d2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	3305      	adds	r3, #5
 800d6de:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	8bfa      	ldrh	r2, [r7, #30]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d303      	bcc.n	800d6f6 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	781b      	ldrb	r3, [r3, #0]
 800d6f4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d6f6:	8bfb      	ldrh	r3, [r7, #30]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6979      	ldr	r1, [r7, #20]
 800d6fc:	69b8      	ldr	r0, [r7, #24]
 800d6fe:	f000 ff17 	bl	800e530 <SCSI_UpdateBotData>
  }

  return 0;
 800d702:	2300      	movs	r3, #0
}
 800d704:	4618      	mov	r0, r3
 800d706:	3720      	adds	r7, #32
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	24000148 	.word	0x24000148
 800d710:	24000150 	.word	0x24000150

0800d714 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b086      	sub	sp, #24
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	460b      	mov	r3, r1
 800d71e:	607a      	str	r2, [r7, #4]
 800d720:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d728:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	697a      	ldr	r2, [r7, #20]
 800d734:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d738:	697a      	ldr	r2, [r7, #20]
 800d73a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d73e:	7af8      	ldrb	r0, [r7, #11]
 800d740:	4798      	blx	r3
 800d742:	4603      	mov	r3, r0
 800d744:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d746:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d104      	bne.n	800d758 <SCSI_ReadCapacity10+0x44>
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d754:	2b02      	cmp	r3, #2
 800d756:	d108      	bne.n	800d76a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d758:	7af9      	ldrb	r1, [r7, #11]
 800d75a:	233a      	movs	r3, #58	; 0x3a
 800d75c:	2202      	movs	r2, #2
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fa1d 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
 800d768:	e03f      	b.n	800d7ea <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d770:	3b01      	subs	r3, #1
 800d772:	0e1b      	lsrs	r3, r3, #24
 800d774:	b2da      	uxtb	r2, r3
 800d776:	697b      	ldr	r3, [r7, #20]
 800d778:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d780:	3b01      	subs	r3, #1
 800d782:	0c1b      	lsrs	r3, r3, #16
 800d784:	b2da      	uxtb	r2, r3
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d790:	3b01      	subs	r3, #1
 800d792:	0a1b      	lsrs	r3, r3, #8
 800d794:	b2da      	uxtb	r2, r3
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d7b0:	161b      	asrs	r3, r3, #24
 800d7b2:	b2da      	uxtb	r2, r3
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d7be:	141b      	asrs	r3, r3, #16
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d7cc:	0a1b      	lsrs	r3, r3, #8
 800d7ce:	b29b      	uxth	r3, r3
 800d7d0:	b2da      	uxtb	r2, r3
 800d7d2:	697b      	ldr	r3, [r7, #20]
 800d7d4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	697b      	ldr	r3, [r7, #20]
 800d7e0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2208      	movs	r2, #8
 800d7e6:	60da      	str	r2, [r3, #12]

  return 0;
 800d7e8:	2300      	movs	r3, #0

}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3718      	adds	r7, #24
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b088      	sub	sp, #32
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	60f8      	str	r0, [r7, #12]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	607a      	str	r2, [r7, #4]
 800d7fe:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d806:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	69ba      	ldr	r2, [r7, #24]
 800d812:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d816:	69ba      	ldr	r2, [r7, #24]
 800d818:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d81c:	7af8      	ldrb	r0, [r7, #11]
 800d81e:	4798      	blx	r3
 800d820:	4603      	mov	r3, r0
 800d822:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d824:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d104      	bne.n	800d836 <SCSI_ReadCapacity16+0x44>
 800d82c:	69bb      	ldr	r3, [r7, #24]
 800d82e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d832:	2b02      	cmp	r3, #2
 800d834:	d108      	bne.n	800d848 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d836:	7af9      	ldrb	r1, [r7, #11]
 800d838:	233a      	movs	r3, #58	; 0x3a
 800d83a:	2202      	movs	r2, #2
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f000 f9ae 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800d842:	f04f 33ff 	mov.w	r3, #4294967295
 800d846:	e074      	b.n	800d932 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	330a      	adds	r3, #10
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	330b      	adds	r3, #11
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d858:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	330c      	adds	r3, #12
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d862:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	320d      	adds	r2, #13
 800d868:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d86a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d870:	2300      	movs	r3, #0
 800d872:	77fb      	strb	r3, [r7, #31]
 800d874:	e007      	b.n	800d886 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800d876:	7ffb      	ldrb	r3, [r7, #31]
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	4413      	add	r3, r2
 800d87c:	2200      	movs	r2, #0
 800d87e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d880:	7ffb      	ldrb	r3, [r7, #31]
 800d882:	3301      	adds	r3, #1
 800d884:	77fb      	strb	r3, [r7, #31]
 800d886:	7ffa      	ldrb	r2, [r7, #31]
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	68db      	ldr	r3, [r3, #12]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d3f2      	bcc.n	800d876 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d896:	3b01      	subs	r3, #1
 800d898:	0e1b      	lsrs	r3, r3, #24
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	69bb      	ldr	r3, [r7, #24]
 800d89e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	0c1b      	lsrs	r3, r3, #16
 800d8aa:	b2da      	uxtb	r2, r3
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d8b0:	69bb      	ldr	r3, [r7, #24]
 800d8b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	0a1b      	lsrs	r3, r3, #8
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	69bb      	ldr	r3, [r7, #24]
 800d8be:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	b2da      	uxtb	r2, r3
 800d8cc:	69bb      	ldr	r3, [r7, #24]
 800d8ce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8d6:	161b      	asrs	r3, r3, #24
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	69bb      	ldr	r3, [r7, #24]
 800d8dc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d8de:	69bb      	ldr	r3, [r7, #24]
 800d8e0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8e4:	141b      	asrs	r3, r3, #16
 800d8e6:	b2da      	uxtb	r2, r3
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d8ec:	69bb      	ldr	r3, [r7, #24]
 800d8ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8f2:	0a1b      	lsrs	r3, r3, #8
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	69bb      	ldr	r3, [r7, #24]
 800d8fa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d902:	b2da      	uxtb	r2, r3
 800d904:	69bb      	ldr	r3, [r7, #24]
 800d906:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	330a      	adds	r3, #10
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	330b      	adds	r3, #11
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d918:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	330c      	adds	r3, #12
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d922:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	320d      	adds	r2, #13
 800d928:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d92a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	60da      	str	r2, [r3, #12]

  return 0;
 800d930:	2300      	movs	r3, #0
}
 800d932:	4618      	mov	r0, r3
 800d934:	3720      	adds	r7, #32
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}

0800d93a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d93a:	b580      	push	{r7, lr}
 800d93c:	b088      	sub	sp, #32
 800d93e:	af00      	add	r7, sp, #0
 800d940:	60f8      	str	r0, [r7, #12]
 800d942:	460b      	mov	r3, r1
 800d944:	607a      	str	r2, [r7, #4]
 800d946:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d94e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	f107 0214 	add.w	r2, r7, #20
 800d95c:	f107 0110 	add.w	r1, r7, #16
 800d960:	7af8      	ldrb	r0, [r7, #11]
 800d962:	4798      	blx	r3
 800d964:	4603      	mov	r3, r0
 800d966:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d104      	bne.n	800d97a <SCSI_ReadFormatCapacity+0x40>
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d976:	2b02      	cmp	r3, #2
 800d978:	d108      	bne.n	800d98c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d97a:	7af9      	ldrb	r1, [r7, #11]
 800d97c:	233a      	movs	r3, #58	; 0x3a
 800d97e:	2202      	movs	r2, #2
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 f90c 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800d986:	f04f 33ff 	mov.w	r3, #4294967295
 800d98a:	e03e      	b.n	800da0a <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800d98c:	2300      	movs	r3, #0
 800d98e:	83fb      	strh	r3, [r7, #30]
 800d990:	e007      	b.n	800d9a2 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800d992:	8bfb      	ldrh	r3, [r7, #30]
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	4413      	add	r3, r2
 800d998:	2200      	movs	r2, #0
 800d99a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800d99c:	8bfb      	ldrh	r3, [r7, #30]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	83fb      	strh	r3, [r7, #30]
 800d9a2:	8bfb      	ldrh	r3, [r7, #30]
 800d9a4:	2b0b      	cmp	r3, #11
 800d9a6:	d9f4      	bls.n	800d992 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	2208      	movs	r2, #8
 800d9ac:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	0e1b      	lsrs	r3, r3, #24
 800d9b4:	b2da      	uxtb	r2, r3
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	3b01      	subs	r3, #1
 800d9be:	0c1b      	lsrs	r3, r3, #16
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	69bb      	ldr	r3, [r7, #24]
 800d9c4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3b01      	subs	r3, #1
 800d9ca:	0a1b      	lsrs	r3, r3, #8
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800d9e4:	8abb      	ldrh	r3, [r7, #20]
 800d9e6:	141b      	asrs	r3, r3, #16
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800d9ee:	8abb      	ldrh	r3, [r7, #20]
 800d9f0:	0a1b      	lsrs	r3, r3, #8
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	69bb      	ldr	r3, [r7, #24]
 800d9f8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800d9fa:	8abb      	ldrh	r3, [r7, #20]
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	69bb      	ldr	r3, [r7, #24]
 800da00:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800da02:	69bb      	ldr	r3, [r7, #24]
 800da04:	220c      	movs	r2, #12
 800da06:	60da      	str	r2, [r3, #12]

  return 0;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3720      	adds	r7, #32
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
	...

0800da14 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	460b      	mov	r3, r1
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da28:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800da2a:	2317      	movs	r3, #23
 800da2c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3304      	adds	r3, #4
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	b29b      	uxth	r3, r3
 800da36:	8afa      	ldrh	r2, [r7, #22]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d303      	bcc.n	800da44 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	3304      	adds	r3, #4
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800da44:	8afb      	ldrh	r3, [r7, #22]
 800da46:	461a      	mov	r2, r3
 800da48:	4904      	ldr	r1, [pc, #16]	; (800da5c <SCSI_ModeSense6+0x48>)
 800da4a:	6938      	ldr	r0, [r7, #16]
 800da4c:	f000 fd70 	bl	800e530 <SCSI_UpdateBotData>

  return 0;
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3718      	adds	r7, #24
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	24000158 	.word	0x24000158

0800da60 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b086      	sub	sp, #24
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	460b      	mov	r3, r1
 800da6a:	607a      	str	r2, [r7, #4]
 800da6c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da74:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800da76:	231b      	movs	r3, #27
 800da78:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	3308      	adds	r3, #8
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	b29b      	uxth	r3, r3
 800da82:	8afa      	ldrh	r2, [r7, #22]
 800da84:	429a      	cmp	r2, r3
 800da86:	d303      	bcc.n	800da90 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	3308      	adds	r3, #8
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800da90:	8afb      	ldrh	r3, [r7, #22]
 800da92:	461a      	mov	r2, r3
 800da94:	4904      	ldr	r1, [pc, #16]	; (800daa8 <SCSI_ModeSense10+0x48>)
 800da96:	6938      	ldr	r0, [r7, #16]
 800da98:	f000 fd4a 	bl	800e530 <SCSI_UpdateBotData>

  return 0;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3718      	adds	r7, #24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	24000170 	.word	0x24000170

0800daac <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	60f8      	str	r0, [r7, #12]
 800dab4:	460b      	mov	r3, r1
 800dab6:	607a      	str	r2, [r7, #4]
 800dab8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dac0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10a      	bne.n	800dae2 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dad2:	2320      	movs	r3, #32
 800dad4:	2205      	movs	r2, #5
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f000 f861 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800dadc:	f04f 33ff 	mov.w	r3, #4294967295
 800dae0:	e059      	b.n	800db96 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dae2:	2300      	movs	r3, #0
 800dae4:	75fb      	strb	r3, [r7, #23]
 800dae6:	e007      	b.n	800daf8 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800dae8:	7dfb      	ldrb	r3, [r7, #23]
 800daea:	693a      	ldr	r2, [r7, #16]
 800daec:	4413      	add	r3, r2
 800daee:	2200      	movs	r2, #0
 800daf0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800daf2:	7dfb      	ldrb	r3, [r7, #23]
 800daf4:	3301      	adds	r3, #1
 800daf6:	75fb      	strb	r3, [r7, #23]
 800daf8:	7dfb      	ldrb	r3, [r7, #23]
 800dafa:	2b11      	cmp	r3, #17
 800dafc:	d9f4      	bls.n	800dae8 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2270      	movs	r2, #112	; 0x70
 800db02:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	220c      	movs	r2, #12
 800db08:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800db10:	693b      	ldr	r3, [r7, #16]
 800db12:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800db16:	429a      	cmp	r2, r3
 800db18:	d02e      	beq.n	800db78 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800db1a:	693b      	ldr	r3, [r7, #16]
 800db1c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800db20:	461a      	mov	r2, r3
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	3248      	adds	r2, #72	; 0x48
 800db26:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	3348      	adds	r3, #72	; 0x48
 800db38:	00db      	lsls	r3, r3, #3
 800db3a:	4413      	add	r3, r2
 800db3c:	791a      	ldrb	r2, [r3, #4]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	3348      	adds	r3, #72	; 0x48
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	4413      	add	r3, r2
 800db50:	795a      	ldrb	r2, [r3, #5]
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800db5c:	3301      	adds	r3, #1
 800db5e:	b2da      	uxtb	r2, r3
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800db6c:	2b04      	cmp	r3, #4
 800db6e:	d103      	bne.n	800db78 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	2200      	movs	r2, #0
 800db74:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2212      	movs	r2, #18
 800db7c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	3304      	adds	r3, #4
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b12      	cmp	r3, #18
 800db86:	d805      	bhi.n	800db94 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	3304      	adds	r3, #4
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	461a      	mov	r2, r3
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800db94:	2300      	movs	r3, #0
}
 800db96:	4618      	mov	r0, r3
 800db98:	3718      	adds	r7, #24
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800db9e:	b480      	push	{r7}
 800dba0:	b085      	sub	sp, #20
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
 800dba6:	4608      	mov	r0, r1
 800dba8:	4611      	mov	r1, r2
 800dbaa:	461a      	mov	r2, r3
 800dbac:	4603      	mov	r3, r0
 800dbae:	70fb      	strb	r3, [r7, #3]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	70bb      	strb	r3, [r7, #2]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dbbe:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	3248      	adds	r2, #72	; 0x48
 800dbcc:	78b9      	ldrb	r1, [r7, #2]
 800dbce:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	3348      	adds	r3, #72	; 0x48
 800dbdc:	00db      	lsls	r3, r3, #3
 800dbde:	4413      	add	r3, r2
 800dbe0:	787a      	ldrb	r2, [r7, #1]
 800dbe2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dbea:	68fa      	ldr	r2, [r7, #12]
 800dbec:	3348      	adds	r3, #72	; 0x48
 800dbee:	00db      	lsls	r3, r3, #3
 800dbf0:	4413      	add	r3, r2
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dc0c:	2b04      	cmp	r3, #4
 800dc0e:	d103      	bne.n	800dc18 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800dc18:	bf00      	nop
 800dc1a:	3714      	adds	r7, #20
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr

0800dc24 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	460b      	mov	r3, r1
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc38:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dc40:	2b01      	cmp	r3, #1
 800dc42:	d10f      	bne.n	800dc64 <SCSI_StartStopUnit+0x40>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3304      	adds	r3, #4
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d108      	bne.n	800dc64 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800dc52:	7af9      	ldrb	r1, [r7, #11]
 800dc54:	2324      	movs	r3, #36	; 0x24
 800dc56:	2205      	movs	r2, #5
 800dc58:	68f8      	ldr	r0, [r7, #12]
 800dc5a:	f7ff ffa0 	bl	800db9e <SCSI_SenseCode>

    return -1;
 800dc5e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc62:	e026      	b.n	800dcb2 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	3304      	adds	r3, #4
 800dc68:	781b      	ldrb	r3, [r3, #0]
 800dc6a:	f003 0303 	and.w	r3, r3, #3
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d104      	bne.n	800dc7c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dc7a:	e016      	b.n	800dcaa <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	3304      	adds	r3, #4
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f003 0303 	and.w	r3, r3, #3
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d104      	bne.n	800dc94 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	2202      	movs	r2, #2
 800dc8e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dc92:	e00a      	b.n	800dcaa <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	3304      	adds	r3, #4
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	f003 0303 	and.w	r3, r3, #3
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d103      	bne.n	800dcaa <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	2200      	movs	r2, #0
 800dcae:	60da      	str	r2, [r3, #12]

  return 0;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3718      	adds	r7, #24
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}

0800dcba <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b087      	sub	sp, #28
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	60f8      	str	r0, [r7, #12]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	607a      	str	r2, [r7, #4]
 800dcc6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcce:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d104      	bne.n	800dce4 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dce2:	e003      	b.n	800dcec <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	60da      	str	r2, [r3, #12]

  return 0;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	371c      	adds	r7, #28
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfe:	4770      	bx	lr

0800dd00 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b086      	sub	sp, #24
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	607a      	str	r2, [r7, #4]
 800dd0c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd14:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	7a1b      	ldrb	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d17c      	bne.n	800de18 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800dd24:	b25b      	sxtb	r3, r3
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	db0a      	blt.n	800dd40 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dd30:	2320      	movs	r3, #32
 800dd32:	2205      	movs	r2, #5
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff ff32 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800dd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd3e:	e075      	b.n	800de2c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d108      	bne.n	800dd5c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd4a:	7af9      	ldrb	r1, [r7, #11]
 800dd4c:	233a      	movs	r3, #58	; 0x3a
 800dd4e:	2202      	movs	r2, #2
 800dd50:	68f8      	ldr	r0, [r7, #12]
 800dd52:	f7ff ff24 	bl	800db9e <SCSI_SenseCode>

      return -1;
 800dd56:	f04f 33ff 	mov.w	r3, #4294967295
 800dd5a:	e067      	b.n	800de2c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	7afa      	ldrb	r2, [r7, #11]
 800dd66:	4610      	mov	r0, r2
 800dd68:	4798      	blx	r3
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d008      	beq.n	800dd82 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dd70:	7af9      	ldrb	r1, [r7, #11]
 800dd72:	233a      	movs	r3, #58	; 0x3a
 800dd74:	2202      	movs	r2, #2
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff ff11 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800dd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd80:	e054      	b.n	800de2c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3302      	adds	r3, #2
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3303      	adds	r3, #3
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dd92:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800dd9c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	3205      	adds	r2, #5
 800dda2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800dda4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	3307      	adds	r3, #7
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	687a      	ldr	r2, [r7, #4]
 800ddb6:	3208      	adds	r2, #8
 800ddb8:	7812      	ldrb	r2, [r2, #0]
 800ddba:	431a      	orrs	r2, r3
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ddce:	7af9      	ldrb	r1, [r7, #11]
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f000 fa95 	bl	800e300 <SCSI_CheckAddressRange>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	da02      	bge.n	800dde2 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800dddc:	f04f 33ff 	mov.w	r3, #4294967295
 800dde0:	e024      	b.n	800de2c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800ddee:	6979      	ldr	r1, [r7, #20]
 800ddf0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ddf4:	fb01 f303 	mul.w	r3, r1, r3
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d00a      	beq.n	800de12 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de02:	2320      	movs	r3, #32
 800de04:	2205      	movs	r2, #5
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f7ff fec9 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800de0c:	f04f 33ff 	mov.w	r3, #4294967295
 800de10:	e00c      	b.n	800de2c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	2202      	movs	r2, #2
 800de16:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800de1e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800de20:	7afb      	ldrb	r3, [r7, #11]
 800de22:	4619      	mov	r1, r3
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f000 fa8d 	bl	800e344 <SCSI_ProcessRead>
 800de2a:	4603      	mov	r3, r0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}

0800de34 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b086      	sub	sp, #24
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	460b      	mov	r3, r1
 800de3e:	607a      	str	r2, [r7, #4]
 800de40:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de48:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	7a1b      	ldrb	r3, [r3, #8]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f040 8087 	bne.w	800df62 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800de5a:	b25b      	sxtb	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	db0a      	blt.n	800de76 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de66:	2320      	movs	r3, #32
 800de68:	2205      	movs	r2, #5
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff fe97 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800de70:	f04f 33ff 	mov.w	r3, #4294967295
 800de74:	e07f      	b.n	800df76 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d108      	bne.n	800de92 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800de80:	7af9      	ldrb	r1, [r7, #11]
 800de82:	233a      	movs	r3, #58	; 0x3a
 800de84:	2202      	movs	r2, #2
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff fe89 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295
 800de90:	e071      	b.n	800df76 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de98:	689b      	ldr	r3, [r3, #8]
 800de9a:	7afa      	ldrb	r2, [r7, #11]
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
 800dea0:	4603      	mov	r3, r0
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d008      	beq.n	800deb8 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dea6:	7af9      	ldrb	r1, [r7, #11]
 800dea8:	233a      	movs	r3, #58	; 0x3a
 800deaa:	2202      	movs	r2, #2
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7ff fe76 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800deb2:	f04f 33ff 	mov.w	r3, #4294967295
 800deb6:	e05e      	b.n	800df76 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3302      	adds	r3, #2
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	3303      	adds	r3, #3
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dec8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	3304      	adds	r3, #4
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ded2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ded4:	687a      	ldr	r2, [r7, #4]
 800ded6:	3205      	adds	r2, #5
 800ded8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800deda:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	3306      	adds	r3, #6
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	3307      	adds	r3, #7
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800def2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	3308      	adds	r3, #8
 800def8:	781b      	ldrb	r3, [r3, #0]
 800defa:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800defc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	3209      	adds	r2, #9
 800df02:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800df04:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df18:	7af9      	ldrb	r1, [r7, #11]
 800df1a:	68f8      	ldr	r0, [r7, #12]
 800df1c:	f000 f9f0 	bl	800e300 <SCSI_CheckAddressRange>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	da02      	bge.n	800df2c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800df26:	f04f 33ff 	mov.w	r3, #4294967295
 800df2a:	e024      	b.n	800df76 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800df38:	6979      	ldr	r1, [r7, #20]
 800df3a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800df3e:	fb01 f303 	mul.w	r3, r1, r3
 800df42:	429a      	cmp	r2, r3
 800df44:	d00a      	beq.n	800df5c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df4c:	2320      	movs	r3, #32
 800df4e:	2205      	movs	r2, #5
 800df50:	68f8      	ldr	r0, [r7, #12]
 800df52:	f7ff fe24 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800df56:	f04f 33ff 	mov.w	r3, #4294967295
 800df5a:	e00c      	b.n	800df76 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	2202      	movs	r2, #2
 800df60:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df68:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800df6a:	7afb      	ldrb	r3, [r7, #11]
 800df6c:	4619      	mov	r1, r3
 800df6e:	68f8      	ldr	r0, [r7, #12]
 800df70:	f000 f9e8 	bl	800e344 <SCSI_ProcessRead>
 800df74:	4603      	mov	r3, r0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b086      	sub	sp, #24
 800df82:	af00      	add	r7, sp, #0
 800df84:	60f8      	str	r0, [r7, #12]
 800df86:	460b      	mov	r3, r1
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df92:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	7a1b      	ldrb	r3, [r3, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	f040 80a5 	bne.w	800e0e8 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10a      	bne.n	800dfbe <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfae:	2320      	movs	r3, #32
 800dfb0:	2205      	movs	r2, #5
 800dfb2:	68f8      	ldr	r0, [r7, #12]
 800dfb4:	f7ff fdf3 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800dfb8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfbc:	e09a      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800dfc4:	b25b      	sxtb	r3, r3
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	da0a      	bge.n	800dfe0 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dfd0:	2320      	movs	r3, #32
 800dfd2:	2205      	movs	r2, #5
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f7ff fde2 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800dfda:	f04f 33ff 	mov.w	r3, #4294967295
 800dfde:	e089      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfe6:	689b      	ldr	r3, [r3, #8]
 800dfe8:	7afa      	ldrb	r2, [r7, #11]
 800dfea:	4610      	mov	r0, r2
 800dfec:	4798      	blx	r3
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d008      	beq.n	800e006 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800dff4:	7af9      	ldrb	r1, [r7, #11]
 800dff6:	233a      	movs	r3, #58	; 0x3a
 800dff8:	2202      	movs	r2, #2
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7ff fdcf 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e000:	f04f 33ff 	mov.w	r3, #4294967295
 800e004:	e076      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e00c:	68db      	ldr	r3, [r3, #12]
 800e00e:	7afa      	ldrb	r2, [r7, #11]
 800e010:	4610      	mov	r0, r2
 800e012:	4798      	blx	r3
 800e014:	4603      	mov	r3, r0
 800e016:	2b00      	cmp	r3, #0
 800e018:	d008      	beq.n	800e02c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e01a:	7af9      	ldrb	r1, [r7, #11]
 800e01c:	2327      	movs	r3, #39	; 0x27
 800e01e:	2202      	movs	r2, #2
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff fdbc 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e026:	f04f 33ff 	mov.w	r3, #4294967295
 800e02a:	e063      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	3302      	adds	r3, #2
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	3303      	adds	r3, #3
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e03c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	3304      	adds	r3, #4
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e046:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	3205      	adds	r2, #5
 800e04c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e04e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e050:	697b      	ldr	r3, [r7, #20]
 800e052:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	3307      	adds	r3, #7
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e05e:	687a      	ldr	r2, [r7, #4]
 800e060:	3208      	adds	r2, #8
 800e062:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e064:	431a      	orrs	r2, r3
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e072:	697b      	ldr	r3, [r7, #20]
 800e074:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e078:	7af9      	ldrb	r1, [r7, #11]
 800e07a:	68f8      	ldr	r0, [r7, #12]
 800e07c:	f000 f940 	bl	800e300 <SCSI_CheckAddressRange>
 800e080:	4603      	mov	r3, r0
 800e082:	2b00      	cmp	r3, #0
 800e084:	da02      	bge.n	800e08c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e086:	f04f 33ff 	mov.w	r3, #4294967295
 800e08a:	e033      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e092:	697a      	ldr	r2, [r7, #20]
 800e094:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e098:	fb02 f303 	mul.w	r3, r2, r3
 800e09c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e0a4:	693a      	ldr	r2, [r7, #16]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d00a      	beq.n	800e0c0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0b0:	2320      	movs	r3, #32
 800e0b2:	2205      	movs	r2, #5
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff fd72 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	e019      	b.n	800e0f4 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0c6:	bf28      	it	cs
 800e0c8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e0cc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	f103 0210 	add.w	r2, r3, #16
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	2101      	movs	r1, #1
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f004 fd83 	bl	8012bea <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	e005      	b.n	800e0f4 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e0e8:	7afb      	ldrb	r3, [r7, #11]
 800e0ea:	4619      	mov	r1, r3
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	f000 f99c 	bl	800e42a <SCSI_ProcessWrite>
 800e0f2:	4603      	mov	r3, r0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3718      	adds	r7, #24
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b086      	sub	sp, #24
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	460b      	mov	r3, r1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e110:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	7a1b      	ldrb	r3, [r3, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	f040 80b5 	bne.w	800e286 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10a      	bne.n	800e13c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e12c:	2320      	movs	r3, #32
 800e12e:	2205      	movs	r2, #5
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7ff fd34 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e136:	f04f 33ff 	mov.w	r3, #4294967295
 800e13a:	e0aa      	b.n	800e292 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e142:	b25b      	sxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	da0a      	bge.n	800e15e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e14e:	2320      	movs	r3, #32
 800e150:	2205      	movs	r2, #5
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff fd23 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e158:	f04f 33ff 	mov.w	r3, #4294967295
 800e15c:	e099      	b.n	800e292 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	7afa      	ldrb	r2, [r7, #11]
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d00b      	beq.n	800e18a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e172:	7af9      	ldrb	r1, [r7, #11]
 800e174:	233a      	movs	r3, #58	; 0x3a
 800e176:	2202      	movs	r2, #2
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff fd10 	bl	800db9e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2205      	movs	r2, #5
 800e182:	721a      	strb	r2, [r3, #8]
      return -1;
 800e184:	f04f 33ff 	mov.w	r3, #4294967295
 800e188:	e083      	b.n	800e292 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	7afa      	ldrb	r2, [r7, #11]
 800e194:	4610      	mov	r0, r2
 800e196:	4798      	blx	r3
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d00b      	beq.n	800e1b6 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e19e:	7af9      	ldrb	r1, [r7, #11]
 800e1a0:	2327      	movs	r3, #39	; 0x27
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	68f8      	ldr	r0, [r7, #12]
 800e1a6:	f7ff fcfa 	bl	800db9e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2205      	movs	r2, #5
 800e1ae:	721a      	strb	r2, [r3, #8]
      return -1;
 800e1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e1b4:	e06d      	b.n	800e292 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3303      	adds	r3, #3
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	3304      	adds	r3, #4
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e1d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	3205      	adds	r2, #5
 800e1d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e1d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e1da:	697b      	ldr	r3, [r7, #20]
 800e1dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	3306      	adds	r3, #6
 800e1e4:	781b      	ldrb	r3, [r3, #0]
 800e1e6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3307      	adds	r3, #7
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e1f0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	3308      	adds	r3, #8
 800e1f6:	781b      	ldrb	r3, [r3, #0]
 800e1f8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e1fa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	3209      	adds	r2, #9
 800e200:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e202:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e216:	7af9      	ldrb	r1, [r7, #11]
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f000 f871 	bl	800e300 <SCSI_CheckAddressRange>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	da02      	bge.n	800e22a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e224:	f04f 33ff 	mov.w	r3, #4294967295
 800e228:	e033      	b.n	800e292 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e22a:	697b      	ldr	r3, [r7, #20]
 800e22c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e236:	fb02 f303 	mul.w	r3, r2, r3
 800e23a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e242:	693a      	ldr	r2, [r7, #16]
 800e244:	429a      	cmp	r2, r3
 800e246:	d00a      	beq.n	800e25e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e24e:	2320      	movs	r3, #32
 800e250:	2205      	movs	r2, #5
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f7ff fca3 	bl	800db9e <SCSI_SenseCode>
      return -1;
 800e258:	f04f 33ff 	mov.w	r3, #4294967295
 800e25c:	e019      	b.n	800e292 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e264:	bf28      	it	cs
 800e266:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e26a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2201      	movs	r2, #1
 800e270:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	f103 0210 	add.w	r2, r3, #16
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	2101      	movs	r1, #1
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f004 fcb4 	bl	8012bea <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e282:	2300      	movs	r3, #0
 800e284:	e005      	b.n	800e292 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	4619      	mov	r1, r3
 800e28a:	68f8      	ldr	r0, [r7, #12]
 800e28c:	f000 f8cd 	bl	800e42a <SCSI_ProcessWrite>
 800e290:	4603      	mov	r3, r0
}
 800e292:	4618      	mov	r0, r3
 800e294:	3718      	adds	r7, #24
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b086      	sub	sp, #24
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	60f8      	str	r0, [r7, #12]
 800e2a2:	460b      	mov	r3, r1
 800e2a4:	607a      	str	r2, [r7, #4]
 800e2a6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2ae:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	f003 0302 	and.w	r3, r3, #2
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d008      	beq.n	800e2d0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e2be:	7af9      	ldrb	r1, [r7, #11]
 800e2c0:	2324      	movs	r3, #36	; 0x24
 800e2c2:	2205      	movs	r2, #5
 800e2c4:	68f8      	ldr	r0, [r7, #12]
 800e2c6:	f7ff fc6a 	bl	800db9e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e2ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ce:	e013      	b.n	800e2f8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e2dc:	7af9      	ldrb	r1, [r7, #11]
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f000 f80e 	bl	800e300 <SCSI_CheckAddressRange>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	da02      	bge.n	800e2f0 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e2ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ee:	e003      	b.n	800e2f8 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	60da      	str	r2, [r3, #12]

  return 0;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	607a      	str	r2, [r7, #4]
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	460b      	mov	r3, r1
 800e30e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e316:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	441a      	add	r2, r3
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e324:	429a      	cmp	r2, r3
 800e326:	d908      	bls.n	800e33a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e328:	7af9      	ldrb	r1, [r7, #11]
 800e32a:	2321      	movs	r3, #33	; 0x21
 800e32c:	2205      	movs	r2, #5
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fc35 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800e334:	f04f 33ff 	mov.w	r3, #4294967295
 800e338:	e000      	b.n	800e33c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e33a:	2300      	movs	r3, #0
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e344:	b590      	push	{r4, r7, lr}
 800e346:	b085      	sub	sp, #20
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	460b      	mov	r3, r1
 800e34e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e356:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e364:	fb02 f303 	mul.w	r3, r2, r3
 800e368:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e370:	bf28      	it	cs
 800e372:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e376:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e37e:	691c      	ldr	r4, [r3, #16]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f103 0110 	add.w	r1, r3, #16
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e392:	4618      	mov	r0, r3
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	78f8      	ldrb	r0, [r7, #3]
 800e39e:	47a0      	blx	r4
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da08      	bge.n	800e3b8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e3a6:	78f9      	ldrb	r1, [r7, #3]
 800e3a8:	2311      	movs	r3, #17
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff fbf6 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800e3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e3b6:	e034      	b.n	800e422 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	f103 0210 	add.w	r2, r3, #16
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	2181      	movs	r1, #129	; 0x81
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f004 fbf0 	bl	8012ba8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3dc:	441a      	add	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3f8:	1ad2      	subs	r2, r2, r3
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	1ad2      	subs	r2, r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e416:	2b00      	cmp	r3, #0
 800e418:	d102      	bne.n	800e420 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2203      	movs	r2, #3
 800e41e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e420:	2300      	movs	r3, #0
}
 800e422:	4618      	mov	r0, r3
 800e424:	3714      	adds	r7, #20
 800e426:	46bd      	mov	sp, r7
 800e428:	bd90      	pop	{r4, r7, pc}

0800e42a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e42a:	b590      	push	{r4, r7, lr}
 800e42c:	b085      	sub	sp, #20
 800e42e:	af00      	add	r7, sp, #0
 800e430:	6078      	str	r0, [r7, #4]
 800e432:	460b      	mov	r3, r1
 800e434:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e43c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e444:	68fa      	ldr	r2, [r7, #12]
 800e446:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e44a:	fb02 f303 	mul.w	r3, r2, r3
 800e44e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e456:	bf28      	it	cs
 800e458:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e45c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e464:	695c      	ldr	r4, [r3, #20]
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f103 0110 	add.w	r1, r3, #16
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e478:	4618      	mov	r0, r3
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e480:	b29b      	uxth	r3, r3
 800e482:	78f8      	ldrb	r0, [r7, #3]
 800e484:	47a0      	blx	r4
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	da08      	bge.n	800e49e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e48c:	78f9      	ldrb	r1, [r7, #3]
 800e48e:	2303      	movs	r3, #3
 800e490:	2204      	movs	r2, #4
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff fb83 	bl	800db9e <SCSI_SenseCode>
    return -1;
 800e498:	f04f 33ff 	mov.w	r3, #4294967295
 800e49c:	e044      	b.n	800e528 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4b2:	441a      	add	r2, r3
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4ce:	1ad2      	subs	r2, r2, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	1ad2      	subs	r2, r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d104      	bne.n	800e4fa <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7fe ff04 	bl	800d300 <MSC_BOT_SendCSW>
 800e4f8:	e015      	b.n	800e526 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e500:	68fa      	ldr	r2, [r7, #12]
 800e502:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e506:	fb02 f303 	mul.w	r3, r2, r3
 800e50a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e50e:	bf28      	it	cs
 800e510:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e514:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f103 0210 	add.w	r2, r3, #16
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	2101      	movs	r1, #1
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f004 fb62 	bl	8012bea <USBD_LL_PrepareReceive>
  }

  return 0;
 800e526:	2300      	movs	r3, #0
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd90      	pop	{r4, r7, pc}

0800e530 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e530:	b480      	push	{r7}
 800e532:	b087      	sub	sp, #28
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e53e:	88fb      	ldrh	r3, [r7, #6]
 800e540:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e542:	8afa      	ldrh	r2, [r7, #22]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e548:	e00b      	b.n	800e562 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e54a:	8afb      	ldrh	r3, [r7, #22]
 800e54c:	3b01      	subs	r3, #1
 800e54e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e550:	8afb      	ldrh	r3, [r7, #22]
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	441a      	add	r2, r3
 800e556:	8afb      	ldrh	r3, [r7, #22]
 800e558:	7811      	ldrb	r1, [r2, #0]
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	4413      	add	r3, r2
 800e55e:	460a      	mov	r2, r1
 800e560:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e562:	8afb      	ldrh	r3, [r7, #22]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d1f0      	bne.n	800e54a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	371c      	adds	r7, #28
 800e56e:	46bd      	mov	sp, r7
 800e570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e574:	4770      	bx	lr

0800e576 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e576:	b580      	push	{r7, lr}
 800e578:	b086      	sub	sp, #24
 800e57a:	af00      	add	r7, sp, #0
 800e57c:	60f8      	str	r0, [r7, #12]
 800e57e:	60b9      	str	r1, [r7, #8]
 800e580:	4613      	mov	r3, r2
 800e582:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d101      	bne.n	800e58e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e025      	b.n	800e5da <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e594:	2b00      	cmp	r3, #0
 800e596:	d003      	beq.n	800e5a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d003      	beq.n	800e5b2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d003      	beq.n	800e5c0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	68ba      	ldr	r2, [r7, #8]
 800e5bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	79fa      	ldrb	r2, [r7, #7]
 800e5cc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	f004 f992 	bl	80128f8 <USBD_LL_Init>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3718      	adds	r7, #24
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	6078      	str	r0, [r7, #4]
 800e5ea:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e5f6:	2303      	movs	r3, #3
 800e5f8:	e010      	b.n	800e61c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e60a:	f107 020e 	add.w	r2, r7, #14
 800e60e:	4610      	mov	r0, r2
 800e610:	4798      	blx	r3
 800e612:	4602      	mov	r2, r0
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e61a:	2300      	movs	r3, #0
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f004 f9b3 	bl	8012998 <USBD_LL_Start>
 800e632:	4603      	mov	r3, r0
}
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}

0800e63c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e63c:	b480      	push	{r7}
 800e63e:	b083      	sub	sp, #12
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	370c      	adds	r7, #12
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr

0800e652 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e652:	b580      	push	{r7, lr}
 800e654:	b084      	sub	sp, #16
 800e656:	af00      	add	r7, sp, #0
 800e658:	6078      	str	r0, [r7, #4]
 800e65a:	460b      	mov	r3, r1
 800e65c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e65e:	2303      	movs	r3, #3
 800e660:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d009      	beq.n	800e680 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	78fa      	ldrb	r2, [r7, #3]
 800e676:	4611      	mov	r1, r2
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	4798      	blx	r3
 800e67c:	4603      	mov	r3, r0
 800e67e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	460b      	mov	r3, r1
 800e694:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d007      	beq.n	800e6b0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a6:	685b      	ldr	r3, [r3, #4]
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	4611      	mov	r1, r2
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	4798      	blx	r3
  }

  return USBD_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}

0800e6ba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 ff2b 	bl	800f528 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e6ee:	f003 031f 	and.w	r3, r3, #31
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d00e      	beq.n	800e714 <USBD_LL_SetupStage+0x5a>
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d302      	bcc.n	800e700 <USBD_LL_SetupStage+0x46>
 800e6fa:	2b02      	cmp	r3, #2
 800e6fc:	d014      	beq.n	800e728 <USBD_LL_SetupStage+0x6e>
 800e6fe:	e01d      	b.n	800e73c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 fa17 	bl	800eb3c <USBD_StdDevReq>
 800e70e:	4603      	mov	r3, r0
 800e710:	73fb      	strb	r3, [r7, #15]
      break;
 800e712:	e020      	b.n	800e756 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e71a:	4619      	mov	r1, r3
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 fa7b 	bl	800ec18 <USBD_StdItfReq>
 800e722:	4603      	mov	r3, r0
 800e724:	73fb      	strb	r3, [r7, #15]
      break;
 800e726:	e016      	b.n	800e756 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e72e:	4619      	mov	r1, r3
 800e730:	6878      	ldr	r0, [r7, #4]
 800e732:	f000 fab7 	bl	800eca4 <USBD_StdEPReq>
 800e736:	4603      	mov	r3, r0
 800e738:	73fb      	strb	r3, [r7, #15]
      break;
 800e73a:	e00c      	b.n	800e756 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e742:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e746:	b2db      	uxtb	r3, r3
 800e748:	4619      	mov	r1, r3
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f004 f9a3 	bl	8012a96 <USBD_LL_StallEP>
 800e750:	4603      	mov	r3, r0
 800e752:	73fb      	strb	r3, [r7, #15]
      break;
 800e754:	bf00      	nop
  }

  return ret;
 800e756:	7bfb      	ldrb	r3, [r7, #15]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	460b      	mov	r3, r1
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e76e:	7afb      	ldrb	r3, [r7, #11]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d137      	bne.n	800e7e4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e77a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e782:	2b03      	cmp	r3, #3
 800e784:	d14a      	bne.n	800e81c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	689a      	ldr	r2, [r3, #8]
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	429a      	cmp	r2, r3
 800e790:	d913      	bls.n	800e7ba <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	689a      	ldr	r2, [r3, #8]
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	68db      	ldr	r3, [r3, #12]
 800e79a:	1ad2      	subs	r2, r2, r3
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e7a0:	693b      	ldr	r3, [r7, #16]
 800e7a2:	68da      	ldr	r2, [r3, #12]
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	bf28      	it	cs
 800e7ac:	4613      	movcs	r3, r2
 800e7ae:	461a      	mov	r2, r3
 800e7b0:	6879      	ldr	r1, [r7, #4]
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	f000 ff8f 	bl	800f6d6 <USBD_CtlContinueRx>
 800e7b8:	e030      	b.n	800e81c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c0:	691b      	ldr	r3, [r3, #16]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d00a      	beq.n	800e7dc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e7cc:	2b03      	cmp	r3, #3
 800e7ce:	d105      	bne.n	800e7dc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e7dc:	68f8      	ldr	r0, [r7, #12]
 800e7de:	f000 ff8b 	bl	800f6f8 <USBD_CtlSendStatus>
 800e7e2:	e01b      	b.n	800e81c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ea:	699b      	ldr	r3, [r3, #24]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d013      	beq.n	800e818 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d10e      	bne.n	800e818 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e800:	699b      	ldr	r3, [r3, #24]
 800e802:	7afa      	ldrb	r2, [r7, #11]
 800e804:	4611      	mov	r1, r2
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	4798      	blx	r3
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d003      	beq.n	800e81c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e814:	7dfb      	ldrb	r3, [r7, #23]
 800e816:	e002      	b.n	800e81e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e818:	2303      	movs	r3, #3
 800e81a:	e000      	b.n	800e81e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3718      	adds	r7, #24
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b086      	sub	sp, #24
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	60f8      	str	r0, [r7, #12]
 800e82e:	460b      	mov	r3, r1
 800e830:	607a      	str	r2, [r7, #4]
 800e832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e834:	7afb      	ldrb	r3, [r7, #11]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d16a      	bne.n	800e910 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3314      	adds	r3, #20
 800e83e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e846:	2b02      	cmp	r3, #2
 800e848:	d155      	bne.n	800e8f6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e84a:	693b      	ldr	r3, [r7, #16]
 800e84c:	689a      	ldr	r2, [r3, #8]
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	68db      	ldr	r3, [r3, #12]
 800e852:	429a      	cmp	r2, r3
 800e854:	d914      	bls.n	800e880 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	689a      	ldr	r2, [r3, #8]
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	1ad2      	subs	r2, r2, r3
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	461a      	mov	r2, r3
 800e86a:	6879      	ldr	r1, [r7, #4]
 800e86c:	68f8      	ldr	r0, [r7, #12]
 800e86e:	f000 ff21 	bl	800f6b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e872:	2300      	movs	r3, #0
 800e874:	2200      	movs	r2, #0
 800e876:	2100      	movs	r1, #0
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f004 f9b6 	bl	8012bea <USBD_LL_PrepareReceive>
 800e87e:	e03a      	b.n	800e8f6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	68da      	ldr	r2, [r3, #12]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d11c      	bne.n	800e8c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	685a      	ldr	r2, [r3, #4]
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e894:	429a      	cmp	r2, r3
 800e896:	d316      	bcc.n	800e8c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d20f      	bcs.n	800e8c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 ff02 	bl	800f6b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	2100      	movs	r1, #0
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f004 f993 	bl	8012bea <USBD_LL_PrepareReceive>
 800e8c4:	e017      	b.n	800e8f6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00a      	beq.n	800e8e8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e8d8:	2b03      	cmp	r3, #3
 800e8da:	d105      	bne.n	800e8e8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8e8:	2180      	movs	r1, #128	; 0x80
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f004 f8d3 	bl	8012a96 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e8f0:	68f8      	ldr	r0, [r7, #12]
 800e8f2:	f000 ff14 	bl	800f71e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d123      	bne.n	800e948 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff fe9b 	bl	800e63c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e90e:	e01b      	b.n	800e948 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d013      	beq.n	800e944 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800e922:	2b03      	cmp	r3, #3
 800e924:	d10e      	bne.n	800e944 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92c:	695b      	ldr	r3, [r3, #20]
 800e92e:	7afa      	ldrb	r2, [r7, #11]
 800e930:	4611      	mov	r1, r2
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	4798      	blx	r3
 800e936:	4603      	mov	r3, r0
 800e938:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d003      	beq.n	800e948 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	e002      	b.n	800e94a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e944:	2303      	movs	r3, #3
 800e946:	e000      	b.n	800e94a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3718      	adds	r7, #24
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b082      	sub	sp, #8
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2200      	movs	r2, #0
 800e974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d009      	beq.n	800e996 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	687a      	ldr	r2, [r7, #4]
 800e98c:	6852      	ldr	r2, [r2, #4]
 800e98e:	b2d2      	uxtb	r2, r2
 800e990:	4611      	mov	r1, r2
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e996:	2340      	movs	r3, #64	; 0x40
 800e998:	2200      	movs	r2, #0
 800e99a:	2100      	movs	r1, #0
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f004 f816 	bl	80129ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2201      	movs	r2, #1
 800e9a6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2240      	movs	r2, #64	; 0x40
 800e9ae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e9b2:	2340      	movs	r3, #64	; 0x40
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	2180      	movs	r1, #128	; 0x80
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f004 f808 	bl	80129ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2201      	movs	r2, #1
 800e9c2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2240      	movs	r2, #64	; 0x40
 800e9c8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e9ca:	2300      	movs	r3, #0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	78fa      	ldrb	r2, [r7, #3]
 800e9e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9e6:	2300      	movs	r3, #0
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2204      	movs	r2, #4
 800ea0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ea10:	2300      	movs	r3, #0
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr

0800ea1e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea1e:	b480      	push	{r7}
 800ea20:	b083      	sub	sp, #12
 800ea22:	af00      	add	r7, sp, #0
 800ea24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea2c:	2b04      	cmp	r3, #4
 800ea2e:	d105      	bne.n	800ea3c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ea3c:	2300      	movs	r3, #0
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b082      	sub	sp, #8
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea58:	2b03      	cmp	r3, #3
 800ea5a:	d10b      	bne.n	800ea74 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea62:	69db      	ldr	r3, [r3, #28]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d005      	beq.n	800ea74 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b083      	sub	sp, #12
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eaa4:	2300      	movs	r3, #0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eab2:	b480      	push	{r7}
 800eab4:	b083      	sub	sp, #12
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d009      	beq.n	800eaf6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	6852      	ldr	r2, [r2, #4]
 800eaee:	b2d2      	uxtb	r2, r2
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	4798      	blx	r3
  }

  return USBD_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b087      	sub	sp, #28
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	3301      	adds	r3, #1
 800eb16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb1e:	8a3b      	ldrh	r3, [r7, #16]
 800eb20:	021b      	lsls	r3, r3, #8
 800eb22:	b21a      	sxth	r2, r3
 800eb24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	b21b      	sxth	r3, r3
 800eb2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb2e:	89fb      	ldrh	r3, [r7, #14]
}
 800eb30:	4618      	mov	r0, r3
 800eb32:	371c      	adds	r7, #28
 800eb34:	46bd      	mov	sp, r7
 800eb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3a:	4770      	bx	lr

0800eb3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb46:	2300      	movs	r3, #0
 800eb48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb52:	2b20      	cmp	r3, #32
 800eb54:	d004      	beq.n	800eb60 <USBD_StdDevReq+0x24>
 800eb56:	2b40      	cmp	r3, #64	; 0x40
 800eb58:	d002      	beq.n	800eb60 <USBD_StdDevReq+0x24>
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00a      	beq.n	800eb74 <USBD_StdDevReq+0x38>
 800eb5e:	e050      	b.n	800ec02 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	4798      	blx	r3
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]
    break;
 800eb72:	e04b      	b.n	800ec0c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	785b      	ldrb	r3, [r3, #1]
 800eb78:	2b09      	cmp	r3, #9
 800eb7a:	d83c      	bhi.n	800ebf6 <USBD_StdDevReq+0xba>
 800eb7c:	a201      	add	r2, pc, #4	; (adr r2, 800eb84 <USBD_StdDevReq+0x48>)
 800eb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb82:	bf00      	nop
 800eb84:	0800ebd9 	.word	0x0800ebd9
 800eb88:	0800ebed 	.word	0x0800ebed
 800eb8c:	0800ebf7 	.word	0x0800ebf7
 800eb90:	0800ebe3 	.word	0x0800ebe3
 800eb94:	0800ebf7 	.word	0x0800ebf7
 800eb98:	0800ebb7 	.word	0x0800ebb7
 800eb9c:	0800ebad 	.word	0x0800ebad
 800eba0:	0800ebf7 	.word	0x0800ebf7
 800eba4:	0800ebcf 	.word	0x0800ebcf
 800eba8:	0800ebc1 	.word	0x0800ebc1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f000 f9ce 	bl	800ef50 <USBD_GetDescriptor>
      break;
 800ebb4:	e024      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 fb33 	bl	800f224 <USBD_SetAddress>
      break;
 800ebbe:	e01f      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800ebc0:	6839      	ldr	r1, [r7, #0]
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fb70 	bl	800f2a8 <USBD_SetConfig>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]
      break;
 800ebcc:	e018      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 fc0d 	bl	800f3f0 <USBD_GetConfig>
      break;
 800ebd6:	e013      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ebd8:	6839      	ldr	r1, [r7, #0]
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 fc3c 	bl	800f458 <USBD_GetStatus>
      break;
 800ebe0:	e00e      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 fc6a 	bl	800f4be <USBD_SetFeature>
      break;
 800ebea:	e009      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800ebec:	6839      	ldr	r1, [r7, #0]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f000 fc79 	bl	800f4e6 <USBD_ClrFeature>
      break;
 800ebf4:	e004      	b.n	800ec00 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ebf6:	6839      	ldr	r1, [r7, #0]
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 fccf 	bl	800f59c <USBD_CtlError>
      break;
 800ebfe:	bf00      	nop
    }
    break;
 800ec00:	e004      	b.n	800ec0c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ec02:	6839      	ldr	r1, [r7, #0]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f000 fcc9 	bl	800f59c <USBD_CtlError>
    break;
 800ec0a:	bf00      	nop
  }

  return ret;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop

0800ec18 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec2e:	2b20      	cmp	r3, #32
 800ec30:	d003      	beq.n	800ec3a <USBD_StdItfReq+0x22>
 800ec32:	2b40      	cmp	r3, #64	; 0x40
 800ec34:	d001      	beq.n	800ec3a <USBD_StdItfReq+0x22>
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d12a      	bne.n	800ec90 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec40:	3b01      	subs	r3, #1
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d81d      	bhi.n	800ec82 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	889b      	ldrh	r3, [r3, #4]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d813      	bhi.n	800ec78 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	6839      	ldr	r1, [r7, #0]
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	4798      	blx	r3
 800ec5e:	4603      	mov	r3, r0
 800ec60:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	88db      	ldrh	r3, [r3, #6]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d110      	bne.n	800ec8c <USBD_StdItfReq+0x74>
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d10d      	bne.n	800ec8c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fd41 	bl	800f6f8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ec76:	e009      	b.n	800ec8c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ec78:	6839      	ldr	r1, [r7, #0]
 800ec7a:	6878      	ldr	r0, [r7, #4]
 800ec7c:	f000 fc8e 	bl	800f59c <USBD_CtlError>
      break;
 800ec80:	e004      	b.n	800ec8c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ec82:	6839      	ldr	r1, [r7, #0]
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f000 fc89 	bl	800f59c <USBD_CtlError>
      break;
 800ec8a:	e000      	b.n	800ec8e <USBD_StdItfReq+0x76>
      break;
 800ec8c:	bf00      	nop
    }
    break;
 800ec8e:	e004      	b.n	800ec9a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ec90:	6839      	ldr	r1, [r7, #0]
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f000 fc82 	bl	800f59c <USBD_CtlError>
    break;
 800ec98:	bf00      	nop
  }

  return ret;
 800ec9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3710      	adds	r7, #16
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	889b      	ldrh	r3, [r3, #4]
 800ecb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ecc0:	2b20      	cmp	r3, #32
 800ecc2:	d004      	beq.n	800ecce <USBD_StdEPReq+0x2a>
 800ecc4:	2b40      	cmp	r3, #64	; 0x40
 800ecc6:	d002      	beq.n	800ecce <USBD_StdEPReq+0x2a>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00a      	beq.n	800ece2 <USBD_StdEPReq+0x3e>
 800eccc:	e135      	b.n	800ef3a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4798      	blx	r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	73fb      	strb	r3, [r7, #15]
    break;
 800ece0:	e130      	b.n	800ef44 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	785b      	ldrb	r3, [r3, #1]
 800ece6:	2b01      	cmp	r3, #1
 800ece8:	d03e      	beq.n	800ed68 <USBD_StdEPReq+0xc4>
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d002      	beq.n	800ecf4 <USBD_StdEPReq+0x50>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d077      	beq.n	800ede2 <USBD_StdEPReq+0x13e>
 800ecf2:	e11c      	b.n	800ef2e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecfa:	2b02      	cmp	r3, #2
 800ecfc:	d002      	beq.n	800ed04 <USBD_StdEPReq+0x60>
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d015      	beq.n	800ed2e <USBD_StdEPReq+0x8a>
 800ed02:	e02b      	b.n	800ed5c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed04:	7bbb      	ldrb	r3, [r7, #14]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d00c      	beq.n	800ed24 <USBD_StdEPReq+0x80>
 800ed0a:	7bbb      	ldrb	r3, [r7, #14]
 800ed0c:	2b80      	cmp	r3, #128	; 0x80
 800ed0e:	d009      	beq.n	800ed24 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed10:	7bbb      	ldrb	r3, [r7, #14]
 800ed12:	4619      	mov	r1, r3
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f003 febe 	bl	8012a96 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed1a:	2180      	movs	r1, #128	; 0x80
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f003 feba 	bl	8012a96 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed22:	e020      	b.n	800ed66 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ed24:	6839      	ldr	r1, [r7, #0]
 800ed26:	6878      	ldr	r0, [r7, #4]
 800ed28:	f000 fc38 	bl	800f59c <USBD_CtlError>
        break;
 800ed2c:	e01b      	b.n	800ed66 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	885b      	ldrh	r3, [r3, #2]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10e      	bne.n	800ed54 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed36:	7bbb      	ldrb	r3, [r7, #14]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <USBD_StdEPReq+0xb0>
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	2b80      	cmp	r3, #128	; 0x80
 800ed40:	d008      	beq.n	800ed54 <USBD_StdEPReq+0xb0>
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	88db      	ldrh	r3, [r3, #6]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d104      	bne.n	800ed54 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed4a:	7bbb      	ldrb	r3, [r7, #14]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f003 fea1 	bl	8012a96 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fccf 	bl	800f6f8 <USBD_CtlSendStatus>

        break;
 800ed5a:	e004      	b.n	800ed66 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ed5c:	6839      	ldr	r1, [r7, #0]
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fc1c 	bl	800f59c <USBD_CtlError>
        break;
 800ed64:	bf00      	nop
      }
      break;
 800ed66:	e0e7      	b.n	800ef38 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d002      	beq.n	800ed78 <USBD_StdEPReq+0xd4>
 800ed72:	2b03      	cmp	r3, #3
 800ed74:	d015      	beq.n	800eda2 <USBD_StdEPReq+0xfe>
 800ed76:	e02d      	b.n	800edd4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed78:	7bbb      	ldrb	r3, [r7, #14]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <USBD_StdEPReq+0xf4>
 800ed7e:	7bbb      	ldrb	r3, [r7, #14]
 800ed80:	2b80      	cmp	r3, #128	; 0x80
 800ed82:	d009      	beq.n	800ed98 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f003 fe84 	bl	8012a96 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed8e:	2180      	movs	r1, #128	; 0x80
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f003 fe80 	bl	8012a96 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ed96:	e023      	b.n	800ede0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ed98:	6839      	ldr	r1, [r7, #0]
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f000 fbfe 	bl	800f59c <USBD_CtlError>
        break;
 800eda0:	e01e      	b.n	800ede0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	885b      	ldrh	r3, [r3, #2]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d119      	bne.n	800edde <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800edaa:	7bbb      	ldrb	r3, [r7, #14]
 800edac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	4619      	mov	r1, r3
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f003 fe8b 	bl	8012ad4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f000 fc9a 	bl	800f6f8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	6839      	ldr	r1, [r7, #0]
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	4798      	blx	r3
        }
        break;
 800edd2:	e004      	b.n	800edde <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fbe0 	bl	800f59c <USBD_CtlError>
        break;
 800eddc:	e000      	b.n	800ede0 <USBD_StdEPReq+0x13c>
        break;
 800edde:	bf00      	nop
      }
      break;
 800ede0:	e0aa      	b.n	800ef38 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d002      	beq.n	800edf2 <USBD_StdEPReq+0x14e>
 800edec:	2b03      	cmp	r3, #3
 800edee:	d032      	beq.n	800ee56 <USBD_StdEPReq+0x1b2>
 800edf0:	e097      	b.n	800ef22 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d007      	beq.n	800ee08 <USBD_StdEPReq+0x164>
 800edf8:	7bbb      	ldrb	r3, [r7, #14]
 800edfa:	2b80      	cmp	r3, #128	; 0x80
 800edfc:	d004      	beq.n	800ee08 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800edfe:	6839      	ldr	r1, [r7, #0]
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f000 fbcb 	bl	800f59c <USBD_CtlError>
          break;
 800ee06:	e091      	b.n	800ef2c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	da0b      	bge.n	800ee28 <USBD_StdEPReq+0x184>
 800ee10:	7bbb      	ldrb	r3, [r7, #14]
 800ee12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ee16:	4613      	mov	r3, r2
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4413      	add	r3, r2
 800ee1c:	009b      	lsls	r3, r3, #2
 800ee1e:	3310      	adds	r3, #16
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	4413      	add	r3, r2
 800ee24:	3304      	adds	r3, #4
 800ee26:	e00b      	b.n	800ee40 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ee28:	7bbb      	ldrb	r3, [r7, #14]
 800ee2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	4413      	add	r3, r2
 800ee3e:	3304      	adds	r3, #4
 800ee40:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	2200      	movs	r2, #0
 800ee46:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	2202      	movs	r2, #2
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fc15 	bl	800f67e <USBD_CtlSendData>
        break;
 800ee54:	e06a      	b.n	800ef2c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ee56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	da11      	bge.n	800ee82 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	f003 020f 	and.w	r2, r3, #15
 800ee64:	6879      	ldr	r1, [r7, #4]
 800ee66:	4613      	mov	r3, r2
 800ee68:	009b      	lsls	r3, r3, #2
 800ee6a:	4413      	add	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	440b      	add	r3, r1
 800ee70:	3324      	adds	r3, #36	; 0x24
 800ee72:	881b      	ldrh	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d117      	bne.n	800eea8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fb8e 	bl	800f59c <USBD_CtlError>
            break;
 800ee80:	e054      	b.n	800ef2c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ee82:	7bbb      	ldrb	r3, [r7, #14]
 800ee84:	f003 020f 	and.w	r2, r3, #15
 800ee88:	6879      	ldr	r1, [r7, #4]
 800ee8a:	4613      	mov	r3, r2
 800ee8c:	009b      	lsls	r3, r3, #2
 800ee8e:	4413      	add	r3, r2
 800ee90:	009b      	lsls	r3, r3, #2
 800ee92:	440b      	add	r3, r1
 800ee94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ee98:	881b      	ldrh	r3, [r3, #0]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d104      	bne.n	800eea8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ee9e:	6839      	ldr	r1, [r7, #0]
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f000 fb7b 	bl	800f59c <USBD_CtlError>
            break;
 800eea6:	e041      	b.n	800ef2c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	da0b      	bge.n	800eec8 <USBD_StdEPReq+0x224>
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	009b      	lsls	r3, r3, #2
 800eeba:	4413      	add	r3, r2
 800eebc:	009b      	lsls	r3, r3, #2
 800eebe:	3310      	adds	r3, #16
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	3304      	adds	r3, #4
 800eec6:	e00b      	b.n	800eee0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eece:	4613      	mov	r3, r2
 800eed0:	009b      	lsls	r3, r3, #2
 800eed2:	4413      	add	r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	4413      	add	r3, r2
 800eede:	3304      	adds	r3, #4
 800eee0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eee2:	7bbb      	ldrb	r3, [r7, #14]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d002      	beq.n	800eeee <USBD_StdEPReq+0x24a>
 800eee8:	7bbb      	ldrb	r3, [r7, #14]
 800eeea:	2b80      	cmp	r3, #128	; 0x80
 800eeec:	d103      	bne.n	800eef6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	2200      	movs	r2, #0
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	e00e      	b.n	800ef14 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800eef6:	7bbb      	ldrb	r3, [r7, #14]
 800eef8:	4619      	mov	r1, r3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f003 fe09 	bl	8012b12 <USBD_LL_IsStallEP>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d003      	beq.n	800ef0e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	e002      	b.n	800ef14 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	2200      	movs	r2, #0
 800ef12:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	2202      	movs	r2, #2
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fbaf 	bl	800f67e <USBD_CtlSendData>
          break;
 800ef20:	e004      	b.n	800ef2c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fb39 	bl	800f59c <USBD_CtlError>
        break;
 800ef2a:	bf00      	nop
      }
      break;
 800ef2c:	e004      	b.n	800ef38 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	6878      	ldr	r0, [r7, #4]
 800ef32:	f000 fb33 	bl	800f59c <USBD_CtlError>
      break;
 800ef36:	bf00      	nop
    }
    break;
 800ef38:	e004      	b.n	800ef44 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800ef3a:	6839      	ldr	r1, [r7, #0]
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f000 fb2d 	bl	800f59c <USBD_CtlError>
    break;
 800ef42:	bf00      	nop
  }

  return ret;
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3710      	adds	r7, #16
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bd80      	pop	{r7, pc}
	...

0800ef50 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
 800ef58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ef62:	2300      	movs	r3, #0
 800ef64:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	885b      	ldrh	r3, [r3, #2]
 800ef6a:	0a1b      	lsrs	r3, r3, #8
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	2b06      	cmp	r3, #6
 800ef72:	f200 8128 	bhi.w	800f1c6 <USBD_GetDescriptor+0x276>
 800ef76:	a201      	add	r2, pc, #4	; (adr r2, 800ef7c <USBD_GetDescriptor+0x2c>)
 800ef78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef7c:	0800ef99 	.word	0x0800ef99
 800ef80:	0800efb1 	.word	0x0800efb1
 800ef84:	0800eff1 	.word	0x0800eff1
 800ef88:	0800f1c7 	.word	0x0800f1c7
 800ef8c:	0800f1c7 	.word	0x0800f1c7
 800ef90:	0800f167 	.word	0x0800f167
 800ef94:	0800f193 	.word	0x0800f193
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	7c12      	ldrb	r2, [r2, #16]
 800efa4:	f107 0108 	add.w	r1, r7, #8
 800efa8:	4610      	mov	r0, r2
 800efaa:	4798      	blx	r3
 800efac:	60f8      	str	r0, [r7, #12]
    break;
 800efae:	e112      	b.n	800f1d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	7c1b      	ldrb	r3, [r3, #16]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10d      	bne.n	800efd4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efc0:	f107 0208 	add.w	r2, r7, #8
 800efc4:	4610      	mov	r0, r2
 800efc6:	4798      	blx	r3
 800efc8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3301      	adds	r3, #1
 800efce:	2202      	movs	r2, #2
 800efd0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800efd2:	e100      	b.n	800f1d6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efdc:	f107 0208 	add.w	r2, r7, #8
 800efe0:	4610      	mov	r0, r2
 800efe2:	4798      	blx	r3
 800efe4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	3301      	adds	r3, #1
 800efea:	2202      	movs	r2, #2
 800efec:	701a      	strb	r2, [r3, #0]
    break;
 800efee:	e0f2      	b.n	800f1d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	885b      	ldrh	r3, [r3, #2]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	2b05      	cmp	r3, #5
 800eff8:	f200 80ac 	bhi.w	800f154 <USBD_GetDescriptor+0x204>
 800effc:	a201      	add	r2, pc, #4	; (adr r2, 800f004 <USBD_GetDescriptor+0xb4>)
 800effe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f002:	bf00      	nop
 800f004:	0800f01d 	.word	0x0800f01d
 800f008:	0800f051 	.word	0x0800f051
 800f00c:	0800f085 	.word	0x0800f085
 800f010:	0800f0b9 	.word	0x0800f0b9
 800f014:	0800f0ed 	.word	0x0800f0ed
 800f018:	0800f121 	.word	0x0800f121
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f022:	685b      	ldr	r3, [r3, #4]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d00b      	beq.n	800f040 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	687a      	ldr	r2, [r7, #4]
 800f032:	7c12      	ldrb	r2, [r2, #16]
 800f034:	f107 0108 	add.w	r1, r7, #8
 800f038:	4610      	mov	r0, r2
 800f03a:	4798      	blx	r3
 800f03c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f03e:	e091      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 faaa 	bl	800f59c <USBD_CtlError>
        err++;
 800f048:	7afb      	ldrb	r3, [r7, #11]
 800f04a:	3301      	adds	r3, #1
 800f04c:	72fb      	strb	r3, [r7, #11]
      break;
 800f04e:	e089      	b.n	800f164 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d00b      	beq.n	800f074 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f062:	689b      	ldr	r3, [r3, #8]
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	7c12      	ldrb	r2, [r2, #16]
 800f068:	f107 0108 	add.w	r1, r7, #8
 800f06c:	4610      	mov	r0, r2
 800f06e:	4798      	blx	r3
 800f070:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f072:	e077      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 fa90 	bl	800f59c <USBD_CtlError>
        err++;
 800f07c:	7afb      	ldrb	r3, [r7, #11]
 800f07e:	3301      	adds	r3, #1
 800f080:	72fb      	strb	r3, [r7, #11]
      break;
 800f082:	e06f      	b.n	800f164 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00b      	beq.n	800f0a8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	7c12      	ldrb	r2, [r2, #16]
 800f09c:	f107 0108 	add.w	r1, r7, #8
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	4798      	blx	r3
 800f0a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0a6:	e05d      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f0a8:	6839      	ldr	r1, [r7, #0]
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f000 fa76 	bl	800f59c <USBD_CtlError>
        err++;
 800f0b0:	7afb      	ldrb	r3, [r7, #11]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	72fb      	strb	r3, [r7, #11]
      break;
 800f0b6:	e055      	b.n	800f164 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00b      	beq.n	800f0dc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	7c12      	ldrb	r2, [r2, #16]
 800f0d0:	f107 0108 	add.w	r1, r7, #8
 800f0d4:	4610      	mov	r0, r2
 800f0d6:	4798      	blx	r3
 800f0d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0da:	e043      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fa5c 	bl	800f59c <USBD_CtlError>
        err++;
 800f0e4:	7afb      	ldrb	r3, [r7, #11]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	72fb      	strb	r3, [r7, #11]
      break;
 800f0ea:	e03b      	b.n	800f164 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0f2:	695b      	ldr	r3, [r3, #20]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00b      	beq.n	800f110 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f0fe:	695b      	ldr	r3, [r3, #20]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	7c12      	ldrb	r2, [r2, #16]
 800f104:	f107 0108 	add.w	r1, r7, #8
 800f108:	4610      	mov	r0, r2
 800f10a:	4798      	blx	r3
 800f10c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f10e:	e029      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 fa42 	bl	800f59c <USBD_CtlError>
        err++;
 800f118:	7afb      	ldrb	r3, [r7, #11]
 800f11a:	3301      	adds	r3, #1
 800f11c:	72fb      	strb	r3, [r7, #11]
      break;
 800f11e:	e021      	b.n	800f164 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f126:	699b      	ldr	r3, [r3, #24]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00b      	beq.n	800f144 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f132:	699b      	ldr	r3, [r3, #24]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	7c12      	ldrb	r2, [r2, #16]
 800f138:	f107 0108 	add.w	r1, r7, #8
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
 800f140:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f142:	e00f      	b.n	800f164 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fa28 	bl	800f59c <USBD_CtlError>
        err++;
 800f14c:	7afb      	ldrb	r3, [r7, #11]
 800f14e:	3301      	adds	r3, #1
 800f150:	72fb      	strb	r3, [r7, #11]
      break;
 800f152:	e007      	b.n	800f164 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 fa20 	bl	800f59c <USBD_CtlError>
      err++;
 800f15c:	7afb      	ldrb	r3, [r7, #11]
 800f15e:	3301      	adds	r3, #1
 800f160:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f162:	bf00      	nop
    }
    break;
 800f164:	e037      	b.n	800f1d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	7c1b      	ldrb	r3, [r3, #16]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d109      	bne.n	800f182 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f176:	f107 0208 	add.w	r2, r7, #8
 800f17a:	4610      	mov	r0, r2
 800f17c:	4798      	blx	r3
 800f17e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f180:	e029      	b.n	800f1d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f182:	6839      	ldr	r1, [r7, #0]
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 fa09 	bl	800f59c <USBD_CtlError>
      err++;
 800f18a:	7afb      	ldrb	r3, [r7, #11]
 800f18c:	3301      	adds	r3, #1
 800f18e:	72fb      	strb	r3, [r7, #11]
    break;
 800f190:	e021      	b.n	800f1d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	7c1b      	ldrb	r3, [r3, #16]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10d      	bne.n	800f1b6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1a2:	f107 0208 	add.w	r2, r7, #8
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	4798      	blx	r3
 800f1aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	3301      	adds	r3, #1
 800f1b0:	2207      	movs	r2, #7
 800f1b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f1b4:	e00f      	b.n	800f1d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f1b6:	6839      	ldr	r1, [r7, #0]
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f9ef 	bl	800f59c <USBD_CtlError>
      err++;
 800f1be:	7afb      	ldrb	r3, [r7, #11]
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	72fb      	strb	r3, [r7, #11]
    break;
 800f1c4:	e007      	b.n	800f1d6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 f9e7 	bl	800f59c <USBD_CtlError>
    err++;
 800f1ce:	7afb      	ldrb	r3, [r7, #11]
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	72fb      	strb	r3, [r7, #11]
    break;
 800f1d4:	bf00      	nop
  }

  if (err != 0U)
 800f1d6:	7afb      	ldrb	r3, [r7, #11]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d11e      	bne.n	800f21a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	88db      	ldrh	r3, [r3, #6]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d016      	beq.n	800f212 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f1e4:	893b      	ldrh	r3, [r7, #8]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00e      	beq.n	800f208 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	88da      	ldrh	r2, [r3, #6]
 800f1ee:	893b      	ldrh	r3, [r7, #8]
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	bf28      	it	cs
 800f1f4:	4613      	movcs	r3, r2
 800f1f6:	b29b      	uxth	r3, r3
 800f1f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f1fa:	893b      	ldrh	r3, [r7, #8]
 800f1fc:	461a      	mov	r2, r3
 800f1fe:	68f9      	ldr	r1, [r7, #12]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fa3c 	bl	800f67e <USBD_CtlSendData>
 800f206:	e009      	b.n	800f21c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 f9c6 	bl	800f59c <USBD_CtlError>
 800f210:	e004      	b.n	800f21c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fa70 	bl	800f6f8 <USBD_CtlSendStatus>
 800f218:	e000      	b.n	800f21c <USBD_GetDescriptor+0x2cc>
    return;
 800f21a:	bf00      	nop
    }
  }
}
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop

0800f224 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	889b      	ldrh	r3, [r3, #4]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d130      	bne.n	800f298 <USBD_SetAddress+0x74>
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	88db      	ldrh	r3, [r3, #6]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d12c      	bne.n	800f298 <USBD_SetAddress+0x74>
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	885b      	ldrh	r3, [r3, #2]
 800f242:	2b7f      	cmp	r3, #127	; 0x7f
 800f244:	d828      	bhi.n	800f298 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	885b      	ldrh	r3, [r3, #2]
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f250:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f258:	2b03      	cmp	r3, #3
 800f25a:	d104      	bne.n	800f266 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f25c:	6839      	ldr	r1, [r7, #0]
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f000 f99c 	bl	800f59c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f264:	e01c      	b.n	800f2a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	7bfa      	ldrb	r2, [r7, #15]
 800f26a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	4619      	mov	r1, r3
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f003 fc79 	bl	8012b6a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 fa3d 	bl	800f6f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f27e:	7bfb      	ldrb	r3, [r7, #15]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d004      	beq.n	800f28e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2202      	movs	r2, #2
 800f288:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f28c:	e008      	b.n	800f2a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	2201      	movs	r2, #1
 800f292:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f296:	e003      	b.n	800f2a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 f97e 	bl	800f59c <USBD_CtlError>
  }
}
 800f2a0:	bf00      	nop
 800f2a2:	3710      	adds	r7, #16
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}

0800f2a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	885b      	ldrh	r3, [r3, #2]
 800f2ba:	b2da      	uxtb	r2, r3
 800f2bc:	4b4b      	ldr	r3, [pc, #300]	; (800f3ec <USBD_SetConfig+0x144>)
 800f2be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f2c0:	4b4a      	ldr	r3, [pc, #296]	; (800f3ec <USBD_SetConfig+0x144>)
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	2b01      	cmp	r3, #1
 800f2c6:	d905      	bls.n	800f2d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f2c8:	6839      	ldr	r1, [r7, #0]
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f966 	bl	800f59c <USBD_CtlError>
    return USBD_FAIL;
 800f2d0:	2303      	movs	r3, #3
 800f2d2:	e087      	b.n	800f3e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2da:	2b02      	cmp	r3, #2
 800f2dc:	d002      	beq.n	800f2e4 <USBD_SetConfig+0x3c>
 800f2de:	2b03      	cmp	r3, #3
 800f2e0:	d025      	beq.n	800f32e <USBD_SetConfig+0x86>
 800f2e2:	e071      	b.n	800f3c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f2e4:	4b41      	ldr	r3, [pc, #260]	; (800f3ec <USBD_SetConfig+0x144>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01c      	beq.n	800f326 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f2ec:	4b3f      	ldr	r3, [pc, #252]	; (800f3ec <USBD_SetConfig+0x144>)
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2f6:	4b3d      	ldr	r3, [pc, #244]	; (800f3ec <USBD_SetConfig+0x144>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff f9a8 	bl	800e652 <USBD_SetClassConfig>
 800f302:	4603      	mov	r3, r0
 800f304:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f306:	7bfb      	ldrb	r3, [r7, #15]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d004      	beq.n	800f316 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f944 	bl	800f59c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f314:	e065      	b.n	800f3e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f9ee 	bl	800f6f8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2203      	movs	r2, #3
 800f320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f324:	e05d      	b.n	800f3e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f9e6 	bl	800f6f8 <USBD_CtlSendStatus>
    break;
 800f32c:	e059      	b.n	800f3e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f32e:	4b2f      	ldr	r3, [pc, #188]	; (800f3ec <USBD_SetConfig+0x144>)
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d112      	bne.n	800f35c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2202      	movs	r2, #2
 800f33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f33e:	4b2b      	ldr	r3, [pc, #172]	; (800f3ec <USBD_SetConfig+0x144>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f348:	4b28      	ldr	r3, [pc, #160]	; (800f3ec <USBD_SetConfig+0x144>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f7ff f99b 	bl	800e68a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f000 f9cf 	bl	800f6f8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f35a:	e042      	b.n	800f3e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f35c:	4b23      	ldr	r3, [pc, #140]	; (800f3ec <USBD_SetConfig+0x144>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	461a      	mov	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	429a      	cmp	r2, r3
 800f368:	d02a      	beq.n	800f3c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	b2db      	uxtb	r3, r3
 800f370:	4619      	mov	r1, r3
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7ff f989 	bl	800e68a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f378:	4b1c      	ldr	r3, [pc, #112]	; (800f3ec <USBD_SetConfig+0x144>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	461a      	mov	r2, r3
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f382:	4b1a      	ldr	r3, [pc, #104]	; (800f3ec <USBD_SetConfig+0x144>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	4619      	mov	r1, r3
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff f962 	bl	800e652 <USBD_SetClassConfig>
 800f38e:	4603      	mov	r3, r0
 800f390:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f392:	7bfb      	ldrb	r3, [r7, #15]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d00f      	beq.n	800f3b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f398:	6839      	ldr	r1, [r7, #0]
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f8fe 	bl	800f59c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f7ff f96e 	bl	800e68a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f3b6:	e014      	b.n	800f3e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f000 f99d 	bl	800f6f8 <USBD_CtlSendStatus>
    break;
 800f3be:	e010      	b.n	800f3e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f999 	bl	800f6f8 <USBD_CtlSendStatus>
    break;
 800f3c6:	e00c      	b.n	800f3e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f000 f8e6 	bl	800f59c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f3d0:	4b06      	ldr	r3, [pc, #24]	; (800f3ec <USBD_SetConfig+0x144>)
 800f3d2:	781b      	ldrb	r3, [r3, #0]
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff f957 	bl	800e68a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f3dc:	2303      	movs	r3, #3
 800f3de:	73fb      	strb	r3, [r7, #15]
    break;
 800f3e0:	bf00      	nop
  }

  return ret;
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	24000440 	.word	0x24000440

0800f3f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	88db      	ldrh	r3, [r3, #6]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d004      	beq.n	800f40c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f402:	6839      	ldr	r1, [r7, #0]
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f8c9 	bl	800f59c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f40a:	e021      	b.n	800f450 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f412:	2b01      	cmp	r3, #1
 800f414:	db17      	blt.n	800f446 <USBD_GetConfig+0x56>
 800f416:	2b02      	cmp	r3, #2
 800f418:	dd02      	ble.n	800f420 <USBD_GetConfig+0x30>
 800f41a:	2b03      	cmp	r3, #3
 800f41c:	d00b      	beq.n	800f436 <USBD_GetConfig+0x46>
 800f41e:	e012      	b.n	800f446 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2200      	movs	r2, #0
 800f424:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3308      	adds	r3, #8
 800f42a:	2201      	movs	r2, #1
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 f925 	bl	800f67e <USBD_CtlSendData>
      break;
 800f434:	e00c      	b.n	800f450 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	3304      	adds	r3, #4
 800f43a:	2201      	movs	r2, #1
 800f43c:	4619      	mov	r1, r3
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f000 f91d 	bl	800f67e <USBD_CtlSendData>
      break;
 800f444:	e004      	b.n	800f450 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f446:	6839      	ldr	r1, [r7, #0]
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f000 f8a7 	bl	800f59c <USBD_CtlError>
      break;
 800f44e:	bf00      	nop
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f468:	3b01      	subs	r3, #1
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d81e      	bhi.n	800f4ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	88db      	ldrh	r3, [r3, #6]
 800f472:	2b02      	cmp	r3, #2
 800f474:	d004      	beq.n	800f480 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f476:	6839      	ldr	r1, [r7, #0]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 f88f 	bl	800f59c <USBD_CtlError>
      break;
 800f47e:	e01a      	b.n	800f4b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2201      	movs	r2, #1
 800f484:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d005      	beq.n	800f49c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	68db      	ldr	r3, [r3, #12]
 800f494:	f043 0202 	orr.w	r2, r3, #2
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	330c      	adds	r3, #12
 800f4a0:	2202      	movs	r2, #2
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f8ea 	bl	800f67e <USBD_CtlSendData>
    break;
 800f4aa:	e004      	b.n	800f4b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f000 f874 	bl	800f59c <USBD_CtlError>
    break;
 800f4b4:	bf00      	nop
  }
}
 800f4b6:	bf00      	nop
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}

0800f4be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4be:	b580      	push	{r7, lr}
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	af00      	add	r7, sp, #0
 800f4c4:	6078      	str	r0, [r7, #4]
 800f4c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	885b      	ldrh	r3, [r3, #2]
 800f4cc:	2b01      	cmp	r3, #1
 800f4ce:	d106      	bne.n	800f4de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2201      	movs	r2, #1
 800f4d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f90d 	bl	800f6f8 <USBD_CtlSendStatus>
  }
}
 800f4de:	bf00      	nop
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b082      	sub	sp, #8
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d80b      	bhi.n	800f514 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	885b      	ldrh	r3, [r3, #2]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d10c      	bne.n	800f51e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f8f3 	bl	800f6f8 <USBD_CtlSendStatus>
      }
      break;
 800f512:	e004      	b.n	800f51e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f514:	6839      	ldr	r1, [r7, #0]
 800f516:	6878      	ldr	r0, [r7, #4]
 800f518:	f000 f840 	bl	800f59c <USBD_CtlError>
      break;
 800f51c:	e000      	b.n	800f520 <USBD_ClrFeature+0x3a>
      break;
 800f51e:	bf00      	nop
  }
}
 800f520:	bf00      	nop
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	781a      	ldrb	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	3301      	adds	r3, #1
 800f542:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	781a      	ldrb	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	3301      	adds	r3, #1
 800f550:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f7ff fad4 	bl	800eb00 <SWAPBYTE>
 800f558:	4603      	mov	r3, r0
 800f55a:	461a      	mov	r2, r3
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3301      	adds	r3, #1
 800f564:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	3301      	adds	r3, #1
 800f56a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f56c:	68f8      	ldr	r0, [r7, #12]
 800f56e:	f7ff fac7 	bl	800eb00 <SWAPBYTE>
 800f572:	4603      	mov	r3, r0
 800f574:	461a      	mov	r2, r3
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	3301      	adds	r3, #1
 800f584:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f586:	68f8      	ldr	r0, [r7, #12]
 800f588:	f7ff faba 	bl	800eb00 <SWAPBYTE>
 800f58c:	4603      	mov	r3, r0
 800f58e:	461a      	mov	r2, r3
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	80da      	strh	r2, [r3, #6]
}
 800f594:	bf00      	nop
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5a6:	2180      	movs	r1, #128	; 0x80
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f003 fa74 	bl	8012a96 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f003 fa70 	bl	8012a96 <USBD_LL_StallEP>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b086      	sub	sp, #24
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	60b9      	str	r1, [r7, #8]
 800f5c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d036      	beq.n	800f642 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f5d8:	6938      	ldr	r0, [r7, #16]
 800f5da:	f000 f836 	bl	800f64a <USBD_GetLen>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f5ec:	7dfb      	ldrb	r3, [r7, #23]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	4413      	add	r3, r2
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	7812      	ldrb	r2, [r2, #0]
 800f5f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f5f8:	7dfb      	ldrb	r3, [r7, #23]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	4413      	add	r3, r2
 800f604:	2203      	movs	r2, #3
 800f606:	701a      	strb	r2, [r3, #0]
  idx++;
 800f608:	7dfb      	ldrb	r3, [r7, #23]
 800f60a:	3301      	adds	r3, #1
 800f60c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f60e:	e013      	b.n	800f638 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f610:	7dfb      	ldrb	r3, [r7, #23]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	4413      	add	r3, r2
 800f616:	693a      	ldr	r2, [r7, #16]
 800f618:	7812      	ldrb	r2, [r2, #0]
 800f61a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	3301      	adds	r3, #1
 800f620:	613b      	str	r3, [r7, #16]
    idx++;
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	3301      	adds	r3, #1
 800f626:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f628:	7dfb      	ldrb	r3, [r7, #23]
 800f62a:	68ba      	ldr	r2, [r7, #8]
 800f62c:	4413      	add	r3, r2
 800f62e:	2200      	movs	r2, #0
 800f630:	701a      	strb	r2, [r3, #0]
    idx++;
 800f632:	7dfb      	ldrb	r3, [r7, #23]
 800f634:	3301      	adds	r3, #1
 800f636:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d1e7      	bne.n	800f610 <USBD_GetString+0x52>
 800f640:	e000      	b.n	800f644 <USBD_GetString+0x86>
    return;
 800f642:	bf00      	nop
  }
}
 800f644:	3718      	adds	r7, #24
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}

0800f64a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f64a:	b480      	push	{r7}
 800f64c:	b085      	sub	sp, #20
 800f64e:	af00      	add	r7, sp, #0
 800f650:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f652:	2300      	movs	r3, #0
 800f654:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f65a:	e005      	b.n	800f668 <USBD_GetLen+0x1e>
  {
    len++;
 800f65c:	7bfb      	ldrb	r3, [r7, #15]
 800f65e:	3301      	adds	r3, #1
 800f660:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	3301      	adds	r3, #1
 800f666:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1f5      	bne.n	800f65c <USBD_GetLen+0x12>
  }

  return len;
 800f670:	7bfb      	ldrb	r3, [r7, #15]
}
 800f672:	4618      	mov	r0, r3
 800f674:	3714      	adds	r7, #20
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr

0800f67e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b084      	sub	sp, #16
 800f682:	af00      	add	r7, sp, #0
 800f684:	60f8      	str	r0, [r7, #12]
 800f686:	60b9      	str	r1, [r7, #8]
 800f688:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2202      	movs	r2, #2
 800f68e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	687a      	ldr	r2, [r7, #4]
 800f696:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	687a      	ldr	r2, [r7, #4]
 800f69c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68ba      	ldr	r2, [r7, #8]
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f003 fa7f 	bl	8012ba8 <USBD_LL_Transmit>

  return USBD_OK;
 800f6aa:	2300      	movs	r3, #0
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	68f8      	ldr	r0, [r7, #12]
 800f6c8:	f003 fa6e 	bl	8012ba8 <USBD_LL_Transmit>

  return USBD_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	2100      	movs	r1, #0
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f003 fa7e 	bl	8012bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6ee:	2300      	movs	r3, #0
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2204      	movs	r2, #4
 800f704:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f708:	2300      	movs	r3, #0
 800f70a:	2200      	movs	r2, #0
 800f70c:	2100      	movs	r1, #0
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f003 fa4a 	bl	8012ba8 <USBD_LL_Transmit>

  return USBD_OK;
 800f714:	2300      	movs	r3, #0
}
 800f716:	4618      	mov	r0, r3
 800f718:	3708      	adds	r7, #8
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bd80      	pop	{r7, pc}

0800f71e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f71e:	b580      	push	{r7, lr}
 800f720:	b082      	sub	sp, #8
 800f722:	af00      	add	r7, sp, #0
 800f724:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2205      	movs	r2, #5
 800f72a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f72e:	2300      	movs	r3, #0
 800f730:	2200      	movs	r2, #0
 800f732:	2100      	movs	r1, #0
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f003 fa58 	bl	8012bea <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	4613      	mov	r3, r2
 800f750:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f752:	2301      	movs	r3, #1
 800f754:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f756:	2300      	movs	r3, #0
 800f758:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f75a:	4b1f      	ldr	r3, [pc, #124]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f75c:	7a5b      	ldrb	r3, [r3, #9]
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b00      	cmp	r3, #0
 800f762:	d131      	bne.n	800f7c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f764:	4b1c      	ldr	r3, [pc, #112]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f766:	7a5b      	ldrb	r3, [r3, #9]
 800f768:	b2db      	uxtb	r3, r3
 800f76a:	461a      	mov	r2, r3
 800f76c:	4b1a      	ldr	r3, [pc, #104]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f76e:	2100      	movs	r1, #0
 800f770:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f772:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f774:	7a5b      	ldrb	r3, [r3, #9]
 800f776:	b2db      	uxtb	r3, r3
 800f778:	4a17      	ldr	r2, [pc, #92]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f782:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f784:	7a5b      	ldrb	r3, [r3, #9]
 800f786:	b2db      	uxtb	r3, r3
 800f788:	461a      	mov	r2, r3
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f78c:	4413      	add	r3, r2
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f792:	4b11      	ldr	r3, [pc, #68]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f794:	7a5b      	ldrb	r3, [r3, #9]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	1c5a      	adds	r2, r3, #1
 800f79a:	b2d1      	uxtb	r1, r2
 800f79c:	4a0e      	ldr	r2, [pc, #56]	; (800f7d8 <FATFS_LinkDriverEx+0x94>)
 800f79e:	7251      	strb	r1, [r2, #9]
 800f7a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f7a2:	7dbb      	ldrb	r3, [r7, #22]
 800f7a4:	3330      	adds	r3, #48	; 0x30
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	3301      	adds	r3, #1
 800f7b0:	223a      	movs	r2, #58	; 0x3a
 800f7b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	3302      	adds	r3, #2
 800f7b8:	222f      	movs	r2, #47	; 0x2f
 800f7ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	3303      	adds	r3, #3
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	371c      	adds	r7, #28
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d4:	4770      	bx	lr
 800f7d6:	bf00      	nop
 800f7d8:	24000444 	.word	0x24000444

0800f7dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	6839      	ldr	r1, [r7, #0]
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f7ff ffaa 	bl	800f744 <FATFS_LinkDriverEx>
 800f7f0:	4603      	mov	r3, r0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f7fa:	b480      	push	{r7}
 800f7fc:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f7fe:	bf00      	nop
 800f800:	46bd      	mov	sp, r7
 800f802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f806:	4770      	bx	lr

0800f808 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f808:	b480      	push	{r7}
 800f80a:	b085      	sub	sp, #20
 800f80c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f80e:	f3ef 8305 	mrs	r3, IPSR
 800f812:	60bb      	str	r3, [r7, #8]
  return(result);
 800f814:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10f      	bne.n	800f83a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f81a:	f3ef 8310 	mrs	r3, PRIMASK
 800f81e:	607b      	str	r3, [r7, #4]
  return(result);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d105      	bne.n	800f832 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f826:	f3ef 8311 	mrs	r3, BASEPRI
 800f82a:	603b      	str	r3, [r7, #0]
  return(result);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d007      	beq.n	800f842 <osKernelInitialize+0x3a>
 800f832:	4b0e      	ldr	r3, [pc, #56]	; (800f86c <osKernelInitialize+0x64>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	2b02      	cmp	r3, #2
 800f838:	d103      	bne.n	800f842 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f83a:	f06f 0305 	mvn.w	r3, #5
 800f83e:	60fb      	str	r3, [r7, #12]
 800f840:	e00c      	b.n	800f85c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f842:	4b0a      	ldr	r3, [pc, #40]	; (800f86c <osKernelInitialize+0x64>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d105      	bne.n	800f856 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f84a:	4b08      	ldr	r3, [pc, #32]	; (800f86c <osKernelInitialize+0x64>)
 800f84c:	2201      	movs	r2, #1
 800f84e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f850:	2300      	movs	r3, #0
 800f852:	60fb      	str	r3, [r7, #12]
 800f854:	e002      	b.n	800f85c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f856:	f04f 33ff 	mov.w	r3, #4294967295
 800f85a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f85c:	68fb      	ldr	r3, [r7, #12]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3714      	adds	r7, #20
 800f862:	46bd      	mov	sp, r7
 800f864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f868:	4770      	bx	lr
 800f86a:	bf00      	nop
 800f86c:	24000450 	.word	0x24000450

0800f870 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f876:	f3ef 8305 	mrs	r3, IPSR
 800f87a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f87c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10f      	bne.n	800f8a2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f882:	f3ef 8310 	mrs	r3, PRIMASK
 800f886:	607b      	str	r3, [r7, #4]
  return(result);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d105      	bne.n	800f89a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f88e:	f3ef 8311 	mrs	r3, BASEPRI
 800f892:	603b      	str	r3, [r7, #0]
  return(result);
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d007      	beq.n	800f8aa <osKernelStart+0x3a>
 800f89a:	4b0f      	ldr	r3, [pc, #60]	; (800f8d8 <osKernelStart+0x68>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d103      	bne.n	800f8aa <osKernelStart+0x3a>
    stat = osErrorISR;
 800f8a2:	f06f 0305 	mvn.w	r3, #5
 800f8a6:	60fb      	str	r3, [r7, #12]
 800f8a8:	e010      	b.n	800f8cc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <osKernelStart+0x68>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d109      	bne.n	800f8c6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f8b2:	f7ff ffa2 	bl	800f7fa <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f8b6:	4b08      	ldr	r3, [pc, #32]	; (800f8d8 <osKernelStart+0x68>)
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f8bc:	f001 f870 	bl	80109a0 <vTaskStartScheduler>
      stat = osOK;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60fb      	str	r3, [r7, #12]
 800f8c4:	e002      	b.n	800f8cc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f8cc:	68fb      	ldr	r3, [r7, #12]
}
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	24000450 	.word	0x24000450

0800f8dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b090      	sub	sp, #64	; 0x40
 800f8e0:	af04      	add	r7, sp, #16
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8ec:	f3ef 8305 	mrs	r3, IPSR
 800f8f0:	61fb      	str	r3, [r7, #28]
  return(result);
 800f8f2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f040 808f 	bne.w	800fa18 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800f8fe:	61bb      	str	r3, [r7, #24]
  return(result);
 800f900:	69bb      	ldr	r3, [r7, #24]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d105      	bne.n	800f912 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f906:	f3ef 8311 	mrs	r3, BASEPRI
 800f90a:	617b      	str	r3, [r7, #20]
  return(result);
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d003      	beq.n	800f91a <osThreadNew+0x3e>
 800f912:	4b44      	ldr	r3, [pc, #272]	; (800fa24 <osThreadNew+0x148>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2b02      	cmp	r3, #2
 800f918:	d07e      	beq.n	800fa18 <osThreadNew+0x13c>
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d07b      	beq.n	800fa18 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f920:	2380      	movs	r3, #128	; 0x80
 800f922:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f924:	2318      	movs	r3, #24
 800f926:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f928:	2300      	movs	r3, #0
 800f92a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f92c:	f04f 33ff 	mov.w	r3, #4294967295
 800f930:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d045      	beq.n	800f9c4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <osThreadNew+0x6a>
        name = attr->name;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d002      	beq.n	800f954 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	2b00      	cmp	r3, #0
 800f958:	d008      	beq.n	800f96c <osThreadNew+0x90>
 800f95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95c:	2b38      	cmp	r3, #56	; 0x38
 800f95e:	d805      	bhi.n	800f96c <osThreadNew+0x90>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	f003 0301 	and.w	r3, r3, #1
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d001      	beq.n	800f970 <osThreadNew+0x94>
        return (NULL);
 800f96c:	2300      	movs	r3, #0
 800f96e:	e054      	b.n	800fa1a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d003      	beq.n	800f980 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	695b      	ldr	r3, [r3, #20]
 800f97c:	089b      	lsrs	r3, r3, #2
 800f97e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d00e      	beq.n	800f9a6 <osThreadNew+0xca>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	2b5b      	cmp	r3, #91	; 0x5b
 800f98e:	d90a      	bls.n	800f9a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f994:	2b00      	cmp	r3, #0
 800f996:	d006      	beq.n	800f9a6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	695b      	ldr	r3, [r3, #20]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <osThreadNew+0xca>
        mem = 1;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	623b      	str	r3, [r7, #32]
 800f9a4:	e010      	b.n	800f9c8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d10c      	bne.n	800f9c8 <osThreadNew+0xec>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d108      	bne.n	800f9c8 <osThreadNew+0xec>
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	691b      	ldr	r3, [r3, #16]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d104      	bne.n	800f9c8 <osThreadNew+0xec>
          mem = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	623b      	str	r3, [r7, #32]
 800f9c2:	e001      	b.n	800f9c8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f9c8:	6a3b      	ldr	r3, [r7, #32]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d110      	bne.n	800f9f0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f9d6:	9202      	str	r2, [sp, #8]
 800f9d8:	9301      	str	r3, [sp, #4]
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	68bb      	ldr	r3, [r7, #8]
 800f9e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f9e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9e4:	68f8      	ldr	r0, [r7, #12]
 800f9e6:	f000 fe09 	bl	80105fc <xTaskCreateStatic>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	613b      	str	r3, [r7, #16]
 800f9ee:	e013      	b.n	800fa18 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f9f0:	6a3b      	ldr	r3, [r7, #32]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d110      	bne.n	800fa18 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9f8:	b29a      	uxth	r2, r3
 800f9fa:	f107 0310 	add.w	r3, r7, #16
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa02:	9300      	str	r3, [sp, #0]
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f000 fe51 	bl	80106b0 <xTaskCreate>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d001      	beq.n	800fa18 <osThreadNew+0x13c>
          hTask = NULL;
 800fa14:	2300      	movs	r3, #0
 800fa16:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fa18:	693b      	ldr	r3, [r7, #16]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3730      	adds	r7, #48	; 0x30
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	24000450 	.word	0x24000450

0800fa28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b086      	sub	sp, #24
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa30:	f3ef 8305 	mrs	r3, IPSR
 800fa34:	613b      	str	r3, [r7, #16]
  return(result);
 800fa36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d10f      	bne.n	800fa5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa3c:	f3ef 8310 	mrs	r3, PRIMASK
 800fa40:	60fb      	str	r3, [r7, #12]
  return(result);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d105      	bne.n	800fa54 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fa48:	f3ef 8311 	mrs	r3, BASEPRI
 800fa4c:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d007      	beq.n	800fa64 <osDelay+0x3c>
 800fa54:	4b0a      	ldr	r3, [pc, #40]	; (800fa80 <osDelay+0x58>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	2b02      	cmp	r3, #2
 800fa5a:	d103      	bne.n	800fa64 <osDelay+0x3c>
    stat = osErrorISR;
 800fa5c:	f06f 0305 	mvn.w	r3, #5
 800fa60:	617b      	str	r3, [r7, #20]
 800fa62:	e007      	b.n	800fa74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fa64:	2300      	movs	r3, #0
 800fa66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d002      	beq.n	800fa74 <osDelay+0x4c>
      vTaskDelay(ticks);
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f000 ff62 	bl	8010938 <vTaskDelay>
    }
  }

  return (stat);
 800fa74:	697b      	ldr	r3, [r7, #20]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3718      	adds	r7, #24
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	24000450 	.word	0x24000450

0800fa84 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa84:	b480      	push	{r7}
 800fa86:	b085      	sub	sp, #20
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4a07      	ldr	r2, [pc, #28]	; (800fab0 <vApplicationGetIdleTaskMemory+0x2c>)
 800fa94:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	4a06      	ldr	r2, [pc, #24]	; (800fab4 <vApplicationGetIdleTaskMemory+0x30>)
 800fa9a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	2280      	movs	r2, #128	; 0x80
 800faa0:	601a      	str	r2, [r3, #0]
}
 800faa2:	bf00      	nop
 800faa4:	3714      	adds	r7, #20
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr
 800faae:	bf00      	nop
 800fab0:	24000454 	.word	0x24000454
 800fab4:	240004b0 	.word	0x240004b0

0800fab8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	4a07      	ldr	r2, [pc, #28]	; (800fae4 <vApplicationGetTimerTaskMemory+0x2c>)
 800fac8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	4a06      	ldr	r2, [pc, #24]	; (800fae8 <vApplicationGetTimerTaskMemory+0x30>)
 800face:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fad6:	601a      	str	r2, [r3, #0]
}
 800fad8:	bf00      	nop
 800fada:	3714      	adds	r7, #20
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr
 800fae4:	240006b0 	.word	0x240006b0
 800fae8:	2400070c 	.word	0x2400070c

0800faec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f103 0208 	add.w	r2, r3, #8
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f04f 32ff 	mov.w	r2, #4294967295
 800fb04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f103 0208 	add.w	r2, r3, #8
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f103 0208 	add.w	r2, r3, #8
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb20:	bf00      	nop
 800fb22:	370c      	adds	r7, #12
 800fb24:	46bd      	mov	sp, r7
 800fb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb2a:	4770      	bx	lr

0800fb2c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b083      	sub	sp, #12
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb3a:	bf00      	nop
 800fb3c:	370c      	adds	r7, #12
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr

0800fb46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb46:	b480      	push	{r7}
 800fb48:	b085      	sub	sp, #20
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	6078      	str	r0, [r7, #4]
 800fb4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	68fa      	ldr	r2, [r7, #12]
 800fb5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	689a      	ldr	r2, [r3, #8]
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	683a      	ldr	r2, [r7, #0]
 800fb6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	683a      	ldr	r2, [r7, #0]
 800fb70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	687a      	ldr	r2, [r7, #4]
 800fb76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	1c5a      	adds	r2, r3, #1
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	601a      	str	r2, [r3, #0]
}
 800fb82:	bf00      	nop
 800fb84:	3714      	adds	r7, #20
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb8e:	b480      	push	{r7}
 800fb90:	b085      	sub	sp, #20
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
 800fb96:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba4:	d103      	bne.n	800fbae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	e00c      	b.n	800fbc8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	3308      	adds	r3, #8
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e002      	b.n	800fbbc <vListInsert+0x2e>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	60fb      	str	r3, [r7, #12]
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	685b      	ldr	r3, [r3, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d2f6      	bcs.n	800fbb6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	685a      	ldr	r2, [r3, #4]
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	683a      	ldr	r2, [r7, #0]
 800fbd6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	683a      	ldr	r2, [r7, #0]
 800fbe2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	1c5a      	adds	r2, r3, #1
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	601a      	str	r2, [r3, #0]
}
 800fbf4:	bf00      	nop
 800fbf6:	3714      	adds	r7, #20
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfe:	4770      	bx	lr

0800fc00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	6892      	ldr	r2, [r2, #8]
 800fc16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	689b      	ldr	r3, [r3, #8]
 800fc1c:	687a      	ldr	r2, [r7, #4]
 800fc1e:	6852      	ldr	r2, [r2, #4]
 800fc20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	687a      	ldr	r2, [r7, #4]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d103      	bne.n	800fc34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	689a      	ldr	r2, [r3, #8]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	1e5a      	subs	r2, r3, #1
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b084      	sub	sp, #16
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
 800fc5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d109      	bne.n	800fc7c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc6c:	f383 8811 	msr	BASEPRI, r3
 800fc70:	f3bf 8f6f 	isb	sy
 800fc74:	f3bf 8f4f 	dsb	sy
 800fc78:	60bb      	str	r3, [r7, #8]
 800fc7a:	e7fe      	b.n	800fc7a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800fc7c:	f002 f80e 	bl	8011c9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc88:	68f9      	ldr	r1, [r7, #12]
 800fc8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc8c:	fb01 f303 	mul.w	r3, r1, r3
 800fc90:	441a      	add	r2, r3
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681a      	ldr	r2, [r3, #0]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcac:	3b01      	subs	r3, #1
 800fcae:	68f9      	ldr	r1, [r7, #12]
 800fcb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fcb2:	fb01 f303 	mul.w	r3, r1, r3
 800fcb6:	441a      	add	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	22ff      	movs	r2, #255	; 0xff
 800fcc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	22ff      	movs	r2, #255	; 0xff
 800fcc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d114      	bne.n	800fcfc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d01a      	beq.n	800fd10 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	3310      	adds	r3, #16
 800fcde:	4618      	mov	r0, r3
 800fce0:	f001 f8de 	bl	8010ea0 <xTaskRemoveFromEventList>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d012      	beq.n	800fd10 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcea:	4b0d      	ldr	r3, [pc, #52]	; (800fd20 <xQueueGenericReset+0xcc>)
 800fcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	e009      	b.n	800fd10 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3310      	adds	r3, #16
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7ff fef3 	bl	800faec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	3324      	adds	r3, #36	; 0x24
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f7ff feee 	bl	800faec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd10:	f001 fff2 	bl	8011cf8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd14:	2301      	movs	r3, #1
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3710      	adds	r7, #16
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b08e      	sub	sp, #56	; 0x38
 800fd28:	af02      	add	r7, sp, #8
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d109      	bne.n	800fd4c <xQueueGenericCreateStatic+0x28>
 800fd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd3c:	f383 8811 	msr	BASEPRI, r3
 800fd40:	f3bf 8f6f 	isb	sy
 800fd44:	f3bf 8f4f 	dsb	sy
 800fd48:	62bb      	str	r3, [r7, #40]	; 0x28
 800fd4a:	e7fe      	b.n	800fd4a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d109      	bne.n	800fd66 <xQueueGenericCreateStatic+0x42>
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
 800fd64:	e7fe      	b.n	800fd64 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d002      	beq.n	800fd72 <xQueueGenericCreateStatic+0x4e>
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d001      	beq.n	800fd76 <xQueueGenericCreateStatic+0x52>
 800fd72:	2301      	movs	r3, #1
 800fd74:	e000      	b.n	800fd78 <xQueueGenericCreateStatic+0x54>
 800fd76:	2300      	movs	r3, #0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d109      	bne.n	800fd90 <xQueueGenericCreateStatic+0x6c>
 800fd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd80:	f383 8811 	msr	BASEPRI, r3
 800fd84:	f3bf 8f6f 	isb	sy
 800fd88:	f3bf 8f4f 	dsb	sy
 800fd8c:	623b      	str	r3, [r7, #32]
 800fd8e:	e7fe      	b.n	800fd8e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d102      	bne.n	800fd9c <xQueueGenericCreateStatic+0x78>
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d101      	bne.n	800fda0 <xQueueGenericCreateStatic+0x7c>
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e000      	b.n	800fda2 <xQueueGenericCreateStatic+0x7e>
 800fda0:	2300      	movs	r3, #0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d109      	bne.n	800fdba <xQueueGenericCreateStatic+0x96>
 800fda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdaa:	f383 8811 	msr	BASEPRI, r3
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	f3bf 8f4f 	dsb	sy
 800fdb6:	61fb      	str	r3, [r7, #28]
 800fdb8:	e7fe      	b.n	800fdb8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fdba:	2350      	movs	r3, #80	; 0x50
 800fdbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	2b50      	cmp	r3, #80	; 0x50
 800fdc2:	d009      	beq.n	800fdd8 <xQueueGenericCreateStatic+0xb4>
 800fdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdc8:	f383 8811 	msr	BASEPRI, r3
 800fdcc:	f3bf 8f6f 	isb	sy
 800fdd0:	f3bf 8f4f 	dsb	sy
 800fdd4:	61bb      	str	r3, [r7, #24]
 800fdd6:	e7fe      	b.n	800fdd6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fdd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d00d      	beq.n	800fe00 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	2201      	movs	r2, #1
 800fde8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	68b9      	ldr	r1, [r7, #8]
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 f805 	bl	800fe0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3730      	adds	r7, #48	; 0x30
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b084      	sub	sp, #16
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	60f8      	str	r0, [r7, #12]
 800fe12:	60b9      	str	r1, [r7, #8]
 800fe14:	607a      	str	r2, [r7, #4]
 800fe16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d103      	bne.n	800fe26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe1e:	69bb      	ldr	r3, [r7, #24]
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	e002      	b.n	800fe2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	687a      	ldr	r2, [r7, #4]
 800fe2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	68fa      	ldr	r2, [r7, #12]
 800fe30:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	68ba      	ldr	r2, [r7, #8]
 800fe36:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe38:	2101      	movs	r1, #1
 800fe3a:	69b8      	ldr	r0, [r7, #24]
 800fe3c:	f7ff ff0a 	bl	800fc54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	78fa      	ldrb	r2, [r7, #3]
 800fe44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fe48:	bf00      	nop
 800fe4a:	3710      	adds	r7, #16
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b08e      	sub	sp, #56	; 0x38
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	60f8      	str	r0, [r7, #12]
 800fe58:	60b9      	str	r1, [r7, #8]
 800fe5a:	607a      	str	r2, [r7, #4]
 800fe5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fe5e:	2300      	movs	r3, #0
 800fe60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d109      	bne.n	800fe80 <xQueueGenericSend+0x30>
 800fe6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe70:	f383 8811 	msr	BASEPRI, r3
 800fe74:	f3bf 8f6f 	isb	sy
 800fe78:	f3bf 8f4f 	dsb	sy
 800fe7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe7e:	e7fe      	b.n	800fe7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe80:	68bb      	ldr	r3, [r7, #8]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d103      	bne.n	800fe8e <xQueueGenericSend+0x3e>
 800fe86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d101      	bne.n	800fe92 <xQueueGenericSend+0x42>
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e000      	b.n	800fe94 <xQueueGenericSend+0x44>
 800fe92:	2300      	movs	r3, #0
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <xQueueGenericSend+0x5c>
 800fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	627b      	str	r3, [r7, #36]	; 0x24
 800feaa:	e7fe      	b.n	800feaa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d103      	bne.n	800feba <xQueueGenericSend+0x6a>
 800feb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feb6:	2b01      	cmp	r3, #1
 800feb8:	d101      	bne.n	800febe <xQueueGenericSend+0x6e>
 800feba:	2301      	movs	r3, #1
 800febc:	e000      	b.n	800fec0 <xQueueGenericSend+0x70>
 800febe:	2300      	movs	r3, #0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d109      	bne.n	800fed8 <xQueueGenericSend+0x88>
 800fec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec8:	f383 8811 	msr	BASEPRI, r3
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	623b      	str	r3, [r7, #32]
 800fed6:	e7fe      	b.n	800fed6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fed8:	f001 f998 	bl	801120c <xTaskGetSchedulerState>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d102      	bne.n	800fee8 <xQueueGenericSend+0x98>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d101      	bne.n	800feec <xQueueGenericSend+0x9c>
 800fee8:	2301      	movs	r3, #1
 800feea:	e000      	b.n	800feee <xQueueGenericSend+0x9e>
 800feec:	2300      	movs	r3, #0
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d109      	bne.n	800ff06 <xQueueGenericSend+0xb6>
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	61fb      	str	r3, [r7, #28]
 800ff04:	e7fe      	b.n	800ff04 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ff06:	f001 fec9 	bl	8011c9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d302      	bcc.n	800ff1c <xQueueGenericSend+0xcc>
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	2b02      	cmp	r3, #2
 800ff1a:	d129      	bne.n	800ff70 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ff1c:	683a      	ldr	r2, [r7, #0]
 800ff1e:	68b9      	ldr	r1, [r7, #8]
 800ff20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff22:	f000 f9ff 	bl	8010324 <prvCopyDataToQueue>
 800ff26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d010      	beq.n	800ff52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff32:	3324      	adds	r3, #36	; 0x24
 800ff34:	4618      	mov	r0, r3
 800ff36:	f000 ffb3 	bl	8010ea0 <xTaskRemoveFromEventList>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d013      	beq.n	800ff68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ff40:	4b3f      	ldr	r3, [pc, #252]	; (8010040 <xQueueGenericSend+0x1f0>)
 800ff42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff46:	601a      	str	r2, [r3, #0]
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	e00a      	b.n	800ff68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ff52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d007      	beq.n	800ff68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ff58:	4b39      	ldr	r3, [pc, #228]	; (8010040 <xQueueGenericSend+0x1f0>)
 800ff5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff5e:	601a      	str	r2, [r3, #0]
 800ff60:	f3bf 8f4f 	dsb	sy
 800ff64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ff68:	f001 fec6 	bl	8011cf8 <vPortExitCritical>
				return pdPASS;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	e063      	b.n	8010038 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d103      	bne.n	800ff7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ff76:	f001 febf 	bl	8011cf8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e05c      	b.n	8010038 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ff7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d106      	bne.n	800ff92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff84:	f107 0314 	add.w	r3, r7, #20
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f000 ffeb 	bl	8010f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff92:	f001 feb1 	bl	8011cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff96:	f000 fd67 	bl	8010a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff9a:	f001 fe7f 	bl	8011c9c <vPortEnterCritical>
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ffa4:	b25b      	sxtb	r3, r3
 800ffa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffaa:	d103      	bne.n	800ffb4 <xQueueGenericSend+0x164>
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	2200      	movs	r2, #0
 800ffb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ffba:	b25b      	sxtb	r3, r3
 800ffbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffc0:	d103      	bne.n	800ffca <xQueueGenericSend+0x17a>
 800ffc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ffca:	f001 fe95 	bl	8011cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ffce:	1d3a      	adds	r2, r7, #4
 800ffd0:	f107 0314 	add.w	r3, r7, #20
 800ffd4:	4611      	mov	r1, r2
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f000 ffda 	bl	8010f90 <xTaskCheckForTimeOut>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d124      	bne.n	801002c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ffe2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ffe4:	f000 fa96 	bl	8010514 <prvIsQueueFull>
 800ffe8:	4603      	mov	r3, r0
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d018      	beq.n	8010020 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ffee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fff0:	3310      	adds	r3, #16
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	4611      	mov	r1, r2
 800fff6:	4618      	mov	r0, r3
 800fff8:	f000 ff04 	bl	8010e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fffe:	f000 fa21 	bl	8010444 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010002:	f000 fd3f 	bl	8010a84 <xTaskResumeAll>
 8010006:	4603      	mov	r3, r0
 8010008:	2b00      	cmp	r3, #0
 801000a:	f47f af7c 	bne.w	800ff06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 801000e:	4b0c      	ldr	r3, [pc, #48]	; (8010040 <xQueueGenericSend+0x1f0>)
 8010010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	e772      	b.n	800ff06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010020:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010022:	f000 fa0f 	bl	8010444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010026:	f000 fd2d 	bl	8010a84 <xTaskResumeAll>
 801002a:	e76c      	b.n	800ff06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801002c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801002e:	f000 fa09 	bl	8010444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010032:	f000 fd27 	bl	8010a84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010036:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010038:	4618      	mov	r0, r3
 801003a:	3738      	adds	r7, #56	; 0x38
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}
 8010040:	e000ed04 	.word	0xe000ed04

08010044 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08e      	sub	sp, #56	; 0x38
 8010048:	af00      	add	r7, sp, #0
 801004a:	60f8      	str	r0, [r7, #12]
 801004c:	60b9      	str	r1, [r7, #8]
 801004e:	607a      	str	r2, [r7, #4]
 8010050:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010058:	2b00      	cmp	r3, #0
 801005a:	d109      	bne.n	8010070 <xQueueGenericSendFromISR+0x2c>
 801005c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010060:	f383 8811 	msr	BASEPRI, r3
 8010064:	f3bf 8f6f 	isb	sy
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	627b      	str	r3, [r7, #36]	; 0x24
 801006e:	e7fe      	b.n	801006e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d103      	bne.n	801007e <xQueueGenericSendFromISR+0x3a>
 8010076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007a:	2b00      	cmp	r3, #0
 801007c:	d101      	bne.n	8010082 <xQueueGenericSendFromISR+0x3e>
 801007e:	2301      	movs	r3, #1
 8010080:	e000      	b.n	8010084 <xQueueGenericSendFromISR+0x40>
 8010082:	2300      	movs	r3, #0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d109      	bne.n	801009c <xQueueGenericSendFromISR+0x58>
 8010088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801008c:	f383 8811 	msr	BASEPRI, r3
 8010090:	f3bf 8f6f 	isb	sy
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	623b      	str	r3, [r7, #32]
 801009a:	e7fe      	b.n	801009a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801009c:	683b      	ldr	r3, [r7, #0]
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d103      	bne.n	80100aa <xQueueGenericSendFromISR+0x66>
 80100a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d101      	bne.n	80100ae <xQueueGenericSendFromISR+0x6a>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e000      	b.n	80100b0 <xQueueGenericSendFromISR+0x6c>
 80100ae:	2300      	movs	r3, #0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d109      	bne.n	80100c8 <xQueueGenericSendFromISR+0x84>
 80100b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	61fb      	str	r3, [r7, #28]
 80100c6:	e7fe      	b.n	80100c6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100c8:	f001 fec4 	bl	8011e54 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80100cc:	f3ef 8211 	mrs	r2, BASEPRI
 80100d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d4:	f383 8811 	msr	BASEPRI, r3
 80100d8:	f3bf 8f6f 	isb	sy
 80100dc:	f3bf 8f4f 	dsb	sy
 80100e0:	61ba      	str	r2, [r7, #24]
 80100e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80100e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80100e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d302      	bcc.n	80100fa <xQueueGenericSendFromISR+0xb6>
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	2b02      	cmp	r3, #2
 80100f8:	d12c      	bne.n	8010154 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80100fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010100:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010104:	683a      	ldr	r2, [r7, #0]
 8010106:	68b9      	ldr	r1, [r7, #8]
 8010108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801010a:	f000 f90b 	bl	8010324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801010e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010116:	d112      	bne.n	801013e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011c:	2b00      	cmp	r3, #0
 801011e:	d016      	beq.n	801014e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	3324      	adds	r3, #36	; 0x24
 8010124:	4618      	mov	r0, r3
 8010126:	f000 febb 	bl	8010ea0 <xTaskRemoveFromEventList>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d00e      	beq.n	801014e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d00b      	beq.n	801014e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2201      	movs	r2, #1
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	e007      	b.n	801014e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801013e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010142:	3301      	adds	r3, #1
 8010144:	b2db      	uxtb	r3, r3
 8010146:	b25a      	sxtb	r2, r3
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801014e:	2301      	movs	r3, #1
 8010150:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010152:	e001      	b.n	8010158 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010154:	2300      	movs	r3, #0
 8010156:	637b      	str	r3, [r7, #52]	; 0x34
 8010158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010164:	4618      	mov	r0, r3
 8010166:	3738      	adds	r7, #56	; 0x38
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b08c      	sub	sp, #48	; 0x30
 8010170:	af00      	add	r7, sp, #0
 8010172:	60f8      	str	r0, [r7, #12]
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010178:	2300      	movs	r3, #0
 801017a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	2b00      	cmp	r3, #0
 8010184:	d109      	bne.n	801019a <xQueueReceive+0x2e>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	623b      	str	r3, [r7, #32]
 8010198:	e7fe      	b.n	8010198 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d103      	bne.n	80101a8 <xQueueReceive+0x3c>
 80101a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d101      	bne.n	80101ac <xQueueReceive+0x40>
 80101a8:	2301      	movs	r3, #1
 80101aa:	e000      	b.n	80101ae <xQueueReceive+0x42>
 80101ac:	2300      	movs	r3, #0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d109      	bne.n	80101c6 <xQueueReceive+0x5a>
 80101b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	61fb      	str	r3, [r7, #28]
 80101c4:	e7fe      	b.n	80101c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101c6:	f001 f821 	bl	801120c <xTaskGetSchedulerState>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d102      	bne.n	80101d6 <xQueueReceive+0x6a>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d101      	bne.n	80101da <xQueueReceive+0x6e>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e000      	b.n	80101dc <xQueueReceive+0x70>
 80101da:	2300      	movs	r3, #0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d109      	bne.n	80101f4 <xQueueReceive+0x88>
 80101e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101e4:	f383 8811 	msr	BASEPRI, r3
 80101e8:	f3bf 8f6f 	isb	sy
 80101ec:	f3bf 8f4f 	dsb	sy
 80101f0:	61bb      	str	r3, [r7, #24]
 80101f2:	e7fe      	b.n	80101f2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101f4:	f001 fd52 	bl	8011c9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80101fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010200:	2b00      	cmp	r3, #0
 8010202:	d01f      	beq.n	8010244 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010204:	68b9      	ldr	r1, [r7, #8]
 8010206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010208:	f000 f8f6 	bl	80103f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801020c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801020e:	1e5a      	subs	r2, r3, #1
 8010210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010212:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010216:	691b      	ldr	r3, [r3, #16]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00f      	beq.n	801023c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801021c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801021e:	3310      	adds	r3, #16
 8010220:	4618      	mov	r0, r3
 8010222:	f000 fe3d 	bl	8010ea0 <xTaskRemoveFromEventList>
 8010226:	4603      	mov	r3, r0
 8010228:	2b00      	cmp	r3, #0
 801022a:	d007      	beq.n	801023c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801022c:	4b3c      	ldr	r3, [pc, #240]	; (8010320 <xQueueReceive+0x1b4>)
 801022e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801023c:	f001 fd5c 	bl	8011cf8 <vPortExitCritical>
				return pdPASS;
 8010240:	2301      	movs	r3, #1
 8010242:	e069      	b.n	8010318 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d103      	bne.n	8010252 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801024a:	f001 fd55 	bl	8011cf8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801024e:	2300      	movs	r3, #0
 8010250:	e062      	b.n	8010318 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010254:	2b00      	cmp	r3, #0
 8010256:	d106      	bne.n	8010266 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010258:	f107 0310 	add.w	r3, r7, #16
 801025c:	4618      	mov	r0, r3
 801025e:	f000 fe81 	bl	8010f64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010262:	2301      	movs	r3, #1
 8010264:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010266:	f001 fd47 	bl	8011cf8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801026a:	f000 fbfd 	bl	8010a68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801026e:	f001 fd15 	bl	8011c9c <vPortEnterCritical>
 8010272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010278:	b25b      	sxtb	r3, r3
 801027a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027e:	d103      	bne.n	8010288 <xQueueReceive+0x11c>
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	2200      	movs	r2, #0
 8010284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801028e:	b25b      	sxtb	r3, r3
 8010290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010294:	d103      	bne.n	801029e <xQueueReceive+0x132>
 8010296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801029e:	f001 fd2b 	bl	8011cf8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102a2:	1d3a      	adds	r2, r7, #4
 80102a4:	f107 0310 	add.w	r3, r7, #16
 80102a8:	4611      	mov	r1, r2
 80102aa:	4618      	mov	r0, r3
 80102ac:	f000 fe70 	bl	8010f90 <xTaskCheckForTimeOut>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d123      	bne.n	80102fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b8:	f000 f916 	bl	80104e8 <prvIsQueueEmpty>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d017      	beq.n	80102f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c4:	3324      	adds	r3, #36	; 0x24
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 fd9a 	bl	8010e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102d2:	f000 f8b7 	bl	8010444 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102d6:	f000 fbd5 	bl	8010a84 <xTaskResumeAll>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d189      	bne.n	80101f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80102e0:	4b0f      	ldr	r3, [pc, #60]	; (8010320 <xQueueReceive+0x1b4>)
 80102e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102e6:	601a      	str	r2, [r3, #0]
 80102e8:	f3bf 8f4f 	dsb	sy
 80102ec:	f3bf 8f6f 	isb	sy
 80102f0:	e780      	b.n	80101f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80102f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102f4:	f000 f8a6 	bl	8010444 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102f8:	f000 fbc4 	bl	8010a84 <xTaskResumeAll>
 80102fc:	e77a      	b.n	80101f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80102fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010300:	f000 f8a0 	bl	8010444 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010304:	f000 fbbe 	bl	8010a84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801030a:	f000 f8ed 	bl	80104e8 <prvIsQueueEmpty>
 801030e:	4603      	mov	r3, r0
 8010310:	2b00      	cmp	r3, #0
 8010312:	f43f af6f 	beq.w	80101f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010316:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010318:	4618      	mov	r0, r3
 801031a:	3730      	adds	r7, #48	; 0x30
 801031c:	46bd      	mov	sp, r7
 801031e:	bd80      	pop	{r7, pc}
 8010320:	e000ed04 	.word	0xe000ed04

08010324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b086      	sub	sp, #24
 8010328:	af00      	add	r7, sp, #0
 801032a:	60f8      	str	r0, [r7, #12]
 801032c:	60b9      	str	r1, [r7, #8]
 801032e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010330:	2300      	movs	r3, #0
 8010332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801033e:	2b00      	cmp	r3, #0
 8010340:	d10d      	bne.n	801035e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d14d      	bne.n	80103e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	689b      	ldr	r3, [r3, #8]
 801034e:	4618      	mov	r0, r3
 8010350:	f000 ff7a 	bl	8011248 <xTaskPriorityDisinherit>
 8010354:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2200      	movs	r2, #0
 801035a:	609a      	str	r2, [r3, #8]
 801035c:	e043      	b.n	80103e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d119      	bne.n	8010398 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6858      	ldr	r0, [r3, #4]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801036c:	461a      	mov	r2, r3
 801036e:	68b9      	ldr	r1, [r7, #8]
 8010370:	f002 fcda 	bl	8012d28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801037c:	441a      	add	r2, r3
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	685a      	ldr	r2, [r3, #4]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	689b      	ldr	r3, [r3, #8]
 801038a:	429a      	cmp	r2, r3
 801038c:	d32b      	bcc.n	80103e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681a      	ldr	r2, [r3, #0]
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	605a      	str	r2, [r3, #4]
 8010396:	e026      	b.n	80103e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	68d8      	ldr	r0, [r3, #12]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a0:	461a      	mov	r2, r3
 80103a2:	68b9      	ldr	r1, [r7, #8]
 80103a4:	f002 fcc0 	bl	8012d28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	68da      	ldr	r2, [r3, #12]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103b0:	425b      	negs	r3, r3
 80103b2:	441a      	add	r2, r3
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	68da      	ldr	r2, [r3, #12]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d207      	bcs.n	80103d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	689a      	ldr	r2, [r3, #8]
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103cc:	425b      	negs	r3, r3
 80103ce:	441a      	add	r2, r3
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d105      	bne.n	80103e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	3b01      	subs	r3, #1
 80103e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80103ee:	697b      	ldr	r3, [r7, #20]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010406:	2b00      	cmp	r3, #0
 8010408:	d018      	beq.n	801043c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	68da      	ldr	r2, [r3, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010412:	441a      	add	r2, r3
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	68da      	ldr	r2, [r3, #12]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	429a      	cmp	r2, r3
 8010422:	d303      	bcc.n	801042c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	68d9      	ldr	r1, [r3, #12]
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010434:	461a      	mov	r2, r3
 8010436:	6838      	ldr	r0, [r7, #0]
 8010438:	f002 fc76 	bl	8012d28 <memcpy>
	}
}
 801043c:	bf00      	nop
 801043e:	3708      	adds	r7, #8
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b084      	sub	sp, #16
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801044c:	f001 fc26 	bl	8011c9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010456:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010458:	e011      	b.n	801047e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045e:	2b00      	cmp	r3, #0
 8010460:	d012      	beq.n	8010488 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	3324      	adds	r3, #36	; 0x24
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fd1a 	bl	8010ea0 <xTaskRemoveFromEventList>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010472:	f000 fded 	bl	8011050 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010476:	7bfb      	ldrb	r3, [r7, #15]
 8010478:	3b01      	subs	r3, #1
 801047a:	b2db      	uxtb	r3, r3
 801047c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801047e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010482:	2b00      	cmp	r3, #0
 8010484:	dce9      	bgt.n	801045a <prvUnlockQueue+0x16>
 8010486:	e000      	b.n	801048a <prvUnlockQueue+0x46>
					break;
 8010488:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	22ff      	movs	r2, #255	; 0xff
 801048e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010492:	f001 fc31 	bl	8011cf8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010496:	f001 fc01 	bl	8011c9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104a2:	e011      	b.n	80104c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d012      	beq.n	80104d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	3310      	adds	r3, #16
 80104b0:	4618      	mov	r0, r3
 80104b2:	f000 fcf5 	bl	8010ea0 <xTaskRemoveFromEventList>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d001      	beq.n	80104c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80104bc:	f000 fdc8 	bl	8011050 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80104c0:	7bbb      	ldrb	r3, [r7, #14]
 80104c2:	3b01      	subs	r3, #1
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80104c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	dce9      	bgt.n	80104a4 <prvUnlockQueue+0x60>
 80104d0:	e000      	b.n	80104d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80104d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	22ff      	movs	r2, #255	; 0xff
 80104d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80104dc:	f001 fc0c 	bl	8011cf8 <vPortExitCritical>
}
 80104e0:	bf00      	nop
 80104e2:	3710      	adds	r7, #16
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80104f0:	f001 fbd4 	bl	8011c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80104fc:	2301      	movs	r3, #1
 80104fe:	60fb      	str	r3, [r7, #12]
 8010500:	e001      	b.n	8010506 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010502:	2300      	movs	r3, #0
 8010504:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010506:	f001 fbf7 	bl	8011cf8 <vPortExitCritical>

	return xReturn;
 801050a:	68fb      	ldr	r3, [r7, #12]
}
 801050c:	4618      	mov	r0, r3
 801050e:	3710      	adds	r7, #16
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801051c:	f001 fbbe 	bl	8011c9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010528:	429a      	cmp	r2, r3
 801052a:	d102      	bne.n	8010532 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801052c:	2301      	movs	r3, #1
 801052e:	60fb      	str	r3, [r7, #12]
 8010530:	e001      	b.n	8010536 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010532:	2300      	movs	r3, #0
 8010534:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010536:	f001 fbdf 	bl	8011cf8 <vPortExitCritical>

	return xReturn;
 801053a:	68fb      	ldr	r3, [r7, #12]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801054e:	2300      	movs	r3, #0
 8010550:	60fb      	str	r3, [r7, #12]
 8010552:	e014      	b.n	801057e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010554:	4a0e      	ldr	r2, [pc, #56]	; (8010590 <vQueueAddToRegistry+0x4c>)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10b      	bne.n	8010578 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010560:	490b      	ldr	r1, [pc, #44]	; (8010590 <vQueueAddToRegistry+0x4c>)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	683a      	ldr	r2, [r7, #0]
 8010566:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801056a:	4a09      	ldr	r2, [pc, #36]	; (8010590 <vQueueAddToRegistry+0x4c>)
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	00db      	lsls	r3, r3, #3
 8010570:	4413      	add	r3, r2
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010576:	e005      	b.n	8010584 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	3301      	adds	r3, #1
 801057c:	60fb      	str	r3, [r7, #12]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2b07      	cmp	r3, #7
 8010582:	d9e7      	bls.n	8010554 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010584:	bf00      	nop
 8010586:	3714      	adds	r7, #20
 8010588:	46bd      	mov	sp, r7
 801058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058e:	4770      	bx	lr
 8010590:	240053d0 	.word	0x240053d0

08010594 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010594:	b580      	push	{r7, lr}
 8010596:	b086      	sub	sp, #24
 8010598:	af00      	add	r7, sp, #0
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80105a4:	f001 fb7a 	bl	8011c9c <vPortEnterCritical>
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105ae:	b25b      	sxtb	r3, r3
 80105b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b4:	d103      	bne.n	80105be <vQueueWaitForMessageRestricted+0x2a>
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2200      	movs	r2, #0
 80105ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80105c4:	b25b      	sxtb	r3, r3
 80105c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ca:	d103      	bne.n	80105d4 <vQueueWaitForMessageRestricted+0x40>
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	2200      	movs	r2, #0
 80105d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105d4:	f001 fb90 	bl	8011cf8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80105d8:	697b      	ldr	r3, [r7, #20]
 80105da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d106      	bne.n	80105ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	3324      	adds	r3, #36	; 0x24
 80105e4:	687a      	ldr	r2, [r7, #4]
 80105e6:	68b9      	ldr	r1, [r7, #8]
 80105e8:	4618      	mov	r0, r3
 80105ea:	f000 fc2f 	bl	8010e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80105ee:	6978      	ldr	r0, [r7, #20]
 80105f0:	f7ff ff28 	bl	8010444 <prvUnlockQueue>
	}
 80105f4:	bf00      	nop
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b08e      	sub	sp, #56	; 0x38
 8010600:	af04      	add	r7, sp, #16
 8010602:	60f8      	str	r0, [r7, #12]
 8010604:	60b9      	str	r1, [r7, #8]
 8010606:	607a      	str	r2, [r7, #4]
 8010608:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	2b00      	cmp	r3, #0
 801060e:	d109      	bne.n	8010624 <xTaskCreateStatic+0x28>
 8010610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010614:	f383 8811 	msr	BASEPRI, r3
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	f3bf 8f4f 	dsb	sy
 8010620:	623b      	str	r3, [r7, #32]
 8010622:	e7fe      	b.n	8010622 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8010624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010626:	2b00      	cmp	r3, #0
 8010628:	d109      	bne.n	801063e <xTaskCreateStatic+0x42>
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	f383 8811 	msr	BASEPRI, r3
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	f3bf 8f4f 	dsb	sy
 801063a:	61fb      	str	r3, [r7, #28]
 801063c:	e7fe      	b.n	801063c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801063e:	235c      	movs	r3, #92	; 0x5c
 8010640:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010642:	693b      	ldr	r3, [r7, #16]
 8010644:	2b5c      	cmp	r3, #92	; 0x5c
 8010646:	d009      	beq.n	801065c <xTaskCreateStatic+0x60>
 8010648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064c:	f383 8811 	msr	BASEPRI, r3
 8010650:	f3bf 8f6f 	isb	sy
 8010654:	f3bf 8f4f 	dsb	sy
 8010658:	61bb      	str	r3, [r7, #24]
 801065a:	e7fe      	b.n	801065a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801065c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801065e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010660:	2b00      	cmp	r3, #0
 8010662:	d01e      	beq.n	80106a2 <xTaskCreateStatic+0xa6>
 8010664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010666:	2b00      	cmp	r3, #0
 8010668:	d01b      	beq.n	80106a2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801066a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010672:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010676:	2202      	movs	r2, #2
 8010678:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801067c:	2300      	movs	r3, #0
 801067e:	9303      	str	r3, [sp, #12]
 8010680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010682:	9302      	str	r3, [sp, #8]
 8010684:	f107 0314 	add.w	r3, r7, #20
 8010688:	9301      	str	r3, [sp, #4]
 801068a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	687a      	ldr	r2, [r7, #4]
 8010692:	68b9      	ldr	r1, [r7, #8]
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f000 f850 	bl	801073a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801069a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801069c:	f000 f8dc 	bl	8010858 <prvAddNewTaskToReadyList>
 80106a0:	e001      	b.n	80106a6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80106a6:	697b      	ldr	r3, [r7, #20]
	}
 80106a8:	4618      	mov	r0, r3
 80106aa:	3728      	adds	r7, #40	; 0x28
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}

080106b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b08c      	sub	sp, #48	; 0x30
 80106b4:	af04      	add	r7, sp, #16
 80106b6:	60f8      	str	r0, [r7, #12]
 80106b8:	60b9      	str	r1, [r7, #8]
 80106ba:	603b      	str	r3, [r7, #0]
 80106bc:	4613      	mov	r3, r2
 80106be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80106c0:	88fb      	ldrh	r3, [r7, #6]
 80106c2:	009b      	lsls	r3, r3, #2
 80106c4:	4618      	mov	r0, r3
 80106c6:	f001 fc03 	bl	8011ed0 <pvPortMalloc>
 80106ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d00e      	beq.n	80106f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80106d2:	205c      	movs	r0, #92	; 0x5c
 80106d4:	f001 fbfc 	bl	8011ed0 <pvPortMalloc>
 80106d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80106da:	69fb      	ldr	r3, [r7, #28]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d003      	beq.n	80106e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80106e0:	69fb      	ldr	r3, [r7, #28]
 80106e2:	697a      	ldr	r2, [r7, #20]
 80106e4:	631a      	str	r2, [r3, #48]	; 0x30
 80106e6:	e005      	b.n	80106f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80106e8:	6978      	ldr	r0, [r7, #20]
 80106ea:	f001 fcb3 	bl	8012054 <vPortFree>
 80106ee:	e001      	b.n	80106f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80106f0:	2300      	movs	r3, #0
 80106f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d017      	beq.n	801072a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80106fa:	69fb      	ldr	r3, [r7, #28]
 80106fc:	2200      	movs	r2, #0
 80106fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010702:	88fa      	ldrh	r2, [r7, #6]
 8010704:	2300      	movs	r3, #0
 8010706:	9303      	str	r3, [sp, #12]
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	9302      	str	r3, [sp, #8]
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010712:	9300      	str	r3, [sp, #0]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	68b9      	ldr	r1, [r7, #8]
 8010718:	68f8      	ldr	r0, [r7, #12]
 801071a:	f000 f80e 	bl	801073a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801071e:	69f8      	ldr	r0, [r7, #28]
 8010720:	f000 f89a 	bl	8010858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010724:	2301      	movs	r3, #1
 8010726:	61bb      	str	r3, [r7, #24]
 8010728:	e002      	b.n	8010730 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801072a:	f04f 33ff 	mov.w	r3, #4294967295
 801072e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010730:	69bb      	ldr	r3, [r7, #24]
	}
 8010732:	4618      	mov	r0, r3
 8010734:	3720      	adds	r7, #32
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}

0801073a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b088      	sub	sp, #32
 801073e:	af00      	add	r7, sp, #0
 8010740:	60f8      	str	r0, [r7, #12]
 8010742:	60b9      	str	r1, [r7, #8]
 8010744:	607a      	str	r2, [r7, #4]
 8010746:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	009b      	lsls	r3, r3, #2
 8010750:	461a      	mov	r2, r3
 8010752:	21a5      	movs	r1, #165	; 0xa5
 8010754:	f002 fb0c 	bl	8012d70 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801075a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801075c:	6879      	ldr	r1, [r7, #4]
 801075e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010762:	440b      	add	r3, r1
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801076a:	69bb      	ldr	r3, [r7, #24]
 801076c:	f023 0307 	bic.w	r3, r3, #7
 8010770:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	f003 0307 	and.w	r3, r3, #7
 8010778:	2b00      	cmp	r3, #0
 801077a:	d009      	beq.n	8010790 <prvInitialiseNewTask+0x56>
 801077c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010780:	f383 8811 	msr	BASEPRI, r3
 8010784:	f3bf 8f6f 	isb	sy
 8010788:	f3bf 8f4f 	dsb	sy
 801078c:	617b      	str	r3, [r7, #20]
 801078e:	e7fe      	b.n	801078e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d01f      	beq.n	80107d6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010796:	2300      	movs	r3, #0
 8010798:	61fb      	str	r3, [r7, #28]
 801079a:	e012      	b.n	80107c2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801079c:	68ba      	ldr	r2, [r7, #8]
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	4413      	add	r3, r2
 80107a2:	7819      	ldrb	r1, [r3, #0]
 80107a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	4413      	add	r3, r2
 80107aa:	3334      	adds	r3, #52	; 0x34
 80107ac:	460a      	mov	r2, r1
 80107ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80107b0:	68ba      	ldr	r2, [r7, #8]
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	4413      	add	r3, r2
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d006      	beq.n	80107ca <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	3301      	adds	r3, #1
 80107c0:	61fb      	str	r3, [r7, #28]
 80107c2:	69fb      	ldr	r3, [r7, #28]
 80107c4:	2b0f      	cmp	r3, #15
 80107c6:	d9e9      	bls.n	801079c <prvInitialiseNewTask+0x62>
 80107c8:	e000      	b.n	80107cc <prvInitialiseNewTask+0x92>
			{
				break;
 80107ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80107d4:	e003      	b.n	80107de <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80107d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d8:	2200      	movs	r2, #0
 80107da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80107de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107e0:	2b37      	cmp	r3, #55	; 0x37
 80107e2:	d901      	bls.n	80107e8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80107e4:	2337      	movs	r3, #55	; 0x37
 80107e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80107ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80107f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f6:	2200      	movs	r2, #0
 80107f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80107fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fc:	3304      	adds	r3, #4
 80107fe:	4618      	mov	r0, r3
 8010800:	f7ff f994 	bl	800fb2c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010806:	3318      	adds	r3, #24
 8010808:	4618      	mov	r0, r3
 801080a:	f7ff f98f 	bl	800fb2c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010812:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010816:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801081a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801081c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010822:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	2200      	movs	r2, #0
 8010828:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801082a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	68f9      	ldr	r1, [r7, #12]
 8010836:	69b8      	ldr	r0, [r7, #24]
 8010838:	f001 f90c 	bl	8011a54 <pxPortInitialiseStack>
 801083c:	4602      	mov	r2, r0
 801083e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010840:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010844:	2b00      	cmp	r3, #0
 8010846:	d002      	beq.n	801084e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801084a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801084c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801084e:	bf00      	nop
 8010850:	3720      	adds	r7, #32
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}
	...

08010858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010860:	f001 fa1c 	bl	8011c9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010864:	4b2d      	ldr	r3, [pc, #180]	; (801091c <prvAddNewTaskToReadyList+0xc4>)
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	3301      	adds	r3, #1
 801086a:	4a2c      	ldr	r2, [pc, #176]	; (801091c <prvAddNewTaskToReadyList+0xc4>)
 801086c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801086e:	4b2c      	ldr	r3, [pc, #176]	; (8010920 <prvAddNewTaskToReadyList+0xc8>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d109      	bne.n	801088a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010876:	4a2a      	ldr	r2, [pc, #168]	; (8010920 <prvAddNewTaskToReadyList+0xc8>)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801087c:	4b27      	ldr	r3, [pc, #156]	; (801091c <prvAddNewTaskToReadyList+0xc4>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d110      	bne.n	80108a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010884:	f000 fc08 	bl	8011098 <prvInitialiseTaskLists>
 8010888:	e00d      	b.n	80108a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801088a:	4b26      	ldr	r3, [pc, #152]	; (8010924 <prvAddNewTaskToReadyList+0xcc>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d109      	bne.n	80108a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010892:	4b23      	ldr	r3, [pc, #140]	; (8010920 <prvAddNewTaskToReadyList+0xc8>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089c:	429a      	cmp	r2, r3
 801089e:	d802      	bhi.n	80108a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80108a0:	4a1f      	ldr	r2, [pc, #124]	; (8010920 <prvAddNewTaskToReadyList+0xc8>)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80108a6:	4b20      	ldr	r3, [pc, #128]	; (8010928 <prvAddNewTaskToReadyList+0xd0>)
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	3301      	adds	r3, #1
 80108ac:	4a1e      	ldr	r2, [pc, #120]	; (8010928 <prvAddNewTaskToReadyList+0xd0>)
 80108ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80108b0:	4b1d      	ldr	r3, [pc, #116]	; (8010928 <prvAddNewTaskToReadyList+0xd0>)
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108bc:	4b1b      	ldr	r3, [pc, #108]	; (801092c <prvAddNewTaskToReadyList+0xd4>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d903      	bls.n	80108cc <prvAddNewTaskToReadyList+0x74>
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c8:	4a18      	ldr	r2, [pc, #96]	; (801092c <prvAddNewTaskToReadyList+0xd4>)
 80108ca:	6013      	str	r3, [r2, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108d0:	4613      	mov	r3, r2
 80108d2:	009b      	lsls	r3, r3, #2
 80108d4:	4413      	add	r3, r2
 80108d6:	009b      	lsls	r3, r3, #2
 80108d8:	4a15      	ldr	r2, [pc, #84]	; (8010930 <prvAddNewTaskToReadyList+0xd8>)
 80108da:	441a      	add	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	3304      	adds	r3, #4
 80108e0:	4619      	mov	r1, r3
 80108e2:	4610      	mov	r0, r2
 80108e4:	f7ff f92f 	bl	800fb46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80108e8:	f001 fa06 	bl	8011cf8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80108ec:	4b0d      	ldr	r3, [pc, #52]	; (8010924 <prvAddNewTaskToReadyList+0xcc>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00e      	beq.n	8010912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80108f4:	4b0a      	ldr	r3, [pc, #40]	; (8010920 <prvAddNewTaskToReadyList+0xc8>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108fe:	429a      	cmp	r2, r3
 8010900:	d207      	bcs.n	8010912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010902:	4b0c      	ldr	r3, [pc, #48]	; (8010934 <prvAddNewTaskToReadyList+0xdc>)
 8010904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010908:	601a      	str	r2, [r3, #0]
 801090a:	f3bf 8f4f 	dsb	sy
 801090e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010912:	bf00      	nop
 8010914:	3708      	adds	r7, #8
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	24000fe0 	.word	0x24000fe0
 8010920:	24000b0c 	.word	0x24000b0c
 8010924:	24000fec 	.word	0x24000fec
 8010928:	24000ffc 	.word	0x24000ffc
 801092c:	24000fe8 	.word	0x24000fe8
 8010930:	24000b10 	.word	0x24000b10
 8010934:	e000ed04 	.word	0xe000ed04

08010938 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010938:	b580      	push	{r7, lr}
 801093a:	b084      	sub	sp, #16
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010940:	2300      	movs	r3, #0
 8010942:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2b00      	cmp	r3, #0
 8010948:	d016      	beq.n	8010978 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801094a:	4b13      	ldr	r3, [pc, #76]	; (8010998 <vTaskDelay+0x60>)
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d009      	beq.n	8010966 <vTaskDelay+0x2e>
 8010952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010956:	f383 8811 	msr	BASEPRI, r3
 801095a:	f3bf 8f6f 	isb	sy
 801095e:	f3bf 8f4f 	dsb	sy
 8010962:	60bb      	str	r3, [r7, #8]
 8010964:	e7fe      	b.n	8010964 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8010966:	f000 f87f 	bl	8010a68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801096a:	2100      	movs	r1, #0
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 fcd7 	bl	8011320 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010972:	f000 f887 	bl	8010a84 <xTaskResumeAll>
 8010976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d107      	bne.n	801098e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801097e:	4b07      	ldr	r3, [pc, #28]	; (801099c <vTaskDelay+0x64>)
 8010980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801098e:	bf00      	nop
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	24001008 	.word	0x24001008
 801099c:	e000ed04 	.word	0xe000ed04

080109a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08a      	sub	sp, #40	; 0x28
 80109a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80109a6:	2300      	movs	r3, #0
 80109a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80109aa:	2300      	movs	r3, #0
 80109ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80109ae:	463a      	mov	r2, r7
 80109b0:	1d39      	adds	r1, r7, #4
 80109b2:	f107 0308 	add.w	r3, r7, #8
 80109b6:	4618      	mov	r0, r3
 80109b8:	f7ff f864 	bl	800fa84 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80109bc:	6839      	ldr	r1, [r7, #0]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	9202      	str	r2, [sp, #8]
 80109c4:	9301      	str	r3, [sp, #4]
 80109c6:	2300      	movs	r3, #0
 80109c8:	9300      	str	r3, [sp, #0]
 80109ca:	2300      	movs	r3, #0
 80109cc:	460a      	mov	r2, r1
 80109ce:	4920      	ldr	r1, [pc, #128]	; (8010a50 <vTaskStartScheduler+0xb0>)
 80109d0:	4820      	ldr	r0, [pc, #128]	; (8010a54 <vTaskStartScheduler+0xb4>)
 80109d2:	f7ff fe13 	bl	80105fc <xTaskCreateStatic>
 80109d6:	4602      	mov	r2, r0
 80109d8:	4b1f      	ldr	r3, [pc, #124]	; (8010a58 <vTaskStartScheduler+0xb8>)
 80109da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80109dc:	4b1e      	ldr	r3, [pc, #120]	; (8010a58 <vTaskStartScheduler+0xb8>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d002      	beq.n	80109ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80109e4:	2301      	movs	r3, #1
 80109e6:	617b      	str	r3, [r7, #20]
 80109e8:	e001      	b.n	80109ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80109ea:	2300      	movs	r3, #0
 80109ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	2b01      	cmp	r3, #1
 80109f2:	d102      	bne.n	80109fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80109f4:	f000 fce8 	bl	80113c8 <xTimerCreateTimerTask>
 80109f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	2b01      	cmp	r3, #1
 80109fe:	d115      	bne.n	8010a2c <vTaskStartScheduler+0x8c>
 8010a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a04:	f383 8811 	msr	BASEPRI, r3
 8010a08:	f3bf 8f6f 	isb	sy
 8010a0c:	f3bf 8f4f 	dsb	sy
 8010a10:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010a12:	4b12      	ldr	r3, [pc, #72]	; (8010a5c <vTaskStartScheduler+0xbc>)
 8010a14:	f04f 32ff 	mov.w	r2, #4294967295
 8010a18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010a1a:	4b11      	ldr	r3, [pc, #68]	; (8010a60 <vTaskStartScheduler+0xc0>)
 8010a1c:	2201      	movs	r2, #1
 8010a1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010a20:	4b10      	ldr	r3, [pc, #64]	; (8010a64 <vTaskStartScheduler+0xc4>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010a26:	f001 f89b 	bl	8011b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010a2a:	e00d      	b.n	8010a48 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010a2c:	697b      	ldr	r3, [r7, #20]
 8010a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a32:	d109      	bne.n	8010a48 <vTaskStartScheduler+0xa8>
 8010a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	60fb      	str	r3, [r7, #12]
 8010a46:	e7fe      	b.n	8010a46 <vTaskStartScheduler+0xa6>
}
 8010a48:	bf00      	nop
 8010a4a:	3718      	adds	r7, #24
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	08013194 	.word	0x08013194
 8010a54:	08011069 	.word	0x08011069
 8010a58:	24001004 	.word	0x24001004
 8010a5c:	24001000 	.word	0x24001000
 8010a60:	24000fec 	.word	0x24000fec
 8010a64:	24000fe4 	.word	0x24000fe4

08010a68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010a68:	b480      	push	{r7}
 8010a6a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010a6c:	4b04      	ldr	r3, [pc, #16]	; (8010a80 <vTaskSuspendAll+0x18>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	3301      	adds	r3, #1
 8010a72:	4a03      	ldr	r2, [pc, #12]	; (8010a80 <vTaskSuspendAll+0x18>)
 8010a74:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010a76:	bf00      	nop
 8010a78:	46bd      	mov	sp, r7
 8010a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7e:	4770      	bx	lr
 8010a80:	24001008 	.word	0x24001008

08010a84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010a92:	4b41      	ldr	r3, [pc, #260]	; (8010b98 <xTaskResumeAll+0x114>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d109      	bne.n	8010aae <xTaskResumeAll+0x2a>
 8010a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9e:	f383 8811 	msr	BASEPRI, r3
 8010aa2:	f3bf 8f6f 	isb	sy
 8010aa6:	f3bf 8f4f 	dsb	sy
 8010aaa:	603b      	str	r3, [r7, #0]
 8010aac:	e7fe      	b.n	8010aac <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010aae:	f001 f8f5 	bl	8011c9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010ab2:	4b39      	ldr	r3, [pc, #228]	; (8010b98 <xTaskResumeAll+0x114>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	4a37      	ldr	r2, [pc, #220]	; (8010b98 <xTaskResumeAll+0x114>)
 8010aba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010abc:	4b36      	ldr	r3, [pc, #216]	; (8010b98 <xTaskResumeAll+0x114>)
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d162      	bne.n	8010b8a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010ac4:	4b35      	ldr	r3, [pc, #212]	; (8010b9c <xTaskResumeAll+0x118>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d05e      	beq.n	8010b8a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010acc:	e02f      	b.n	8010b2e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ace:	4b34      	ldr	r3, [pc, #208]	; (8010ba0 <xTaskResumeAll+0x11c>)
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	3318      	adds	r3, #24
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff f890 	bl	800fc00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	3304      	adds	r3, #4
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff f88b 	bl	800fc00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010aee:	4b2d      	ldr	r3, [pc, #180]	; (8010ba4 <xTaskResumeAll+0x120>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d903      	bls.n	8010afe <xTaskResumeAll+0x7a>
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010afa:	4a2a      	ldr	r2, [pc, #168]	; (8010ba4 <xTaskResumeAll+0x120>)
 8010afc:	6013      	str	r3, [r2, #0]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b02:	4613      	mov	r3, r2
 8010b04:	009b      	lsls	r3, r3, #2
 8010b06:	4413      	add	r3, r2
 8010b08:	009b      	lsls	r3, r3, #2
 8010b0a:	4a27      	ldr	r2, [pc, #156]	; (8010ba8 <xTaskResumeAll+0x124>)
 8010b0c:	441a      	add	r2, r3
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	3304      	adds	r3, #4
 8010b12:	4619      	mov	r1, r3
 8010b14:	4610      	mov	r0, r2
 8010b16:	f7ff f816 	bl	800fb46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b1e:	4b23      	ldr	r3, [pc, #140]	; (8010bac <xTaskResumeAll+0x128>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d302      	bcc.n	8010b2e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010b28:	4b21      	ldr	r3, [pc, #132]	; (8010bb0 <xTaskResumeAll+0x12c>)
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010b2e:	4b1c      	ldr	r3, [pc, #112]	; (8010ba0 <xTaskResumeAll+0x11c>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d1cb      	bne.n	8010ace <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010b3c:	f000 fb46 	bl	80111cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010b40:	4b1c      	ldr	r3, [pc, #112]	; (8010bb4 <xTaskResumeAll+0x130>)
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d010      	beq.n	8010b6e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010b4c:	f000 f846 	bl	8010bdc <xTaskIncrementTick>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d002      	beq.n	8010b5c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010b56:	4b16      	ldr	r3, [pc, #88]	; (8010bb0 <xTaskResumeAll+0x12c>)
 8010b58:	2201      	movs	r2, #1
 8010b5a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1f1      	bne.n	8010b4c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8010b68:	4b12      	ldr	r3, [pc, #72]	; (8010bb4 <xTaskResumeAll+0x130>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010b6e:	4b10      	ldr	r3, [pc, #64]	; (8010bb0 <xTaskResumeAll+0x12c>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d009      	beq.n	8010b8a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010b76:	2301      	movs	r3, #1
 8010b78:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010b7a:	4b0f      	ldr	r3, [pc, #60]	; (8010bb8 <xTaskResumeAll+0x134>)
 8010b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	f3bf 8f4f 	dsb	sy
 8010b86:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010b8a:	f001 f8b5 	bl	8011cf8 <vPortExitCritical>

	return xAlreadyYielded;
 8010b8e:	68bb      	ldr	r3, [r7, #8]
}
 8010b90:	4618      	mov	r0, r3
 8010b92:	3710      	adds	r7, #16
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	24001008 	.word	0x24001008
 8010b9c:	24000fe0 	.word	0x24000fe0
 8010ba0:	24000fa0 	.word	0x24000fa0
 8010ba4:	24000fe8 	.word	0x24000fe8
 8010ba8:	24000b10 	.word	0x24000b10
 8010bac:	24000b0c 	.word	0x24000b0c
 8010bb0:	24000ff4 	.word	0x24000ff4
 8010bb4:	24000ff0 	.word	0x24000ff0
 8010bb8:	e000ed04 	.word	0xe000ed04

08010bbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010bc2:	4b05      	ldr	r3, [pc, #20]	; (8010bd8 <xTaskGetTickCount+0x1c>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010bc8:	687b      	ldr	r3, [r7, #4]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	370c      	adds	r7, #12
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	24000fe4 	.word	0x24000fe4

08010bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010be2:	2300      	movs	r3, #0
 8010be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010be6:	4b4e      	ldr	r3, [pc, #312]	; (8010d20 <xTaskIncrementTick+0x144>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	f040 8088 	bne.w	8010d00 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010bf0:	4b4c      	ldr	r3, [pc, #304]	; (8010d24 <xTaskIncrementTick+0x148>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	3301      	adds	r3, #1
 8010bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010bf8:	4a4a      	ldr	r2, [pc, #296]	; (8010d24 <xTaskIncrementTick+0x148>)
 8010bfa:	693b      	ldr	r3, [r7, #16]
 8010bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d11f      	bne.n	8010c44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8010c04:	4b48      	ldr	r3, [pc, #288]	; (8010d28 <xTaskIncrementTick+0x14c>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d009      	beq.n	8010c22 <xTaskIncrementTick+0x46>
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	f383 8811 	msr	BASEPRI, r3
 8010c16:	f3bf 8f6f 	isb	sy
 8010c1a:	f3bf 8f4f 	dsb	sy
 8010c1e:	603b      	str	r3, [r7, #0]
 8010c20:	e7fe      	b.n	8010c20 <xTaskIncrementTick+0x44>
 8010c22:	4b41      	ldr	r3, [pc, #260]	; (8010d28 <xTaskIncrementTick+0x14c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	60fb      	str	r3, [r7, #12]
 8010c28:	4b40      	ldr	r3, [pc, #256]	; (8010d2c <xTaskIncrementTick+0x150>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	4a3e      	ldr	r2, [pc, #248]	; (8010d28 <xTaskIncrementTick+0x14c>)
 8010c2e:	6013      	str	r3, [r2, #0]
 8010c30:	4a3e      	ldr	r2, [pc, #248]	; (8010d2c <xTaskIncrementTick+0x150>)
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	6013      	str	r3, [r2, #0]
 8010c36:	4b3e      	ldr	r3, [pc, #248]	; (8010d30 <xTaskIncrementTick+0x154>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	4a3c      	ldr	r2, [pc, #240]	; (8010d30 <xTaskIncrementTick+0x154>)
 8010c3e:	6013      	str	r3, [r2, #0]
 8010c40:	f000 fac4 	bl	80111cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010c44:	4b3b      	ldr	r3, [pc, #236]	; (8010d34 <xTaskIncrementTick+0x158>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	693a      	ldr	r2, [r7, #16]
 8010c4a:	429a      	cmp	r2, r3
 8010c4c:	d349      	bcc.n	8010ce2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c4e:	4b36      	ldr	r3, [pc, #216]	; (8010d28 <xTaskIncrementTick+0x14c>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d104      	bne.n	8010c62 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c58:	4b36      	ldr	r3, [pc, #216]	; (8010d34 <xTaskIncrementTick+0x158>)
 8010c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8010c5e:	601a      	str	r2, [r3, #0]
					break;
 8010c60:	e03f      	b.n	8010ce2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c62:	4b31      	ldr	r3, [pc, #196]	; (8010d28 <xTaskIncrementTick+0x14c>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	68db      	ldr	r3, [r3, #12]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010c6c:	68bb      	ldr	r3, [r7, #8]
 8010c6e:	685b      	ldr	r3, [r3, #4]
 8010c70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010c72:	693a      	ldr	r2, [r7, #16]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d203      	bcs.n	8010c82 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010c7a:	4a2e      	ldr	r2, [pc, #184]	; (8010d34 <xTaskIncrementTick+0x158>)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010c80:	e02f      	b.n	8010ce2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	3304      	adds	r3, #4
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fe ffba 	bl	800fc00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d004      	beq.n	8010c9e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3318      	adds	r3, #24
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7fe ffb1 	bl	800fc00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ca2:	4b25      	ldr	r3, [pc, #148]	; (8010d38 <xTaskIncrementTick+0x15c>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	429a      	cmp	r2, r3
 8010ca8:	d903      	bls.n	8010cb2 <xTaskIncrementTick+0xd6>
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cae:	4a22      	ldr	r2, [pc, #136]	; (8010d38 <xTaskIncrementTick+0x15c>)
 8010cb0:	6013      	str	r3, [r2, #0]
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	009b      	lsls	r3, r3, #2
 8010cba:	4413      	add	r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4a1f      	ldr	r2, [pc, #124]	; (8010d3c <xTaskIncrementTick+0x160>)
 8010cc0:	441a      	add	r2, r3
 8010cc2:	68bb      	ldr	r3, [r7, #8]
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	4610      	mov	r0, r2
 8010cca:	f7fe ff3c 	bl	800fb46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cd2:	4b1b      	ldr	r3, [pc, #108]	; (8010d40 <xTaskIncrementTick+0x164>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d3b8      	bcc.n	8010c4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8010cdc:	2301      	movs	r3, #1
 8010cde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010ce0:	e7b5      	b.n	8010c4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010ce2:	4b17      	ldr	r3, [pc, #92]	; (8010d40 <xTaskIncrementTick+0x164>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce8:	4914      	ldr	r1, [pc, #80]	; (8010d3c <xTaskIncrementTick+0x160>)
 8010cea:	4613      	mov	r3, r2
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	009b      	lsls	r3, r3, #2
 8010cf2:	440b      	add	r3, r1
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d907      	bls.n	8010d0a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e004      	b.n	8010d0a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010d00:	4b10      	ldr	r3, [pc, #64]	; (8010d44 <xTaskIncrementTick+0x168>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	3301      	adds	r3, #1
 8010d06:	4a0f      	ldr	r2, [pc, #60]	; (8010d44 <xTaskIncrementTick+0x168>)
 8010d08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	; (8010d48 <xTaskIncrementTick+0x16c>)
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8010d12:	2301      	movs	r3, #1
 8010d14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010d16:	697b      	ldr	r3, [r7, #20]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3718      	adds	r7, #24
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	24001008 	.word	0x24001008
 8010d24:	24000fe4 	.word	0x24000fe4
 8010d28:	24000f98 	.word	0x24000f98
 8010d2c:	24000f9c 	.word	0x24000f9c
 8010d30:	24000ff8 	.word	0x24000ff8
 8010d34:	24001000 	.word	0x24001000
 8010d38:	24000fe8 	.word	0x24000fe8
 8010d3c:	24000b10 	.word	0x24000b10
 8010d40:	24000b0c 	.word	0x24000b0c
 8010d44:	24000ff0 	.word	0x24000ff0
 8010d48:	24000ff4 	.word	0x24000ff4

08010d4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010d52:	4b27      	ldr	r3, [pc, #156]	; (8010df0 <vTaskSwitchContext+0xa4>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d003      	beq.n	8010d62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010d5a:	4b26      	ldr	r3, [pc, #152]	; (8010df4 <vTaskSwitchContext+0xa8>)
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010d60:	e040      	b.n	8010de4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8010d62:	4b24      	ldr	r3, [pc, #144]	; (8010df4 <vTaskSwitchContext+0xa8>)
 8010d64:	2200      	movs	r2, #0
 8010d66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d68:	4b23      	ldr	r3, [pc, #140]	; (8010df8 <vTaskSwitchContext+0xac>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	60fb      	str	r3, [r7, #12]
 8010d6e:	e00f      	b.n	8010d90 <vTaskSwitchContext+0x44>
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d109      	bne.n	8010d8a <vTaskSwitchContext+0x3e>
 8010d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7a:	f383 8811 	msr	BASEPRI, r3
 8010d7e:	f3bf 8f6f 	isb	sy
 8010d82:	f3bf 8f4f 	dsb	sy
 8010d86:	607b      	str	r3, [r7, #4]
 8010d88:	e7fe      	b.n	8010d88 <vTaskSwitchContext+0x3c>
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	3b01      	subs	r3, #1
 8010d8e:	60fb      	str	r3, [r7, #12]
 8010d90:	491a      	ldr	r1, [pc, #104]	; (8010dfc <vTaskSwitchContext+0xb0>)
 8010d92:	68fa      	ldr	r2, [r7, #12]
 8010d94:	4613      	mov	r3, r2
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4413      	add	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	440b      	add	r3, r1
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d0e5      	beq.n	8010d70 <vTaskSwitchContext+0x24>
 8010da4:	68fa      	ldr	r2, [r7, #12]
 8010da6:	4613      	mov	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	4a13      	ldr	r2, [pc, #76]	; (8010dfc <vTaskSwitchContext+0xb0>)
 8010db0:	4413      	add	r3, r2
 8010db2:	60bb      	str	r3, [r7, #8]
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	685a      	ldr	r2, [r3, #4]
 8010dba:	68bb      	ldr	r3, [r7, #8]
 8010dbc:	605a      	str	r2, [r3, #4]
 8010dbe:	68bb      	ldr	r3, [r7, #8]
 8010dc0:	685a      	ldr	r2, [r3, #4]
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	3308      	adds	r3, #8
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d104      	bne.n	8010dd4 <vTaskSwitchContext+0x88>
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	685a      	ldr	r2, [r3, #4]
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	605a      	str	r2, [r3, #4]
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	68db      	ldr	r3, [r3, #12]
 8010dda:	4a09      	ldr	r2, [pc, #36]	; (8010e00 <vTaskSwitchContext+0xb4>)
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	4a06      	ldr	r2, [pc, #24]	; (8010df8 <vTaskSwitchContext+0xac>)
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	6013      	str	r3, [r2, #0]
}
 8010de4:	bf00      	nop
 8010de6:	3714      	adds	r7, #20
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr
 8010df0:	24001008 	.word	0x24001008
 8010df4:	24000ff4 	.word	0x24000ff4
 8010df8:	24000fe8 	.word	0x24000fe8
 8010dfc:	24000b10 	.word	0x24000b10
 8010e00:	24000b0c 	.word	0x24000b0c

08010e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b084      	sub	sp, #16
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d109      	bne.n	8010e28 <vTaskPlaceOnEventList+0x24>
 8010e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e18:	f383 8811 	msr	BASEPRI, r3
 8010e1c:	f3bf 8f6f 	isb	sy
 8010e20:	f3bf 8f4f 	dsb	sy
 8010e24:	60fb      	str	r3, [r7, #12]
 8010e26:	e7fe      	b.n	8010e26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e28:	4b07      	ldr	r3, [pc, #28]	; (8010e48 <vTaskPlaceOnEventList+0x44>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	3318      	adds	r3, #24
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f7fe feac 	bl	800fb8e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010e36:	2101      	movs	r1, #1
 8010e38:	6838      	ldr	r0, [r7, #0]
 8010e3a:	f000 fa71 	bl	8011320 <prvAddCurrentTaskToDelayedList>
}
 8010e3e:	bf00      	nop
 8010e40:	3710      	adds	r7, #16
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
 8010e46:	bf00      	nop
 8010e48:	24000b0c 	.word	0x24000b0c

08010e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d109      	bne.n	8010e72 <vTaskPlaceOnEventListRestricted+0x26>
 8010e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e62:	f383 8811 	msr	BASEPRI, r3
 8010e66:	f3bf 8f6f 	isb	sy
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	617b      	str	r3, [r7, #20]
 8010e70:	e7fe      	b.n	8010e70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010e72:	4b0a      	ldr	r3, [pc, #40]	; (8010e9c <vTaskPlaceOnEventListRestricted+0x50>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	3318      	adds	r3, #24
 8010e78:	4619      	mov	r1, r3
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f7fe fe63 	bl	800fb46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d002      	beq.n	8010e8c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8010e86:	f04f 33ff 	mov.w	r3, #4294967295
 8010e8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8010e8c:	6879      	ldr	r1, [r7, #4]
 8010e8e:	68b8      	ldr	r0, [r7, #8]
 8010e90:	f000 fa46 	bl	8011320 <prvAddCurrentTaskToDelayedList>
	}
 8010e94:	bf00      	nop
 8010e96:	3718      	adds	r7, #24
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	24000b0c 	.word	0x24000b0c

08010ea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d109      	bne.n	8010eca <xTaskRemoveFromEventList+0x2a>
 8010eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	60fb      	str	r3, [r7, #12]
 8010ec8:	e7fe      	b.n	8010ec8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	3318      	adds	r3, #24
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe fe96 	bl	800fc00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010ed4:	4b1d      	ldr	r3, [pc, #116]	; (8010f4c <xTaskRemoveFromEventList+0xac>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d11d      	bne.n	8010f18 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	3304      	adds	r3, #4
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fe8d 	bl	800fc00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eea:	4b19      	ldr	r3, [pc, #100]	; (8010f50 <xTaskRemoveFromEventList+0xb0>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d903      	bls.n	8010efa <xTaskRemoveFromEventList+0x5a>
 8010ef2:	693b      	ldr	r3, [r7, #16]
 8010ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef6:	4a16      	ldr	r2, [pc, #88]	; (8010f50 <xTaskRemoveFromEventList+0xb0>)
 8010ef8:	6013      	str	r3, [r2, #0]
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010efe:	4613      	mov	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	009b      	lsls	r3, r3, #2
 8010f06:	4a13      	ldr	r2, [pc, #76]	; (8010f54 <xTaskRemoveFromEventList+0xb4>)
 8010f08:	441a      	add	r2, r3
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	3304      	adds	r3, #4
 8010f0e:	4619      	mov	r1, r3
 8010f10:	4610      	mov	r0, r2
 8010f12:	f7fe fe18 	bl	800fb46 <vListInsertEnd>
 8010f16:	e005      	b.n	8010f24 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	3318      	adds	r3, #24
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	480e      	ldr	r0, [pc, #56]	; (8010f58 <xTaskRemoveFromEventList+0xb8>)
 8010f20:	f7fe fe11 	bl	800fb46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f28:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <xTaskRemoveFromEventList+0xbc>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d905      	bls.n	8010f3e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010f32:	2301      	movs	r3, #1
 8010f34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010f36:	4b0a      	ldr	r3, [pc, #40]	; (8010f60 <xTaskRemoveFromEventList+0xc0>)
 8010f38:	2201      	movs	r2, #1
 8010f3a:	601a      	str	r2, [r3, #0]
 8010f3c:	e001      	b.n	8010f42 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010f42:	697b      	ldr	r3, [r7, #20]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	24001008 	.word	0x24001008
 8010f50:	24000fe8 	.word	0x24000fe8
 8010f54:	24000b10 	.word	0x24000b10
 8010f58:	24000fa0 	.word	0x24000fa0
 8010f5c:	24000b0c 	.word	0x24000b0c
 8010f60:	24000ff4 	.word	0x24000ff4

08010f64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010f6c:	4b06      	ldr	r3, [pc, #24]	; (8010f88 <vTaskInternalSetTimeOutState+0x24>)
 8010f6e:	681a      	ldr	r2, [r3, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010f74:	4b05      	ldr	r3, [pc, #20]	; (8010f8c <vTaskInternalSetTimeOutState+0x28>)
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	605a      	str	r2, [r3, #4]
}
 8010f7c:	bf00      	nop
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	24000ff8 	.word	0x24000ff8
 8010f8c:	24000fe4 	.word	0x24000fe4

08010f90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b088      	sub	sp, #32
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d109      	bne.n	8010fb4 <xTaskCheckForTimeOut+0x24>
 8010fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa4:	f383 8811 	msr	BASEPRI, r3
 8010fa8:	f3bf 8f6f 	isb	sy
 8010fac:	f3bf 8f4f 	dsb	sy
 8010fb0:	613b      	str	r3, [r7, #16]
 8010fb2:	e7fe      	b.n	8010fb2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d109      	bne.n	8010fce <xTaskCheckForTimeOut+0x3e>
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	60fb      	str	r3, [r7, #12]
 8010fcc:	e7fe      	b.n	8010fcc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8010fce:	f000 fe65 	bl	8011c9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010fd2:	4b1d      	ldr	r3, [pc, #116]	; (8011048 <xTaskCheckForTimeOut+0xb8>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	69ba      	ldr	r2, [r7, #24]
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fea:	d102      	bne.n	8010ff2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010fec:	2300      	movs	r3, #0
 8010fee:	61fb      	str	r3, [r7, #28]
 8010ff0:	e023      	b.n	801103a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681a      	ldr	r2, [r3, #0]
 8010ff6:	4b15      	ldr	r3, [pc, #84]	; (801104c <xTaskCheckForTimeOut+0xbc>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d007      	beq.n	801100e <xTaskCheckForTimeOut+0x7e>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685b      	ldr	r3, [r3, #4]
 8011002:	69ba      	ldr	r2, [r7, #24]
 8011004:	429a      	cmp	r2, r3
 8011006:	d302      	bcc.n	801100e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011008:	2301      	movs	r3, #1
 801100a:	61fb      	str	r3, [r7, #28]
 801100c:	e015      	b.n	801103a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	697a      	ldr	r2, [r7, #20]
 8011014:	429a      	cmp	r2, r3
 8011016:	d20b      	bcs.n	8011030 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	681a      	ldr	r2, [r3, #0]
 801101c:	697b      	ldr	r3, [r7, #20]
 801101e:	1ad2      	subs	r2, r2, r3
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f7ff ff9d 	bl	8010f64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801102a:	2300      	movs	r3, #0
 801102c:	61fb      	str	r3, [r7, #28]
 801102e:	e004      	b.n	801103a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	2200      	movs	r2, #0
 8011034:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011036:	2301      	movs	r3, #1
 8011038:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801103a:	f000 fe5d 	bl	8011cf8 <vPortExitCritical>

	return xReturn;
 801103e:	69fb      	ldr	r3, [r7, #28]
}
 8011040:	4618      	mov	r0, r3
 8011042:	3720      	adds	r7, #32
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	24000fe4 	.word	0x24000fe4
 801104c:	24000ff8 	.word	0x24000ff8

08011050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011050:	b480      	push	{r7}
 8011052:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011054:	4b03      	ldr	r3, [pc, #12]	; (8011064 <vTaskMissedYield+0x14>)
 8011056:	2201      	movs	r2, #1
 8011058:	601a      	str	r2, [r3, #0]
}
 801105a:	bf00      	nop
 801105c:	46bd      	mov	sp, r7
 801105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011062:	4770      	bx	lr
 8011064:	24000ff4 	.word	0x24000ff4

08011068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011070:	f000 f852 	bl	8011118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011074:	4b06      	ldr	r3, [pc, #24]	; (8011090 <prvIdleTask+0x28>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d9f9      	bls.n	8011070 <prvIdleTask+0x8>
			{
				taskYIELD();
 801107c:	4b05      	ldr	r3, [pc, #20]	; (8011094 <prvIdleTask+0x2c>)
 801107e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011082:	601a      	str	r2, [r3, #0]
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801108c:	e7f0      	b.n	8011070 <prvIdleTask+0x8>
 801108e:	bf00      	nop
 8011090:	24000b10 	.word	0x24000b10
 8011094:	e000ed04 	.word	0xe000ed04

08011098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b082      	sub	sp, #8
 801109c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801109e:	2300      	movs	r3, #0
 80110a0:	607b      	str	r3, [r7, #4]
 80110a2:	e00c      	b.n	80110be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	4613      	mov	r3, r2
 80110a8:	009b      	lsls	r3, r3, #2
 80110aa:	4413      	add	r3, r2
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	4a12      	ldr	r2, [pc, #72]	; (80110f8 <prvInitialiseTaskLists+0x60>)
 80110b0:	4413      	add	r3, r2
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe fd1a 	bl	800faec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	3301      	adds	r3, #1
 80110bc:	607b      	str	r3, [r7, #4]
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b37      	cmp	r3, #55	; 0x37
 80110c2:	d9ef      	bls.n	80110a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80110c4:	480d      	ldr	r0, [pc, #52]	; (80110fc <prvInitialiseTaskLists+0x64>)
 80110c6:	f7fe fd11 	bl	800faec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80110ca:	480d      	ldr	r0, [pc, #52]	; (8011100 <prvInitialiseTaskLists+0x68>)
 80110cc:	f7fe fd0e 	bl	800faec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80110d0:	480c      	ldr	r0, [pc, #48]	; (8011104 <prvInitialiseTaskLists+0x6c>)
 80110d2:	f7fe fd0b 	bl	800faec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80110d6:	480c      	ldr	r0, [pc, #48]	; (8011108 <prvInitialiseTaskLists+0x70>)
 80110d8:	f7fe fd08 	bl	800faec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80110dc:	480b      	ldr	r0, [pc, #44]	; (801110c <prvInitialiseTaskLists+0x74>)
 80110de:	f7fe fd05 	bl	800faec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80110e2:	4b0b      	ldr	r3, [pc, #44]	; (8011110 <prvInitialiseTaskLists+0x78>)
 80110e4:	4a05      	ldr	r2, [pc, #20]	; (80110fc <prvInitialiseTaskLists+0x64>)
 80110e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80110e8:	4b0a      	ldr	r3, [pc, #40]	; (8011114 <prvInitialiseTaskLists+0x7c>)
 80110ea:	4a05      	ldr	r2, [pc, #20]	; (8011100 <prvInitialiseTaskLists+0x68>)
 80110ec:	601a      	str	r2, [r3, #0]
}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	24000b10 	.word	0x24000b10
 80110fc:	24000f70 	.word	0x24000f70
 8011100:	24000f84 	.word	0x24000f84
 8011104:	24000fa0 	.word	0x24000fa0
 8011108:	24000fb4 	.word	0x24000fb4
 801110c:	24000fcc 	.word	0x24000fcc
 8011110:	24000f98 	.word	0x24000f98
 8011114:	24000f9c 	.word	0x24000f9c

08011118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801111e:	e019      	b.n	8011154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011120:	f000 fdbc 	bl	8011c9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011124:	4b0f      	ldr	r3, [pc, #60]	; (8011164 <prvCheckTasksWaitingTermination+0x4c>)
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	68db      	ldr	r3, [r3, #12]
 801112a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	3304      	adds	r3, #4
 8011130:	4618      	mov	r0, r3
 8011132:	f7fe fd65 	bl	800fc00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011136:	4b0c      	ldr	r3, [pc, #48]	; (8011168 <prvCheckTasksWaitingTermination+0x50>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	3b01      	subs	r3, #1
 801113c:	4a0a      	ldr	r2, [pc, #40]	; (8011168 <prvCheckTasksWaitingTermination+0x50>)
 801113e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011140:	4b0a      	ldr	r3, [pc, #40]	; (801116c <prvCheckTasksWaitingTermination+0x54>)
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	3b01      	subs	r3, #1
 8011146:	4a09      	ldr	r2, [pc, #36]	; (801116c <prvCheckTasksWaitingTermination+0x54>)
 8011148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801114a:	f000 fdd5 	bl	8011cf8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f000 f80e 	bl	8011170 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011154:	4b05      	ldr	r3, [pc, #20]	; (801116c <prvCheckTasksWaitingTermination+0x54>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d1e1      	bne.n	8011120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801115c:	bf00      	nop
 801115e:	3708      	adds	r7, #8
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	24000fb4 	.word	0x24000fb4
 8011168:	24000fe0 	.word	0x24000fe0
 801116c:	24000fc8 	.word	0x24000fc8

08011170 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011170:	b580      	push	{r7, lr}
 8011172:	b084      	sub	sp, #16
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801117e:	2b00      	cmp	r3, #0
 8011180:	d108      	bne.n	8011194 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011186:	4618      	mov	r0, r3
 8011188:	f000 ff64 	bl	8012054 <vPortFree>
				vPortFree( pxTCB );
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 ff61 	bl	8012054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011192:	e017      	b.n	80111c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801119a:	2b01      	cmp	r3, #1
 801119c:	d103      	bne.n	80111a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 ff58 	bl	8012054 <vPortFree>
	}
 80111a4:	e00e      	b.n	80111c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d009      	beq.n	80111c4 <prvDeleteTCB+0x54>
 80111b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b4:	f383 8811 	msr	BASEPRI, r3
 80111b8:	f3bf 8f6f 	isb	sy
 80111bc:	f3bf 8f4f 	dsb	sy
 80111c0:	60fb      	str	r3, [r7, #12]
 80111c2:	e7fe      	b.n	80111c2 <prvDeleteTCB+0x52>
	}
 80111c4:	bf00      	nop
 80111c6:	3710      	adds	r7, #16
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}

080111cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80111cc:	b480      	push	{r7}
 80111ce:	b083      	sub	sp, #12
 80111d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111d2:	4b0c      	ldr	r3, [pc, #48]	; (8011204 <prvResetNextTaskUnblockTime+0x38>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d104      	bne.n	80111e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80111dc:	4b0a      	ldr	r3, [pc, #40]	; (8011208 <prvResetNextTaskUnblockTime+0x3c>)
 80111de:	f04f 32ff 	mov.w	r2, #4294967295
 80111e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80111e4:	e008      	b.n	80111f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111e6:	4b07      	ldr	r3, [pc, #28]	; (8011204 <prvResetNextTaskUnblockTime+0x38>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	68db      	ldr	r3, [r3, #12]
 80111ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	4a04      	ldr	r2, [pc, #16]	; (8011208 <prvResetNextTaskUnblockTime+0x3c>)
 80111f6:	6013      	str	r3, [r2, #0]
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr
 8011204:	24000f98 	.word	0x24000f98
 8011208:	24001000 	.word	0x24001000

0801120c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011212:	4b0b      	ldr	r3, [pc, #44]	; (8011240 <xTaskGetSchedulerState+0x34>)
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d102      	bne.n	8011220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801121a:	2301      	movs	r3, #1
 801121c:	607b      	str	r3, [r7, #4]
 801121e:	e008      	b.n	8011232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011220:	4b08      	ldr	r3, [pc, #32]	; (8011244 <xTaskGetSchedulerState+0x38>)
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011228:	2302      	movs	r3, #2
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e001      	b.n	8011232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801122e:	2300      	movs	r3, #0
 8011230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011232:	687b      	ldr	r3, [r7, #4]
	}
 8011234:	4618      	mov	r0, r3
 8011236:	370c      	adds	r7, #12
 8011238:	46bd      	mov	sp, r7
 801123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123e:	4770      	bx	lr
 8011240:	24000fec 	.word	0x24000fec
 8011244:	24001008 	.word	0x24001008

08011248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011248:	b580      	push	{r7, lr}
 801124a:	b086      	sub	sp, #24
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011254:	2300      	movs	r3, #0
 8011256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d054      	beq.n	8011308 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801125e:	4b2d      	ldr	r3, [pc, #180]	; (8011314 <xTaskPriorityDisinherit+0xcc>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	693a      	ldr	r2, [r7, #16]
 8011264:	429a      	cmp	r2, r3
 8011266:	d009      	beq.n	801127c <xTaskPriorityDisinherit+0x34>
 8011268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801126c:	f383 8811 	msr	BASEPRI, r3
 8011270:	f3bf 8f6f 	isb	sy
 8011274:	f3bf 8f4f 	dsb	sy
 8011278:	60fb      	str	r3, [r7, #12]
 801127a:	e7fe      	b.n	801127a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011280:	2b00      	cmp	r3, #0
 8011282:	d109      	bne.n	8011298 <xTaskPriorityDisinherit+0x50>
 8011284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011288:	f383 8811 	msr	BASEPRI, r3
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	60bb      	str	r3, [r7, #8]
 8011296:	e7fe      	b.n	8011296 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8011298:	693b      	ldr	r3, [r7, #16]
 801129a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801129c:	1e5a      	subs	r2, r3, #1
 801129e:	693b      	ldr	r3, [r7, #16]
 80112a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112a6:	693b      	ldr	r3, [r7, #16]
 80112a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d02c      	beq.n	8011308 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d128      	bne.n	8011308 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80112b6:	693b      	ldr	r3, [r7, #16]
 80112b8:	3304      	adds	r3, #4
 80112ba:	4618      	mov	r0, r3
 80112bc:	f7fe fca0 	bl	800fc00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d8:	4b0f      	ldr	r3, [pc, #60]	; (8011318 <xTaskPriorityDisinherit+0xd0>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	429a      	cmp	r2, r3
 80112de:	d903      	bls.n	80112e8 <xTaskPriorityDisinherit+0xa0>
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112e4:	4a0c      	ldr	r2, [pc, #48]	; (8011318 <xTaskPriorityDisinherit+0xd0>)
 80112e6:	6013      	str	r3, [r2, #0]
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112ec:	4613      	mov	r3, r2
 80112ee:	009b      	lsls	r3, r3, #2
 80112f0:	4413      	add	r3, r2
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	4a09      	ldr	r2, [pc, #36]	; (801131c <xTaskPriorityDisinherit+0xd4>)
 80112f6:	441a      	add	r2, r3
 80112f8:	693b      	ldr	r3, [r7, #16]
 80112fa:	3304      	adds	r3, #4
 80112fc:	4619      	mov	r1, r3
 80112fe:	4610      	mov	r0, r2
 8011300:	f7fe fc21 	bl	800fb46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011304:	2301      	movs	r3, #1
 8011306:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011308:	697b      	ldr	r3, [r7, #20]
	}
 801130a:	4618      	mov	r0, r3
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	24000b0c 	.word	0x24000b0c
 8011318:	24000fe8 	.word	0x24000fe8
 801131c:	24000b10 	.word	0x24000b10

08011320 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b084      	sub	sp, #16
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
 8011328:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801132a:	4b21      	ldr	r3, [pc, #132]	; (80113b0 <prvAddCurrentTaskToDelayedList+0x90>)
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011330:	4b20      	ldr	r3, [pc, #128]	; (80113b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	3304      	adds	r3, #4
 8011336:	4618      	mov	r0, r3
 8011338:	f7fe fc62 	bl	800fc00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011342:	d10a      	bne.n	801135a <prvAddCurrentTaskToDelayedList+0x3a>
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d007      	beq.n	801135a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801134a:	4b1a      	ldr	r3, [pc, #104]	; (80113b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	3304      	adds	r3, #4
 8011350:	4619      	mov	r1, r3
 8011352:	4819      	ldr	r0, [pc, #100]	; (80113b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8011354:	f7fe fbf7 	bl	800fb46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011358:	e026      	b.n	80113a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801135a:	68fa      	ldr	r2, [r7, #12]
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4413      	add	r3, r2
 8011360:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011362:	4b14      	ldr	r3, [pc, #80]	; (80113b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	68ba      	ldr	r2, [r7, #8]
 8011368:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	429a      	cmp	r2, r3
 8011370:	d209      	bcs.n	8011386 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011372:	4b12      	ldr	r3, [pc, #72]	; (80113bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	4b0f      	ldr	r3, [pc, #60]	; (80113b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	3304      	adds	r3, #4
 801137c:	4619      	mov	r1, r3
 801137e:	4610      	mov	r0, r2
 8011380:	f7fe fc05 	bl	800fb8e <vListInsert>
}
 8011384:	e010      	b.n	80113a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011386:	4b0e      	ldr	r3, [pc, #56]	; (80113c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	4b0a      	ldr	r3, [pc, #40]	; (80113b4 <prvAddCurrentTaskToDelayedList+0x94>)
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	3304      	adds	r3, #4
 8011390:	4619      	mov	r1, r3
 8011392:	4610      	mov	r0, r2
 8011394:	f7fe fbfb 	bl	800fb8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	68ba      	ldr	r2, [r7, #8]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d202      	bcs.n	80113a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80113a2:	4a08      	ldr	r2, [pc, #32]	; (80113c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	6013      	str	r3, [r2, #0]
}
 80113a8:	bf00      	nop
 80113aa:	3710      	adds	r7, #16
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	24000fe4 	.word	0x24000fe4
 80113b4:	24000b0c 	.word	0x24000b0c
 80113b8:	24000fcc 	.word	0x24000fcc
 80113bc:	24000f9c 	.word	0x24000f9c
 80113c0:	24000f98 	.word	0x24000f98
 80113c4:	24001000 	.word	0x24001000

080113c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b08a      	sub	sp, #40	; 0x28
 80113cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80113ce:	2300      	movs	r3, #0
 80113d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80113d2:	f000 faff 	bl	80119d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80113d6:	4b1c      	ldr	r3, [pc, #112]	; (8011448 <xTimerCreateTimerTask+0x80>)
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d021      	beq.n	8011422 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80113de:	2300      	movs	r3, #0
 80113e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80113e2:	2300      	movs	r3, #0
 80113e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80113e6:	1d3a      	adds	r2, r7, #4
 80113e8:	f107 0108 	add.w	r1, r7, #8
 80113ec:	f107 030c 	add.w	r3, r7, #12
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fe fb61 	bl	800fab8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80113f6:	6879      	ldr	r1, [r7, #4]
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	9202      	str	r2, [sp, #8]
 80113fe:	9301      	str	r3, [sp, #4]
 8011400:	2302      	movs	r3, #2
 8011402:	9300      	str	r3, [sp, #0]
 8011404:	2300      	movs	r3, #0
 8011406:	460a      	mov	r2, r1
 8011408:	4910      	ldr	r1, [pc, #64]	; (801144c <xTimerCreateTimerTask+0x84>)
 801140a:	4811      	ldr	r0, [pc, #68]	; (8011450 <xTimerCreateTimerTask+0x88>)
 801140c:	f7ff f8f6 	bl	80105fc <xTaskCreateStatic>
 8011410:	4602      	mov	r2, r0
 8011412:	4b10      	ldr	r3, [pc, #64]	; (8011454 <xTimerCreateTimerTask+0x8c>)
 8011414:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011416:	4b0f      	ldr	r3, [pc, #60]	; (8011454 <xTimerCreateTimerTask+0x8c>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d001      	beq.n	8011422 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801141e:	2301      	movs	r3, #1
 8011420:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d109      	bne.n	801143c <xTimerCreateTimerTask+0x74>
 8011428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801142c:	f383 8811 	msr	BASEPRI, r3
 8011430:	f3bf 8f6f 	isb	sy
 8011434:	f3bf 8f4f 	dsb	sy
 8011438:	613b      	str	r3, [r7, #16]
 801143a:	e7fe      	b.n	801143a <xTimerCreateTimerTask+0x72>
	return xReturn;
 801143c:	697b      	ldr	r3, [r7, #20]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3718      	adds	r7, #24
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	2400103c 	.word	0x2400103c
 801144c:	0801319c 	.word	0x0801319c
 8011450:	08011589 	.word	0x08011589
 8011454:	24001040 	.word	0x24001040

08011458 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b08a      	sub	sp, #40	; 0x28
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
 8011464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011466:	2300      	movs	r3, #0
 8011468:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d109      	bne.n	8011484 <xTimerGenericCommand+0x2c>
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	623b      	str	r3, [r7, #32]
 8011482:	e7fe      	b.n	8011482 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011484:	4b19      	ldr	r3, [pc, #100]	; (80114ec <xTimerGenericCommand+0x94>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d02a      	beq.n	80114e2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	2b05      	cmp	r3, #5
 801149c:	dc18      	bgt.n	80114d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801149e:	f7ff feb5 	bl	801120c <xTaskGetSchedulerState>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b02      	cmp	r3, #2
 80114a6:	d109      	bne.n	80114bc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80114a8:	4b10      	ldr	r3, [pc, #64]	; (80114ec <xTimerGenericCommand+0x94>)
 80114aa:	6818      	ldr	r0, [r3, #0]
 80114ac:	f107 0110 	add.w	r1, r7, #16
 80114b0:	2300      	movs	r3, #0
 80114b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114b4:	f7fe fccc 	bl	800fe50 <xQueueGenericSend>
 80114b8:	6278      	str	r0, [r7, #36]	; 0x24
 80114ba:	e012      	b.n	80114e2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80114bc:	4b0b      	ldr	r3, [pc, #44]	; (80114ec <xTimerGenericCommand+0x94>)
 80114be:	6818      	ldr	r0, [r3, #0]
 80114c0:	f107 0110 	add.w	r1, r7, #16
 80114c4:	2300      	movs	r3, #0
 80114c6:	2200      	movs	r2, #0
 80114c8:	f7fe fcc2 	bl	800fe50 <xQueueGenericSend>
 80114cc:	6278      	str	r0, [r7, #36]	; 0x24
 80114ce:	e008      	b.n	80114e2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80114d0:	4b06      	ldr	r3, [pc, #24]	; (80114ec <xTimerGenericCommand+0x94>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	f107 0110 	add.w	r1, r7, #16
 80114d8:	2300      	movs	r3, #0
 80114da:	683a      	ldr	r2, [r7, #0]
 80114dc:	f7fe fdb2 	bl	8010044 <xQueueGenericSendFromISR>
 80114e0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80114e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3728      	adds	r7, #40	; 0x28
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}
 80114ec:	2400103c 	.word	0x2400103c

080114f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b088      	sub	sp, #32
 80114f4:	af02      	add	r7, sp, #8
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114fa:	4b22      	ldr	r3, [pc, #136]	; (8011584 <prvProcessExpiredTimer+0x94>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	68db      	ldr	r3, [r3, #12]
 8011502:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	3304      	adds	r3, #4
 8011508:	4618      	mov	r0, r3
 801150a:	f7fe fb79 	bl	800fc00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011514:	f003 0304 	and.w	r3, r3, #4
 8011518:	2b00      	cmp	r3, #0
 801151a:	d021      	beq.n	8011560 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801151c:	697b      	ldr	r3, [r7, #20]
 801151e:	699a      	ldr	r2, [r3, #24]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	18d1      	adds	r1, r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	683a      	ldr	r2, [r7, #0]
 8011528:	6978      	ldr	r0, [r7, #20]
 801152a:	f000 f8d1 	bl	80116d0 <prvInsertTimerInActiveList>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d01e      	beq.n	8011572 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011534:	2300      	movs	r3, #0
 8011536:	9300      	str	r3, [sp, #0]
 8011538:	2300      	movs	r3, #0
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	2100      	movs	r1, #0
 801153e:	6978      	ldr	r0, [r7, #20]
 8011540:	f7ff ff8a 	bl	8011458 <xTimerGenericCommand>
 8011544:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011546:	693b      	ldr	r3, [r7, #16]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d112      	bne.n	8011572 <prvProcessExpiredTimer+0x82>
 801154c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011550:	f383 8811 	msr	BASEPRI, r3
 8011554:	f3bf 8f6f 	isb	sy
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	60fb      	str	r3, [r7, #12]
 801155e:	e7fe      	b.n	801155e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011566:	f023 0301 	bic.w	r3, r3, #1
 801156a:	b2da      	uxtb	r2, r3
 801156c:	697b      	ldr	r3, [r7, #20]
 801156e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	6a1b      	ldr	r3, [r3, #32]
 8011576:	6978      	ldr	r0, [r7, #20]
 8011578:	4798      	blx	r3
}
 801157a:	bf00      	nop
 801157c:	3718      	adds	r7, #24
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
 8011582:	bf00      	nop
 8011584:	24001034 	.word	0x24001034

08011588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011590:	f107 0308 	add.w	r3, r7, #8
 8011594:	4618      	mov	r0, r3
 8011596:	f000 f857 	bl	8011648 <prvGetNextExpireTime>
 801159a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	4619      	mov	r1, r3
 80115a0:	68f8      	ldr	r0, [r7, #12]
 80115a2:	f000 f803 	bl	80115ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80115a6:	f000 f8d5 	bl	8011754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80115aa:	e7f1      	b.n	8011590 <prvTimerTask+0x8>

080115ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
 80115b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80115b6:	f7ff fa57 	bl	8010a68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80115ba:	f107 0308 	add.w	r3, r7, #8
 80115be:	4618      	mov	r0, r3
 80115c0:	f000 f866 	bl	8011690 <prvSampleTimeNow>
 80115c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d130      	bne.n	801162e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10a      	bne.n	80115e8 <prvProcessTimerOrBlockTask+0x3c>
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d806      	bhi.n	80115e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80115da:	f7ff fa53 	bl	8010a84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80115de:	68f9      	ldr	r1, [r7, #12]
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7ff ff85 	bl	80114f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80115e6:	e024      	b.n	8011632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d008      	beq.n	8011600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80115ee:	4b13      	ldr	r3, [pc, #76]	; (801163c <prvProcessTimerOrBlockTask+0x90>)
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d101      	bne.n	80115fc <prvProcessTimerOrBlockTask+0x50>
 80115f8:	2301      	movs	r3, #1
 80115fa:	e000      	b.n	80115fe <prvProcessTimerOrBlockTask+0x52>
 80115fc:	2300      	movs	r3, #0
 80115fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011600:	4b0f      	ldr	r3, [pc, #60]	; (8011640 <prvProcessTimerOrBlockTask+0x94>)
 8011602:	6818      	ldr	r0, [r3, #0]
 8011604:	687a      	ldr	r2, [r7, #4]
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	4619      	mov	r1, r3
 801160e:	f7fe ffc1 	bl	8010594 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011612:	f7ff fa37 	bl	8010a84 <xTaskResumeAll>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d10a      	bne.n	8011632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801161c:	4b09      	ldr	r3, [pc, #36]	; (8011644 <prvProcessTimerOrBlockTask+0x98>)
 801161e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011622:	601a      	str	r2, [r3, #0]
 8011624:	f3bf 8f4f 	dsb	sy
 8011628:	f3bf 8f6f 	isb	sy
}
 801162c:	e001      	b.n	8011632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801162e:	f7ff fa29 	bl	8010a84 <xTaskResumeAll>
}
 8011632:	bf00      	nop
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	24001038 	.word	0x24001038
 8011640:	2400103c 	.word	0x2400103c
 8011644:	e000ed04 	.word	0xe000ed04

08011648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011648:	b480      	push	{r7}
 801164a:	b085      	sub	sp, #20
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011650:	4b0e      	ldr	r3, [pc, #56]	; (801168c <prvGetNextExpireTime+0x44>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d101      	bne.n	801165e <prvGetNextExpireTime+0x16>
 801165a:	2201      	movs	r2, #1
 801165c:	e000      	b.n	8011660 <prvGetNextExpireTime+0x18>
 801165e:	2200      	movs	r2, #0
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d105      	bne.n	8011678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801166c:	4b07      	ldr	r3, [pc, #28]	; (801168c <prvGetNextExpireTime+0x44>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	60fb      	str	r3, [r7, #12]
 8011676:	e001      	b.n	801167c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011678:	2300      	movs	r3, #0
 801167a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801167c:	68fb      	ldr	r3, [r7, #12]
}
 801167e:	4618      	mov	r0, r3
 8011680:	3714      	adds	r7, #20
 8011682:	46bd      	mov	sp, r7
 8011684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011688:	4770      	bx	lr
 801168a:	bf00      	nop
 801168c:	24001034 	.word	0x24001034

08011690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b084      	sub	sp, #16
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011698:	f7ff fa90 	bl	8010bbc <xTaskGetTickCount>
 801169c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801169e:	4b0b      	ldr	r3, [pc, #44]	; (80116cc <prvSampleTimeNow+0x3c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d205      	bcs.n	80116b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80116a8:	f000 f930 	bl	801190c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2201      	movs	r2, #1
 80116b0:	601a      	str	r2, [r3, #0]
 80116b2:	e002      	b.n	80116ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2200      	movs	r2, #0
 80116b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80116ba:	4a04      	ldr	r2, [pc, #16]	; (80116cc <prvSampleTimeNow+0x3c>)
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80116c0:	68fb      	ldr	r3, [r7, #12]
}
 80116c2:	4618      	mov	r0, r3
 80116c4:	3710      	adds	r7, #16
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	24001044 	.word	0x24001044

080116d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b086      	sub	sp, #24
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	607a      	str	r2, [r7, #4]
 80116dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80116de:	2300      	movs	r3, #0
 80116e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	68ba      	ldr	r2, [r7, #8]
 80116e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80116ee:	68ba      	ldr	r2, [r7, #8]
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d812      	bhi.n	801171c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116f6:	687a      	ldr	r2, [r7, #4]
 80116f8:	683b      	ldr	r3, [r7, #0]
 80116fa:	1ad2      	subs	r2, r2, r3
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	699b      	ldr	r3, [r3, #24]
 8011700:	429a      	cmp	r2, r3
 8011702:	d302      	bcc.n	801170a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011704:	2301      	movs	r3, #1
 8011706:	617b      	str	r3, [r7, #20]
 8011708:	e01b      	b.n	8011742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801170a:	4b10      	ldr	r3, [pc, #64]	; (801174c <prvInsertTimerInActiveList+0x7c>)
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	3304      	adds	r3, #4
 8011712:	4619      	mov	r1, r3
 8011714:	4610      	mov	r0, r2
 8011716:	f7fe fa3a 	bl	800fb8e <vListInsert>
 801171a:	e012      	b.n	8011742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801171c:	687a      	ldr	r2, [r7, #4]
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	429a      	cmp	r2, r3
 8011722:	d206      	bcs.n	8011732 <prvInsertTimerInActiveList+0x62>
 8011724:	68ba      	ldr	r2, [r7, #8]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	429a      	cmp	r2, r3
 801172a:	d302      	bcc.n	8011732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801172c:	2301      	movs	r3, #1
 801172e:	617b      	str	r3, [r7, #20]
 8011730:	e007      	b.n	8011742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011732:	4b07      	ldr	r3, [pc, #28]	; (8011750 <prvInsertTimerInActiveList+0x80>)
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	3304      	adds	r3, #4
 801173a:	4619      	mov	r1, r3
 801173c:	4610      	mov	r0, r2
 801173e:	f7fe fa26 	bl	800fb8e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8011742:	697b      	ldr	r3, [r7, #20]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3718      	adds	r7, #24
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}
 801174c:	24001038 	.word	0x24001038
 8011750:	24001034 	.word	0x24001034

08011754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b08e      	sub	sp, #56	; 0x38
 8011758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801175a:	e0c6      	b.n	80118ea <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	2b00      	cmp	r3, #0
 8011760:	da17      	bge.n	8011792 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8011762:	1d3b      	adds	r3, r7, #4
 8011764:	3304      	adds	r3, #4
 8011766:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8011768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801176a:	2b00      	cmp	r3, #0
 801176c:	d109      	bne.n	8011782 <prvProcessReceivedCommands+0x2e>
 801176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	61fb      	str	r3, [r7, #28]
 8011780:	e7fe      	b.n	8011780 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8011782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011788:	6850      	ldr	r0, [r2, #4]
 801178a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801178c:	6892      	ldr	r2, [r2, #8]
 801178e:	4611      	mov	r1, r2
 8011790:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	2b00      	cmp	r3, #0
 8011796:	f2c0 80a7 	blt.w	80118e8 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a0:	695b      	ldr	r3, [r3, #20]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d004      	beq.n	80117b0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80117a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117a8:	3304      	adds	r3, #4
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fe fa28 	bl	800fc00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80117b0:	463b      	mov	r3, r7
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7ff ff6c 	bl	8011690 <prvSampleTimeNow>
 80117b8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2b09      	cmp	r3, #9
 80117be:	f200 8094 	bhi.w	80118ea <prvProcessReceivedCommands+0x196>
 80117c2:	a201      	add	r2, pc, #4	; (adr r2, 80117c8 <prvProcessReceivedCommands+0x74>)
 80117c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c8:	080117f1 	.word	0x080117f1
 80117cc:	080117f1 	.word	0x080117f1
 80117d0:	080117f1 	.word	0x080117f1
 80117d4:	08011863 	.word	0x08011863
 80117d8:	08011877 	.word	0x08011877
 80117dc:	080118bf 	.word	0x080118bf
 80117e0:	080117f1 	.word	0x080117f1
 80117e4:	080117f1 	.word	0x080117f1
 80117e8:	08011863 	.word	0x08011863
 80117ec:	08011877 	.word	0x08011877
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80117f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80117f6:	f043 0301 	orr.w	r3, r3, #1
 80117fa:	b2da      	uxtb	r2, r3
 80117fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	18d1      	adds	r1, r2, r3
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801180e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011810:	f7ff ff5e 	bl	80116d0 <prvInsertTimerInActiveList>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d067      	beq.n	80118ea <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801181a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801181c:	6a1b      	ldr	r3, [r3, #32]
 801181e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011828:	f003 0304 	and.w	r3, r3, #4
 801182c:	2b00      	cmp	r3, #0
 801182e:	d05c      	beq.n	80118ea <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	699b      	ldr	r3, [r3, #24]
 8011836:	441a      	add	r2, r3
 8011838:	2300      	movs	r3, #0
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	2300      	movs	r3, #0
 801183e:	2100      	movs	r1, #0
 8011840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011842:	f7ff fe09 	bl	8011458 <xTimerGenericCommand>
 8011846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d14d      	bne.n	80118ea <prvProcessReceivedCommands+0x196>
 801184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011852:	f383 8811 	msr	BASEPRI, r3
 8011856:	f3bf 8f6f 	isb	sy
 801185a:	f3bf 8f4f 	dsb	sy
 801185e:	61bb      	str	r3, [r7, #24]
 8011860:	e7fe      	b.n	8011860 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011868:	f023 0301 	bic.w	r3, r3, #1
 801186c:	b2da      	uxtb	r2, r3
 801186e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8011874:	e039      	b.n	80118ea <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8011876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801187c:	f043 0301 	orr.w	r3, r3, #1
 8011880:	b2da      	uxtb	r2, r3
 8011882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011884:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801188c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801188e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d109      	bne.n	80118aa <prvProcessReceivedCommands+0x156>
 8011896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189a:	f383 8811 	msr	BASEPRI, r3
 801189e:	f3bf 8f6f 	isb	sy
 80118a2:	f3bf 8f4f 	dsb	sy
 80118a6:	617b      	str	r3, [r7, #20]
 80118a8:	e7fe      	b.n	80118a8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80118aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ac:	699a      	ldr	r2, [r3, #24]
 80118ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b0:	18d1      	adds	r1, r2, r3
 80118b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118b8:	f7ff ff0a 	bl	80116d0 <prvInsertTimerInActiveList>
					break;
 80118bc:	e015      	b.n	80118ea <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80118be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118c4:	f003 0302 	and.w	r3, r3, #2
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d103      	bne.n	80118d4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80118cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80118ce:	f000 fbc1 	bl	8012054 <vPortFree>
 80118d2:	e00a      	b.n	80118ea <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80118d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80118da:	f023 0301 	bic.w	r3, r3, #1
 80118de:	b2da      	uxtb	r2, r3
 80118e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80118e6:	e000      	b.n	80118ea <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80118e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80118ea:	4b07      	ldr	r3, [pc, #28]	; (8011908 <prvProcessReceivedCommands+0x1b4>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	1d39      	adds	r1, r7, #4
 80118f0:	2200      	movs	r2, #0
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fe fc3a 	bl	801016c <xQueueReceive>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f47f af2e 	bne.w	801175c <prvProcessReceivedCommands+0x8>
	}
}
 8011900:	bf00      	nop
 8011902:	3730      	adds	r7, #48	; 0x30
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	2400103c 	.word	0x2400103c

0801190c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	b088      	sub	sp, #32
 8011910:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8011912:	e047      	b.n	80119a4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011914:	4b2d      	ldr	r3, [pc, #180]	; (80119cc <prvSwitchTimerLists+0xc0>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	68db      	ldr	r3, [r3, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801191e:	4b2b      	ldr	r3, [pc, #172]	; (80119cc <prvSwitchTimerLists+0xc0>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	68db      	ldr	r3, [r3, #12]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	3304      	adds	r3, #4
 801192c:	4618      	mov	r0, r3
 801192e:	f7fe f967 	bl	800fc00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	6a1b      	ldr	r3, [r3, #32]
 8011936:	68f8      	ldr	r0, [r7, #12]
 8011938:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011940:	f003 0304 	and.w	r3, r3, #4
 8011944:	2b00      	cmp	r3, #0
 8011946:	d02d      	beq.n	80119a4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	699b      	ldr	r3, [r3, #24]
 801194c:	693a      	ldr	r2, [r7, #16]
 801194e:	4413      	add	r3, r2
 8011950:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	429a      	cmp	r2, r3
 8011958:	d90e      	bls.n	8011978 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	68ba      	ldr	r2, [r7, #8]
 801195e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011966:	4b19      	ldr	r3, [pc, #100]	; (80119cc <prvSwitchTimerLists+0xc0>)
 8011968:	681a      	ldr	r2, [r3, #0]
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	3304      	adds	r3, #4
 801196e:	4619      	mov	r1, r3
 8011970:	4610      	mov	r0, r2
 8011972:	f7fe f90c 	bl	800fb8e <vListInsert>
 8011976:	e015      	b.n	80119a4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011978:	2300      	movs	r3, #0
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	2300      	movs	r3, #0
 801197e:	693a      	ldr	r2, [r7, #16]
 8011980:	2100      	movs	r1, #0
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f7ff fd68 	bl	8011458 <xTimerGenericCommand>
 8011988:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d109      	bne.n	80119a4 <prvSwitchTimerLists+0x98>
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	603b      	str	r3, [r7, #0]
 80119a2:	e7fe      	b.n	80119a2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80119a4:	4b09      	ldr	r3, [pc, #36]	; (80119cc <prvSwitchTimerLists+0xc0>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d1b2      	bne.n	8011914 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80119ae:	4b07      	ldr	r3, [pc, #28]	; (80119cc <prvSwitchTimerLists+0xc0>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80119b4:	4b06      	ldr	r3, [pc, #24]	; (80119d0 <prvSwitchTimerLists+0xc4>)
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	4a04      	ldr	r2, [pc, #16]	; (80119cc <prvSwitchTimerLists+0xc0>)
 80119ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80119bc:	4a04      	ldr	r2, [pc, #16]	; (80119d0 <prvSwitchTimerLists+0xc4>)
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	6013      	str	r3, [r2, #0]
}
 80119c2:	bf00      	nop
 80119c4:	3718      	adds	r7, #24
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	24001034 	.word	0x24001034
 80119d0:	24001038 	.word	0x24001038

080119d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80119da:	f000 f95f 	bl	8011c9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80119de:	4b15      	ldr	r3, [pc, #84]	; (8011a34 <prvCheckForValidListAndQueue+0x60>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d120      	bne.n	8011a28 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80119e6:	4814      	ldr	r0, [pc, #80]	; (8011a38 <prvCheckForValidListAndQueue+0x64>)
 80119e8:	f7fe f880 	bl	800faec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80119ec:	4813      	ldr	r0, [pc, #76]	; (8011a3c <prvCheckForValidListAndQueue+0x68>)
 80119ee:	f7fe f87d 	bl	800faec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80119f2:	4b13      	ldr	r3, [pc, #76]	; (8011a40 <prvCheckForValidListAndQueue+0x6c>)
 80119f4:	4a10      	ldr	r2, [pc, #64]	; (8011a38 <prvCheckForValidListAndQueue+0x64>)
 80119f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80119f8:	4b12      	ldr	r3, [pc, #72]	; (8011a44 <prvCheckForValidListAndQueue+0x70>)
 80119fa:	4a10      	ldr	r2, [pc, #64]	; (8011a3c <prvCheckForValidListAndQueue+0x68>)
 80119fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80119fe:	2300      	movs	r3, #0
 8011a00:	9300      	str	r3, [sp, #0]
 8011a02:	4b11      	ldr	r3, [pc, #68]	; (8011a48 <prvCheckForValidListAndQueue+0x74>)
 8011a04:	4a11      	ldr	r2, [pc, #68]	; (8011a4c <prvCheckForValidListAndQueue+0x78>)
 8011a06:	2110      	movs	r1, #16
 8011a08:	200a      	movs	r0, #10
 8011a0a:	f7fe f98b 	bl	800fd24 <xQueueGenericCreateStatic>
 8011a0e:	4602      	mov	r2, r0
 8011a10:	4b08      	ldr	r3, [pc, #32]	; (8011a34 <prvCheckForValidListAndQueue+0x60>)
 8011a12:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8011a14:	4b07      	ldr	r3, [pc, #28]	; (8011a34 <prvCheckForValidListAndQueue+0x60>)
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d005      	beq.n	8011a28 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8011a1c:	4b05      	ldr	r3, [pc, #20]	; (8011a34 <prvCheckForValidListAndQueue+0x60>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	490b      	ldr	r1, [pc, #44]	; (8011a50 <prvCheckForValidListAndQueue+0x7c>)
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7fe fd8e 	bl	8010544 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a28:	f000 f966 	bl	8011cf8 <vPortExitCritical>
}
 8011a2c:	bf00      	nop
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	2400103c 	.word	0x2400103c
 8011a38:	2400100c 	.word	0x2400100c
 8011a3c:	24001020 	.word	0x24001020
 8011a40:	24001034 	.word	0x24001034
 8011a44:	24001038 	.word	0x24001038
 8011a48:	240010e8 	.word	0x240010e8
 8011a4c:	24001048 	.word	0x24001048
 8011a50:	080131a4 	.word	0x080131a4

08011a54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011a54:	b480      	push	{r7}
 8011a56:	b085      	sub	sp, #20
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	60f8      	str	r0, [r7, #12]
 8011a5c:	60b9      	str	r1, [r7, #8]
 8011a5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	3b04      	subs	r3, #4
 8011a64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	3b04      	subs	r3, #4
 8011a72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	f023 0201 	bic.w	r2, r3, #1
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	3b04      	subs	r3, #4
 8011a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011a84:	4a0c      	ldr	r2, [pc, #48]	; (8011ab8 <pxPortInitialiseStack+0x64>)
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	3b14      	subs	r3, #20
 8011a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	3b04      	subs	r3, #4
 8011a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	f06f 0202 	mvn.w	r2, #2
 8011aa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	3b20      	subs	r3, #32
 8011aa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3714      	adds	r7, #20
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab6:	4770      	bx	lr
 8011ab8:	08011abd 	.word	0x08011abd

08011abc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011abc:	b480      	push	{r7}
 8011abe:	b085      	sub	sp, #20
 8011ac0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011ac6:	4b11      	ldr	r3, [pc, #68]	; (8011b0c <prvTaskExitError+0x50>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ace:	d009      	beq.n	8011ae4 <prvTaskExitError+0x28>
 8011ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad4:	f383 8811 	msr	BASEPRI, r3
 8011ad8:	f3bf 8f6f 	isb	sy
 8011adc:	f3bf 8f4f 	dsb	sy
 8011ae0:	60fb      	str	r3, [r7, #12]
 8011ae2:	e7fe      	b.n	8011ae2 <prvTaskExitError+0x26>
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011af6:	bf00      	nop
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d0fc      	beq.n	8011af8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011afe:	bf00      	nop
 8011b00:	3714      	adds	r7, #20
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr
 8011b0a:	bf00      	nop
 8011b0c:	2400018c 	.word	0x2400018c

08011b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011b10:	4b07      	ldr	r3, [pc, #28]	; (8011b30 <pxCurrentTCBConst2>)
 8011b12:	6819      	ldr	r1, [r3, #0]
 8011b14:	6808      	ldr	r0, [r1, #0]
 8011b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b1a:	f380 8809 	msr	PSP, r0
 8011b1e:	f3bf 8f6f 	isb	sy
 8011b22:	f04f 0000 	mov.w	r0, #0
 8011b26:	f380 8811 	msr	BASEPRI, r0
 8011b2a:	4770      	bx	lr
 8011b2c:	f3af 8000 	nop.w

08011b30 <pxCurrentTCBConst2>:
 8011b30:	24000b0c 	.word	0x24000b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011b34:	bf00      	nop
 8011b36:	bf00      	nop

08011b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011b38:	4808      	ldr	r0, [pc, #32]	; (8011b5c <prvPortStartFirstTask+0x24>)
 8011b3a:	6800      	ldr	r0, [r0, #0]
 8011b3c:	6800      	ldr	r0, [r0, #0]
 8011b3e:	f380 8808 	msr	MSP, r0
 8011b42:	f04f 0000 	mov.w	r0, #0
 8011b46:	f380 8814 	msr	CONTROL, r0
 8011b4a:	b662      	cpsie	i
 8011b4c:	b661      	cpsie	f
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	df00      	svc	0
 8011b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011b5a:	bf00      	nop
 8011b5c:	e000ed08 	.word	0xe000ed08

08011b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b086      	sub	sp, #24
 8011b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011b66:	4b44      	ldr	r3, [pc, #272]	; (8011c78 <xPortStartScheduler+0x118>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	4a44      	ldr	r2, [pc, #272]	; (8011c7c <xPortStartScheduler+0x11c>)
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	d109      	bne.n	8011b84 <xPortStartScheduler+0x24>
 8011b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b74:	f383 8811 	msr	BASEPRI, r3
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	613b      	str	r3, [r7, #16]
 8011b82:	e7fe      	b.n	8011b82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011b84:	4b3c      	ldr	r3, [pc, #240]	; (8011c78 <xPortStartScheduler+0x118>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a3d      	ldr	r2, [pc, #244]	; (8011c80 <xPortStartScheduler+0x120>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d109      	bne.n	8011ba2 <xPortStartScheduler+0x42>
 8011b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b92:	f383 8811 	msr	BASEPRI, r3
 8011b96:	f3bf 8f6f 	isb	sy
 8011b9a:	f3bf 8f4f 	dsb	sy
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	e7fe      	b.n	8011ba0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011ba2:	4b38      	ldr	r3, [pc, #224]	; (8011c84 <xPortStartScheduler+0x124>)
 8011ba4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	781b      	ldrb	r3, [r3, #0]
 8011baa:	b2db      	uxtb	r3, r3
 8011bac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	22ff      	movs	r2, #255	; 0xff
 8011bb2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011bb4:	697b      	ldr	r3, [r7, #20]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	b2db      	uxtb	r3, r3
 8011bba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011bbc:	78fb      	ldrb	r3, [r7, #3]
 8011bbe:	b2db      	uxtb	r3, r3
 8011bc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011bc4:	b2da      	uxtb	r2, r3
 8011bc6:	4b30      	ldr	r3, [pc, #192]	; (8011c88 <xPortStartScheduler+0x128>)
 8011bc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011bca:	4b30      	ldr	r3, [pc, #192]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011bcc:	2207      	movs	r2, #7
 8011bce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011bd0:	e009      	b.n	8011be6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8011bd2:	4b2e      	ldr	r3, [pc, #184]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4a2c      	ldr	r2, [pc, #176]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011bda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011bdc:	78fb      	ldrb	r3, [r7, #3]
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	b2db      	uxtb	r3, r3
 8011be4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011be6:	78fb      	ldrb	r3, [r7, #3]
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bee:	2b80      	cmp	r3, #128	; 0x80
 8011bf0:	d0ef      	beq.n	8011bd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011bf2:	4b26      	ldr	r3, [pc, #152]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	f1c3 0307 	rsb	r3, r3, #7
 8011bfa:	2b04      	cmp	r3, #4
 8011bfc:	d009      	beq.n	8011c12 <xPortStartScheduler+0xb2>
 8011bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c02:	f383 8811 	msr	BASEPRI, r3
 8011c06:	f3bf 8f6f 	isb	sy
 8011c0a:	f3bf 8f4f 	dsb	sy
 8011c0e:	60bb      	str	r3, [r7, #8]
 8011c10:	e7fe      	b.n	8011c10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011c12:	4b1e      	ldr	r3, [pc, #120]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	021b      	lsls	r3, r3, #8
 8011c18:	4a1c      	ldr	r2, [pc, #112]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011c1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011c1c:	4b1b      	ldr	r3, [pc, #108]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011c24:	4a19      	ldr	r2, [pc, #100]	; (8011c8c <xPortStartScheduler+0x12c>)
 8011c26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	b2da      	uxtb	r2, r3
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011c30:	4b17      	ldr	r3, [pc, #92]	; (8011c90 <xPortStartScheduler+0x130>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4a16      	ldr	r2, [pc, #88]	; (8011c90 <xPortStartScheduler+0x130>)
 8011c36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011c3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011c3c:	4b14      	ldr	r3, [pc, #80]	; (8011c90 <xPortStartScheduler+0x130>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a13      	ldr	r2, [pc, #76]	; (8011c90 <xPortStartScheduler+0x130>)
 8011c42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011c46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011c48:	f000 f8d6 	bl	8011df8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011c4c:	4b11      	ldr	r3, [pc, #68]	; (8011c94 <xPortStartScheduler+0x134>)
 8011c4e:	2200      	movs	r2, #0
 8011c50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011c52:	f000 f8f5 	bl	8011e40 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011c56:	4b10      	ldr	r3, [pc, #64]	; (8011c98 <xPortStartScheduler+0x138>)
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	4a0f      	ldr	r2, [pc, #60]	; (8011c98 <xPortStartScheduler+0x138>)
 8011c5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011c60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011c62:	f7ff ff69 	bl	8011b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011c66:	f7ff f871 	bl	8010d4c <vTaskSwitchContext>
	prvTaskExitError();
 8011c6a:	f7ff ff27 	bl	8011abc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011c6e:	2300      	movs	r3, #0
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3718      	adds	r7, #24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	e000ed00 	.word	0xe000ed00
 8011c7c:	410fc271 	.word	0x410fc271
 8011c80:	410fc270 	.word	0x410fc270
 8011c84:	e000e400 	.word	0xe000e400
 8011c88:	24001138 	.word	0x24001138
 8011c8c:	2400113c 	.word	0x2400113c
 8011c90:	e000ed20 	.word	0xe000ed20
 8011c94:	2400018c 	.word	0x2400018c
 8011c98:	e000ef34 	.word	0xe000ef34

08011c9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca6:	f383 8811 	msr	BASEPRI, r3
 8011caa:	f3bf 8f6f 	isb	sy
 8011cae:	f3bf 8f4f 	dsb	sy
 8011cb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011cb4:	4b0e      	ldr	r3, [pc, #56]	; (8011cf0 <vPortEnterCritical+0x54>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	4a0d      	ldr	r2, [pc, #52]	; (8011cf0 <vPortEnterCritical+0x54>)
 8011cbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011cbe:	4b0c      	ldr	r3, [pc, #48]	; (8011cf0 <vPortEnterCritical+0x54>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b01      	cmp	r3, #1
 8011cc4:	d10e      	bne.n	8011ce4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	; (8011cf4 <vPortEnterCritical+0x58>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	b2db      	uxtb	r3, r3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d009      	beq.n	8011ce4 <vPortEnterCritical+0x48>
 8011cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd4:	f383 8811 	msr	BASEPRI, r3
 8011cd8:	f3bf 8f6f 	isb	sy
 8011cdc:	f3bf 8f4f 	dsb	sy
 8011ce0:	603b      	str	r3, [r7, #0]
 8011ce2:	e7fe      	b.n	8011ce2 <vPortEnterCritical+0x46>
	}
}
 8011ce4:	bf00      	nop
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr
 8011cf0:	2400018c 	.word	0x2400018c
 8011cf4:	e000ed04 	.word	0xe000ed04

08011cf8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011cfe:	4b11      	ldr	r3, [pc, #68]	; (8011d44 <vPortExitCritical+0x4c>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d109      	bne.n	8011d1a <vPortExitCritical+0x22>
 8011d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0a:	f383 8811 	msr	BASEPRI, r3
 8011d0e:	f3bf 8f6f 	isb	sy
 8011d12:	f3bf 8f4f 	dsb	sy
 8011d16:	607b      	str	r3, [r7, #4]
 8011d18:	e7fe      	b.n	8011d18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8011d1a:	4b0a      	ldr	r3, [pc, #40]	; (8011d44 <vPortExitCritical+0x4c>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	4a08      	ldr	r2, [pc, #32]	; (8011d44 <vPortExitCritical+0x4c>)
 8011d22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011d24:	4b07      	ldr	r3, [pc, #28]	; (8011d44 <vPortExitCritical+0x4c>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d104      	bne.n	8011d36 <vPortExitCritical+0x3e>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011d36:	bf00      	nop
 8011d38:	370c      	adds	r7, #12
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	2400018c 	.word	0x2400018c
	...

08011d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011d50:	f3ef 8009 	mrs	r0, PSP
 8011d54:	f3bf 8f6f 	isb	sy
 8011d58:	4b15      	ldr	r3, [pc, #84]	; (8011db0 <pxCurrentTCBConst>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	f01e 0f10 	tst.w	lr, #16
 8011d60:	bf08      	it	eq
 8011d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6a:	6010      	str	r0, [r2, #0]
 8011d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011d74:	f380 8811 	msr	BASEPRI, r0
 8011d78:	f3bf 8f4f 	dsb	sy
 8011d7c:	f3bf 8f6f 	isb	sy
 8011d80:	f7fe ffe4 	bl	8010d4c <vTaskSwitchContext>
 8011d84:	f04f 0000 	mov.w	r0, #0
 8011d88:	f380 8811 	msr	BASEPRI, r0
 8011d8c:	bc09      	pop	{r0, r3}
 8011d8e:	6819      	ldr	r1, [r3, #0]
 8011d90:	6808      	ldr	r0, [r1, #0]
 8011d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d96:	f01e 0f10 	tst.w	lr, #16
 8011d9a:	bf08      	it	eq
 8011d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011da0:	f380 8809 	msr	PSP, r0
 8011da4:	f3bf 8f6f 	isb	sy
 8011da8:	4770      	bx	lr
 8011daa:	bf00      	nop
 8011dac:	f3af 8000 	nop.w

08011db0 <pxCurrentTCBConst>:
 8011db0:	24000b0c 	.word	0x24000b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011db4:	bf00      	nop
 8011db6:	bf00      	nop

08011db8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8011dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc2:	f383 8811 	msr	BASEPRI, r3
 8011dc6:	f3bf 8f6f 	isb	sy
 8011dca:	f3bf 8f4f 	dsb	sy
 8011dce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011dd0:	f7fe ff04 	bl	8010bdc <xTaskIncrementTick>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d003      	beq.n	8011de2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011dda:	4b06      	ldr	r3, [pc, #24]	; (8011df4 <SysTick_Handler+0x3c>)
 8011ddc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	2300      	movs	r3, #0
 8011de4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011dec:	bf00      	nop
 8011dee:	3708      	adds	r7, #8
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	e000ed04 	.word	0xe000ed04

08011df8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011df8:	b480      	push	{r7}
 8011dfa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011dfc:	4b0b      	ldr	r3, [pc, #44]	; (8011e2c <vPortSetupTimerInterrupt+0x34>)
 8011dfe:	2200      	movs	r2, #0
 8011e00:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011e02:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <vPortSetupTimerInterrupt+0x38>)
 8011e04:	2200      	movs	r2, #0
 8011e06:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011e08:	4b0a      	ldr	r3, [pc, #40]	; (8011e34 <vPortSetupTimerInterrupt+0x3c>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a0a      	ldr	r2, [pc, #40]	; (8011e38 <vPortSetupTimerInterrupt+0x40>)
 8011e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8011e12:	099b      	lsrs	r3, r3, #6
 8011e14:	4a09      	ldr	r2, [pc, #36]	; (8011e3c <vPortSetupTimerInterrupt+0x44>)
 8011e16:	3b01      	subs	r3, #1
 8011e18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011e1a:	4b04      	ldr	r3, [pc, #16]	; (8011e2c <vPortSetupTimerInterrupt+0x34>)
 8011e1c:	2207      	movs	r2, #7
 8011e1e:	601a      	str	r2, [r3, #0]
}
 8011e20:	bf00      	nop
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	e000e010 	.word	0xe000e010
 8011e30:	e000e018 	.word	0xe000e018
 8011e34:	24000094 	.word	0x24000094
 8011e38:	10624dd3 	.word	0x10624dd3
 8011e3c:	e000e014 	.word	0xe000e014

08011e40 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011e40:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011e50 <vPortEnableVFP+0x10>
 8011e44:	6801      	ldr	r1, [r0, #0]
 8011e46:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011e4a:	6001      	str	r1, [r0, #0]
 8011e4c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011e4e:	bf00      	nop
 8011e50:	e000ed88 	.word	0xe000ed88

08011e54 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011e54:	b480      	push	{r7}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011e5a:	f3ef 8305 	mrs	r3, IPSR
 8011e5e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	2b0f      	cmp	r3, #15
 8011e64:	d913      	bls.n	8011e8e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011e66:	4a16      	ldr	r2, [pc, #88]	; (8011ec0 <vPortValidateInterruptPriority+0x6c>)
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	4413      	add	r3, r2
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011e70:	4b14      	ldr	r3, [pc, #80]	; (8011ec4 <vPortValidateInterruptPriority+0x70>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	7afa      	ldrb	r2, [r7, #11]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d209      	bcs.n	8011e8e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8011e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e7e:	f383 8811 	msr	BASEPRI, r3
 8011e82:	f3bf 8f6f 	isb	sy
 8011e86:	f3bf 8f4f 	dsb	sy
 8011e8a:	607b      	str	r3, [r7, #4]
 8011e8c:	e7fe      	b.n	8011e8c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011e8e:	4b0e      	ldr	r3, [pc, #56]	; (8011ec8 <vPortValidateInterruptPriority+0x74>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011e96:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <vPortValidateInterruptPriority+0x78>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d909      	bls.n	8011eb2 <vPortValidateInterruptPriority+0x5e>
 8011e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea2:	f383 8811 	msr	BASEPRI, r3
 8011ea6:	f3bf 8f6f 	isb	sy
 8011eaa:	f3bf 8f4f 	dsb	sy
 8011eae:	603b      	str	r3, [r7, #0]
 8011eb0:	e7fe      	b.n	8011eb0 <vPortValidateInterruptPriority+0x5c>
	}
 8011eb2:	bf00      	nop
 8011eb4:	3714      	adds	r7, #20
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr
 8011ebe:	bf00      	nop
 8011ec0:	e000e3f0 	.word	0xe000e3f0
 8011ec4:	24001138 	.word	0x24001138
 8011ec8:	e000ed0c 	.word	0xe000ed0c
 8011ecc:	2400113c 	.word	0x2400113c

08011ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b08a      	sub	sp, #40	; 0x28
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011edc:	f7fe fdc4 	bl	8010a68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011ee0:	4b57      	ldr	r3, [pc, #348]	; (8012040 <pvPortMalloc+0x170>)
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d101      	bne.n	8011eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ee8:	f000 f90c 	bl	8012104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011eec:	4b55      	ldr	r3, [pc, #340]	; (8012044 <pvPortMalloc+0x174>)
 8011eee:	681a      	ldr	r2, [r3, #0]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	4013      	ands	r3, r2
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	f040 808c 	bne.w	8012012 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d01c      	beq.n	8011f3a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8011f00:	2208      	movs	r2, #8
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	4413      	add	r3, r2
 8011f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f003 0307 	and.w	r3, r3, #7
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d013      	beq.n	8011f3a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f023 0307 	bic.w	r3, r3, #7
 8011f18:	3308      	adds	r3, #8
 8011f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f003 0307 	and.w	r3, r3, #7
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d009      	beq.n	8011f3a <pvPortMalloc+0x6a>
 8011f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2a:	f383 8811 	msr	BASEPRI, r3
 8011f2e:	f3bf 8f6f 	isb	sy
 8011f32:	f3bf 8f4f 	dsb	sy
 8011f36:	617b      	str	r3, [r7, #20]
 8011f38:	e7fe      	b.n	8011f38 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d068      	beq.n	8012012 <pvPortMalloc+0x142>
 8011f40:	4b41      	ldr	r3, [pc, #260]	; (8012048 <pvPortMalloc+0x178>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d863      	bhi.n	8012012 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011f4a:	4b40      	ldr	r3, [pc, #256]	; (801204c <pvPortMalloc+0x17c>)
 8011f4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011f4e:	4b3f      	ldr	r3, [pc, #252]	; (801204c <pvPortMalloc+0x17c>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011f54:	e004      	b.n	8011f60 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d903      	bls.n	8011f72 <pvPortMalloc+0xa2>
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d1f1      	bne.n	8011f56 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011f72:	4b33      	ldr	r3, [pc, #204]	; (8012040 <pvPortMalloc+0x170>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d04a      	beq.n	8012012 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011f7c:	6a3b      	ldr	r3, [r7, #32]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	2208      	movs	r2, #8
 8011f82:	4413      	add	r3, r2
 8011f84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f88:	681a      	ldr	r2, [r3, #0]
 8011f8a:	6a3b      	ldr	r3, [r7, #32]
 8011f8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	685a      	ldr	r2, [r3, #4]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	1ad2      	subs	r2, r2, r3
 8011f96:	2308      	movs	r3, #8
 8011f98:	005b      	lsls	r3, r3, #1
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d91e      	bls.n	8011fdc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	4413      	add	r3, r2
 8011fa4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011fa6:	69bb      	ldr	r3, [r7, #24]
 8011fa8:	f003 0307 	and.w	r3, r3, #7
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d009      	beq.n	8011fc4 <pvPortMalloc+0xf4>
 8011fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	613b      	str	r3, [r7, #16]
 8011fc2:	e7fe      	b.n	8011fc2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	685a      	ldr	r2, [r3, #4]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	1ad2      	subs	r2, r2, r3
 8011fcc:	69bb      	ldr	r3, [r7, #24]
 8011fce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd2:	687a      	ldr	r2, [r7, #4]
 8011fd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011fd6:	69b8      	ldr	r0, [r7, #24]
 8011fd8:	f000 f8f6 	bl	80121c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011fdc:	4b1a      	ldr	r3, [pc, #104]	; (8012048 <pvPortMalloc+0x178>)
 8011fde:	681a      	ldr	r2, [r3, #0]
 8011fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	1ad3      	subs	r3, r2, r3
 8011fe6:	4a18      	ldr	r2, [pc, #96]	; (8012048 <pvPortMalloc+0x178>)
 8011fe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011fea:	4b17      	ldr	r3, [pc, #92]	; (8012048 <pvPortMalloc+0x178>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	4b18      	ldr	r3, [pc, #96]	; (8012050 <pvPortMalloc+0x180>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	429a      	cmp	r2, r3
 8011ff4:	d203      	bcs.n	8011ffe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ff6:	4b14      	ldr	r3, [pc, #80]	; (8012048 <pvPortMalloc+0x178>)
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	4a15      	ldr	r2, [pc, #84]	; (8012050 <pvPortMalloc+0x180>)
 8011ffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012000:	685a      	ldr	r2, [r3, #4]
 8012002:	4b10      	ldr	r3, [pc, #64]	; (8012044 <pvPortMalloc+0x174>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	431a      	orrs	r2, r3
 8012008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801200e:	2200      	movs	r2, #0
 8012010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012012:	f7fe fd37 	bl	8010a84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	f003 0307 	and.w	r3, r3, #7
 801201c:	2b00      	cmp	r3, #0
 801201e:	d009      	beq.n	8012034 <pvPortMalloc+0x164>
 8012020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012024:	f383 8811 	msr	BASEPRI, r3
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	f3bf 8f4f 	dsb	sy
 8012030:	60fb      	str	r3, [r7, #12]
 8012032:	e7fe      	b.n	8012032 <pvPortMalloc+0x162>
	return pvReturn;
 8012034:	69fb      	ldr	r3, [r7, #28]
}
 8012036:	4618      	mov	r0, r3
 8012038:	3728      	adds	r7, #40	; 0x28
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	24004d48 	.word	0x24004d48
 8012044:	24004d54 	.word	0x24004d54
 8012048:	24004d4c 	.word	0x24004d4c
 801204c:	24004d40 	.word	0x24004d40
 8012050:	24004d50 	.word	0x24004d50

08012054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b086      	sub	sp, #24
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d046      	beq.n	80120f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012066:	2308      	movs	r3, #8
 8012068:	425b      	negs	r3, r3
 801206a:	697a      	ldr	r2, [r7, #20]
 801206c:	4413      	add	r3, r2
 801206e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	685a      	ldr	r2, [r3, #4]
 8012078:	4b20      	ldr	r3, [pc, #128]	; (80120fc <vPortFree+0xa8>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	4013      	ands	r3, r2
 801207e:	2b00      	cmp	r3, #0
 8012080:	d109      	bne.n	8012096 <vPortFree+0x42>
 8012082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012086:	f383 8811 	msr	BASEPRI, r3
 801208a:	f3bf 8f6f 	isb	sy
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	60fb      	str	r3, [r7, #12]
 8012094:	e7fe      	b.n	8012094 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d009      	beq.n	80120b2 <vPortFree+0x5e>
 801209e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120a2:	f383 8811 	msr	BASEPRI, r3
 80120a6:	f3bf 8f6f 	isb	sy
 80120aa:	f3bf 8f4f 	dsb	sy
 80120ae:	60bb      	str	r3, [r7, #8]
 80120b0:	e7fe      	b.n	80120b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80120b2:	693b      	ldr	r3, [r7, #16]
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	4b11      	ldr	r3, [pc, #68]	; (80120fc <vPortFree+0xa8>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	4013      	ands	r3, r2
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d019      	beq.n	80120f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80120c0:	693b      	ldr	r3, [r7, #16]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d115      	bne.n	80120f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	685a      	ldr	r2, [r3, #4]
 80120cc:	4b0b      	ldr	r3, [pc, #44]	; (80120fc <vPortFree+0xa8>)
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	43db      	mvns	r3, r3
 80120d2:	401a      	ands	r2, r3
 80120d4:	693b      	ldr	r3, [r7, #16]
 80120d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80120d8:	f7fe fcc6 	bl	8010a68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	685a      	ldr	r2, [r3, #4]
 80120e0:	4b07      	ldr	r3, [pc, #28]	; (8012100 <vPortFree+0xac>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4413      	add	r3, r2
 80120e6:	4a06      	ldr	r2, [pc, #24]	; (8012100 <vPortFree+0xac>)
 80120e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80120ea:	6938      	ldr	r0, [r7, #16]
 80120ec:	f000 f86c 	bl	80121c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80120f0:	f7fe fcc8 	bl	8010a84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80120f4:	bf00      	nop
 80120f6:	3718      	adds	r7, #24
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	24004d54 	.word	0x24004d54
 8012100:	24004d4c 	.word	0x24004d4c

08012104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012104:	b480      	push	{r7}
 8012106:	b085      	sub	sp, #20
 8012108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801210a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801210e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012110:	4b27      	ldr	r3, [pc, #156]	; (80121b0 <prvHeapInit+0xac>)
 8012112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f003 0307 	and.w	r3, r3, #7
 801211a:	2b00      	cmp	r3, #0
 801211c:	d00c      	beq.n	8012138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3307      	adds	r3, #7
 8012122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f023 0307 	bic.w	r3, r3, #7
 801212a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801212c:	68ba      	ldr	r2, [r7, #8]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	1ad3      	subs	r3, r2, r3
 8012132:	4a1f      	ldr	r2, [pc, #124]	; (80121b0 <prvHeapInit+0xac>)
 8012134:	4413      	add	r3, r2
 8012136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801213c:	4a1d      	ldr	r2, [pc, #116]	; (80121b4 <prvHeapInit+0xb0>)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012142:	4b1c      	ldr	r3, [pc, #112]	; (80121b4 <prvHeapInit+0xb0>)
 8012144:	2200      	movs	r2, #0
 8012146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	68ba      	ldr	r2, [r7, #8]
 801214c:	4413      	add	r3, r2
 801214e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012150:	2208      	movs	r2, #8
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	1a9b      	subs	r3, r3, r2
 8012156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f023 0307 	bic.w	r3, r3, #7
 801215e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	4a15      	ldr	r2, [pc, #84]	; (80121b8 <prvHeapInit+0xb4>)
 8012164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012166:	4b14      	ldr	r3, [pc, #80]	; (80121b8 <prvHeapInit+0xb4>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	2200      	movs	r2, #0
 801216c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801216e:	4b12      	ldr	r3, [pc, #72]	; (80121b8 <prvHeapInit+0xb4>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	2200      	movs	r2, #0
 8012174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	68fa      	ldr	r2, [r7, #12]
 801217e:	1ad2      	subs	r2, r2, r3
 8012180:	683b      	ldr	r3, [r7, #0]
 8012182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012184:	4b0c      	ldr	r3, [pc, #48]	; (80121b8 <prvHeapInit+0xb4>)
 8012186:	681a      	ldr	r2, [r3, #0]
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801218c:	683b      	ldr	r3, [r7, #0]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	4a0a      	ldr	r2, [pc, #40]	; (80121bc <prvHeapInit+0xb8>)
 8012192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	4a09      	ldr	r2, [pc, #36]	; (80121c0 <prvHeapInit+0xbc>)
 801219a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801219c:	4b09      	ldr	r3, [pc, #36]	; (80121c4 <prvHeapInit+0xc0>)
 801219e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80121a2:	601a      	str	r2, [r3, #0]
}
 80121a4:	bf00      	nop
 80121a6:	3714      	adds	r7, #20
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr
 80121b0:	24001140 	.word	0x24001140
 80121b4:	24004d40 	.word	0x24004d40
 80121b8:	24004d48 	.word	0x24004d48
 80121bc:	24004d50 	.word	0x24004d50
 80121c0:	24004d4c 	.word	0x24004d4c
 80121c4:	24004d54 	.word	0x24004d54

080121c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80121c8:	b480      	push	{r7}
 80121ca:	b085      	sub	sp, #20
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80121d0:	4b28      	ldr	r3, [pc, #160]	; (8012274 <prvInsertBlockIntoFreeList+0xac>)
 80121d2:	60fb      	str	r3, [r7, #12]
 80121d4:	e002      	b.n	80121dc <prvInsertBlockIntoFreeList+0x14>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	60fb      	str	r3, [r7, #12]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	429a      	cmp	r2, r3
 80121e4:	d8f7      	bhi.n	80121d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	685b      	ldr	r3, [r3, #4]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	4413      	add	r3, r2
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d108      	bne.n	801220a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	685a      	ldr	r2, [r3, #4]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	441a      	add	r2, r3
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	685b      	ldr	r3, [r3, #4]
 8012212:	68ba      	ldr	r2, [r7, #8]
 8012214:	441a      	add	r2, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	429a      	cmp	r2, r3
 801221c:	d118      	bne.n	8012250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681a      	ldr	r2, [r3, #0]
 8012222:	4b15      	ldr	r3, [pc, #84]	; (8012278 <prvInsertBlockIntoFreeList+0xb0>)
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	429a      	cmp	r2, r3
 8012228:	d00d      	beq.n	8012246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	441a      	add	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	601a      	str	r2, [r3, #0]
 8012244:	e008      	b.n	8012258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012246:	4b0c      	ldr	r3, [pc, #48]	; (8012278 <prvInsertBlockIntoFreeList+0xb0>)
 8012248:	681a      	ldr	r2, [r3, #0]
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	e003      	b.n	8012258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	429a      	cmp	r2, r3
 801225e:	d002      	beq.n	8012266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012266:	bf00      	nop
 8012268:	3714      	adds	r7, #20
 801226a:	46bd      	mov	sp, r7
 801226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop
 8012274:	24004d40 	.word	0x24004d40
 8012278:	24004d48 	.word	0x24004d48

0801227c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801227c:	b580      	push	{r7, lr}
 801227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	  HAL_PWREx_EnableUSBVoltageDetector();
 8012280:	f7f1 fcb4 	bl	8003bec <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012284:	2200      	movs	r2, #0
 8012286:	4912      	ldr	r1, [pc, #72]	; (80122d0 <MX_USB_DEVICE_Init+0x54>)
 8012288:	4812      	ldr	r0, [pc, #72]	; (80122d4 <MX_USB_DEVICE_Init+0x58>)
 801228a:	f7fc f974 	bl	800e576 <USBD_Init>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d001      	beq.n	8012298 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8012294:	f7ef f86a 	bl	800136c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8012298:	490f      	ldr	r1, [pc, #60]	; (80122d8 <MX_USB_DEVICE_Init+0x5c>)
 801229a:	480e      	ldr	r0, [pc, #56]	; (80122d4 <MX_USB_DEVICE_Init+0x58>)
 801229c:	f7fc f9a1 	bl	800e5e2 <USBD_RegisterClass>
 80122a0:	4603      	mov	r3, r0
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d001      	beq.n	80122aa <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 80122a6:	f7ef f861 	bl	800136c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80122aa:	490c      	ldr	r1, [pc, #48]	; (80122dc <MX_USB_DEVICE_Init+0x60>)
 80122ac:	4809      	ldr	r0, [pc, #36]	; (80122d4 <MX_USB_DEVICE_Init+0x58>)
 80122ae:	f7fa fe9d 	bl	800cfec <USBD_MSC_RegisterStorage>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d001      	beq.n	80122bc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80122b8:	f7ef f858 	bl	800136c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80122bc:	4805      	ldr	r0, [pc, #20]	; (80122d4 <MX_USB_DEVICE_Init+0x58>)
 80122be:	f7fc f9b1 	bl	800e624 <USBD_Start>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d001      	beq.n	80122cc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80122c8:	f7ef f850 	bl	800136c <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80122cc:	bf00      	nop
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	24000190 	.word	0x24000190
 80122d4:	24005410 	.word	0x24005410
 80122d8:	240000a4 	.word	0x240000a4
 80122dc:	240001e0 	.word	0x240001e0

080122e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	4603      	mov	r3, r0
 80122e8:	6039      	str	r1, [r7, #0]
 80122ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80122ec:	683b      	ldr	r3, [r7, #0]
 80122ee:	2212      	movs	r2, #18
 80122f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80122f2:	4b03      	ldr	r3, [pc, #12]	; (8012300 <USBD_FS_DeviceDescriptor+0x20>)
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	370c      	adds	r7, #12
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr
 8012300:	240001ac 	.word	0x240001ac

08012304 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012304:	b480      	push	{r7}
 8012306:	b083      	sub	sp, #12
 8012308:	af00      	add	r7, sp, #0
 801230a:	4603      	mov	r3, r0
 801230c:	6039      	str	r1, [r7, #0]
 801230e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2204      	movs	r2, #4
 8012314:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012316:	4b03      	ldr	r3, [pc, #12]	; (8012324 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012318:	4618      	mov	r0, r3
 801231a:	370c      	adds	r7, #12
 801231c:	46bd      	mov	sp, r7
 801231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012322:	4770      	bx	lr
 8012324:	240001c0 	.word	0x240001c0

08012328 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	4603      	mov	r3, r0
 8012330:	6039      	str	r1, [r7, #0]
 8012332:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012334:	79fb      	ldrb	r3, [r7, #7]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d105      	bne.n	8012346 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801233a:	683a      	ldr	r2, [r7, #0]
 801233c:	4907      	ldr	r1, [pc, #28]	; (801235c <USBD_FS_ProductStrDescriptor+0x34>)
 801233e:	4808      	ldr	r0, [pc, #32]	; (8012360 <USBD_FS_ProductStrDescriptor+0x38>)
 8012340:	f7fd f93d 	bl	800f5be <USBD_GetString>
 8012344:	e004      	b.n	8012350 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012346:	683a      	ldr	r2, [r7, #0]
 8012348:	4904      	ldr	r1, [pc, #16]	; (801235c <USBD_FS_ProductStrDescriptor+0x34>)
 801234a:	4805      	ldr	r0, [pc, #20]	; (8012360 <USBD_FS_ProductStrDescriptor+0x38>)
 801234c:	f7fd f937 	bl	800f5be <USBD_GetString>
  }
  return USBD_StrDesc;
 8012350:	4b02      	ldr	r3, [pc, #8]	; (801235c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012352:	4618      	mov	r0, r3
 8012354:	3708      	adds	r7, #8
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	240056e0 	.word	0x240056e0
 8012360:	080131ac 	.word	0x080131ac

08012364 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b082      	sub	sp, #8
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	6039      	str	r1, [r7, #0]
 801236e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	4904      	ldr	r1, [pc, #16]	; (8012384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012374:	4804      	ldr	r0, [pc, #16]	; (8012388 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012376:	f7fd f922 	bl	800f5be <USBD_GetString>
  return USBD_StrDesc;
 801237a:	4b02      	ldr	r3, [pc, #8]	; (8012384 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801237c:	4618      	mov	r0, r3
 801237e:	3708      	adds	r7, #8
 8012380:	46bd      	mov	sp, r7
 8012382:	bd80      	pop	{r7, pc}
 8012384:	240056e0 	.word	0x240056e0
 8012388:	080131c0 	.word	0x080131c0

0801238c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
 8012392:	4603      	mov	r3, r0
 8012394:	6039      	str	r1, [r7, #0]
 8012396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	221a      	movs	r2, #26
 801239c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801239e:	f000 f843 	bl	8012428 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80123a2:	4b02      	ldr	r3, [pc, #8]	; (80123ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3708      	adds	r7, #8
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	240001c4 	.word	0x240001c4

080123b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b082      	sub	sp, #8
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	4603      	mov	r3, r0
 80123b8:	6039      	str	r1, [r7, #0]
 80123ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80123bc:	79fb      	ldrb	r3, [r7, #7]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d105      	bne.n	80123ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	4907      	ldr	r1, [pc, #28]	; (80123e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123c6:	4808      	ldr	r0, [pc, #32]	; (80123e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123c8:	f7fd f8f9 	bl	800f5be <USBD_GetString>
 80123cc:	e004      	b.n	80123d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80123ce:	683a      	ldr	r2, [r7, #0]
 80123d0:	4904      	ldr	r1, [pc, #16]	; (80123e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80123d2:	4805      	ldr	r0, [pc, #20]	; (80123e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80123d4:	f7fd f8f3 	bl	800f5be <USBD_GetString>
  }
  return USBD_StrDesc;
 80123d8:	4b02      	ldr	r3, [pc, #8]	; (80123e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	240056e0 	.word	0x240056e0
 80123e8:	080131d4 	.word	0x080131d4

080123ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	4603      	mov	r3, r0
 80123f4:	6039      	str	r1, [r7, #0]
 80123f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80123f8:	79fb      	ldrb	r3, [r7, #7]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d105      	bne.n	801240a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80123fe:	683a      	ldr	r2, [r7, #0]
 8012400:	4907      	ldr	r1, [pc, #28]	; (8012420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012402:	4808      	ldr	r0, [pc, #32]	; (8012424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012404:	f7fd f8db 	bl	800f5be <USBD_GetString>
 8012408:	e004      	b.n	8012414 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801240a:	683a      	ldr	r2, [r7, #0]
 801240c:	4904      	ldr	r1, [pc, #16]	; (8012420 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801240e:	4805      	ldr	r0, [pc, #20]	; (8012424 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012410:	f7fd f8d5 	bl	800f5be <USBD_GetString>
  }
  return USBD_StrDesc;
 8012414:	4b02      	ldr	r3, [pc, #8]	; (8012420 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012416:	4618      	mov	r0, r3
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	240056e0 	.word	0x240056e0
 8012424:	080131e0 	.word	0x080131e0

08012428 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801242e:	4b0f      	ldr	r3, [pc, #60]	; (801246c <Get_SerialNum+0x44>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012434:	4b0e      	ldr	r3, [pc, #56]	; (8012470 <Get_SerialNum+0x48>)
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801243a:	4b0e      	ldr	r3, [pc, #56]	; (8012474 <Get_SerialNum+0x4c>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4413      	add	r3, r2
 8012446:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d009      	beq.n	8012462 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801244e:	2208      	movs	r2, #8
 8012450:	4909      	ldr	r1, [pc, #36]	; (8012478 <Get_SerialNum+0x50>)
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f000 f814 	bl	8012480 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012458:	2204      	movs	r2, #4
 801245a:	4908      	ldr	r1, [pc, #32]	; (801247c <Get_SerialNum+0x54>)
 801245c:	68b8      	ldr	r0, [r7, #8]
 801245e:	f000 f80f 	bl	8012480 <IntToUnicode>
  }
}
 8012462:	bf00      	nop
 8012464:	3710      	adds	r7, #16
 8012466:	46bd      	mov	sp, r7
 8012468:	bd80      	pop	{r7, pc}
 801246a:	bf00      	nop
 801246c:	1ff1e800 	.word	0x1ff1e800
 8012470:	1ff1e804 	.word	0x1ff1e804
 8012474:	1ff1e808 	.word	0x1ff1e808
 8012478:	240001c6 	.word	0x240001c6
 801247c:	240001d6 	.word	0x240001d6

08012480 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012480:	b480      	push	{r7}
 8012482:	b087      	sub	sp, #28
 8012484:	af00      	add	r7, sp, #0
 8012486:	60f8      	str	r0, [r7, #12]
 8012488:	60b9      	str	r1, [r7, #8]
 801248a:	4613      	mov	r3, r2
 801248c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801248e:	2300      	movs	r3, #0
 8012490:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012492:	2300      	movs	r3, #0
 8012494:	75fb      	strb	r3, [r7, #23]
 8012496:	e027      	b.n	80124e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	0f1b      	lsrs	r3, r3, #28
 801249c:	2b09      	cmp	r3, #9
 801249e:	d80b      	bhi.n	80124b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	0f1b      	lsrs	r3, r3, #28
 80124a4:	b2da      	uxtb	r2, r3
 80124a6:	7dfb      	ldrb	r3, [r7, #23]
 80124a8:	005b      	lsls	r3, r3, #1
 80124aa:	4619      	mov	r1, r3
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	440b      	add	r3, r1
 80124b0:	3230      	adds	r2, #48	; 0x30
 80124b2:	b2d2      	uxtb	r2, r2
 80124b4:	701a      	strb	r2, [r3, #0]
 80124b6:	e00a      	b.n	80124ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	0f1b      	lsrs	r3, r3, #28
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	7dfb      	ldrb	r3, [r7, #23]
 80124c0:	005b      	lsls	r3, r3, #1
 80124c2:	4619      	mov	r1, r3
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	440b      	add	r3, r1
 80124c8:	3237      	adds	r2, #55	; 0x37
 80124ca:	b2d2      	uxtb	r2, r2
 80124cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	011b      	lsls	r3, r3, #4
 80124d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80124d4:	7dfb      	ldrb	r3, [r7, #23]
 80124d6:	005b      	lsls	r3, r3, #1
 80124d8:	3301      	adds	r3, #1
 80124da:	68ba      	ldr	r2, [r7, #8]
 80124dc:	4413      	add	r3, r2
 80124de:	2200      	movs	r2, #0
 80124e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80124e2:	7dfb      	ldrb	r3, [r7, #23]
 80124e4:	3301      	adds	r3, #1
 80124e6:	75fb      	strb	r3, [r7, #23]
 80124e8:	7dfa      	ldrb	r2, [r7, #23]
 80124ea:	79fb      	ldrb	r3, [r7, #7]
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d3d3      	bcc.n	8012498 <IntToUnicode+0x18>
  }
}
 80124f0:	bf00      	nop
 80124f2:	371c      	adds	r7, #28
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b082      	sub	sp, #8
 8012500:	af00      	add	r7, sp, #0
 8012502:	4603      	mov	r3, r0
 8012504:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

	  //HAL_Delay(2U); // mycode
	BSP_SD_Init();
 8012506:	f7fa fa23 	bl	800c950 <BSP_SD_Init>
  return (USBD_OK);
 801250a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801250c:	4618      	mov	r0, r3
 801250e:	3708      	adds	r7, #8
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b08e      	sub	sp, #56	; 0x38
 8012518:	af00      	add	r7, sp, #0
 801251a:	4603      	mov	r3, r0
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	607a      	str	r2, [r7, #4]
 8012520:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */

	HAL_SD_CardInfoTypeDef info;
		  int8_t ret = -1;
 8012522:	23ff      	movs	r3, #255	; 0xff
 8012524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8012528:	f7fa fa92 	bl	800ca50 <BSP_SD_IsDetected>
 801252c:	4603      	mov	r3, r0
 801252e:	2b00      	cmp	r3, #0
 8012530:	d00f      	beq.n	8012552 <STORAGE_GetCapacity_FS+0x3e>
		  {
		    BSP_SD_GetCardInfo(&info);
 8012532:	f107 0310 	add.w	r3, r7, #16
 8012536:	4618      	mov	r0, r3
 8012538:	f7fa fa7c 	bl	800ca34 <BSP_SD_GetCardInfo>

		    *block_num = info.LogBlockNbr - 1;
 801253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801253e:	1e5a      	subs	r2, r3, #1
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	601a      	str	r2, [r3, #0]
		    *block_size = info.LogBlockSize;
 8012544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012546:	b29a      	uxth	r2, r3
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	801a      	strh	r2, [r3, #0]
		    ret = 0;
 801254c:	2300      	movs	r3, #0
 801254e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/*
	*block_num = 4;
	*block_size = 0x200;
*/
  return (USBD_OK);
 8012552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012554:	4618      	mov	r0, r3
 8012556:	3738      	adds	r7, #56	; 0x38
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	4603      	mov	r3, r0
 8012564:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  static int8_t prev_status = 0;
    int8_t ret = -1;
 8012566:	23ff      	movs	r3, #255	; 0xff
 8012568:	73fb      	strb	r3, [r7, #15]

    if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 801256a:	f7fa fa71 	bl	800ca50 <BSP_SD_IsDetected>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d011      	beq.n	8012598 <STORAGE_IsReady_FS+0x3c>
    {
      if (prev_status < 0)
 8012574:	4b0f      	ldr	r3, [pc, #60]	; (80125b4 <STORAGE_IsReady_FS+0x58>)
 8012576:	f993 3000 	ldrsb.w	r3, [r3]
 801257a:	2b00      	cmp	r3, #0
 801257c:	da04      	bge.n	8012588 <STORAGE_IsReady_FS+0x2c>
      {
        BSP_SD_Init();
 801257e:	f7fa f9e7 	bl	800c950 <BSP_SD_Init>
        prev_status = 0;
 8012582:	4b0c      	ldr	r3, [pc, #48]	; (80125b4 <STORAGE_IsReady_FS+0x58>)
 8012584:	2200      	movs	r2, #0
 8012586:	701a      	strb	r2, [r3, #0]

      }

      if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012588:	f7fa fa44 	bl	800ca14 <BSP_SD_GetCardState>
 801258c:	4603      	mov	r3, r0
 801258e:	2b00      	cmp	r3, #0
 8012590:	d10a      	bne.n	80125a8 <STORAGE_IsReady_FS+0x4c>
      {
        ret = 0;
 8012592:	2300      	movs	r3, #0
 8012594:	73fb      	strb	r3, [r7, #15]
 8012596:	e007      	b.n	80125a8 <STORAGE_IsReady_FS+0x4c>
      }
    }
    else if (prev_status == 0)
 8012598:	4b06      	ldr	r3, [pc, #24]	; (80125b4 <STORAGE_IsReady_FS+0x58>)
 801259a:	f993 3000 	ldrsb.w	r3, [r3]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d102      	bne.n	80125a8 <STORAGE_IsReady_FS+0x4c>
    {
      prev_status = -1;
 80125a2:	4b04      	ldr	r3, [pc, #16]	; (80125b4 <STORAGE_IsReady_FS+0x58>)
 80125a4:	22ff      	movs	r2, #255	; 0xff
 80125a6:	701a      	strb	r2, [r3, #0]
    }
    return ret;
 80125a8:	f997 300f 	ldrsb.w	r3, [r7, #15]

//	return (USBD_OK);
  /* USER CODE END 4 */
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	24004d58 	.word	0x24004d58

080125b8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80125c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	370c      	adds	r7, #12
 80125c8:	46bd      	mov	sp, r7
 80125ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ce:	4770      	bx	lr

080125d0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b086      	sub	sp, #24
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60b9      	str	r1, [r7, #8]
 80125d8:	607a      	str	r2, [r7, #4]
 80125da:	461a      	mov	r2, r3
 80125dc:	4603      	mov	r3, r0
 80125de:	73fb      	strb	r3, [r7, #15]
 80125e0:	4613      	mov	r3, r2
 80125e2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	int8_t ret = -1;
 80125e4:	23ff      	movs	r3, #255	; 0xff
 80125e6:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80125e8:	f7fa fa32 	bl	800ca50 <BSP_SD_IsDetected>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00d      	beq.n	801260e <STORAGE_Read_FS+0x3e>
	  {
	    BSP_SD_ReadBlocks((uint32_t *) buf, blk_addr, blk_len, 0xff);
 80125f2:	89ba      	ldrh	r2, [r7, #12]
 80125f4:	23ff      	movs	r3, #255	; 0xff
 80125f6:	6879      	ldr	r1, [r7, #4]
 80125f8:	68b8      	ldr	r0, [r7, #8]
 80125fa:	f7fa f9cf 	bl	800c99c <BSP_SD_ReadBlocks>

	    // Wait until SD card is ready to use for new operation
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 80125fe:	bf00      	nop
 8012600:	f7fa fa08 	bl	800ca14 <BSP_SD_GetCardState>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d1fa      	bne.n	8012600 <STORAGE_Read_FS+0x30>
	    {
	    }

	    ret = 0;
 801260a:	2300      	movs	r3, #0
 801260c:	75fb      	strb	r3, [r7, #23]
	  }


 	/* memcpy(buf, usb_array, 512);*/
  return (USBD_OK);
 801260e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	60b9      	str	r1, [r7, #8]
 8012620:	607a      	str	r2, [r7, #4]
 8012622:	461a      	mov	r2, r3
 8012624:	4603      	mov	r3, r0
 8012626:	73fb      	strb	r3, [r7, #15]
 8012628:	4613      	mov	r3, r2
 801262a:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

	int8_t ret = -1;
 801262c:	23ff      	movs	r3, #255	; 0xff
 801262e:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8012630:	f7fa fa0e 	bl	800ca50 <BSP_SD_IsDetected>
 8012634:	4603      	mov	r3, r0
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00d      	beq.n	8012656 <STORAGE_Write_FS+0x3e>
	  {
	    BSP_SD_WriteBlocks((uint32_t *) buf, blk_addr, blk_len, 0xff);
 801263a:	89ba      	ldrh	r2, [r7, #12]
 801263c:	23ff      	movs	r3, #255	; 0xff
 801263e:	6879      	ldr	r1, [r7, #4]
 8012640:	68b8      	ldr	r0, [r7, #8]
 8012642:	f7fa f9c9 	bl	800c9d8 <BSP_SD_WriteBlocks>

	    // Wait until SD card is ready to use for new operation
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8012646:	bf00      	nop
 8012648:	f7fa f9e4 	bl	800ca14 <BSP_SD_GetCardState>
 801264c:	4603      	mov	r3, r0
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1fa      	bne.n	8012648 <STORAGE_Write_FS+0x30>
	    {
	    }

	    ret = 0;
 8012652:	2300      	movs	r3, #0
 8012654:	75fb      	strb	r3, [r7, #23]
	  }


	/*memcpy(usb_array, buf, 512);*/
  return (USBD_OK);
 8012656:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8012658:	4618      	mov	r0, r3
 801265a:	3718      	adds	r7, #24
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8012660:	b480      	push	{r7}
 8012662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8012664:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012666:	4618      	mov	r0, r3
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b08a      	sub	sp, #40	; 0x28
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012678:	f107 0314 	add.w	r3, r7, #20
 801267c:	2200      	movs	r2, #0
 801267e:	601a      	str	r2, [r3, #0]
 8012680:	605a      	str	r2, [r3, #4]
 8012682:	609a      	str	r2, [r3, #8]
 8012684:	60da      	str	r2, [r3, #12]
 8012686:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4a1e      	ldr	r2, [pc, #120]	; (8012708 <HAL_PCD_MspInit+0x98>)
 801268e:	4293      	cmp	r3, r2
 8012690:	d136      	bne.n	8012700 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012692:	4b1e      	ldr	r3, [pc, #120]	; (801270c <HAL_PCD_MspInit+0x9c>)
 8012694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012698:	4a1c      	ldr	r2, [pc, #112]	; (801270c <HAL_PCD_MspInit+0x9c>)
 801269a:	f043 0301 	orr.w	r3, r3, #1
 801269e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80126a2:	4b1a      	ldr	r3, [pc, #104]	; (801270c <HAL_PCD_MspInit+0x9c>)
 80126a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80126a8:	f003 0301 	and.w	r3, r3, #1
 80126ac:	613b      	str	r3, [r7, #16]
 80126ae:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80126b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80126b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80126b6:	2302      	movs	r3, #2
 80126b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80126ba:	2300      	movs	r3, #0
 80126bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80126be:	2300      	movs	r3, #0
 80126c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80126c2:	230a      	movs	r3, #10
 80126c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80126c6:	f107 0314 	add.w	r3, r7, #20
 80126ca:	4619      	mov	r1, r3
 80126cc:	4810      	ldr	r0, [pc, #64]	; (8012710 <HAL_PCD_MspInit+0xa0>)
 80126ce:	f7ef fad9 	bl	8001c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80126d2:	4b0e      	ldr	r3, [pc, #56]	; (801270c <HAL_PCD_MspInit+0x9c>)
 80126d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80126d8:	4a0c      	ldr	r2, [pc, #48]	; (801270c <HAL_PCD_MspInit+0x9c>)
 80126da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80126de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80126e2:	4b0a      	ldr	r3, [pc, #40]	; (801270c <HAL_PCD_MspInit+0x9c>)
 80126e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80126e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80126ec:	60fb      	str	r3, [r7, #12]
 80126ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80126f0:	2200      	movs	r2, #0
 80126f2:	2106      	movs	r1, #6
 80126f4:	2065      	movs	r0, #101	; 0x65
 80126f6:	f7ef fa9d 	bl	8001c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80126fa:	2065      	movs	r0, #101	; 0x65
 80126fc:	f7ef fab4 	bl	8001c68 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012700:	bf00      	nop
 8012702:	3728      	adds	r7, #40	; 0x28
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	40080000 	.word	0x40080000
 801270c:	58024400 	.word	0x58024400
 8012710:	58020000 	.word	0x58020000

08012714 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b082      	sub	sp, #8
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8012728:	4619      	mov	r1, r3
 801272a:	4610      	mov	r0, r2
 801272c:	f7fb ffc5 	bl	800e6ba <USBD_LL_SetupStage>
}
 8012730:	bf00      	nop
 8012732:	3708      	adds	r7, #8
 8012734:	46bd      	mov	sp, r7
 8012736:	bd80      	pop	{r7, pc}

08012738 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801274a:	78fa      	ldrb	r2, [r7, #3]
 801274c:	6879      	ldr	r1, [r7, #4]
 801274e:	4613      	mov	r3, r2
 8012750:	00db      	lsls	r3, r3, #3
 8012752:	1a9b      	subs	r3, r3, r2
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	440b      	add	r3, r1
 8012758:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	4619      	mov	r1, r3
 8012762:	f7fb fffd 	bl	800e760 <USBD_LL_DataOutStage>
}
 8012766:	bf00      	nop
 8012768:	3708      	adds	r7, #8
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	460b      	mov	r3, r1
 8012778:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8012780:	78fa      	ldrb	r2, [r7, #3]
 8012782:	6879      	ldr	r1, [r7, #4]
 8012784:	4613      	mov	r3, r2
 8012786:	00db      	lsls	r3, r3, #3
 8012788:	1a9b      	subs	r3, r3, r2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	440b      	add	r3, r1
 801278e:	3348      	adds	r3, #72	; 0x48
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	78fb      	ldrb	r3, [r7, #3]
 8012794:	4619      	mov	r1, r3
 8012796:	f7fc f846 	bl	800e826 <USBD_LL_DataInStage>
}
 801279a:	bf00      	nop
 801279c:	3708      	adds	r7, #8
 801279e:	46bd      	mov	sp, r7
 80127a0:	bd80      	pop	{r7, pc}

080127a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127a2:	b580      	push	{r7, lr}
 80127a4:	b082      	sub	sp, #8
 80127a6:	af00      	add	r7, sp, #0
 80127a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127b0:	4618      	mov	r0, r3
 80127b2:	f7fc f94a 	bl	800ea4a <USBD_LL_SOF>
}
 80127b6:	bf00      	nop
 80127b8:	3708      	adds	r7, #8
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}

080127be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80127be:	b580      	push	{r7, lr}
 80127c0:	b084      	sub	sp, #16
 80127c2:	af00      	add	r7, sp, #0
 80127c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80127c6:	2301      	movs	r3, #1
 80127c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	68db      	ldr	r3, [r3, #12]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d102      	bne.n	80127d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80127d2:	2300      	movs	r3, #0
 80127d4:	73fb      	strb	r3, [r7, #15]
 80127d6:	e008      	b.n	80127ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	2b02      	cmp	r3, #2
 80127de:	d102      	bne.n	80127e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80127e0:	2301      	movs	r3, #1
 80127e2:	73fb      	strb	r3, [r7, #15]
 80127e4:	e001      	b.n	80127ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80127e6:	f7ee fdc1 	bl	800136c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80127f0:	7bfa      	ldrb	r2, [r7, #15]
 80127f2:	4611      	mov	r1, r2
 80127f4:	4618      	mov	r0, r3
 80127f6:	f7fc f8ed 	bl	800e9d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8012800:	4618      	mov	r0, r3
 8012802:	f7fc f8a6 	bl	800e952 <USBD_LL_Reset>
}
 8012806:	bf00      	nop
 8012808:	3710      	adds	r7, #16
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
	...

08012810 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b082      	sub	sp, #8
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801281e:	4618      	mov	r0, r3
 8012820:	f7fc f8e8 	bl	800e9f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	687a      	ldr	r2, [r7, #4]
 8012830:	6812      	ldr	r2, [r2, #0]
 8012832:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012836:	f043 0301 	orr.w	r3, r3, #1
 801283a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	6a1b      	ldr	r3, [r3, #32]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d005      	beq.n	8012850 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012844:	4b04      	ldr	r3, [pc, #16]	; (8012858 <HAL_PCD_SuspendCallback+0x48>)
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	4a03      	ldr	r2, [pc, #12]	; (8012858 <HAL_PCD_SuspendCallback+0x48>)
 801284a:	f043 0306 	orr.w	r3, r3, #6
 801284e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012850:	bf00      	nop
 8012852:	3708      	adds	r7, #8
 8012854:	46bd      	mov	sp, r7
 8012856:	bd80      	pop	{r7, pc}
 8012858:	e000ed00 	.word	0xe000ed00

0801285c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b082      	sub	sp, #8
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801286a:	4618      	mov	r0, r3
 801286c:	f7fc f8d7 	bl	800ea1e <USBD_LL_Resume>
}
 8012870:	bf00      	nop
 8012872:	3708      	adds	r7, #8
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}

08012878 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b082      	sub	sp, #8
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	460b      	mov	r3, r1
 8012882:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801288a:	78fa      	ldrb	r2, [r7, #3]
 801288c:	4611      	mov	r1, r2
 801288e:	4618      	mov	r0, r3
 8012890:	f7fc f902 	bl	800ea98 <USBD_LL_IsoOUTIncomplete>
}
 8012894:	bf00      	nop
 8012896:	3708      	adds	r7, #8
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}

0801289c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
 80128a4:	460b      	mov	r3, r1
 80128a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ae:	78fa      	ldrb	r2, [r7, #3]
 80128b0:	4611      	mov	r1, r2
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7fc f8e3 	bl	800ea7e <USBD_LL_IsoINIncomplete>
}
 80128b8:	bf00      	nop
 80128ba:	3708      	adds	r7, #8
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd80      	pop	{r7, pc}

080128c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
 80128c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7fc f8ef 	bl	800eab2 <USBD_LL_DevConnected>
}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b082      	sub	sp, #8
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fc f8ec 	bl	800eac8 <USBD_LL_DevDisconnected>
}
 80128f0:	bf00      	nop
 80128f2:	3708      	adds	r7, #8
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}

080128f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d13e      	bne.n	8012986 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012908:	4a21      	ldr	r2, [pc, #132]	; (8012990 <USBD_LL_Init+0x98>)
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	4a1f      	ldr	r2, [pc, #124]	; (8012990 <USBD_LL_Init+0x98>)
 8012914:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012918:	4b1d      	ldr	r3, [pc, #116]	; (8012990 <USBD_LL_Init+0x98>)
 801291a:	4a1e      	ldr	r2, [pc, #120]	; (8012994 <USBD_LL_Init+0x9c>)
 801291c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801291e:	4b1c      	ldr	r3, [pc, #112]	; (8012990 <USBD_LL_Init+0x98>)
 8012920:	2209      	movs	r2, #9
 8012922:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012924:	4b1a      	ldr	r3, [pc, #104]	; (8012990 <USBD_LL_Init+0x98>)
 8012926:	2202      	movs	r2, #2
 8012928:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801292a:	4b19      	ldr	r3, [pc, #100]	; (8012990 <USBD_LL_Init+0x98>)
 801292c:	2200      	movs	r2, #0
 801292e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012930:	4b17      	ldr	r3, [pc, #92]	; (8012990 <USBD_LL_Init+0x98>)
 8012932:	2202      	movs	r2, #2
 8012934:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012936:	4b16      	ldr	r3, [pc, #88]	; (8012990 <USBD_LL_Init+0x98>)
 8012938:	2200      	movs	r2, #0
 801293a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801293c:	4b14      	ldr	r3, [pc, #80]	; (8012990 <USBD_LL_Init+0x98>)
 801293e:	2200      	movs	r2, #0
 8012940:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012942:	4b13      	ldr	r3, [pc, #76]	; (8012990 <USBD_LL_Init+0x98>)
 8012944:	2200      	movs	r2, #0
 8012946:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8012948:	4b11      	ldr	r3, [pc, #68]	; (8012990 <USBD_LL_Init+0x98>)
 801294a:	2200      	movs	r2, #0
 801294c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801294e:	4b10      	ldr	r3, [pc, #64]	; (8012990 <USBD_LL_Init+0x98>)
 8012950:	2200      	movs	r2, #0
 8012952:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012954:	4b0e      	ldr	r3, [pc, #56]	; (8012990 <USBD_LL_Init+0x98>)
 8012956:	2200      	movs	r2, #0
 8012958:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801295a:	480d      	ldr	r0, [pc, #52]	; (8012990 <USBD_LL_Init+0x98>)
 801295c:	f7ef ff03 	bl	8002766 <HAL_PCD_Init>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d001      	beq.n	801296a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012966:	f7ee fd01 	bl	800136c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801296a:	2180      	movs	r1, #128	; 0x80
 801296c:	4808      	ldr	r0, [pc, #32]	; (8012990 <USBD_LL_Init+0x98>)
 801296e:	f7f1 f8c2 	bl	8003af6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012972:	2240      	movs	r2, #64	; 0x40
 8012974:	2100      	movs	r1, #0
 8012976:	4806      	ldr	r0, [pc, #24]	; (8012990 <USBD_LL_Init+0x98>)
 8012978:	f7f1 f876 	bl	8003a68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801297c:	2280      	movs	r2, #128	; 0x80
 801297e:	2101      	movs	r1, #1
 8012980:	4803      	ldr	r0, [pc, #12]	; (8012990 <USBD_LL_Init+0x98>)
 8012982:	f7f1 f871 	bl	8003a68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012986:	2300      	movs	r3, #0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3708      	adds	r7, #8
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	240058e0 	.word	0x240058e0
 8012994:	40080000 	.word	0x40080000

08012998 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b084      	sub	sp, #16
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129a0:	2300      	movs	r3, #0
 80129a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129a4:	2300      	movs	r3, #0
 80129a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80129ae:	4618      	mov	r0, r3
 80129b0:	f7ef fffd 	bl	80029ae <HAL_PCD_Start>
 80129b4:	4603      	mov	r3, r0
 80129b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80129b8:	7bfb      	ldrb	r3, [r7, #15]
 80129ba:	4618      	mov	r0, r3
 80129bc:	f000 f94a 	bl	8012c54 <USBD_Get_USB_Status>
 80129c0:	4603      	mov	r3, r0
 80129c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80129c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3710      	adds	r7, #16
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}

080129ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b084      	sub	sp, #16
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
 80129d6:	4608      	mov	r0, r1
 80129d8:	4611      	mov	r1, r2
 80129da:	461a      	mov	r2, r3
 80129dc:	4603      	mov	r3, r0
 80129de:	70fb      	strb	r3, [r7, #3]
 80129e0:	460b      	mov	r3, r1
 80129e2:	70bb      	strb	r3, [r7, #2]
 80129e4:	4613      	mov	r3, r2
 80129e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80129e8:	2300      	movs	r3, #0
 80129ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80129ec:	2300      	movs	r3, #0
 80129ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80129f6:	78bb      	ldrb	r3, [r7, #2]
 80129f8:	883a      	ldrh	r2, [r7, #0]
 80129fa:	78f9      	ldrb	r1, [r7, #3]
 80129fc:	f7f0 fc0e 	bl	800321c <HAL_PCD_EP_Open>
 8012a00:	4603      	mov	r3, r0
 8012a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a04:	7bfb      	ldrb	r3, [r7, #15]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 f924 	bl	8012c54 <USBD_Get_USB_Status>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	3710      	adds	r7, #16
 8012a16:	46bd      	mov	sp, r7
 8012a18:	bd80      	pop	{r7, pc}

08012a1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a1a:	b580      	push	{r7, lr}
 8012a1c:	b084      	sub	sp, #16
 8012a1e:	af00      	add	r7, sp, #0
 8012a20:	6078      	str	r0, [r7, #4]
 8012a22:	460b      	mov	r3, r1
 8012a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a26:	2300      	movs	r3, #0
 8012a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a34:	78fa      	ldrb	r2, [r7, #3]
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7f0 fc57 	bl	80032ec <HAL_PCD_EP_Close>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a42:	7bfb      	ldrb	r3, [r7, #15]
 8012a44:	4618      	mov	r0, r3
 8012a46:	f000 f905 	bl	8012c54 <USBD_Get_USB_Status>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3710      	adds	r7, #16
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	460b      	mov	r3, r1
 8012a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012a64:	2300      	movs	r3, #0
 8012a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012a72:	78fa      	ldrb	r2, [r7, #3]
 8012a74:	4611      	mov	r1, r2
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7f0 fde9 	bl	800364e <HAL_PCD_EP_Flush>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012a80:	7bfb      	ldrb	r3, [r7, #15]
 8012a82:	4618      	mov	r0, r3
 8012a84:	f000 f8e6 	bl	8012c54 <USBD_Get_USB_Status>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b084      	sub	sp, #16
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	6078      	str	r0, [r7, #4]
 8012a9e:	460b      	mov	r3, r1
 8012aa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012ab0:	78fa      	ldrb	r2, [r7, #3]
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7f0 fd10 	bl	80034da <HAL_PCD_EP_SetStall>
 8012aba:	4603      	mov	r3, r0
 8012abc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012abe:	7bfb      	ldrb	r3, [r7, #15]
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f000 f8c7 	bl	8012c54 <USBD_Get_USB_Status>
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012aca:	7bbb      	ldrb	r3, [r7, #14]
}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3710      	adds	r7, #16
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b084      	sub	sp, #16
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	460b      	mov	r3, r1
 8012ade:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012aee:	78fa      	ldrb	r2, [r7, #3]
 8012af0:	4611      	mov	r1, r2
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7f0 fd55 	bl	80035a2 <HAL_PCD_EP_ClrStall>
 8012af8:	4603      	mov	r3, r0
 8012afa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012afc:	7bfb      	ldrb	r3, [r7, #15]
 8012afe:	4618      	mov	r0, r3
 8012b00:	f000 f8a8 	bl	8012c54 <USBD_Get_USB_Status>
 8012b04:	4603      	mov	r3, r0
 8012b06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b08:	7bbb      	ldrb	r3, [r7, #14]
}
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	3710      	adds	r7, #16
 8012b0e:	46bd      	mov	sp, r7
 8012b10:	bd80      	pop	{r7, pc}

08012b12 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012b12:	b480      	push	{r7}
 8012b14:	b085      	sub	sp, #20
 8012b16:	af00      	add	r7, sp, #0
 8012b18:	6078      	str	r0, [r7, #4]
 8012b1a:	460b      	mov	r3, r1
 8012b1c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b24:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	da0b      	bge.n	8012b46 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012b2e:	78fb      	ldrb	r3, [r7, #3]
 8012b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012b34:	68f9      	ldr	r1, [r7, #12]
 8012b36:	4613      	mov	r3, r2
 8012b38:	00db      	lsls	r3, r3, #3
 8012b3a:	1a9b      	subs	r3, r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	440b      	add	r3, r1
 8012b40:	333e      	adds	r3, #62	; 0x3e
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	e00b      	b.n	8012b5e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012b46:	78fb      	ldrb	r3, [r7, #3]
 8012b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012b4c:	68f9      	ldr	r1, [r7, #12]
 8012b4e:	4613      	mov	r3, r2
 8012b50:	00db      	lsls	r3, r3, #3
 8012b52:	1a9b      	subs	r3, r3, r2
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	440b      	add	r3, r1
 8012b58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3714      	adds	r7, #20
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr

08012b6a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012b6a:	b580      	push	{r7, lr}
 8012b6c:	b084      	sub	sp, #16
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	6078      	str	r0, [r7, #4]
 8012b72:	460b      	mov	r3, r1
 8012b74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012b76:	2300      	movs	r3, #0
 8012b78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012b84:	78fa      	ldrb	r2, [r7, #3]
 8012b86:	4611      	mov	r1, r2
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7f0 fb22 	bl	80031d2 <HAL_PCD_SetAddress>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
 8012b94:	4618      	mov	r0, r3
 8012b96:	f000 f85d 	bl	8012c54 <USBD_Get_USB_Status>
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3710      	adds	r7, #16
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b086      	sub	sp, #24
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	60f8      	str	r0, [r7, #12]
 8012bb0:	607a      	str	r2, [r7, #4]
 8012bb2:	603b      	str	r3, [r7, #0]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012bc6:	7af9      	ldrb	r1, [r7, #11]
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	f7f0 fc3b 	bl	8003446 <HAL_PCD_EP_Transmit>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012bd4:	7dfb      	ldrb	r3, [r7, #23]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f000 f83c 	bl	8012c54 <USBD_Get_USB_Status>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012be0:	7dbb      	ldrb	r3, [r7, #22]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3718      	adds	r7, #24
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}

08012bea <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b086      	sub	sp, #24
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	60f8      	str	r0, [r7, #12]
 8012bf2:	607a      	str	r2, [r7, #4]
 8012bf4:	603b      	str	r3, [r7, #0]
 8012bf6:	460b      	mov	r3, r1
 8012bf8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012c08:	7af9      	ldrb	r1, [r7, #11]
 8012c0a:	683b      	ldr	r3, [r7, #0]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	f7f0 fbb7 	bl	8003380 <HAL_PCD_EP_Receive>
 8012c12:	4603      	mov	r3, r0
 8012c14:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c16:	7dfb      	ldrb	r3, [r7, #23]
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f000 f81b 	bl	8012c54 <USBD_Get_USB_Status>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012c22:	7dbb      	ldrb	r3, [r7, #22]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3718      	adds	r7, #24
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012c3e:	78fa      	ldrb	r2, [r7, #3]
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7f0 fbe7 	bl	8003416 <HAL_PCD_EP_GetRxCount>
 8012c48:	4603      	mov	r3, r0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	3708      	adds	r7, #8
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	bd80      	pop	{r7, pc}
	...

08012c54 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b085      	sub	sp, #20
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c5e:	2300      	movs	r3, #0
 8012c60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012c62:	79fb      	ldrb	r3, [r7, #7]
 8012c64:	2b03      	cmp	r3, #3
 8012c66:	d817      	bhi.n	8012c98 <USBD_Get_USB_Status+0x44>
 8012c68:	a201      	add	r2, pc, #4	; (adr r2, 8012c70 <USBD_Get_USB_Status+0x1c>)
 8012c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c6e:	bf00      	nop
 8012c70:	08012c81 	.word	0x08012c81
 8012c74:	08012c87 	.word	0x08012c87
 8012c78:	08012c8d 	.word	0x08012c8d
 8012c7c:	08012c93 	.word	0x08012c93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012c80:	2300      	movs	r3, #0
 8012c82:	73fb      	strb	r3, [r7, #15]
    break;
 8012c84:	e00b      	b.n	8012c9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012c86:	2303      	movs	r3, #3
 8012c88:	73fb      	strb	r3, [r7, #15]
    break;
 8012c8a:	e008      	b.n	8012c9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	73fb      	strb	r3, [r7, #15]
    break;
 8012c90:	e005      	b.n	8012c9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012c92:	2303      	movs	r3, #3
 8012c94:	73fb      	strb	r3, [r7, #15]
    break;
 8012c96:	e002      	b.n	8012c9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012c98:	2303      	movs	r3, #3
 8012c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8012c9c:	bf00      	nop
  }
  return usb_status;
 8012c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	3714      	adds	r7, #20
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <atoi>:
 8012cac:	220a      	movs	r2, #10
 8012cae:	2100      	movs	r1, #0
 8012cb0:	f000 b9c6 	b.w	8013040 <strtol>

08012cb4 <__errno>:
 8012cb4:	4b01      	ldr	r3, [pc, #4]	; (8012cbc <__errno+0x8>)
 8012cb6:	6818      	ldr	r0, [r3, #0]
 8012cb8:	4770      	bx	lr
 8012cba:	bf00      	nop
 8012cbc:	24000200 	.word	0x24000200

08012cc0 <__libc_init_array>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4e0d      	ldr	r6, [pc, #52]	; (8012cf8 <__libc_init_array+0x38>)
 8012cc4:	4c0d      	ldr	r4, [pc, #52]	; (8012cfc <__libc_init_array+0x3c>)
 8012cc6:	1ba4      	subs	r4, r4, r6
 8012cc8:	10a4      	asrs	r4, r4, #2
 8012cca:	2500      	movs	r5, #0
 8012ccc:	42a5      	cmp	r5, r4
 8012cce:	d109      	bne.n	8012ce4 <__libc_init_array+0x24>
 8012cd0:	4e0b      	ldr	r6, [pc, #44]	; (8012d00 <__libc_init_array+0x40>)
 8012cd2:	4c0c      	ldr	r4, [pc, #48]	; (8012d04 <__libc_init_array+0x44>)
 8012cd4:	f000 f9ee 	bl	80130b4 <_init>
 8012cd8:	1ba4      	subs	r4, r4, r6
 8012cda:	10a4      	asrs	r4, r4, #2
 8012cdc:	2500      	movs	r5, #0
 8012cde:	42a5      	cmp	r5, r4
 8012ce0:	d105      	bne.n	8012cee <__libc_init_array+0x2e>
 8012ce2:	bd70      	pop	{r4, r5, r6, pc}
 8012ce4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ce8:	4798      	blx	r3
 8012cea:	3501      	adds	r5, #1
 8012cec:	e7ee      	b.n	8012ccc <__libc_init_array+0xc>
 8012cee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012cf2:	4798      	blx	r3
 8012cf4:	3501      	adds	r5, #1
 8012cf6:	e7f2      	b.n	8012cde <__libc_init_array+0x1e>
 8012cf8:	080133d0 	.word	0x080133d0
 8012cfc:	080133d0 	.word	0x080133d0
 8012d00:	080133d0 	.word	0x080133d0
 8012d04:	080133d4 	.word	0x080133d4

08012d08 <malloc>:
 8012d08:	4b02      	ldr	r3, [pc, #8]	; (8012d14 <malloc+0xc>)
 8012d0a:	4601      	mov	r1, r0
 8012d0c:	6818      	ldr	r0, [r3, #0]
 8012d0e:	f000 b885 	b.w	8012e1c <_malloc_r>
 8012d12:	bf00      	nop
 8012d14:	24000200 	.word	0x24000200

08012d18 <free>:
 8012d18:	4b02      	ldr	r3, [pc, #8]	; (8012d24 <free+0xc>)
 8012d1a:	4601      	mov	r1, r0
 8012d1c:	6818      	ldr	r0, [r3, #0]
 8012d1e:	f000 b82f 	b.w	8012d80 <_free_r>
 8012d22:	bf00      	nop
 8012d24:	24000200 	.word	0x24000200

08012d28 <memcpy>:
 8012d28:	b510      	push	{r4, lr}
 8012d2a:	1e43      	subs	r3, r0, #1
 8012d2c:	440a      	add	r2, r1
 8012d2e:	4291      	cmp	r1, r2
 8012d30:	d100      	bne.n	8012d34 <memcpy+0xc>
 8012d32:	bd10      	pop	{r4, pc}
 8012d34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d3c:	e7f7      	b.n	8012d2e <memcpy+0x6>

08012d3e <memmove>:
 8012d3e:	4288      	cmp	r0, r1
 8012d40:	b510      	push	{r4, lr}
 8012d42:	eb01 0302 	add.w	r3, r1, r2
 8012d46:	d807      	bhi.n	8012d58 <memmove+0x1a>
 8012d48:	1e42      	subs	r2, r0, #1
 8012d4a:	4299      	cmp	r1, r3
 8012d4c:	d00a      	beq.n	8012d64 <memmove+0x26>
 8012d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012d56:	e7f8      	b.n	8012d4a <memmove+0xc>
 8012d58:	4283      	cmp	r3, r0
 8012d5a:	d9f5      	bls.n	8012d48 <memmove+0xa>
 8012d5c:	1881      	adds	r1, r0, r2
 8012d5e:	1ad2      	subs	r2, r2, r3
 8012d60:	42d3      	cmn	r3, r2
 8012d62:	d100      	bne.n	8012d66 <memmove+0x28>
 8012d64:	bd10      	pop	{r4, pc}
 8012d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012d6e:	e7f7      	b.n	8012d60 <memmove+0x22>

08012d70 <memset>:
 8012d70:	4402      	add	r2, r0
 8012d72:	4603      	mov	r3, r0
 8012d74:	4293      	cmp	r3, r2
 8012d76:	d100      	bne.n	8012d7a <memset+0xa>
 8012d78:	4770      	bx	lr
 8012d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8012d7e:	e7f9      	b.n	8012d74 <memset+0x4>

08012d80 <_free_r>:
 8012d80:	b538      	push	{r3, r4, r5, lr}
 8012d82:	4605      	mov	r5, r0
 8012d84:	2900      	cmp	r1, #0
 8012d86:	d045      	beq.n	8012e14 <_free_r+0x94>
 8012d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d8c:	1f0c      	subs	r4, r1, #4
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	bfb8      	it	lt
 8012d92:	18e4      	addlt	r4, r4, r3
 8012d94:	f000 f97f 	bl	8013096 <__malloc_lock>
 8012d98:	4a1f      	ldr	r2, [pc, #124]	; (8012e18 <_free_r+0x98>)
 8012d9a:	6813      	ldr	r3, [r2, #0]
 8012d9c:	4610      	mov	r0, r2
 8012d9e:	b933      	cbnz	r3, 8012dae <_free_r+0x2e>
 8012da0:	6063      	str	r3, [r4, #4]
 8012da2:	6014      	str	r4, [r2, #0]
 8012da4:	4628      	mov	r0, r5
 8012da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012daa:	f000 b975 	b.w	8013098 <__malloc_unlock>
 8012dae:	42a3      	cmp	r3, r4
 8012db0:	d90c      	bls.n	8012dcc <_free_r+0x4c>
 8012db2:	6821      	ldr	r1, [r4, #0]
 8012db4:	1862      	adds	r2, r4, r1
 8012db6:	4293      	cmp	r3, r2
 8012db8:	bf04      	itt	eq
 8012dba:	681a      	ldreq	r2, [r3, #0]
 8012dbc:	685b      	ldreq	r3, [r3, #4]
 8012dbe:	6063      	str	r3, [r4, #4]
 8012dc0:	bf04      	itt	eq
 8012dc2:	1852      	addeq	r2, r2, r1
 8012dc4:	6022      	streq	r2, [r4, #0]
 8012dc6:	6004      	str	r4, [r0, #0]
 8012dc8:	e7ec      	b.n	8012da4 <_free_r+0x24>
 8012dca:	4613      	mov	r3, r2
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	b10a      	cbz	r2, 8012dd4 <_free_r+0x54>
 8012dd0:	42a2      	cmp	r2, r4
 8012dd2:	d9fa      	bls.n	8012dca <_free_r+0x4a>
 8012dd4:	6819      	ldr	r1, [r3, #0]
 8012dd6:	1858      	adds	r0, r3, r1
 8012dd8:	42a0      	cmp	r0, r4
 8012dda:	d10b      	bne.n	8012df4 <_free_r+0x74>
 8012ddc:	6820      	ldr	r0, [r4, #0]
 8012dde:	4401      	add	r1, r0
 8012de0:	1858      	adds	r0, r3, r1
 8012de2:	4282      	cmp	r2, r0
 8012de4:	6019      	str	r1, [r3, #0]
 8012de6:	d1dd      	bne.n	8012da4 <_free_r+0x24>
 8012de8:	6810      	ldr	r0, [r2, #0]
 8012dea:	6852      	ldr	r2, [r2, #4]
 8012dec:	605a      	str	r2, [r3, #4]
 8012dee:	4401      	add	r1, r0
 8012df0:	6019      	str	r1, [r3, #0]
 8012df2:	e7d7      	b.n	8012da4 <_free_r+0x24>
 8012df4:	d902      	bls.n	8012dfc <_free_r+0x7c>
 8012df6:	230c      	movs	r3, #12
 8012df8:	602b      	str	r3, [r5, #0]
 8012dfa:	e7d3      	b.n	8012da4 <_free_r+0x24>
 8012dfc:	6820      	ldr	r0, [r4, #0]
 8012dfe:	1821      	adds	r1, r4, r0
 8012e00:	428a      	cmp	r2, r1
 8012e02:	bf04      	itt	eq
 8012e04:	6811      	ldreq	r1, [r2, #0]
 8012e06:	6852      	ldreq	r2, [r2, #4]
 8012e08:	6062      	str	r2, [r4, #4]
 8012e0a:	bf04      	itt	eq
 8012e0c:	1809      	addeq	r1, r1, r0
 8012e0e:	6021      	streq	r1, [r4, #0]
 8012e10:	605c      	str	r4, [r3, #4]
 8012e12:	e7c7      	b.n	8012da4 <_free_r+0x24>
 8012e14:	bd38      	pop	{r3, r4, r5, pc}
 8012e16:	bf00      	nop
 8012e18:	24004d5c 	.word	0x24004d5c

08012e1c <_malloc_r>:
 8012e1c:	b570      	push	{r4, r5, r6, lr}
 8012e1e:	1ccd      	adds	r5, r1, #3
 8012e20:	f025 0503 	bic.w	r5, r5, #3
 8012e24:	3508      	adds	r5, #8
 8012e26:	2d0c      	cmp	r5, #12
 8012e28:	bf38      	it	cc
 8012e2a:	250c      	movcc	r5, #12
 8012e2c:	2d00      	cmp	r5, #0
 8012e2e:	4606      	mov	r6, r0
 8012e30:	db01      	blt.n	8012e36 <_malloc_r+0x1a>
 8012e32:	42a9      	cmp	r1, r5
 8012e34:	d903      	bls.n	8012e3e <_malloc_r+0x22>
 8012e36:	230c      	movs	r3, #12
 8012e38:	6033      	str	r3, [r6, #0]
 8012e3a:	2000      	movs	r0, #0
 8012e3c:	bd70      	pop	{r4, r5, r6, pc}
 8012e3e:	f000 f92a 	bl	8013096 <__malloc_lock>
 8012e42:	4a21      	ldr	r2, [pc, #132]	; (8012ec8 <_malloc_r+0xac>)
 8012e44:	6814      	ldr	r4, [r2, #0]
 8012e46:	4621      	mov	r1, r4
 8012e48:	b991      	cbnz	r1, 8012e70 <_malloc_r+0x54>
 8012e4a:	4c20      	ldr	r4, [pc, #128]	; (8012ecc <_malloc_r+0xb0>)
 8012e4c:	6823      	ldr	r3, [r4, #0]
 8012e4e:	b91b      	cbnz	r3, 8012e58 <_malloc_r+0x3c>
 8012e50:	4630      	mov	r0, r6
 8012e52:	f000 f83d 	bl	8012ed0 <_sbrk_r>
 8012e56:	6020      	str	r0, [r4, #0]
 8012e58:	4629      	mov	r1, r5
 8012e5a:	4630      	mov	r0, r6
 8012e5c:	f000 f838 	bl	8012ed0 <_sbrk_r>
 8012e60:	1c43      	adds	r3, r0, #1
 8012e62:	d124      	bne.n	8012eae <_malloc_r+0x92>
 8012e64:	230c      	movs	r3, #12
 8012e66:	6033      	str	r3, [r6, #0]
 8012e68:	4630      	mov	r0, r6
 8012e6a:	f000 f915 	bl	8013098 <__malloc_unlock>
 8012e6e:	e7e4      	b.n	8012e3a <_malloc_r+0x1e>
 8012e70:	680b      	ldr	r3, [r1, #0]
 8012e72:	1b5b      	subs	r3, r3, r5
 8012e74:	d418      	bmi.n	8012ea8 <_malloc_r+0x8c>
 8012e76:	2b0b      	cmp	r3, #11
 8012e78:	d90f      	bls.n	8012e9a <_malloc_r+0x7e>
 8012e7a:	600b      	str	r3, [r1, #0]
 8012e7c:	50cd      	str	r5, [r1, r3]
 8012e7e:	18cc      	adds	r4, r1, r3
 8012e80:	4630      	mov	r0, r6
 8012e82:	f000 f909 	bl	8013098 <__malloc_unlock>
 8012e86:	f104 000b 	add.w	r0, r4, #11
 8012e8a:	1d23      	adds	r3, r4, #4
 8012e8c:	f020 0007 	bic.w	r0, r0, #7
 8012e90:	1ac3      	subs	r3, r0, r3
 8012e92:	d0d3      	beq.n	8012e3c <_malloc_r+0x20>
 8012e94:	425a      	negs	r2, r3
 8012e96:	50e2      	str	r2, [r4, r3]
 8012e98:	e7d0      	b.n	8012e3c <_malloc_r+0x20>
 8012e9a:	428c      	cmp	r4, r1
 8012e9c:	684b      	ldr	r3, [r1, #4]
 8012e9e:	bf16      	itet	ne
 8012ea0:	6063      	strne	r3, [r4, #4]
 8012ea2:	6013      	streq	r3, [r2, #0]
 8012ea4:	460c      	movne	r4, r1
 8012ea6:	e7eb      	b.n	8012e80 <_malloc_r+0x64>
 8012ea8:	460c      	mov	r4, r1
 8012eaa:	6849      	ldr	r1, [r1, #4]
 8012eac:	e7cc      	b.n	8012e48 <_malloc_r+0x2c>
 8012eae:	1cc4      	adds	r4, r0, #3
 8012eb0:	f024 0403 	bic.w	r4, r4, #3
 8012eb4:	42a0      	cmp	r0, r4
 8012eb6:	d005      	beq.n	8012ec4 <_malloc_r+0xa8>
 8012eb8:	1a21      	subs	r1, r4, r0
 8012eba:	4630      	mov	r0, r6
 8012ebc:	f000 f808 	bl	8012ed0 <_sbrk_r>
 8012ec0:	3001      	adds	r0, #1
 8012ec2:	d0cf      	beq.n	8012e64 <_malloc_r+0x48>
 8012ec4:	6025      	str	r5, [r4, #0]
 8012ec6:	e7db      	b.n	8012e80 <_malloc_r+0x64>
 8012ec8:	24004d5c 	.word	0x24004d5c
 8012ecc:	24004d60 	.word	0x24004d60

08012ed0 <_sbrk_r>:
 8012ed0:	b538      	push	{r3, r4, r5, lr}
 8012ed2:	4c06      	ldr	r4, [pc, #24]	; (8012eec <_sbrk_r+0x1c>)
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	4605      	mov	r5, r0
 8012ed8:	4608      	mov	r0, r1
 8012eda:	6023      	str	r3, [r4, #0]
 8012edc:	f7ee fc7c 	bl	80017d8 <_sbrk>
 8012ee0:	1c43      	adds	r3, r0, #1
 8012ee2:	d102      	bne.n	8012eea <_sbrk_r+0x1a>
 8012ee4:	6823      	ldr	r3, [r4, #0]
 8012ee6:	b103      	cbz	r3, 8012eea <_sbrk_r+0x1a>
 8012ee8:	602b      	str	r3, [r5, #0]
 8012eea:	bd38      	pop	{r3, r4, r5, pc}
 8012eec:	24005ce8 	.word	0x24005ce8

08012ef0 <strncmp>:
 8012ef0:	b510      	push	{r4, lr}
 8012ef2:	b16a      	cbz	r2, 8012f10 <strncmp+0x20>
 8012ef4:	3901      	subs	r1, #1
 8012ef6:	1884      	adds	r4, r0, r2
 8012ef8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8012efc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d103      	bne.n	8012f0c <strncmp+0x1c>
 8012f04:	42a0      	cmp	r0, r4
 8012f06:	d001      	beq.n	8012f0c <strncmp+0x1c>
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d1f5      	bne.n	8012ef8 <strncmp+0x8>
 8012f0c:	1a98      	subs	r0, r3, r2
 8012f0e:	bd10      	pop	{r4, pc}
 8012f10:	4610      	mov	r0, r2
 8012f12:	e7fc      	b.n	8012f0e <strncmp+0x1e>

08012f14 <strstr>:
 8012f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f16:	7803      	ldrb	r3, [r0, #0]
 8012f18:	b17b      	cbz	r3, 8012f3a <strstr+0x26>
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	7823      	ldrb	r3, [r4, #0]
 8012f1e:	4620      	mov	r0, r4
 8012f20:	1c66      	adds	r6, r4, #1
 8012f22:	b17b      	cbz	r3, 8012f44 <strstr+0x30>
 8012f24:	1e4a      	subs	r2, r1, #1
 8012f26:	1e63      	subs	r3, r4, #1
 8012f28:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8012f2c:	b14d      	cbz	r5, 8012f42 <strstr+0x2e>
 8012f2e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8012f32:	42af      	cmp	r7, r5
 8012f34:	4634      	mov	r4, r6
 8012f36:	d0f7      	beq.n	8012f28 <strstr+0x14>
 8012f38:	e7f0      	b.n	8012f1c <strstr+0x8>
 8012f3a:	780b      	ldrb	r3, [r1, #0]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	bf18      	it	ne
 8012f40:	2000      	movne	r0, #0
 8012f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f44:	4618      	mov	r0, r3
 8012f46:	e7fc      	b.n	8012f42 <strstr+0x2e>

08012f48 <_strtol_l.isra.0>:
 8012f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f4c:	4680      	mov	r8, r0
 8012f4e:	4689      	mov	r9, r1
 8012f50:	4692      	mov	sl, r2
 8012f52:	461e      	mov	r6, r3
 8012f54:	460f      	mov	r7, r1
 8012f56:	463d      	mov	r5, r7
 8012f58:	9808      	ldr	r0, [sp, #32]
 8012f5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f5e:	f000 f885 	bl	801306c <__locale_ctype_ptr_l>
 8012f62:	4420      	add	r0, r4
 8012f64:	7843      	ldrb	r3, [r0, #1]
 8012f66:	f013 0308 	ands.w	r3, r3, #8
 8012f6a:	d132      	bne.n	8012fd2 <_strtol_l.isra.0+0x8a>
 8012f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8012f6e:	d132      	bne.n	8012fd6 <_strtol_l.isra.0+0x8e>
 8012f70:	787c      	ldrb	r4, [r7, #1]
 8012f72:	1cbd      	adds	r5, r7, #2
 8012f74:	2201      	movs	r2, #1
 8012f76:	2e00      	cmp	r6, #0
 8012f78:	d05d      	beq.n	8013036 <_strtol_l.isra.0+0xee>
 8012f7a:	2e10      	cmp	r6, #16
 8012f7c:	d109      	bne.n	8012f92 <_strtol_l.isra.0+0x4a>
 8012f7e:	2c30      	cmp	r4, #48	; 0x30
 8012f80:	d107      	bne.n	8012f92 <_strtol_l.isra.0+0x4a>
 8012f82:	782b      	ldrb	r3, [r5, #0]
 8012f84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012f88:	2b58      	cmp	r3, #88	; 0x58
 8012f8a:	d14f      	bne.n	801302c <_strtol_l.isra.0+0xe4>
 8012f8c:	786c      	ldrb	r4, [r5, #1]
 8012f8e:	2610      	movs	r6, #16
 8012f90:	3502      	adds	r5, #2
 8012f92:	2a00      	cmp	r2, #0
 8012f94:	bf14      	ite	ne
 8012f96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012f9a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012f9e:	2700      	movs	r7, #0
 8012fa0:	fbb1 fcf6 	udiv	ip, r1, r6
 8012fa4:	4638      	mov	r0, r7
 8012fa6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012faa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012fae:	2b09      	cmp	r3, #9
 8012fb0:	d817      	bhi.n	8012fe2 <_strtol_l.isra.0+0x9a>
 8012fb2:	461c      	mov	r4, r3
 8012fb4:	42a6      	cmp	r6, r4
 8012fb6:	dd23      	ble.n	8013000 <_strtol_l.isra.0+0xb8>
 8012fb8:	1c7b      	adds	r3, r7, #1
 8012fba:	d007      	beq.n	8012fcc <_strtol_l.isra.0+0x84>
 8012fbc:	4584      	cmp	ip, r0
 8012fbe:	d31c      	bcc.n	8012ffa <_strtol_l.isra.0+0xb2>
 8012fc0:	d101      	bne.n	8012fc6 <_strtol_l.isra.0+0x7e>
 8012fc2:	45a6      	cmp	lr, r4
 8012fc4:	db19      	blt.n	8012ffa <_strtol_l.isra.0+0xb2>
 8012fc6:	fb00 4006 	mla	r0, r0, r6, r4
 8012fca:	2701      	movs	r7, #1
 8012fcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fd0:	e7eb      	b.n	8012faa <_strtol_l.isra.0+0x62>
 8012fd2:	462f      	mov	r7, r5
 8012fd4:	e7bf      	b.n	8012f56 <_strtol_l.isra.0+0xe>
 8012fd6:	2c2b      	cmp	r4, #43	; 0x2b
 8012fd8:	bf04      	itt	eq
 8012fda:	1cbd      	addeq	r5, r7, #2
 8012fdc:	787c      	ldrbeq	r4, [r7, #1]
 8012fde:	461a      	mov	r2, r3
 8012fe0:	e7c9      	b.n	8012f76 <_strtol_l.isra.0+0x2e>
 8012fe2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8012fe6:	2b19      	cmp	r3, #25
 8012fe8:	d801      	bhi.n	8012fee <_strtol_l.isra.0+0xa6>
 8012fea:	3c37      	subs	r4, #55	; 0x37
 8012fec:	e7e2      	b.n	8012fb4 <_strtol_l.isra.0+0x6c>
 8012fee:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012ff2:	2b19      	cmp	r3, #25
 8012ff4:	d804      	bhi.n	8013000 <_strtol_l.isra.0+0xb8>
 8012ff6:	3c57      	subs	r4, #87	; 0x57
 8012ff8:	e7dc      	b.n	8012fb4 <_strtol_l.isra.0+0x6c>
 8012ffa:	f04f 37ff 	mov.w	r7, #4294967295
 8012ffe:	e7e5      	b.n	8012fcc <_strtol_l.isra.0+0x84>
 8013000:	1c7b      	adds	r3, r7, #1
 8013002:	d108      	bne.n	8013016 <_strtol_l.isra.0+0xce>
 8013004:	2322      	movs	r3, #34	; 0x22
 8013006:	f8c8 3000 	str.w	r3, [r8]
 801300a:	4608      	mov	r0, r1
 801300c:	f1ba 0f00 	cmp.w	sl, #0
 8013010:	d107      	bne.n	8013022 <_strtol_l.isra.0+0xda>
 8013012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013016:	b102      	cbz	r2, 801301a <_strtol_l.isra.0+0xd2>
 8013018:	4240      	negs	r0, r0
 801301a:	f1ba 0f00 	cmp.w	sl, #0
 801301e:	d0f8      	beq.n	8013012 <_strtol_l.isra.0+0xca>
 8013020:	b10f      	cbz	r7, 8013026 <_strtol_l.isra.0+0xde>
 8013022:	f105 39ff 	add.w	r9, r5, #4294967295
 8013026:	f8ca 9000 	str.w	r9, [sl]
 801302a:	e7f2      	b.n	8013012 <_strtol_l.isra.0+0xca>
 801302c:	2430      	movs	r4, #48	; 0x30
 801302e:	2e00      	cmp	r6, #0
 8013030:	d1af      	bne.n	8012f92 <_strtol_l.isra.0+0x4a>
 8013032:	2608      	movs	r6, #8
 8013034:	e7ad      	b.n	8012f92 <_strtol_l.isra.0+0x4a>
 8013036:	2c30      	cmp	r4, #48	; 0x30
 8013038:	d0a3      	beq.n	8012f82 <_strtol_l.isra.0+0x3a>
 801303a:	260a      	movs	r6, #10
 801303c:	e7a9      	b.n	8012f92 <_strtol_l.isra.0+0x4a>
	...

08013040 <strtol>:
 8013040:	4b08      	ldr	r3, [pc, #32]	; (8013064 <strtol+0x24>)
 8013042:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013044:	681c      	ldr	r4, [r3, #0]
 8013046:	4d08      	ldr	r5, [pc, #32]	; (8013068 <strtol+0x28>)
 8013048:	6a23      	ldr	r3, [r4, #32]
 801304a:	2b00      	cmp	r3, #0
 801304c:	bf08      	it	eq
 801304e:	462b      	moveq	r3, r5
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	4613      	mov	r3, r2
 8013054:	460a      	mov	r2, r1
 8013056:	4601      	mov	r1, r0
 8013058:	4620      	mov	r0, r4
 801305a:	f7ff ff75 	bl	8012f48 <_strtol_l.isra.0>
 801305e:	b003      	add	sp, #12
 8013060:	bd30      	pop	{r4, r5, pc}
 8013062:	bf00      	nop
 8013064:	24000200 	.word	0x24000200
 8013068:	24000264 	.word	0x24000264

0801306c <__locale_ctype_ptr_l>:
 801306c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013070:	4770      	bx	lr

08013072 <__ascii_mbtowc>:
 8013072:	b082      	sub	sp, #8
 8013074:	b901      	cbnz	r1, 8013078 <__ascii_mbtowc+0x6>
 8013076:	a901      	add	r1, sp, #4
 8013078:	b142      	cbz	r2, 801308c <__ascii_mbtowc+0x1a>
 801307a:	b14b      	cbz	r3, 8013090 <__ascii_mbtowc+0x1e>
 801307c:	7813      	ldrb	r3, [r2, #0]
 801307e:	600b      	str	r3, [r1, #0]
 8013080:	7812      	ldrb	r2, [r2, #0]
 8013082:	1c10      	adds	r0, r2, #0
 8013084:	bf18      	it	ne
 8013086:	2001      	movne	r0, #1
 8013088:	b002      	add	sp, #8
 801308a:	4770      	bx	lr
 801308c:	4610      	mov	r0, r2
 801308e:	e7fb      	b.n	8013088 <__ascii_mbtowc+0x16>
 8013090:	f06f 0001 	mvn.w	r0, #1
 8013094:	e7f8      	b.n	8013088 <__ascii_mbtowc+0x16>

08013096 <__malloc_lock>:
 8013096:	4770      	bx	lr

08013098 <__malloc_unlock>:
 8013098:	4770      	bx	lr

0801309a <__ascii_wctomb>:
 801309a:	b149      	cbz	r1, 80130b0 <__ascii_wctomb+0x16>
 801309c:	2aff      	cmp	r2, #255	; 0xff
 801309e:	bf85      	ittet	hi
 80130a0:	238a      	movhi	r3, #138	; 0x8a
 80130a2:	6003      	strhi	r3, [r0, #0]
 80130a4:	700a      	strbls	r2, [r1, #0]
 80130a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80130aa:	bf98      	it	ls
 80130ac:	2001      	movls	r0, #1
 80130ae:	4770      	bx	lr
 80130b0:	4608      	mov	r0, r1
 80130b2:	4770      	bx	lr

080130b4 <_init>:
 80130b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130b6:	bf00      	nop
 80130b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130ba:	bc08      	pop	{r3}
 80130bc:	469e      	mov	lr, r3
 80130be:	4770      	bx	lr

080130c0 <_fini>:
 80130c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c2:	bf00      	nop
 80130c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130c6:	bc08      	pop	{r3}
 80130c8:	469e      	mov	lr, r3
 80130ca:	4770      	bx	lr
