
3DScanner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000162ac  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  0801654c  0801654c  0002654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016854  08016854  000303d0  2**0
                  CONTENTS
  4 .ARM          00000008  08016854  08016854  00026854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801685c  0801685c  000303d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801685c  0801685c  0002685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016860  08016860  00026860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003d0  24000000  08016864  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011ff8  240003d0  08016c34  000303d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  240123c8  08016c34  000323c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005576b  00000000  00000000  000303fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008c5e  00000000  00000000  00085b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002c08  00000000  00000000  0008e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002898  00000000  00000000  000913d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000417df  00000000  00000000  00093c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00034355  00000000  00000000  000d5447  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0017a1b3  00000000  00000000  0010979c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0028394f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bc18  00000000  00000000  002839cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003d0 	.word	0x240003d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016534 	.word	0x08016534

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003d4 	.word	0x240003d4
 80002dc:	08016534 	.word	0x08016534

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <laser_cmd_define_cb>:
 * @brief 
 * 
 * @param cmdStr 
 * @return HAL_StatusTypeDef 
 */
HAL_StatusTypeDef laser_cmd_define_cb(uint8_t *cmdStr){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	75fb      	strb	r3, [r7, #23]
    char *pParamStr = NULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
    char *pParamVal = NULL;
 8000600:	2300      	movs	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
    uint8_t paramValLen = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	75bb      	strb	r3, [r7, #22]
    char paramValStr[4] = {0}; 
 8000608:	2300      	movs	r3, #0
 800060a:	60bb      	str	r3, [r7, #8]

    if (cmdStr != NULL){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d078      	beq.n	8000704 <laser_cmd_define_cb+0x114>
        
        for ( i = 0; i < 2 ; i++){
 8000612:	2300      	movs	r3, #0
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e011      	b.n	800063c <laser_cmd_define_cb+0x4c>
            if ( strstr(cmdStr, laser.power_func_names[i]) )
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	4a3d      	ldr	r2, [pc, #244]	; (8000710 <laser_cmd_define_cb+0x120>)
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	4413      	add	r3, r2
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f015 feb5 	bl	8016394 <strstr>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d002      	beq.n	8000636 <laser_cmd_define_cb+0x46>
                laser.powerState = (PowerState_t) i;
 8000630:	4a37      	ldr	r2, [pc, #220]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	7313      	strb	r3, [r2, #12]
        for ( i = 0; i < 2 ; i++){
 8000636:	7dfb      	ldrb	r3, [r7, #23]
 8000638:	3301      	adds	r3, #1
 800063a:	75fb      	strb	r3, [r7, #23]
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d9ea      	bls.n	8000618 <laser_cmd_define_cb+0x28>
        };

        if ( pParamStr = strstr(cmdStr, laser.bright_param_name) ){
 8000642:	4b33      	ldr	r3, [pc, #204]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000644:	691b      	ldr	r3, [r3, #16]
 8000646:	4619      	mov	r1, r3
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f015 fea3 	bl	8016394 <strstr>
 800064e:	6138      	str	r0, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d03e      	beq.n	80006d4 <laser_cmd_define_cb+0xe4>
            pParamVal = pParamStr + strlen(laser.bright_param_name);
 8000656:	4b2e      	ldr	r3, [pc, #184]	; (8000710 <laser_cmd_define_cb+0x120>)
 8000658:	691b      	ldr	r3, [r3, #16]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe40 	bl	80002e0 <strlen>
 8000660:	4602      	mov	r2, r0
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
            paramValLen = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D) && ( *(pParamVal+paramValLen) != ' ') && (paramValLen < 4 ) ){
 800066c:	e002      	b.n	8000674 <laser_cmd_define_cb+0x84>
                paramValLen++;
 800066e:	7dbb      	ldrb	r3, [r7, #22]
 8000670:	3301      	adds	r3, #1
 8000672:	75bb      	strb	r3, [r7, #22]
            while ( ( *(pParamVal+paramValLen) != 0x0D) && ( *(pParamVal+paramValLen) != ' ') && (paramValLen < 4 ) ){
 8000674:	7dbb      	ldrb	r3, [r7, #22]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	4413      	add	r3, r2
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b0d      	cmp	r3, #13
 800067e:	d008      	beq.n	8000692 <laser_cmd_define_cb+0xa2>
 8000680:	7dbb      	ldrb	r3, [r7, #22]
 8000682:	68fa      	ldr	r2, [r7, #12]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b20      	cmp	r3, #32
 800068a:	d002      	beq.n	8000692 <laser_cmd_define_cb+0xa2>
 800068c:	7dbb      	ldrb	r3, [r7, #22]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d9ed      	bls.n	800066e <laser_cmd_define_cb+0x7e>
            };
            memmove(paramValStr, pParamVal, paramValLen);
 8000692:	7dba      	ldrb	r2, [r7, #22]
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	68f9      	ldr	r1, [r7, #12]
 800069a:	4618      	mov	r0, r3
 800069c:	f015 fd8f 	bl	80161be <memmove>
            if ( paramValStr[0] == '0' )
 80006a0:	7a3b      	ldrb	r3, [r7, #8]
 80006a2:	2b30      	cmp	r3, #48	; 0x30
 80006a4:	d103      	bne.n	80006ae <laser_cmd_define_cb+0xbe>
                laser.brightVal = 0;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
 80006ac:	e012      	b.n	80006d4 <laser_cmd_define_cb+0xe4>
            else  {
            	paramValStr[3] = '\0';
 80006ae:	2300      	movs	r3, #0
 80006b0:	72fb      	strb	r3, [r7, #11]
                if ( atoi(paramValStr) )
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	4618      	mov	r0, r3
 80006b8:	f015 fd38 	bl	801612c <atoi>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <laser_cmd_define_cb+0xe4>
                    laser.brightVal = atoi(paramValStr);
 80006c2:	f107 0308 	add.w	r3, r7, #8
 80006c6:	4618      	mov	r0, r3
 80006c8:	f015 fd30 	bl	801612c <atoi>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006d2:	751a      	strb	r2, [r3, #20]
            }
        }

        if ( laser.powerState == EN ){
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006d6:	7b1b      	ldrb	r3, [r3, #12]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10d      	bne.n	80006f8 <laser_cmd_define_cb+0x108>
            HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80006dc:	2100      	movs	r1, #0
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006e0:	f00a fcd2 	bl	800b088 <HAL_TIM_PWM_Stop>
            __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, laser.brightVal);
 80006e4:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <laser_cmd_define_cb+0x120>)
 80006e6:	7d1a      	ldrb	r2, [r3, #20]
 80006e8:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
            HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006f2:	f00a fbf7 	bl	800aee4 <HAL_TIM_PWM_Start>
 80006f6:	e003      	b.n	8000700 <laser_cmd_define_cb+0x110>
        }
        else
            HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4806      	ldr	r0, [pc, #24]	; (8000714 <laser_cmd_define_cb+0x124>)
 80006fc:	f00a fcc4 	bl	800b088 <HAL_TIM_PWM_Stop>



        /// @todo создать сообщение для обработки команды

        return HAL_OK;
 8000700:	2300      	movs	r3, #0
 8000702:	e000      	b.n	8000706 <laser_cmd_define_cb+0x116>
    }

	return HAL_ERROR;
 8000704:	2301      	movs	r3, #1
};
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	24000018 	.word	0x24000018
 8000714:	240115a8 	.word	0x240115a8

08000718 <SCCB_write_reg>:
		{ 0x72, 0x11 },		//DCW_SCALING
		{ 0x73, 0xf0 },		//PCLK_DIV_SCALING
		{ 0xa2, 0x02 }		//PCLK_DELAY_SCALING
};

uint8_t SCCB_write_reg(uint8_t reg_addr, uint8_t data) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af02      	add	r7, sp, #8
 800071e:	4603      	mov	r3, r0
 8000720:	460a      	mov	r2, r1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	4613      	mov	r3, r2
 8000726:	71bb      	strb	r3, [r7, #6]
	uint32_t timeout = 0xFFFFFF;
 8000728:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800072c:	60fb      	str	r3, [r7, #12]

	uint8_t tempData[2];
	tempData[0]=reg_addr;
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	723b      	strb	r3, [r7, #8]
	tempData[1]=data;
 8000732:	79bb      	ldrb	r3, [r7, #6]
 8000734:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(&hi2c2, 0x42, tempData, 2, timeout);
 8000736:	f107 0208 	add.w	r2, r7, #8
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2302      	movs	r3, #2
 8000740:	2142      	movs	r1, #66	; 0x42
 8000742:	4804      	ldr	r0, [pc, #16]	; (8000754 <SCCB_write_reg+0x3c>)
 8000744:	f004 facc 	bl	8004ce0 <HAL_I2C_Master_Transmit>

	return 0;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	24005040 	.word	0x24005040

08000758 <camera_cmd_define_cb>:
    }while(br==bufSize);

    return HAL_OK;
}

HAL_StatusTypeDef camera_cmd_define_cb(uint8_t *cmdStr){
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	77fb      	strb	r3, [r7, #31]
    char *pParamStr = NULL;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
    char *pParamVal = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
    uint8_t paramValLen = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	77bb      	strb	r3, [r7, #30]
    char paramValStr[4] = {0};
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
    
    if (cmdStr != NULL){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	f000 817c 	beq.w	8000a74 <camera_cmd_define_cb+0x31c>
        
        for ( i = 0; i < 2 ; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	77fb      	strb	r3, [r7, #31]
 8000780:	e011      	b.n	80007a6 <camera_cmd_define_cb+0x4e>
            if ( strstr(cmdStr, camera.power_func_names[i]) )
 8000782:	7ffb      	ldrb	r3, [r7, #31]
 8000784:	4ab4      	ldr	r2, [pc, #720]	; (8000a58 <camera_cmd_define_cb+0x300>)
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	4619      	mov	r1, r3
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f015 fe00 	bl	8016394 <strstr>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <camera_cmd_define_cb+0x48>
                camera.powerState = (PowerState_t) i;
 800079a:	4aaf      	ldr	r2, [pc, #700]	; (8000a58 <camera_cmd_define_cb+0x300>)
 800079c:	7ffb      	ldrb	r3, [r7, #31]
 800079e:	7313      	strb	r3, [r2, #12]
        for ( i = 0; i < 2 ; i++){
 80007a0:	7ffb      	ldrb	r3, [r7, #31]
 80007a2:	3301      	adds	r3, #1
 80007a4:	77fb      	strb	r3, [r7, #31]
 80007a6:	7ffb      	ldrb	r3, [r7, #31]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d9ea      	bls.n	8000782 <camera_cmd_define_cb+0x2a>
        };


        if ( pParamStr = strstr(cmdStr, camera.picture_param_name) ){
 80007ac:	4baa      	ldr	r3, [pc, #680]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	4619      	mov	r1, r3
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	f015 fdee 	bl	8016394 <strstr>
 80007b8:	61b8      	str	r0, [r7, #24]
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d031      	beq.n	8000824 <camera_cmd_define_cb+0xcc>
            pParamVal = pParamStr + strlen(camera.picture_param_name);
 80007c0:	4ba5      	ldr	r3, [pc, #660]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80007c2:	691b      	ldr	r3, [r3, #16]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fd8b 	bl	80002e0 <strlen>
 80007ca:	4602      	mov	r2, r0
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	4413      	add	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]
            paramValLen = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 80007d6:	e002      	b.n	80007de <camera_cmd_define_cb+0x86>
                        ( *(pParamVal+paramValLen) != ' ')          && 
                              ( *(pParamVal+paramValLen) != '\0')   &&
                                (paramValLen < CAMERA_FILES_MAX_LENGTH-1 )  ){
                paramValLen++;
 80007d8:	7fbb      	ldrb	r3, [r7, #30]
 80007da:	3301      	adds	r3, #1
 80007dc:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 80007de:	7fbb      	ldrb	r3, [r7, #30]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	4413      	add	r3, r2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b0d      	cmp	r3, #13
 80007e8:	d00e      	beq.n	8000808 <camera_cmd_define_cb+0xb0>
                        ( *(pParamVal+paramValLen) != ' ')          && 
 80007ea:	7fbb      	ldrb	r3, [r7, #30]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 80007f2:	2b20      	cmp	r3, #32
 80007f4:	d008      	beq.n	8000808 <camera_cmd_define_cb+0xb0>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 80007f6:	7fbb      	ldrb	r3, [r7, #30]
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')          && 
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d002      	beq.n	8000808 <camera_cmd_define_cb+0xb0>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 8000802:	7fbb      	ldrb	r3, [r7, #30]
 8000804:	2b0a      	cmp	r3, #10
 8000806:	d9e7      	bls.n	80007d8 <camera_cmd_define_cb+0x80>
            };

            if ( paramValLen != 0 ){
 8000808:	7fbb      	ldrb	r3, [r7, #30]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d00a      	beq.n	8000824 <camera_cmd_define_cb+0xcc>
            	memset(camera.pictureName, 0, CAMERA_FILES_MAX_LENGTH);
 800080e:	220c      	movs	r2, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4892      	ldr	r0, [pc, #584]	; (8000a5c <camera_cmd_define_cb+0x304>)
 8000814:	f015 fcec 	bl	80161f0 <memset>
                memmove(camera.pictureName, pParamVal, paramValLen);
 8000818:	7fbb      	ldrb	r3, [r7, #30]
 800081a:	461a      	mov	r2, r3
 800081c:	6979      	ldr	r1, [r7, #20]
 800081e:	488f      	ldr	r0, [pc, #572]	; (8000a5c <camera_cmd_define_cb+0x304>)
 8000820:	f015 fccd 	bl	80161be <memmove>
            else 
            	;
                /// @todo создать сообщение для обработки ошибки
        }

        if ( pParamStr = strstr(cmdStr, camera.config_param_name) ){
 8000824:	4b8c      	ldr	r3, [pc, #560]	; (8000a58 <camera_cmd_define_cb+0x300>)
 8000826:	6a1b      	ldr	r3, [r3, #32]
 8000828:	4619      	mov	r1, r3
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f015 fdb2 	bl	8016394 <strstr>
 8000830:	61b8      	str	r0, [r7, #24]
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d031      	beq.n	800089c <camera_cmd_define_cb+0x144>
            pParamVal = pParamStr + strlen(camera.config_param_name);
 8000838:	4b87      	ldr	r3, [pc, #540]	; (8000a58 <camera_cmd_define_cb+0x300>)
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fd4f 	bl	80002e0 <strlen>
 8000842:	4602      	mov	r2, r0
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	4413      	add	r3, r2
 8000848:	617b      	str	r3, [r7, #20]
            paramValLen = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 800084e:	e002      	b.n	8000856 <camera_cmd_define_cb+0xfe>
                        ( *(pParamVal+paramValLen) != ' ')          && 
                              ( *(pParamVal+paramValLen) != '\0')   &&
                                (paramValLen < CAMERA_FILES_MAX_LENGTH-1 )  ){
                paramValLen++;
 8000850:	7fbb      	ldrb	r3, [r7, #30]
 8000852:	3301      	adds	r3, #1
 8000854:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 8000856:	7fbb      	ldrb	r3, [r7, #30]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b0d      	cmp	r3, #13
 8000860:	d00e      	beq.n	8000880 <camera_cmd_define_cb+0x128>
                        ( *(pParamVal+paramValLen) != ' ')          && 
 8000862:	7fbb      	ldrb	r3, [r7, #30]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)             && 
 800086a:	2b20      	cmp	r3, #32
 800086c:	d008      	beq.n	8000880 <camera_cmd_define_cb+0x128>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 800086e:	7fbb      	ldrb	r3, [r7, #30]
 8000870:	697a      	ldr	r2, [r7, #20]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')          && 
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <camera_cmd_define_cb+0x128>
                              ( *(pParamVal+paramValLen) != '\0')   &&
 800087a:	7fbb      	ldrb	r3, [r7, #30]
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d9e7      	bls.n	8000850 <camera_cmd_define_cb+0xf8>
            };

            if ( paramValLen != 0 ){
 8000880:	7fbb      	ldrb	r3, [r7, #30]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d00a      	beq.n	800089c <camera_cmd_define_cb+0x144>
            	memset(camera.configFileName, 0, CAMERA_FILES_MAX_LENGTH);
 8000886:	220c      	movs	r2, #12
 8000888:	2100      	movs	r1, #0
 800088a:	4875      	ldr	r0, [pc, #468]	; (8000a60 <camera_cmd_define_cb+0x308>)
 800088c:	f015 fcb0 	bl	80161f0 <memset>
                memmove(camera.configFileName, pParamVal, paramValLen);
 8000890:	7fbb      	ldrb	r3, [r7, #30]
 8000892:	461a      	mov	r2, r3
 8000894:	6979      	ldr	r1, [r7, #20]
 8000896:	4872      	ldr	r0, [pc, #456]	; (8000a60 <camera_cmd_define_cb+0x308>)
 8000898:	f015 fc91 	bl	80161be <memmove>
            else 
            	;
                /// @todo создать сообщение для обработки ошибки
        }

        if ( pParamStr = strstr(cmdStr, camera.reg_param_name) ){
 800089c:	4b6e      	ldr	r3, [pc, #440]	; (8000a58 <camera_cmd_define_cb+0x300>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f015 fd76 	bl	8016394 <strstr>
 80008a8:	61b8      	str	r0, [r7, #24]
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	f000 808b 	beq.w	80009c8 <camera_cmd_define_cb+0x270>
            pParamVal = pParamStr + strlen(camera.reg_param_name);
 80008b2:	4b69      	ldr	r3, [pc, #420]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fd12 	bl	80002e0 <strlen>
 80008bc:	4602      	mov	r2, r0
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	4413      	add	r3, r2
 80008c2:	617b      	str	r3, [r7, #20]
            paramValLen = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 80008c8:	e002      	b.n	80008d0 <camera_cmd_define_cb+0x178>
                        ( *(pParamVal+paramValLen) != ' ')      &&
                            ( *(pParamVal+paramValLen) != ',')  &&
                                (paramValLen < 4 ) ){
                paramValLen++;
 80008ca:	7fbb      	ldrb	r3, [r7, #30]
 80008cc:	3301      	adds	r3, #1
 80008ce:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 80008d0:	7fbb      	ldrb	r3, [r7, #30]
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b0d      	cmp	r3, #13
 80008da:	d00e      	beq.n	80008fa <camera_cmd_define_cb+0x1a2>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 80008dc:	7fbb      	ldrb	r3, [r7, #30]
 80008de:	697a      	ldr	r2, [r7, #20]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 80008e4:	2b20      	cmp	r3, #32
 80008e6:	d008      	beq.n	80008fa <camera_cmd_define_cb+0x1a2>
                            ( *(pParamVal+paramValLen) != ',')  &&
 80008e8:	7fbb      	ldrb	r3, [r7, #30]
 80008ea:	697a      	ldr	r2, [r7, #20]
 80008ec:	4413      	add	r3, r2
 80008ee:	781b      	ldrb	r3, [r3, #0]
                        ( *(pParamVal+paramValLen) != ' ')      &&
 80008f0:	2b2c      	cmp	r3, #44	; 0x2c
 80008f2:	d002      	beq.n	80008fa <camera_cmd_define_cb+0x1a2>
                            ( *(pParamVal+paramValLen) != ',')  &&
 80008f4:	7fbb      	ldrb	r3, [r7, #30]
 80008f6:	2b03      	cmp	r3, #3
 80008f8:	d9e7      	bls.n	80008ca <camera_cmd_define_cb+0x172>
            };
            memmove(paramValStr, pParamVal, paramValLen);
 80008fa:	7fba      	ldrb	r2, [r7, #30]
 80008fc:	f107 030c 	add.w	r3, r7, #12
 8000900:	6979      	ldr	r1, [r7, #20]
 8000902:	4618      	mov	r0, r3
 8000904:	f015 fc5b 	bl	80161be <memmove>
            if ( paramValStr[0] == '0' )
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	2b30      	cmp	r3, #48	; 0x30
 800090c:	d104      	bne.n	8000918 <camera_cmd_define_cb+0x1c0>
                camera.regAddr = 0;
 800090e:	4b52      	ldr	r3, [pc, #328]	; (8000a58 <camera_cmd_define_cb+0x300>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8000916:	e013      	b.n	8000940 <camera_cmd_define_cb+0x1e8>
            else  {
            	paramValStr[3] = '\0';
 8000918:	2300      	movs	r3, #0
 800091a:	73fb      	strb	r3, [r7, #15]
                if ( atoi(paramValStr) )
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4618      	mov	r0, r3
 8000922:	f015 fc03 	bl	801612c <atoi>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d009      	beq.n	8000940 <camera_cmd_define_cb+0x1e8>
                    camera.regAddr = atoi(paramValStr);
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	4618      	mov	r0, r3
 8000932:	f015 fbfb 	bl	801612c <atoi>
 8000936:	4603      	mov	r3, r0
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b47      	ldr	r3, [pc, #284]	; (8000a58 <camera_cmd_define_cb+0x300>)
 800093c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            }

            pParamVal += paramValLen+1;
 8000940:	7fbb      	ldrb	r3, [r7, #30]
 8000942:	3301      	adds	r3, #1
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	4413      	add	r3, r2
 8000948:	617b      	str	r3, [r7, #20]
            paramValLen = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	77bb      	strb	r3, [r7, #30]
            memset(paramValStr, 0, 4);
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2204      	movs	r2, #4
 8000954:	2100      	movs	r1, #0
 8000956:	4618      	mov	r0, r3
 8000958:	f015 fc4a 	bl	80161f0 <memset>
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 800095c:	e002      	b.n	8000964 <camera_cmd_define_cb+0x20c>
                        ( *(pParamVal+paramValLen) != ' ')      &&
                                (paramValLen < 4 ) ){
                paramValLen++;
 800095e:	7fbb      	ldrb	r3, [r7, #30]
 8000960:	3301      	adds	r3, #1
 8000962:	77bb      	strb	r3, [r7, #30]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 8000964:	7fbb      	ldrb	r3, [r7, #30]
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b0d      	cmp	r3, #13
 800096e:	d008      	beq.n	8000982 <camera_cmd_define_cb+0x22a>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 8000970:	7fbb      	ldrb	r3, [r7, #30]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
            while ( ( *(pParamVal+paramValLen) != 0x0D)         &&
 8000978:	2b20      	cmp	r3, #32
 800097a:	d002      	beq.n	8000982 <camera_cmd_define_cb+0x22a>
                        ( *(pParamVal+paramValLen) != ' ')      &&
 800097c:	7fbb      	ldrb	r3, [r7, #30]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d9ed      	bls.n	800095e <camera_cmd_define_cb+0x206>
            };  
            memmove(paramValStr, pParamVal, paramValLen);
 8000982:	7fba      	ldrb	r2, [r7, #30]
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	6979      	ldr	r1, [r7, #20]
 800098a:	4618      	mov	r0, r3
 800098c:	f015 fc17 	bl	80161be <memmove>
            if ( paramValStr[0] == '0' )
 8000990:	7b3b      	ldrb	r3, [r7, #12]
 8000992:	2b30      	cmp	r3, #48	; 0x30
 8000994:	d104      	bne.n	80009a0 <camera_cmd_define_cb+0x248>
                camera.regVal = 0;
 8000996:	4b30      	ldr	r3, [pc, #192]	; (8000a58 <camera_cmd_define_cb+0x300>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800099e:	e013      	b.n	80009c8 <camera_cmd_define_cb+0x270>
            else  {
            	paramValStr[3] = '\0';
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
                if ( atoi(paramValStr) )
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f015 fbbf 	bl	801612c <atoi>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <camera_cmd_define_cb+0x270>
                    camera.regVal = atoi(paramValStr);
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4618      	mov	r0, r3
 80009ba:	f015 fbb7 	bl	801612c <atoi>
 80009be:	4603      	mov	r3, r0
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80009c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            }          

        }


        if ( camera.powerState == EN ){
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80009ca:	7b1b      	ldrb	r3, [r3, #12]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d131      	bne.n	8000a34 <camera_cmd_define_cb+0x2dc>
            // Подача питания на камеру и переход в режим готовности
            HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2104      	movs	r1, #4
 80009d4:	4823      	ldr	r0, [pc, #140]	; (8000a64 <camera_cmd_define_cb+0x30c>)
 80009d6:	f004 f8d9 	bl	8004b8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Pwdn_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2108      	movs	r1, #8
 80009de:	4822      	ldr	r0, [pc, #136]	; (8000a68 <camera_cmd_define_cb+0x310>)
 80009e0:	f004 f8d4 	bl	8004b8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin, GPIO_PIN_SET);
 80009e4:	2201      	movs	r2, #1
 80009e6:	2104      	movs	r1, #4
 80009e8:	481f      	ldr	r0, [pc, #124]	; (8000a68 <camera_cmd_define_cb+0x310>)
 80009ea:	f004 f8cf 	bl	8004b8c <HAL_GPIO_WritePin>
            // Включение тактирования
            HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 80009ee:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80009f6:	2001      	movs	r0, #1
 80009f8:	f006 fc8a 	bl	8007310 <HAL_RCC_MCOConfig>
            // Конфигурирование регистра
            /**
             * @todo определять, если регистр уже записан, чтобы не было повтороной записи
             */

            SCCB_write_reg(camera.regAddr, camera.regVal);
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <camera_cmd_define_cb+0x300>)
 80009fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <camera_cmd_define_cb+0x300>)
 8000a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	f7ff fe84 	bl	8000718 <SCCB_write_reg>
            HAL_Delay(100);
 8000a10:	2064      	movs	r0, #100	; 0x64
 8000a12:	f001 fa13 	bl	8001e3c <HAL_Delay>
            
            HAL_StatusTypeDef result;
            result = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, IMG_ROWS * IMG_COLUMNS / 2);
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <camera_cmd_define_cb+0x314>)
 8000a18:	f243 03f0 	movw	r3, #12528	; 0x30f0
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	4814      	ldr	r0, [pc, #80]	; (8000a70 <camera_cmd_define_cb+0x318>)
 8000a20:	f001 fb94 	bl	800214c <HAL_DCMI_Start_DMA>
 8000a24:	4603      	mov	r3, r0
 8000a26:	74fb      	strb	r3, [r7, #19]
	        result = HAL_DCMI_Stop(&hdcmi);
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <camera_cmd_define_cb+0x318>)
 8000a2a:	f001 fc51 	bl	80022d0 <HAL_DCMI_Stop>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	74fb      	strb	r3, [r7, #19]
 8000a32:	e00e      	b.n	8000a52 <camera_cmd_define_cb+0x2fa>
            // Создание файла снимка 

            
        } else {
            // Подача питания на камеру и переход в режим готовности
            HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2104      	movs	r1, #4
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <camera_cmd_define_cb+0x30c>)
 8000a3a:	f004 f8a7 	bl	8004b8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Pwdn_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2108      	movs	r1, #8
 8000a42:	4809      	ldr	r0, [pc, #36]	; (8000a68 <camera_cmd_define_cb+0x310>)
 8000a44:	f004 f8a2 	bl	8004b8c <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	4806      	ldr	r0, [pc, #24]	; (8000a68 <camera_cmd_define_cb+0x310>)
 8000a4e:	f004 f89d 	bl	8004b8c <HAL_GPIO_WritePin>
        }

        return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e00f      	b.n	8000a76 <camera_cmd_define_cb+0x31e>
 8000a56:	bf00      	nop
 8000a58:	2400005c 	.word	0x2400005c
 8000a5c:	24000070 	.word	0x24000070
 8000a60:	24000080 	.word	0x24000080
 8000a64:	58020800 	.word	0x58020800
 8000a68:	58020000 	.word	0x58020000
 8000a6c:	240051e8 	.word	0x240051e8
 8000a70:	24005104 	.word	0x24005104
    }
    return HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3720      	adds	r7, #32
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop

08000a80 <stepM_cmd_define_cb>:


HAL_StatusTypeDef stepM_cmd_define_cb(uint8_t *cmdStr){
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
    return HAL_OK;
 8000a88:	2300      	movs	r3, #0
};
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <StorageTask>:

//BYTE readBuf[50] = {0};
//UINT br = 0;

void StorageTask(void *argument)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	6018      	str	r0, [r3, #0]
  FIL sdFile;
  FRESULT fr;

  MX_SDMMC2_SD_Init();
 8000aa4:	f000 f816 	bl	8000ad4 <MX_SDMMC2_SD_Init>
	MX_FATFS_Init();
 8000aa8:	f00e fcfc 	bl	800f4a4 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000aac:	f014 fe26 	bl	80156fc <MX_USB_DEVICE_Init>


  // Open or create a log file and ready to append
  //fr = f_mkfs("", FM_ANY, 0, work, sizeof(work));
  fr = f_mount(&sdFatFs, "", 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4906      	ldr	r1, [pc, #24]	; (8000acc <StorageTask+0x34>)
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <StorageTask+0x38>)
 8000ab6:	f012 f839 	bl	8012b2c <f_mount>
 8000aba:	4603      	mov	r3, r0
 8000abc:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
  // Close the file
  f_close(&sdFile);
*/
  for(;;)
  {
    osDelay(1000);
 8000ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac4:	f012 f9ea 	bl	8012e9c <osDelay>
  {
 8000ac8:	e7fa      	b.n	8000ac0 <StorageTask+0x28>
 8000aca:	bf00      	nop
 8000acc:	080165c8 	.word	0x080165c8
 8000ad0:	240003ec 	.word	0x240003ec

08000ad4 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  hsd2.Instance = SDMMC2;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <MX_SDMMC2_SD_Init+0x40>)
 8000adc:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000aec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000af0:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000af4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000af8:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 4;
 8000afa:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000afc:	2204      	movs	r2, #4
 8000afe:	615a      	str	r2, [r3, #20]
  hsd2.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <MX_SDMMC2_SD_Init+0x3c>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	619a      	str	r2, [r3, #24]

}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	24004fbc 	.word	0x24004fbc
 8000b14:	48022400 	.word	0x48022400

08000b18 <uart_terminal_init>:
 * @brief Initialize uart handler in uart_terminal
 * @param   huart  Uart handler created by CubeMx
 * @return  HAL_OK - success,
 *          HAL_ERROR - uart handler was not defined
 */
HAL_StatusTypeDef uart_terminal_init(UART_HandleTypeDef *huart){
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

	if ( huart != NULL ){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d004      	beq.n	8000b30 <uart_terminal_init+0x18>
		ghuart = huart;
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <uart_terminal_init+0x24>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6013      	str	r3, [r2, #0]
		return   HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	e7ff      	b.n	8000b30 <uart_terminal_init+0x18>
	}else{
		// создать сообщение об ошибке, и затем показать её в реестре ошибок.
	}
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	2400061c 	.word	0x2400061c

08000b40 <uart_terminal_print>:
 * @brief Print strings by uart transmit
 * @param   string  pointer to char array , consists of letters, words and etc.
 * @return  HAL_OK - success,
 *          HAL_ERROR - string transmission by uart was failed
 */
HAL_StatusTypeDef uart_terminal_print(uint8_t *string){
 8000b40:	b590      	push	{r4, r7, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

	if ( 0 != strlen(string) ){
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d011      	beq.n	8000b74 <uart_terminal_print+0x34>
		if ( HAL_OK == HAL_UART_Transmit(ghuart, string, strlen(string), UART_STR_PRINT_TIMEOUT) ){
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <uart_terminal_print+0x3c>)
 8000b52:	681c      	ldr	r4, [r3, #0]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff fbc3 	bl	80002e0 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	4620      	mov	r0, r4
 8000b66:	f00b f9f7 	bl	800bf58 <HAL_UART_Transmit>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d101      	bne.n	8000b74 <uart_terminal_print+0x34>
			return HAL_OK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e7ff      	b.n	8000b74 <uart_terminal_print+0x34>
		}
	}else{
		 // создать сообщение об ошибке, и затем показать её в реестре ошибок.
	}
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd90      	pop	{r4, r7, pc}
 8000b7c:	2400061c 	.word	0x2400061c

08000b80 <uart_terminal_cmd_def>:
 * @note terminal command format: module_name -function -parameter:x
 * 
 * @todo Сделать проверки корректности заполнения структур модулей,
 * 		 при неправильном заполнении бывает HardFault
 */
HAL_StatusTypeDef uart_terminal_cmd_def(void){
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b099      	sub	sp, #100	; 0x64
 8000b84:	af00      	add	r7, sp, #0
	uint16_t i=0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint16_t moduleNmb = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t *rxBuf;
	uint8_t cmdStr[MAX_TERM_CMD_SIZE];
	const char *module_name = NULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	65bb      	str	r3, [r7, #88]	; 0x58
	module_cmd_define_cb_t module_cmd_define_func = NULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	657b      	str	r3, [r7, #84]	; 0x54

	if ( NULL != (rxBuf = uart_terminal_scanf()) ){
 8000b9a:	f000 f8c1 	bl	8000d20 <uart_terminal_scanf>
 8000b9e:	6538      	str	r0, [r7, #80]	; 0x50
 8000ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f000 80b1 	beq.w	8000d0a <uart_terminal_cmd_def+0x18a>
		memmove(cmdStr, rxBuf, MAX_TERM_CMD_SIZE);
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	224b      	movs	r2, #75	; 0x4b
 8000bac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f015 fb05 	bl	80161be <memmove>

		while( i < MAX_TERM_CMD_SIZE){
 8000bb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bb8:	2b4a      	cmp	r3, #74	; 0x4a
 8000bba:	f200 80a8 	bhi.w	8000d0e <uart_terminal_cmd_def+0x18e>
			if ( CHAR_FILTER(cmdStr[i]) ){		// reach first character of module name, ignore whitespaces
 8000bbe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bc2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8000bc6:	4413      	add	r3, r2
 8000bc8:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000bcc:	2b2d      	cmp	r3, #45	; 0x2d
 8000bce:	bf0c      	ite	eq
 8000bd0:	2301      	moveq	r3, #1
 8000bd2:	2300      	movne	r3, #0
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bda:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000bde:	440b      	add	r3, r1
 8000be0:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000be4:	2b5f      	cmp	r3, #95	; 0x5f
 8000be6:	bf0c      	ite	eq
 8000be8:	2301      	moveq	r3, #1
 8000bea:	2300      	movne	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000bf6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c00:	2b2f      	cmp	r3, #47	; 0x2f
 8000c02:	bf8c      	ite	hi
 8000c04:	2301      	movhi	r3, #1
 8000c06:	2300      	movls	r3, #0
 8000c08:	b2d9      	uxtb	r1, r3
 8000c0a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c0e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000c12:	4403      	add	r3, r0
 8000c14:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c18:	2b39      	cmp	r3, #57	; 0x39
 8000c1a:	bf94      	ite	ls
 8000c1c:	2301      	movls	r3, #1
 8000c1e:	2300      	movhi	r3, #0
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	400b      	ands	r3, r1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4313      	orrs	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c2e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000c32:	440b      	add	r3, r1
 8000c34:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c38:	2b40      	cmp	r3, #64	; 0x40
 8000c3a:	bf8c      	ite	hi
 8000c3c:	2301      	movhi	r3, #1
 8000c3e:	2300      	movls	r3, #0
 8000c40:	b2d9      	uxtb	r1, r3
 8000c42:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c46:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000c4a:	4403      	add	r3, r0
 8000c4c:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c50:	2b5a      	cmp	r3, #90	; 0x5a
 8000c52:	bf94      	ite	ls
 8000c54:	2301      	movls	r3, #1
 8000c56:	2300      	movhi	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	400b      	ands	r3, r1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c66:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8000c6a:	440b      	add	r3, r1
 8000c6c:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c70:	2b60      	cmp	r3, #96	; 0x60
 8000c72:	bf8c      	ite	hi
 8000c74:	2301      	movhi	r3, #1
 8000c76:	2300      	movls	r3, #0
 8000c78:	b2d9      	uxtb	r1, r3
 8000c7a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000c7e:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000c82:	4403      	add	r3, r0
 8000c84:	f813 3c5c 	ldrb.w	r3, [r3, #-92]
 8000c88:	2b7a      	cmp	r3, #122	; 0x7a
 8000c8a:	bf94      	ite	ls
 8000c8c:	2301      	movls	r3, #1
 8000c8e:	2300      	movhi	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	400b      	ands	r3, r1
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	4313      	orrs	r3, r2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d02e      	beq.n	8000cfc <uart_terminal_cmd_def+0x17c>

				for ( moduleNmb = 0 ; moduleNmb < MODULES_NUMBER ; moduleNmb++){
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000ca4:	e025      	b.n	8000cf2 <uart_terminal_cmd_def+0x172>

					module_name = (const char *) *(psModules[moduleNmb]);
 8000ca6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000caa:	4a1b      	ldr	r2, [pc, #108]	; (8000d18 <uart_terminal_cmd_def+0x198>)
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	65bb      	str	r3, [r7, #88]	; 0x58
					if ( !strncmp(cmdStr+i, module_name, strlen(module_name)) ){
 8000cb4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000cb8:	1d3a      	adds	r2, r7, #4
 8000cba:	18d4      	adds	r4, r2, r3
 8000cbc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000cbe:	f7ff fb0f 	bl	80002e0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f015 fb51 	bl	8016370 <strncmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <uart_terminal_cmd_def+0x168>
						// go to function for analyze command to module
						module_cmd_define_func = module_cmd_define_cbs[moduleNmb];
 8000cd4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cd8:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <uart_terminal_cmd_def+0x19c>)
 8000cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cde:	657b      	str	r3, [r7, #84]	; 0x54
						module_cmd_define_func(cmdStr);
 8000ce0:	1d3a      	adds	r2, r7, #4
 8000ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ce4:	4610      	mov	r0, r2
 8000ce6:	4798      	blx	r3
				for ( moduleNmb = 0 ; moduleNmb < MODULES_NUMBER ; moduleNmb++){
 8000ce8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cec:	3301      	adds	r3, #1
 8000cee:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8000cf2:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d9d5      	bls.n	8000ca6 <uart_terminal_cmd_def+0x126>
 8000cfa:	e004      	b.n	8000d06 <uart_terminal_cmd_def+0x186>
					}
				}
			} else { i++; };
 8000cfc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8000d00:	3301      	adds	r3, #1
 8000d02:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


			return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e001      	b.n	8000d0e <uart_terminal_cmd_def+0x18e>
		}
	} else {
		return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e7ff      	b.n	8000d0e <uart_terminal_cmd_def+0x18e>
	}
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3764      	adds	r7, #100	; 0x64
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000000 	.word	0x24000000
 8000d1c:	2400000c 	.word	0x2400000c

08000d20 <uart_terminal_scanf>:
 * @brief Return the string from terminal received by uart
 * @return  pointer to uart Rx buffer - success,
 *          NULL - memory transmission by uart was failed
 * @note we receive from terminal just short commands, no any large arrays of memory
 */
uint8_t * uart_terminal_scanf(void){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

	memset(UartTermRxBuf, 0, sizeof(UartTermRxBuf));
 8000d26:	224b      	movs	r2, #75	; 0x4b
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4812      	ldr	r0, [pc, #72]	; (8000d74 <uart_terminal_scanf+0x54>)
 8000d2c:	f015 fa60 	bl	80161f0 <memset>
	 * 			set uart GPIO pins in High/Very High Speed mode
	 * 		 2. we don`t check the answer of HAL_UART_Receive(), 
	 * 			because this function returns HAL_TIMEOUT 
	 * 			if packet is less than MAX_TERM_CMD_SIZE
	 */
	HAL_UART_Receive(ghuart, UartTermRxBuf, MAX_TERM_CMD_SIZE, UART_CMD_SCAN_TIMEOUT);
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <uart_terminal_scanf+0x58>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	224b      	movs	r2, #75	; 0x4b
 8000d38:	490e      	ldr	r1, [pc, #56]	; (8000d74 <uart_terminal_scanf+0x54>)
 8000d3a:	f00b f9a3 	bl	800c084 <HAL_UART_Receive>
	if ( strlen(UartTermRxBuf) > 0 ){
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <uart_terminal_scanf+0x54>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d010      	beq.n	8000d68 <uart_terminal_scanf+0x48>
		// check the end byte of conversation
		for(uint32_t i = 0; i < MAX_TERM_CMD_SIZE ; i++){
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	e00a      	b.n	8000d62 <uart_terminal_scanf+0x42>
			if ( 0x0D == UartTermRxBuf[i] )   // CR (0x0D) must be enabled in terminal
 8000d4c:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <uart_terminal_scanf+0x54>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b0d      	cmp	r3, #13
 8000d56:	d101      	bne.n	8000d5c <uart_terminal_scanf+0x3c>
						return UartTermRxBuf;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <uart_terminal_scanf+0x54>)
 8000d5a:	e006      	b.n	8000d6a <uart_terminal_scanf+0x4a>
		for(uint32_t i = 0; i < MAX_TERM_CMD_SIZE ; i++){
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b4a      	cmp	r3, #74	; 0x4a
 8000d66:	d9f1      	bls.n	8000d4c <uart_terminal_scanf+0x2c>
		}
	}
	// создать сообщение об ошибке, и затем показать её в реестре ошибок.
	return NULL;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	24000620 	.word	0x24000620
 8000d78:	2400061c 	.word	0x2400061c

08000d7c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d84:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <SCB_EnableICache+0x3c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000d94:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <SCB_EnableICache+0x3c>)
 8000d9a:	695b      	ldr	r3, [r3, #20]
 8000d9c:	4a06      	ldr	r2, [pc, #24]	; (8000db8 <SCB_EnableICache+0x3c>)
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000da8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000dc2:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <SCB_EnableDCache+0x7c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000dca:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000dce:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <SCB_EnableDCache+0x7c>)
 8000dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dd4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	0b5b      	lsrs	r3, r3, #13
 8000dda:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000dde:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000de8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	015a      	lsls	r2, r3, #5
 8000dee:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000df2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000df8:	490f      	ldr	r1, [pc, #60]	; (8000e38 <SCB_EnableDCache+0x7c>)
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1e5a      	subs	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1ef      	bne.n	8000dea <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	1e5a      	subs	r2, r3, #1
 8000e0e:	60fa      	str	r2, [r7, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e5      	bne.n	8000de0 <SCB_EnableDCache+0x24>
 8000e14:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <SCB_EnableDCache+0x7c>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <SCB_EnableDCache+0x7c>)
 8000e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e22:	6153      	str	r3, [r2, #20]
 8000e24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000e28:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <CPU_CACHE_Enable>:
#define IMG_ROWS   					144
#define IMG_COLUMNS   				174
volatile uint16_t frame_buffer[IMG_ROWS * IMG_COLUMNS];

static void CPU_CACHE_Enable(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8000e40:	f7ff ff9c 	bl	8000d7c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 8000e44:	f7ff ffba 	bl	8000dbc <SCB_EnableDCache>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <main>:

int main(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  CPU_CACHE_Enable();
 8000e52:	f7ff fff3 	bl	8000e3c <CPU_CACHE_Enable>
	HAL_Init();
 8000e56:	f000 ff95 	bl	8001d84 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000e5a:	f000 f85f 	bl	8000f1c <SystemClock_Config>
  MX_DMA_Init();
 8000e5e:	f000 f95f 	bl	8001120 <MX_DMA_Init>
	MX_GPIO_Init();
 8000e62:	f000 f97d 	bl	8001160 <MX_GPIO_Init>
	MX_TIM16_Init();
 8000e66:	f000 fa7b 	bl	8001360 <MX_TIM16_Init>
  MX_DCMI_Init();
 8000e6a:	f000 f925 	bl	80010b8 <MX_DCMI_Init>
	HAL_Delay(2U);
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f000 ffe4 	bl	8001e3c <HAL_Delay>


    HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2104      	movs	r1, #4
 8000e78:	481b      	ldr	r0, [pc, #108]	; (8000ee8 <main+0x9c>)
 8000e7a:	f003 fe87 	bl	8004b8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CAM_Pwdn_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2108      	movs	r1, #8
 8000e82:	481a      	ldr	r0, [pc, #104]	; (8000eec <main+0xa0>)
 8000e84:	f003 fe82 	bl	8004b8c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	4817      	ldr	r0, [pc, #92]	; (8000eec <main+0xa0>)
 8000e8e:	f003 fe7d 	bl	8004b8c <HAL_GPIO_WritePin>

    // Включение тактирования
    //HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
    //HAL_Delay(1000);
    HAL_StatusTypeDef result;
    result = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frame_buffer, IMG_ROWS * IMG_COLUMNS / 2);
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <main+0xa4>)
 8000e94:	f243 03f0 	movw	r3, #12528	; 0x30f0
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4816      	ldr	r0, [pc, #88]	; (8000ef4 <main+0xa8>)
 8000e9c:	f001 f956 	bl	800214c <HAL_DCMI_Start_DMA>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
    result = HAL_DCMI_Stop(&hdcmi);
 8000ea4:	4813      	ldr	r0, [pc, #76]	; (8000ef4 <main+0xa8>)
 8000ea6:	f001 fa13 	bl	80022d0 <HAL_DCMI_Stop>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
  //f_write(&SDFile, line, 7, &numChar );
  // Close the file
  f_close(&sdFile);

*/
  osKernelInitialize();
 8000eae:	f011 fee5 	bl	8012c7c <osKernelInitialize>

  controlTaskHandle = osThreadNew(ControlTask, NULL, &controlTask_attributes);
 8000eb2:	4a11      	ldr	r2, [pc, #68]	; (8000ef8 <main+0xac>)
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <main+0xb0>)
 8000eb8:	f011 ff4a 	bl	8012d50 <osThreadNew>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <main+0xb4>)
 8000ec0:	601a      	str	r2, [r3, #0]
  modulesTaskHandle = osThreadNew(ModulesTask, NULL, &modulesTask_attributes);
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <main+0xb8>)
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <main+0xbc>)
 8000ec8:	f011 ff42 	bl	8012d50 <osThreadNew>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <main+0xc0>)
 8000ed0:	601a      	str	r2, [r3, #0]
  storageTaskHandle = osThreadNew(StorageTask, NULL, &storageTask_attributes);
 8000ed2:	4a0f      	ldr	r2, [pc, #60]	; (8000f10 <main+0xc4>)
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	480f      	ldr	r0, [pc, #60]	; (8000f14 <main+0xc8>)
 8000ed8:	f011 ff3a 	bl	8012d50 <osThreadNew>
 8000edc:	4602      	mov	r2, r0
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <main+0xcc>)
 8000ee0:	601a      	str	r2, [r3, #0]

  osKernelStart();
 8000ee2:	f011 feff 	bl	8012ce4 <osKernelStart>

    /* Loop forever */
	while(1){
 8000ee6:	e7fe      	b.n	8000ee6 <main+0x9a>
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	58020000 	.word	0x58020000
 8000ef0:	240051e8 	.word	0x240051e8
 8000ef4:	24005104 	.word	0x24005104
 8000ef8:	08016674 	.word	0x08016674
 8000efc:	080014d5 	.word	0x080014d5
 8000f00:	24005158 	.word	0x24005158
 8000f04:	08016698 	.word	0x08016698
 8000f08:	08001505 	.word	0x08001505
 8000f0c:	2400503c 	.word	0x2400503c
 8000f10:	080166bc 	.word	0x080166bc
 8000f14:	08000a99 	.word	0x08000a99
 8000f18:	24005154 	.word	0x24005154

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0cc      	sub	sp, #304	; 0x130
 8000f20:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f26:	224c      	movs	r2, #76	; 0x4c
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f015 f960 	bl	80161f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f34:	2220      	movs	r2, #32
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f015 f959 	bl	80161f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4618      	mov	r0, r3
 8000f44:	23bc      	movs	r3, #188	; 0xbc
 8000f46:	461a      	mov	r2, r3
 8000f48:	2100      	movs	r1, #0
 8000f4a:	f015 f951 	bl	80161f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f4e:	2002      	movs	r0, #2
 8000f50:	f005 fbce 	bl	80066f0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	4b54      	ldr	r3, [pc, #336]	; (80010ac <SystemClock_Config+0x190>)
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	4a53      	ldr	r2, [pc, #332]	; (80010ac <SystemClock_Config+0x190>)
 8000f60:	f023 0301 	bic.w	r3, r3, #1
 8000f64:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000f66:	4b51      	ldr	r3, [pc, #324]	; (80010ac <SystemClock_Config+0x190>)
 8000f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f6a:	f003 0201 	and.w	r2, r3, #1
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4b4f      	ldr	r3, [pc, #316]	; (80010b0 <SystemClock_Config+0x194>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7a:	4a4d      	ldr	r2, [pc, #308]	; (80010b0 <SystemClock_Config+0x194>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6193      	str	r3, [r2, #24]
 8000f82:	4b4b      	ldr	r3, [pc, #300]	; (80010b0 <SystemClock_Config+0x194>)
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f92:	bf00      	nop
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <SystemClock_Config+0x194>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fa0:	d1f8      	bne.n	8000f94 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000fa2:	2321      	movs	r3, #33	; 0x21
 8000fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000fc8:	2332      	movs	r3, #50	; 0x32
 8000fca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000fda:	2308      	movs	r3, #8
 8000fdc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 fbc4 	bl	8006784 <HAL_RCC_OscConfig>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001002:	f000 fa99 	bl	8001538 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001006:	233f      	movs	r3, #63	; 0x3f
 8001008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001018:	2308      	movs	r3, #8
 800101a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001030:	2340      	movs	r3, #64	; 0x40
 8001032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001036:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800103a:	2101      	movs	r1, #1
 800103c:	4618      	mov	r0, r3
 800103e:	f005 ffb1 	bl	8006fa4 <HAL_RCC_ClockConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x130>
  {
    Error_Handler();
 8001048:	f000 fa76 	bl	8001538 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_SDMMC
 800104c:	f107 0308 	add.w	r3, r7, #8
 8001050:	4a18      	ldr	r2, [pc, #96]	; (80010b4 <SystemClock_Config+0x198>)
 8001052:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2200      	movs	r2, #0
 800105a:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800105c:	f107 0308 	add.w	r3, r7, #8
 8001060:	2200      	movs	r2, #0
 8001062:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2200      	movs	r2, #0
 800106a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8001076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	4618      	mov	r0, r3
 8001080:	f006 fbc0 	bl	8007804 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0x172>
  {
    Error_Handler();
 800108a:	f000 fa55 	bl	8001538 <Error_Handler>
  }
 
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCODIV_1);
 800108e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001092:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001096:	2001      	movs	r0, #1
 8001098:	f006 f93a 	bl	8007310 <HAL_RCC_MCOConfig>

  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800109c:	f005 fb62 	bl	8006764 <HAL_PWREx_EnableUSBVoltageDetector>
}
 80010a0:	bf00      	nop
 80010a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	58000400 	.word	0x58000400
 80010b0:	58024800 	.word	0x58024800
 80010b4:	0005000a 	.word	0x0005000a

080010b8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0

  hdcmi.Instance = DCMI;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_DCMI_Init+0x60>)
 80010be:	4a17      	ldr	r2, [pc, #92]	; (800111c <MX_DCMI_Init+0x64>)
 80010c0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_DCMI_Init+0x60>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_DCMI_Init+0x60>)
 80010ca:	2220      	movs	r2, #32
 80010cc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_DCMI_Init+0x60>)
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_DCMI_Init+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_DCMI_Init+0x60>)
 80010dc:	2200      	movs	r2, #0
 80010de:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <MX_DCMI_Init+0x60>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_DCMI_Init+0x60>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_DCMI_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_DCMI_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_DCMI_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_DCMI_Init+0x60>)
 8001100:	2200      	movs	r2, #0
 8001102:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_DCMI_Init+0x60>)
 8001106:	f000 ffa7 	bl	8002058 <HAL_DCMI_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001110:	f000 fa12 	bl	8001538 <Error_Handler>
  }

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	24005104 	.word	0x24005104
 800111c:	48020000 	.word	0x48020000

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_DMA_Init+0x3c>)
 8001128:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800112c:	4a0b      	ldr	r2, [pc, #44]	; (800115c <MX_DMA_Init+0x3c>)
 800112e:	f043 0301 	orr.w	r3, r3, #1
 8001132:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <MX_DMA_Init+0x3c>)
 8001138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001144:	2200      	movs	r2, #0
 8001146:	2105      	movs	r1, #5
 8001148:	200b      	movs	r0, #11
 800114a:	f000 ff5d 	bl	8002008 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800114e:	200b      	movs	r0, #11
 8001150:	f000 ff74 	bl	800203c <HAL_NVIC_EnableIRQ>

}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58024400 	.word	0x58024400

08001160 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <MX_GPIO_Init+0x148>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a4a      	ldr	r2, [pc, #296]	; (80012a8 <MX_GPIO_Init+0x148>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <MX_GPIO_Init+0x148>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b44      	ldr	r3, [pc, #272]	; (80012a8 <MX_GPIO_Init+0x148>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a43      	ldr	r2, [pc, #268]	; (80012a8 <MX_GPIO_Init+0x148>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b40      	ldr	r3, [pc, #256]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a3b      	ldr	r2, [pc, #236]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011ba:	f043 0302 	orr.w	r3, r3, #2
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b39      	ldr	r3, [pc, #228]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d6:	4a34      	ldr	r2, [pc, #208]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e0:	4b31      	ldr	r3, [pc, #196]	; (80012a8 <MX_GPIO_Init+0x148>)
 80011e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAM_En_GPIO_Port, CAM_En_Pin, GPIO_PIN_SET);
 80011ee:	2201      	movs	r2, #1
 80011f0:	2104      	movs	r1, #4
 80011f2:	482e      	ldr	r0, [pc, #184]	; (80012ac <MX_GPIO_Init+0x14c>)
 80011f4:	f003 fcca 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_Reset_Pin|CAM_Pwdn_Pin, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	210c      	movs	r1, #12
 80011fc:	482c      	ldr	r0, [pc, #176]	; (80012b0 <MX_GPIO_Init+0x150>)
 80011fe:	f003 fcc5 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRV_Dir_Pin|DRV_Step_Pin, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	21a0      	movs	r1, #160	; 0xa0
 8001206:	482a      	ldr	r0, [pc, #168]	; (80012b0 <MX_GPIO_Init+0x150>)
 8001208:	f003 fcc0 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRV_Reset_GPIO_Port, DRV_Reset_Pin, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	2120      	movs	r1, #32
 8001210:	4826      	ldr	r0, [pc, #152]	; (80012ac <MX_GPIO_Init+0x14c>)
 8001212:	f003 fcbb 	bl	8004b8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAM_En_Pin */
  GPIO_InitStruct.Pin = CAM_En_Pin;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001222:	2301      	movs	r3, #1
 8001224:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAM_En_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	481f      	ldr	r0, [pc, #124]	; (80012ac <MX_GPIO_Init+0x14c>)
 800122e:	f003 fae5 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_Reset_Pin CAM_Pwdn_Pin */
  GPIO_InitStruct.Pin = CAM_Reset_Pin|CAM_Pwdn_Pin;
 8001232:	230c      	movs	r3, #12
 8001234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001236:	2301      	movs	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800123e:	2301      	movs	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4819      	ldr	r0, [pc, #100]	; (80012b0 <MX_GPIO_Init+0x150>)
 800124a:	f003 fad7 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DRV_Dir_Pin DRV_Step_Pin */
  GPIO_InitStruct.Pin = DRV_Dir_Pin|DRV_Step_Pin;
 800124e:	23a0      	movs	r3, #160	; 0xa0
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_GPIO_Init+0x150>)
 8001266:	f003 fac9 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_Reset_Pin */
  GPIO_InitStruct.Pin = DRV_Reset_Pin;
 800126a:	2320      	movs	r3, #32
 800126c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126e:	2301      	movs	r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DRV_Reset_GPIO_Port, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	480a      	ldr	r0, [pc, #40]	; (80012ac <MX_GPIO_Init+0x14c>)
 8001282:	f003 fabb 	bl	80047fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Detect_SDIO_Pin PB2 */
  GPIO_InitStruct.Pin = Detect_SDIO_Pin|GPIO_PIN_2;
 8001286:	2305      	movs	r3, #5
 8001288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4806      	ldr	r0, [pc, #24]	; (80012b4 <MX_GPIO_Init+0x154>)
 800129a:	f003 faaf 	bl	80047fc <HAL_GPIO_Init>

}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	58024400 	.word	0x58024400
 80012ac:	58020800 	.word	0x58020800
 80012b0:	58020000 	.word	0x58020000
 80012b4:	58020400 	.word	0x58020400

080012b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_UART4_Init+0xa0>)
 80012be:	4a27      	ldr	r2, [pc, #156]	; (800135c <MX_UART4_Init+0xa4>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_UART4_Init+0xa0>)
 80012c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_UART4_Init+0xa0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_UART4_Init+0xa0>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_UART4_Init+0xa0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012dc:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_UART4_Init+0xa0>)
 80012de:	220c      	movs	r2, #12
 80012e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_UART4_Init+0xa0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_UART4_Init+0xa0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_UART4_Init+0xa0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_UART4_Init+0xa0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_UART4_Init+0xa0>)
 80012fc:	2230      	movs	r2, #48	; 0x30
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001300:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_UART4_Init+0xa0>)
 8001302:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001306:	63da      	str	r2, [r3, #60]	; 0x3c
  huart4.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_UART4_Init+0xa0>)
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_UART4_Init+0xa0>)
 8001312:	f00a fdd1 	bl	800beb8 <HAL_UART_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_UART4_Init+0x68>
  {
    Error_Handler();
 800131c:	f000 f90c 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_UART4_Init+0xa0>)
 8001324:	f00b fed1 	bl	800d0ca <HAL_UARTEx_SetTxFifoThreshold>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_UART4_Init+0x7a>
  {
    Error_Handler();
 800132e:	f000 f903 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_UART4_Init+0xa0>)
 8001336:	f00b ff06 	bl	800d146 <HAL_UARTEx_SetRxFifoThreshold>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001340:	f000 f8fa 	bl	8001538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_UART4_Init+0xa0>)
 8001346:	f00b fe87 	bl	800d058 <HAL_UARTEx_DisableFifoMode>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_UART4_Init+0x9c>
  {
    Error_Handler();
 8001350:	f000 f8f2 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	2400515c 	.word	0x2400515c
 800135c:	40004c00 	.word	0x40004c00

08001360 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b092      	sub	sp, #72	; 0x48
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137a:	463b      	mov	r3, r7
 800137c:	222c      	movs	r2, #44	; 0x2c
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f014 ff35 	bl	80161f0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001386:	4b31      	ldr	r3, [pc, #196]	; (800144c <MX_TIM16_Init+0xec>)
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <MX_TIM16_Init+0xf0>)
 800138a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 999;
 800138c:	4b2f      	ldr	r3, [pc, #188]	; (800144c <MX_TIM16_Init+0xec>)
 800138e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001392:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <MX_TIM16_Init+0xec>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <MX_TIM16_Init+0xec>)
 800139c:	22ff      	movs	r2, #255	; 0xff
 800139e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <MX_TIM16_Init+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80013a6:	4b29      	ldr	r3, [pc, #164]	; (800144c <MX_TIM16_Init+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <MX_TIM16_Init+0xec>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013b2:	4826      	ldr	r0, [pc, #152]	; (800144c <MX_TIM16_Init+0xec>)
 80013b4:	f009 fca6 	bl	800ad04 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80013be:	f000 f8bb 	bl	8001538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80013c2:	4822      	ldr	r0, [pc, #136]	; (800144c <MX_TIM16_Init+0xec>)
 80013c4:	f009 fd2c 	bl	800ae20 <HAL_TIM_PWM_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80013ce:	f000 f8b3 	bl	8001538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d2:	2360      	movs	r3, #96	; 0x60
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 15000;
 80013d6:	f643 2398 	movw	r3, #15000	; 0x3a98
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013dc:	2300      	movs	r3, #0
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	2200      	movs	r2, #0
 80013f6:	4619      	mov	r1, r3
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_TIM16_Init+0xec>)
 80013fa:	f009 fffb 	bl	800b3f4 <HAL_TIM_PWM_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001404:	f000 f898 	bl	8001538 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM16_Init+0xec>)
 8001430:	f00a fca6 	bl	800bd80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800143a:	f000 f87d 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM16_Init+0xec>)
 8001440:	f000 fae2 	bl	8001a08 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3748      	adds	r7, #72	; 0x48
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	240115a8 	.word	0x240115a8
 8001450:	40014400 	.word	0x40014400

08001454 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_I2C2_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <MX_I2C2_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xD01016F3;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <MX_I2C2_Init+0x7c>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_I2C2_Init+0x74>)
 800146c:	2201      	movs	r2, #1
 800146e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_I2C2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_I2C2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800148e:	480e      	ldr	r0, [pc, #56]	; (80014c8 <MX_I2C2_Init+0x74>)
 8001490:	f003 fb96 	bl	8004bc0 <HAL_I2C_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800149a:	f000 f84d 	bl	8001538 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800149e:	2100      	movs	r1, #0
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <MX_I2C2_Init+0x74>)
 80014a2:	f003 fe85 	bl	80051b0 <HAL_I2CEx_ConfigAnalogFilter>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014ac:	f000 f844 	bl	8001538 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_I2C2_Init+0x74>)
 80014b4:	f003 fec7 	bl	8005246 <HAL_I2CEx_ConfigDigitalFilter>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014be:	f000 f83b 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	24005040 	.word	0x24005040
 80014cc:	40005800 	.word	0x40005800
 80014d0:	d01016f3 	.word	0xd01016f3

080014d4 <ControlTask>:
  * @brief  Function implementing the controlTask thread.
  * @param  argument: Not used
  * @retval None
  */
void ControlTask(void *argument)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  MX_I2C2_Init();
 80014dc:	f7ff ffba 	bl	8001454 <MX_I2C2_Init>
  MX_UART4_Init();
 80014e0:	f7ff feea 	bl	80012b8 <MX_UART4_Init>
  uart_terminal_init(&huart4);
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <ControlTask+0x28>)
 80014e6:	f7ff fb17 	bl	8000b18 <uart_terminal_init>
  uart_terminal_print("Control task start!\n");
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <ControlTask+0x2c>)
 80014ec:	f7ff fb28 	bl	8000b40 <uart_terminal_print>
  for(;;)
  {
    //uart_terminal_print("Loop\n");
    uart_terminal_cmd_def();
 80014f0:	f7ff fb46 	bl	8000b80 <uart_terminal_cmd_def>
    osDelay(100);
 80014f4:	2064      	movs	r0, #100	; 0x64
 80014f6:	f011 fcd1 	bl	8012e9c <osDelay>
  {
 80014fa:	e7f9      	b.n	80014f0 <ControlTask+0x1c>
 80014fc:	2400515c 	.word	0x2400515c
 8001500:	080165f0 	.word	0x080165f0

08001504 <ModulesTask>:
  }

}

void ModulesTask(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]

  for(;;)
  {
    osDelay(1);
 800150c:	2001      	movs	r0, #1
 800150e:	f011 fcc5 	bl	8012e9c <osDelay>
 8001512:	e7fb      	b.n	800150c <ModulesTask+0x8>

08001514 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d101      	bne.n	800152a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001526:	f000 fc69 	bl	8001dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40001c00 	.word	0x40001c00

08001538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153e:	e7fe      	b.n	800153e <Error_Handler+0x6>

08001540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_MspInit+0x38>)
 8001548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_MspInit+0x38>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_MspInit+0x38>)
 8001558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001564:	2200      	movs	r2, #0
 8001566:	210f      	movs	r1, #15
 8001568:	f06f 0001 	mvn.w	r0, #1
 800156c:	f000 fd4c 	bl	8002008 <HAL_NVIC_SetPriority>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58024400 	.word	0x58024400

0800157c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08e      	sub	sp, #56	; 0x38
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a71      	ldr	r2, [pc, #452]	; (8001760 <HAL_DCMI_MspInit+0x1e4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	f040 80dc 	bne.w	8001758 <HAL_DCMI_MspInit+0x1dc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80015a0:	4b70      	ldr	r3, [pc, #448]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015a2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80015a6:	4a6f      	ldr	r2, [pc, #444]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80015b0:	4b6c      	ldr	r3, [pc, #432]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
 80015bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015be:	4b69      	ldr	r3, [pc, #420]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c4:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e2:	4a60      	ldr	r2, [pc, #384]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ec:	4b5d      	ldr	r3, [pc, #372]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b5a      	ldr	r3, [pc, #360]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 80015fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 8001602:	f043 0304 	orr.w	r3, r3, #4
 8001606:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800160a:	4b56      	ldr	r3, [pc, #344]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 800160c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b52      	ldr	r3, [pc, #328]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 800161a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161e:	4a51      	ldr	r2, [pc, #324]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 8001620:	f043 0308 	orr.w	r3, r3, #8
 8001624:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001628:	4b4e      	ldr	r3, [pc, #312]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 800162a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	4a49      	ldr	r2, [pc, #292]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 800163e:	f043 0302 	orr.w	r3, r3, #2
 8001642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_DCMI_MspInit+0x1e8>)
 8001648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_1;
 8001654:	2372      	movs	r3, #114	; 0x72
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001664:	230d      	movs	r3, #13
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	483e      	ldr	r0, [pc, #248]	; (8001768 <HAL_DCMI_MspInit+0x1ec>)
 8001670:	f003 f8c4 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001674:	2350      	movs	r3, #80	; 0x50
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001684:	230d      	movs	r3, #13
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4837      	ldr	r0, [pc, #220]	; (800176c <HAL_DCMI_MspInit+0x1f0>)
 8001690:	f003 f8b4 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001694:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a2:	2300      	movs	r3, #0
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016a6:	230d      	movs	r3, #13
 80016a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ae:	4619      	mov	r1, r3
 80016b0:	482f      	ldr	r0, [pc, #188]	; (8001770 <HAL_DCMI_MspInit+0x1f4>)
 80016b2:	f003 f8a3 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016b6:	2308      	movs	r3, #8
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016c6:	230d      	movs	r3, #13
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	4828      	ldr	r0, [pc, #160]	; (8001774 <HAL_DCMI_MspInit+0x1f8>)
 80016d2:	f003 f893 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	2300      	movs	r3, #0
 80016e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016e6:	230d      	movs	r3, #13
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ee:	4619      	mov	r1, r3
 80016f0:	4821      	ldr	r0, [pc, #132]	; (8001778 <HAL_DCMI_MspInit+0x1fc>)
 80016f2:	f003 f883 	bl	80047fc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80016f6:	4b21      	ldr	r3, [pc, #132]	; (800177c <HAL_DCMI_MspInit+0x200>)
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <HAL_DCMI_MspInit+0x204>)
 80016fa:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <HAL_DCMI_MspInit+0x200>)
 80016fe:	224b      	movs	r2, #75	; 0x4b
 8001700:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_DCMI_MspInit+0x200>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001714:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800171c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001720:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001724:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800172c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001734:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <HAL_DCMI_MspInit+0x200>)
 800173e:	f000 fee1 	bl	8002504 <HAL_DMA_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_DCMI_MspInit+0x1d0>
    {
      Error_Handler();
 8001748:	f7ff fef6 	bl	8001538 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001750:	649a      	str	r2, [r3, #72]	; 0x48
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_DCMI_MspInit+0x200>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6393      	str	r3, [r2, #56]	; 0x38

  }

}
 8001758:	bf00      	nop
 800175a:	3738      	adds	r7, #56	; 0x38
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	48020000 	.word	0x48020000
 8001764:	58024400 	.word	0x58024400
 8001768:	58021000 	.word	0x58021000
 800176c:	58020000 	.word	0x58020000
 8001770:	58020800 	.word	0x58020800
 8001774:	58020c00 	.word	0x58020c00
 8001778:	58020400 	.word	0x58020400
 800177c:	2400508c 	.word	0x2400508c
 8001780:	40020010 	.word	0x40020010

08001784 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08c      	sub	sp, #48	; 0x30
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 031c 	add.w	r3, r7, #28
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a39      	ldr	r2, [pc, #228]	; (8001888 <HAL_SD_MspInit+0x104>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d16c      	bne.n	8001880 <HAL_SD_MspInit+0xfc>
  {
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_SD_MspInit+0x108>)
 80017a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017ac:	4a37      	ldr	r2, [pc, #220]	; (800188c <HAL_SD_MspInit+0x108>)
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80017b6:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_SD_MspInit+0x108>)
 80017b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	61bb      	str	r3, [r7, #24]
 80017c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c4:	4b31      	ldr	r3, [pc, #196]	; (800188c <HAL_SD_MspInit+0x108>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a30      	ldr	r2, [pc, #192]	; (800188c <HAL_SD_MspInit+0x108>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_SD_MspInit+0x108>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_SD_MspInit+0x108>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a28      	ldr	r2, [pc, #160]	; (800188c <HAL_SD_MspInit+0x108>)
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b26      	ldr	r3, [pc, #152]	; (800188c <HAL_SD_MspInit+0x108>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_SD_MspInit+0x108>)
 8001802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001806:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_SD_MspInit+0x108>)
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001810:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_SD_MspInit+0x108>)
 8001812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> SDMMC2_D1
    PD7     ------> SDMMC2_CMD
    PB3 (JTDO/TRACESWO)     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 800182e:	2309      	movs	r3, #9
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4815      	ldr	r0, [pc, #84]	; (8001890 <HAL_SD_MspInit+0x10c>)
 800183a:	f002 ffdf 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 800183e:	f24c 0318 	movw	r3, #49176	; 0xc018
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8001850:	2309      	movs	r3, #9
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	480e      	ldr	r0, [pc, #56]	; (8001894 <HAL_SD_MspInit+0x110>)
 800185c:	f002 ffce 	bl	80047fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001864:	2302      	movs	r3, #2
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186c:	2303      	movs	r3, #3
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDIO2;
 8001870:	230b      	movs	r3, #11
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001874:	f107 031c 	add.w	r3, r7, #28
 8001878:	4619      	mov	r1, r3
 800187a:	4807      	ldr	r0, [pc, #28]	; (8001898 <HAL_SD_MspInit+0x114>)
 800187c:	f002 ffbe 	bl	80047fc <HAL_GPIO_Init>

  }

}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	; 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	48022400 	.word	0x48022400
 800188c:	58024400 	.word	0x58024400
 8001890:	58020800 	.word	0x58020800
 8001894:	58020400 	.word	0x58020400
 8001898:	58020c00 	.word	0x58020c00

0800189c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08a      	sub	sp, #40	; 0x28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1a      	ldr	r2, [pc, #104]	; (8001924 <HAL_I2C_MspInit+0x88>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12e      	bne.n	800191c <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80018dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e2:	2312      	movs	r3, #18
 80018e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ea:	2303      	movs	r3, #3
 80018ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ee:	2304      	movs	r3, #4
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	; (800192c <HAL_I2C_MspInit+0x90>)
 80018fa:	f002 ff7f 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 8001900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 8001906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800190a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <HAL_I2C_MspInit+0x8c>)
 8001910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40005800 	.word	0x40005800
 8001928:	58024400 	.word	0x58024400
 800192c:	58020400 	.word	0x58020400

08001930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	; 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_UART_MspInit+0x88>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d12d      	bne.n	80019ae <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_UART_MspInit+0x8c>)
 8001954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001958:	4a18      	ldr	r2, [pc, #96]	; (80019bc <HAL_UART_MspInit+0x8c>)
 800195a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800195e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_UART_MspInit+0x8c>)
 8001964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_UART_MspInit+0x8c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_UART_MspInit+0x8c>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <HAL_UART_MspInit+0x8c>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198e:	2303      	movs	r3, #3
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800199e:	2308      	movs	r3, #8
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	; (80019c0 <HAL_UART_MspInit+0x90>)
 80019aa:	f002 ff27 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	; 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40004c00 	.word	0x40004c00
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58020000 	.word	0x58020000

080019c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0b      	ldr	r2, [pc, #44]	; (8001a00 <HAL_TIM_Base_MspInit+0x3c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_TIM_Base_MspInit+0x40>)
 80019d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019dc:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_TIM_Base_MspInit+0x40>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <HAL_TIM_Base_MspInit+0x40>)
 80019e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40014400 	.word	0x40014400
 8001a04:	58024400 	.word	0x58024400

08001a08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <HAL_TIM_MspPostInit+0x6c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d11f      	bne.n	8001a6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_TIM_MspPostInit+0x70>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <HAL_TIM_MspPostInit+0x70>)
 8001a32:	f043 0302 	orr.w	r3, r3, #2
 8001a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_TIM_MspPostInit+0x70>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PB8     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_TIM_MspPostInit+0x74>)
 8001a66:	f002 fec9 	bl	80047fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3720      	adds	r7, #32
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40014400 	.word	0x40014400
 8001a78:	58024400 	.word	0x58024400
 8001a7c:	58020400 	.word	0x58020400

08001a80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b090      	sub	sp, #64	; 0x40
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM13 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	d827      	bhi.n	8001ade <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0U);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	202c      	movs	r0, #44	; 0x2c
 8001a94:	f000 fab8 	bl	8002008 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001a98:	202c      	movs	r0, #44	; 0x2c
 8001a9a:	f000 facf 	bl	800203c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001a9e:	4a29      	ldr	r2, [pc, #164]	; (8001b44 <HAL_InitTick+0xc4>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <HAL_InitTick+0xc8>)
 8001aa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aaa:	4a27      	ldr	r2, [pc, #156]	; (8001b48 <HAL_InitTick+0xc8>)
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_InitTick+0xc8>)
 8001ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac2:	f107 0210 	add.w	r2, r7, #16
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f005 fe57 	bl	8007780 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM13 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d106      	bne.n	8001aea <HAL_InitTick+0x6a>
 8001adc:	e001      	b.n	8001ae2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e02b      	b.n	8001b3a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ae2:	f005 fe21 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8001ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001ae8:	e004      	b.n	8001af4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001aea:	f005 fe1d 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 8001aee:	4603      	mov	r3, r0
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_InitTick+0xcc>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9b      	lsrs	r3, r3, #18
 8001afe:	3b01      	subs	r3, #1
 8001b00:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b04:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <HAL_InitTick+0xd4>)
 8001b06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b0e:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001b10:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b14:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001b22:	480b      	ldr	r0, [pc, #44]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b24:	f009 f8ee 	bl	800ad04 <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001b2e:	4808      	ldr	r0, [pc, #32]	; (8001b50 <HAL_InitTick+0xd0>)
 8001b30:	f009 f940 	bl	800adb4 <HAL_TIM_Base_Start_IT>
 8001b34:	4603      	mov	r3, r0
 8001b36:	e000      	b.n	8001b3a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3740      	adds	r7, #64	; 0x40
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2400009c 	.word	0x2400009c
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	431bde83 	.word	0x431bde83
 8001b50:	240115f4 	.word	0x240115f4
 8001b54:	40001c00 	.word	0x40001c00

08001b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <NMI_Handler+0x4>

08001b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim13);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001b8a:	f009 fb13 	bl	800b1b4 <HAL_TIM_IRQHandler>
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	240115f4 	.word	0x240115f4

08001b98 <OTG_FS_IRQHandler>:

void OTG_FS_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <OTG_FS_IRQHandler+0x10>)
 8001b9e:	f003 fcf5 	bl	800558c <HAL_PCD_IRQHandler>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	24011fbc 	.word	0x24011fbc

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	; (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f014 faaa 	bl	8016134 <__errno>
 8001be0:	4602      	mov	r2, r0
 8001be2:	230c      	movs	r3, #12
 8001be4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	; (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	24080000 	.word	0x24080000
 8001c0c:	00000800 	.word	0x00000800
 8001c10:	2400066c 	.word	0x2400066c
 8001c14:	240123c8 	.word	0x240123c8

08001c18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001c1c:	f000 f826 	bl	8001c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c22:	490d      	ldr	r1, [pc, #52]	; (8001c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <LoopForever+0xe>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c38:	4c0a      	ldr	r4, [pc, #40]	; (8001c64 <LoopForever+0x16>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c46:	f014 fa7b 	bl	8016140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c4a:	f7ff f8ff 	bl	8000e4c <main>

08001c4e <LoopForever>:

LoopForever:
    b LoopForever
 8001c4e:	e7fe      	b.n	8001c4e <LoopForever>
  ldr   r0, =_estack
 8001c50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c58:	240003d0 	.word	0x240003d0
  ldr r2, =_sidata
 8001c5c:	08016864 	.word	0x08016864
  ldr r2, =_sbss
 8001c60:	240003d0 	.word	0x240003d0
  ldr r4, =_ebss
 8001c64:	240123c8 	.word	0x240123c8

08001c68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c68:	e7fe      	b.n	8001c68 <ADC1_2_IRQHandler>
	...

08001c6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c70:	4b39      	ldr	r3, [pc, #228]	; (8001d58 <SystemInit+0xec>)
 8001c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c76:	4a38      	ldr	r2, [pc, #224]	; (8001d58 <SystemInit+0xec>)
 8001c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c80:	4b36      	ldr	r3, [pc, #216]	; (8001d5c <SystemInit+0xf0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d807      	bhi.n	8001c9c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c8c:	4b33      	ldr	r3, [pc, #204]	; (8001d5c <SystemInit+0xf0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 030f 	bic.w	r3, r3, #15
 8001c94:	4a31      	ldr	r2, [pc, #196]	; (8001d5c <SystemInit+0xf0>)
 8001c96:	f043 0307 	orr.w	r3, r3, #7
 8001c9a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <SystemInit+0xf4>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a2f      	ldr	r2, [pc, #188]	; (8001d60 <SystemInit+0xf4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <SystemInit+0xf4>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <SystemInit+0xf4>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	492b      	ldr	r1, [pc, #172]	; (8001d60 <SystemInit+0xf4>)
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <SystemInit+0xf8>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cba:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <SystemInit+0xf0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	2b07      	cmp	r3, #7
 8001cc4:	d907      	bls.n	8001cd6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc6:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <SystemInit+0xf0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 030f 	bic.w	r3, r3, #15
 8001cce:	4a23      	ldr	r2, [pc, #140]	; (8001d5c <SystemInit+0xf0>)
 8001cd0:	f043 0307 	orr.w	r3, r3, #7
 8001cd4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <SystemInit+0xf4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cdc:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <SystemInit+0xf4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ce2:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <SystemInit+0xf4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <SystemInit+0xf4>)
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <SystemInit+0xfc>)
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <SystemInit+0xf4>)
 8001cf0:	4a1e      	ldr	r2, [pc, #120]	; (8001d6c <SystemInit+0x100>)
 8001cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <SystemInit+0xf4>)
 8001cf6:	4a1e      	ldr	r2, [pc, #120]	; (8001d70 <SystemInit+0x104>)
 8001cf8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <SystemInit+0xf4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <SystemInit+0xf4>)
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <SystemInit+0x104>)
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <SystemInit+0xf4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <SystemInit+0xf4>)
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <SystemInit+0x104>)
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d12:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <SystemInit+0xf4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <SystemInit+0xf4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <SystemInit+0xf4>)
 8001d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <SystemInit+0xf4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d2a:	4b12      	ldr	r3, [pc, #72]	; (8001d74 <SystemInit+0x108>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <SystemInit+0x10c>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d36:	d202      	bcs.n	8001d3e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d38:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <SystemInit+0x110>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <SystemInit+0x114>)
 8001d40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d44:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SystemInit+0xec>)
 8001d48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d4c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	52002000 	.word	0x52002000
 8001d60:	58024400 	.word	0x58024400
 8001d64:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d68:	02020200 	.word	0x02020200
 8001d6c:	01ff0000 	.word	0x01ff0000
 8001d70:	01010280 	.word	0x01010280
 8001d74:	5c001000 	.word	0x5c001000
 8001d78:	ffff0000 	.word	0xffff0000
 8001d7c:	51008108 	.word	0x51008108
 8001d80:	52004000 	.word	0x52004000

08001d84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d8a:	2003      	movs	r0, #3
 8001d8c:	f000 f931 	bl	8001ff2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d90:	f005 fb28 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 8001d94:	4601      	mov	r1, r0
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_Init+0x68>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	0a1b      	lsrs	r3, r3, #8
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	4a13      	ldr	r2, [pc, #76]	; (8001df0 <HAL_Init+0x6c>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	f003 031f 	and.w	r3, r3, #31
 8001da8:	fa21 f303 	lsr.w	r3, r1, r3
 8001dac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <HAL_Init+0x68>)
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_Init+0x6c>)
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc4:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_Init+0x70>)
 8001dc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001dc8:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <HAL_Init+0x74>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7ff fe56 	bl	8001a80 <HAL_InitTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e002      	b.n	8001de4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dde:	f7ff fbaf 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	58024400 	.word	0x58024400
 8001df0:	080166e0 	.word	0x080166e0
 8001df4:	24000098 	.word	0x24000098
 8001df8:	24000094 	.word	0x24000094

08001dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	240000a0 	.word	0x240000a0
 8001e20:	24011640 	.word	0x24011640

08001e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	24011640 	.word	0x24011640

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff ffee 	bl	8001e24 <HAL_GetTick>
 8001e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_Delay+0x40>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	bf00      	nop
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	bf00      	nop
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	240000a0 	.word	0x240000a0

08001e80 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_GetREVID+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	0c1b      	lsrs	r3, r3, #16
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	5c001000 	.word	0x5c001000

08001e98 <__NVIC_SetPriorityGrouping>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ec0:	4b06      	ldr	r3, [pc, #24]	; (8001edc <__NVIC_SetPriorityGrouping+0x44>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00
 8001edc:	05fa0000 	.word	0x05fa0000

08001ee0 <__NVIC_GetPriorityGrouping>:
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee4:	4b04      	ldr	r3, [pc, #16]	; (8001ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	f003 0307 	and.w	r3, r3, #7
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <__NVIC_EnableIRQ>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	db0b      	blt.n	8001f26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 021f 	and.w	r2, r3, #31
 8001f14:	4907      	ldr	r1, [pc, #28]	; (8001f34 <__NVIC_EnableIRQ+0x38>)
 8001f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f1a:	095b      	lsrs	r3, r3, #5
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <__NVIC_SetPriority>:
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	6039      	str	r1, [r7, #0]
 8001f42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	db0a      	blt.n	8001f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	490c      	ldr	r1, [pc, #48]	; (8001f84 <__NVIC_SetPriority+0x4c>)
 8001f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	440b      	add	r3, r1
 8001f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f60:	e00a      	b.n	8001f78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4908      	ldr	r1, [pc, #32]	; (8001f88 <__NVIC_SetPriority+0x50>)
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	3b04      	subs	r3, #4
 8001f70:	0112      	lsls	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	761a      	strb	r2, [r3, #24]
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	e000e100 	.word	0xe000e100
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <NVIC_EncodePriority>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f1c3 0307 	rsb	r3, r3, #7
 8001fa6:	2b04      	cmp	r3, #4
 8001fa8:	bf28      	it	cs
 8001faa:	2304      	movcs	r3, #4
 8001fac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d902      	bls.n	8001fbc <NVIC_EncodePriority+0x30>
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3b03      	subs	r3, #3
 8001fba:	e000      	b.n	8001fbe <NVIC_EncodePriority+0x32>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	401a      	ands	r2, r3
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43d9      	mvns	r1, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	4313      	orrs	r3, r2
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3724      	adds	r7, #36	; 0x24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ff4c 	bl	8001e98 <__NVIC_SetPriorityGrouping>
}
 8002000:	bf00      	nop
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
 8002014:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002016:	f7ff ff63 	bl	8001ee0 <__NVIC_GetPriorityGrouping>
 800201a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	68b9      	ldr	r1, [r7, #8]
 8002020:	6978      	ldr	r0, [r7, #20]
 8002022:	f7ff ffb3 	bl	8001f8c <NVIC_EncodePriority>
 8002026:	4602      	mov	r2, r0
 8002028:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff82 	bl	8001f38 <__NVIC_SetPriority>
}
 8002034:	bf00      	nop
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff56 	bl	8001efc <__NVIC_EnableIRQ>
}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e069      	b.n	800213e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d102      	bne.n	800207c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fa80 	bl	800157c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b2a      	ldr	r3, [pc, #168]	; (8002148 <HAL_DCMI_Init+0xf0>)
 800209e:	400b      	ands	r3, r1
 80020a0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6819      	ldr	r1, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80020c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80020ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80020da:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80020e6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b10      	cmp	r3, #16
 80020f6:	d112      	bne.n	800211e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f1b      	ldrb	r3, [r3, #28]
 80020fc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	7f5b      	ldrb	r3, [r3, #29]
 8002102:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002104:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7f9b      	ldrb	r3, [r3, #30]
 800210a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800210c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7fdb      	ldrb	r3, [r3, #31]
 8002114:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800211a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800211c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 021e 	orr.w	r2, r2, #30
 800212c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	ffe0f007 	.word	0xffe0f007

0800214c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	60b9      	str	r1, [r7, #8]
 8002156:	607a      	str	r2, [r7, #4]
 8002158:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_DCMI_Start_DMA+0x1c>
 8002164:	2302      	movs	r3, #2
 8002166:	e0ab      	b.n	80022c0 <HAL_DCMI_Start_DMA+0x174>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2202      	movs	r2, #2
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002186:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0202 	bic.w	r2, r2, #2
 8002196:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4a46      	ldr	r2, [pc, #280]	; (80022c8 <HAL_DCMI_Start_DMA+0x17c>)
 80021ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	4a45      	ldr	r2, [pc, #276]	; (80022cc <HAL_DCMI_Start_DMA+0x180>)
 80021b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021bc:	2200      	movs	r2, #0
 80021be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021de:	d219      	bcs.n	8002214 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3328      	adds	r3, #40	; 0x28
 80021ea:	4619      	mov	r1, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	f000 fce4 	bl	8002bbc <HAL_DMA_Start_IT>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d055      	beq.n	80022a6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2240      	movs	r2, #64	; 0x40
 80021fe:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e055      	b.n	80022c0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002218:	4a2b      	ldr	r2, [pc, #172]	; (80022c8 <HAL_DCMI_Start_DMA+0x17c>)
 800221a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2201      	movs	r2, #1
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800222e:	e009      	b.n	8002244 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	085a      	lsrs	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800223e:	005a      	lsls	r2, r3, #1
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d2f0      	bcs.n	8002230 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	1e9a      	subs	r2, r3, #2
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	3328      	adds	r3, #40	; 0x28
 8002276:	4619      	mov	r1, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	f001 fe0b 	bl	8003e9c <HAL_DMAEx_MultiBufferStart_IT>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2240      	movs	r2, #64	; 0x40
 8002290:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00c      	b.n	80022c0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f042 0201 	orr.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	080023a5 	.word	0x080023a5
 80022cc:	080024cb 	.word	0x080024cb

080022d0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_DCMI_Stop+0xb8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_DCMI_Stop+0xbc>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	0a5b      	lsrs	r3, r3, #9
 80022e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_DCMI_Stop+0x30>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e03f      	b.n	8002380 <HAL_DCMI_Stop+0xb0>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3b01      	subs	r3, #1
 8002324:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d108      	bne.n	800233e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	f043 0220 	orr.w	r2, r3, #32
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	72fb      	strb	r3, [r7, #11]
      break;
 800233c:	e006      	b.n	800234c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1e9      	bne.n	8002320 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800235a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002360:	4618      	mov	r0, r3
 8002362:	f000 fe95 	bl	8003090 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800237e:	7afb      	ldrb	r3, [r7, #11]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	24000094 	.word	0x24000094
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d043      	beq.n	8002442 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d118      	bne.n	8002406 <DCMI_DMAXferCplt+0x62>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d015      	beq.n	8002406 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	00da      	lsls	r2, r3, #3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4413      	add	r3, r2
 80023f2:	2200      	movs	r2, #0
 80023f4:	4619      	mov	r1, r3
 80023f6:	f002 f8af 	bl	8004558 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	1e5a      	subs	r2, r3, #1
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
 8002404:	e044      	b.n	8002490 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d13c      	bne.n	8002490 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002428:	00da      	lsls	r2, r3, #3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	2201      	movs	r2, #1
 8002430:	4619      	mov	r1, r3
 8002432:	f002 f891 	bl	8004558 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	639a      	str	r2, [r3, #56]	; 0x38
 8002440:	e026      	b.n	8002490 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	e017      	b.n	8002490 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10f      	bne.n	8002490 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247a:	0099      	lsls	r1, r3, #2
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	440a      	add	r2, r1
 8002486:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	429a      	cmp	r2, r3
 800249a:	d112      	bne.n	80024c2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d103      	bne.n	80024c2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b084      	sub	sp, #16
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d009      	beq.n	80024f6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff4a 	bl	8002390 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800250c:	f7ff fc8a 	bl	8001e24 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e316      	b.n	8002b4a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_DMA_Init+0x1b8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d04a      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a65      	ldr	r2, [pc, #404]	; (80026c0 <HAL_DMA_Init+0x1bc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d045      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a63      	ldr	r2, [pc, #396]	; (80026c4 <HAL_DMA_Init+0x1c0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d040      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a62      	ldr	r2, [pc, #392]	; (80026c8 <HAL_DMA_Init+0x1c4>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d03b      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a60      	ldr	r2, [pc, #384]	; (80026cc <HAL_DMA_Init+0x1c8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d036      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a5f      	ldr	r2, [pc, #380]	; (80026d0 <HAL_DMA_Init+0x1cc>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d031      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a5d      	ldr	r2, [pc, #372]	; (80026d4 <HAL_DMA_Init+0x1d0>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d02c      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5c      	ldr	r2, [pc, #368]	; (80026d8 <HAL_DMA_Init+0x1d4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d027      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5a      	ldr	r2, [pc, #360]	; (80026dc <HAL_DMA_Init+0x1d8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d022      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a59      	ldr	r2, [pc, #356]	; (80026e0 <HAL_DMA_Init+0x1dc>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d01d      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a57      	ldr	r2, [pc, #348]	; (80026e4 <HAL_DMA_Init+0x1e0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d018      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a56      	ldr	r2, [pc, #344]	; (80026e8 <HAL_DMA_Init+0x1e4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d013      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a54      	ldr	r2, [pc, #336]	; (80026ec <HAL_DMA_Init+0x1e8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00e      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a53      	ldr	r2, [pc, #332]	; (80026f0 <HAL_DMA_Init+0x1ec>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d009      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a51      	ldr	r2, [pc, #324]	; (80026f4 <HAL_DMA_Init+0x1f0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d004      	beq.n	80025bc <HAL_DMA_Init+0xb8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a50      	ldr	r2, [pc, #320]	; (80026f8 <HAL_DMA_Init+0x1f4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d101      	bne.n	80025c0 <HAL_DMA_Init+0xbc>
 80025bc:	2301      	movs	r3, #1
 80025be:	e000      	b.n	80025c2 <HAL_DMA_Init+0xbe>
 80025c0:	2300      	movs	r3, #0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 813b 	beq.w	800283e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2202      	movs	r2, #2
 80025d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a37      	ldr	r2, [pc, #220]	; (80026bc <HAL_DMA_Init+0x1b8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d04a      	beq.n	8002678 <HAL_DMA_Init+0x174>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a36      	ldr	r2, [pc, #216]	; (80026c0 <HAL_DMA_Init+0x1bc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d045      	beq.n	8002678 <HAL_DMA_Init+0x174>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a34      	ldr	r2, [pc, #208]	; (80026c4 <HAL_DMA_Init+0x1c0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d040      	beq.n	8002678 <HAL_DMA_Init+0x174>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a33      	ldr	r2, [pc, #204]	; (80026c8 <HAL_DMA_Init+0x1c4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d03b      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_DMA_Init+0x1c8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d036      	beq.n	8002678 <HAL_DMA_Init+0x174>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <HAL_DMA_Init+0x1cc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d031      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <HAL_DMA_Init+0x1d0>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d02c      	beq.n	8002678 <HAL_DMA_Init+0x174>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a2d      	ldr	r2, [pc, #180]	; (80026d8 <HAL_DMA_Init+0x1d4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d027      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a2b      	ldr	r2, [pc, #172]	; (80026dc <HAL_DMA_Init+0x1d8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d022      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <HAL_DMA_Init+0x1dc>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d01d      	beq.n	8002678 <HAL_DMA_Init+0x174>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a28      	ldr	r2, [pc, #160]	; (80026e4 <HAL_DMA_Init+0x1e0>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d018      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_DMA_Init+0x1e4>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d013      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_DMA_Init+0x1e8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00e      	beq.n	8002678 <HAL_DMA_Init+0x174>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <HAL_DMA_Init+0x1ec>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d009      	beq.n	8002678 <HAL_DMA_Init+0x174>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <HAL_DMA_Init+0x1f0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d004      	beq.n	8002678 <HAL_DMA_Init+0x174>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a21      	ldr	r2, [pc, #132]	; (80026f8 <HAL_DMA_Init+0x1f4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <HAL_DMA_Init+0x186>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e007      	b.n	800269a <HAL_DMA_Init+0x196>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800269a:	e02f      	b.n	80026fc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800269c:	f7ff fbc2 	bl	8001e24 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d928      	bls.n	80026fc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2203      	movs	r2, #3
 80026b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e246      	b.n	8002b4a <HAL_DMA_Init+0x646>
 80026bc:	40020010 	.word	0x40020010
 80026c0:	40020028 	.word	0x40020028
 80026c4:	40020040 	.word	0x40020040
 80026c8:	40020058 	.word	0x40020058
 80026cc:	40020070 	.word	0x40020070
 80026d0:	40020088 	.word	0x40020088
 80026d4:	400200a0 	.word	0x400200a0
 80026d8:	400200b8 	.word	0x400200b8
 80026dc:	40020410 	.word	0x40020410
 80026e0:	40020428 	.word	0x40020428
 80026e4:	40020440 	.word	0x40020440
 80026e8:	40020458 	.word	0x40020458
 80026ec:	40020470 	.word	0x40020470
 80026f0:	40020488 	.word	0x40020488
 80026f4:	400204a0 	.word	0x400204a0
 80026f8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1c8      	bne.n	800269c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4b83      	ldr	r3, [pc, #524]	; (8002924 <HAL_DMA_Init+0x420>)
 8002716:	4013      	ands	r3, r2
 8002718:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002722:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	2b04      	cmp	r3, #4
 800274e:	d107      	bne.n	8002760 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	4313      	orrs	r3, r2
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002760:	4b71      	ldr	r3, [pc, #452]	; (8002928 <HAL_DMA_Init+0x424>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b71      	ldr	r3, [pc, #452]	; (800292c <HAL_DMA_Init+0x428>)
 8002766:	4013      	ands	r3, r2
 8002768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800276c:	d328      	bcc.n	80027c0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b28      	cmp	r3, #40	; 0x28
 8002774:	d903      	bls.n	800277e <HAL_DMA_Init+0x27a>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b2e      	cmp	r3, #46	; 0x2e
 800277c:	d917      	bls.n	80027ae <HAL_DMA_Init+0x2aa>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b3e      	cmp	r3, #62	; 0x3e
 8002784:	d903      	bls.n	800278e <HAL_DMA_Init+0x28a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b42      	cmp	r3, #66	; 0x42
 800278c:	d90f      	bls.n	80027ae <HAL_DMA_Init+0x2aa>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b46      	cmp	r3, #70	; 0x46
 8002794:	d903      	bls.n	800279e <HAL_DMA_Init+0x29a>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b48      	cmp	r3, #72	; 0x48
 800279c:	d907      	bls.n	80027ae <HAL_DMA_Init+0x2aa>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b4e      	cmp	r3, #78	; 0x4e
 80027a4:	d905      	bls.n	80027b2 <HAL_DMA_Init+0x2ae>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b52      	cmp	r3, #82	; 0x52
 80027ac:	d801      	bhi.n	80027b2 <HAL_DMA_Init+0x2ae>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_DMA_Init+0x2b0>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027be:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f023 0307 	bic.w	r3, r3, #7
 80027d6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d117      	bne.n	800281a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00e      	beq.n	800281a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 f9c3 	bl	8003b88 <DMA_CheckFifoParam>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2240      	movs	r2, #64	; 0x40
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e197      	b.n	8002b4a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f001 f8fe 	bl	8003a24 <DMA_CalcBaseAndBitshift>
 8002828:	4603      	mov	r3, r0
 800282a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002830:	f003 031f 	and.w	r3, r3, #31
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	e0cd      	b.n	80029da <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a3b      	ldr	r2, [pc, #236]	; (8002930 <HAL_DMA_Init+0x42c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d022      	beq.n	800288e <HAL_DMA_Init+0x38a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a39      	ldr	r2, [pc, #228]	; (8002934 <HAL_DMA_Init+0x430>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d01d      	beq.n	800288e <HAL_DMA_Init+0x38a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a38      	ldr	r2, [pc, #224]	; (8002938 <HAL_DMA_Init+0x434>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d018      	beq.n	800288e <HAL_DMA_Init+0x38a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a36      	ldr	r2, [pc, #216]	; (800293c <HAL_DMA_Init+0x438>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d013      	beq.n	800288e <HAL_DMA_Init+0x38a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a35      	ldr	r2, [pc, #212]	; (8002940 <HAL_DMA_Init+0x43c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x38a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a33      	ldr	r2, [pc, #204]	; (8002944 <HAL_DMA_Init+0x440>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_DMA_Init+0x38a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a32      	ldr	r2, [pc, #200]	; (8002948 <HAL_DMA_Init+0x444>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_DMA_Init+0x38a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a30      	ldr	r2, [pc, #192]	; (800294c <HAL_DMA_Init+0x448>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_DMA_Init+0x38e>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_DMA_Init+0x390>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8097 	beq.w	80029c8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a24      	ldr	r2, [pc, #144]	; (8002930 <HAL_DMA_Init+0x42c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d021      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a22      	ldr	r2, [pc, #136]	; (8002934 <HAL_DMA_Init+0x430>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01c      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a21      	ldr	r2, [pc, #132]	; (8002938 <HAL_DMA_Init+0x434>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d017      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_DMA_Init+0x438>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d012      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_DMA_Init+0x43c>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d00d      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a1c      	ldr	r2, [pc, #112]	; (8002944 <HAL_DMA_Init+0x440>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d008      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1b      	ldr	r2, [pc, #108]	; (8002948 <HAL_DMA_Init+0x444>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_Init+0x3e4>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	; (800294c <HAL_DMA_Init+0x448>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_DMA_Init+0x44c>)
 8002906:	4013      	ands	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d020      	beq.n	8002954 <HAL_DMA_Init+0x450>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d102      	bne.n	8002920 <HAL_DMA_Init+0x41c>
 800291a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800291e:	e01a      	b.n	8002956 <HAL_DMA_Init+0x452>
 8002920:	2300      	movs	r3, #0
 8002922:	e018      	b.n	8002956 <HAL_DMA_Init+0x452>
 8002924:	fe10803f 	.word	0xfe10803f
 8002928:	5c001000 	.word	0x5c001000
 800292c:	ffff0000 	.word	0xffff0000
 8002930:	58025408 	.word	0x58025408
 8002934:	5802541c 	.word	0x5802541c
 8002938:	58025430 	.word	0x58025430
 800293c:	58025444 	.word	0x58025444
 8002940:	58025458 	.word	0x58025458
 8002944:	5802546c 	.word	0x5802546c
 8002948:	58025480 	.word	0x58025480
 800294c:	58025494 	.word	0x58025494
 8002950:	fffe000f 	.word	0xfffe000f
 8002954:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68d2      	ldr	r2, [r2, #12]
 800295a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800295c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800296c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800297c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002984:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b6e      	ldr	r3, [pc, #440]	; (8002b54 <HAL_DMA_Init+0x650>)
 800299c:	4413      	add	r3, r2
 800299e:	4a6e      	ldr	r2, [pc, #440]	; (8002b58 <HAL_DMA_Init+0x654>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	091b      	lsrs	r3, r3, #4
 80029a6:	009a      	lsls	r2, r3, #2
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f001 f839 	bl	8003a24 <DMA_CalcBaseAndBitshift>
 80029b2:	4603      	mov	r3, r0
 80029b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2201      	movs	r2, #1
 80029c0:	409a      	lsls	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]
 80029c6:	e008      	b.n	80029da <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e0b7      	b.n	8002b4a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a5f      	ldr	r2, [pc, #380]	; (8002b5c <HAL_DMA_Init+0x658>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d072      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a5d      	ldr	r2, [pc, #372]	; (8002b60 <HAL_DMA_Init+0x65c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d06d      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a5c      	ldr	r2, [pc, #368]	; (8002b64 <HAL_DMA_Init+0x660>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d068      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a5a      	ldr	r2, [pc, #360]	; (8002b68 <HAL_DMA_Init+0x664>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d063      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a59      	ldr	r2, [pc, #356]	; (8002b6c <HAL_DMA_Init+0x668>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d05e      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a57      	ldr	r2, [pc, #348]	; (8002b70 <HAL_DMA_Init+0x66c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d059      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_DMA_Init+0x670>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d054      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a54      	ldr	r2, [pc, #336]	; (8002b78 <HAL_DMA_Init+0x674>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d04f      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a53      	ldr	r2, [pc, #332]	; (8002b7c <HAL_DMA_Init+0x678>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d04a      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a51      	ldr	r2, [pc, #324]	; (8002b80 <HAL_DMA_Init+0x67c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d045      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a50      	ldr	r2, [pc, #320]	; (8002b84 <HAL_DMA_Init+0x680>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d040      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4e      	ldr	r2, [pc, #312]	; (8002b88 <HAL_DMA_Init+0x684>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d03b      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a4d      	ldr	r2, [pc, #308]	; (8002b8c <HAL_DMA_Init+0x688>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d036      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a4b      	ldr	r2, [pc, #300]	; (8002b90 <HAL_DMA_Init+0x68c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d031      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_DMA_Init+0x690>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d02c      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a48      	ldr	r2, [pc, #288]	; (8002b98 <HAL_DMA_Init+0x694>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a47      	ldr	r2, [pc, #284]	; (8002b9c <HAL_DMA_Init+0x698>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d022      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a45      	ldr	r2, [pc, #276]	; (8002ba0 <HAL_DMA_Init+0x69c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d01d      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a44      	ldr	r2, [pc, #272]	; (8002ba4 <HAL_DMA_Init+0x6a0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d018      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_DMA_Init+0x6a4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d013      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a41      	ldr	r2, [pc, #260]	; (8002bac <HAL_DMA_Init+0x6a8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00e      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3f      	ldr	r2, [pc, #252]	; (8002bb0 <HAL_DMA_Init+0x6ac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d009      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a3e      	ldr	r2, [pc, #248]	; (8002bb4 <HAL_DMA_Init+0x6b0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Init+0x5c6>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <HAL_DMA_Init+0x6b4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_DMA_Init+0x5ca>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_DMA_Init+0x5cc>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d032      	beq.n	8002b3a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f001 f8d3 	bl	8003c80 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b80      	cmp	r3, #128	; 0x80
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002af0:	b2d2      	uxtb	r2, r2
 8002af2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002afc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_DMA_Init+0x624>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d80c      	bhi.n	8002b28 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f001 f950 	bl	8003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	e008      	b.n	8002b3a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	a7fdabf8 	.word	0xa7fdabf8
 8002b58:	cccccccd 	.word	0xcccccccd
 8002b5c:	40020010 	.word	0x40020010
 8002b60:	40020028 	.word	0x40020028
 8002b64:	40020040 	.word	0x40020040
 8002b68:	40020058 	.word	0x40020058
 8002b6c:	40020070 	.word	0x40020070
 8002b70:	40020088 	.word	0x40020088
 8002b74:	400200a0 	.word	0x400200a0
 8002b78:	400200b8 	.word	0x400200b8
 8002b7c:	40020410 	.word	0x40020410
 8002b80:	40020428 	.word	0x40020428
 8002b84:	40020440 	.word	0x40020440
 8002b88:	40020458 	.word	0x40020458
 8002b8c:	40020470 	.word	0x40020470
 8002b90:	40020488 	.word	0x40020488
 8002b94:	400204a0 	.word	0x400204a0
 8002b98:	400204b8 	.word	0x400204b8
 8002b9c:	58025408 	.word	0x58025408
 8002ba0:	5802541c 	.word	0x5802541c
 8002ba4:	58025430 	.word	0x58025430
 8002ba8:	58025444 	.word	0x58025444
 8002bac:	58025458 	.word	0x58025458
 8002bb0:	5802546c 	.word	0x5802546c
 8002bb4:	58025480 	.word	0x58025480
 8002bb8:	58025494 	.word	0x58025494

08002bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e226      	b.n	8003026 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_DMA_Start_IT+0x2a>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e21f      	b.n	8003026 <HAL_DMA_Start_IT+0x46a>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	f040 820a 	bne.w	8003010 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a68      	ldr	r2, [pc, #416]	; (8002db0 <HAL_DMA_Start_IT+0x1f4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d04a      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a66      	ldr	r2, [pc, #408]	; (8002db4 <HAL_DMA_Start_IT+0x1f8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d045      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a65      	ldr	r2, [pc, #404]	; (8002db8 <HAL_DMA_Start_IT+0x1fc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d040      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a63      	ldr	r2, [pc, #396]	; (8002dbc <HAL_DMA_Start_IT+0x200>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d03b      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a62      	ldr	r2, [pc, #392]	; (8002dc0 <HAL_DMA_Start_IT+0x204>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d036      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a60      	ldr	r2, [pc, #384]	; (8002dc4 <HAL_DMA_Start_IT+0x208>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d031      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5f      	ldr	r2, [pc, #380]	; (8002dc8 <HAL_DMA_Start_IT+0x20c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d02c      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a5d      	ldr	r2, [pc, #372]	; (8002dcc <HAL_DMA_Start_IT+0x210>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d027      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_DMA_Start_IT+0x214>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d022      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a5a      	ldr	r2, [pc, #360]	; (8002dd4 <HAL_DMA_Start_IT+0x218>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01d      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a59      	ldr	r2, [pc, #356]	; (8002dd8 <HAL_DMA_Start_IT+0x21c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d018      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_DMA_Start_IT+0x220>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d013      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a56      	ldr	r2, [pc, #344]	; (8002de0 <HAL_DMA_Start_IT+0x224>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00e      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a54      	ldr	r2, [pc, #336]	; (8002de4 <HAL_DMA_Start_IT+0x228>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d009      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a53      	ldr	r2, [pc, #332]	; (8002de8 <HAL_DMA_Start_IT+0x22c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_DMA_Start_IT+0xee>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a51      	ldr	r2, [pc, #324]	; (8002dec <HAL_DMA_Start_IT+0x230>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <HAL_DMA_Start_IT+0x100>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0201 	bic.w	r2, r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_DMA_Start_IT+0x110>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f022 0201 	bic.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fcfa 	bl	80036cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <HAL_DMA_Start_IT+0x1f4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d04a      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <HAL_DMA_Start_IT+0x1f8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d045      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a31      	ldr	r2, [pc, #196]	; (8002db8 <HAL_DMA_Start_IT+0x1fc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d040      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a30      	ldr	r2, [pc, #192]	; (8002dbc <HAL_DMA_Start_IT+0x200>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d03b      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_DMA_Start_IT+0x204>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d036      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2d      	ldr	r2, [pc, #180]	; (8002dc4 <HAL_DMA_Start_IT+0x208>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d031      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a2b      	ldr	r2, [pc, #172]	; (8002dc8 <HAL_DMA_Start_IT+0x20c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d02c      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2a      	ldr	r2, [pc, #168]	; (8002dcc <HAL_DMA_Start_IT+0x210>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d027      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a28      	ldr	r2, [pc, #160]	; (8002dd0 <HAL_DMA_Start_IT+0x214>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d022      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a27      	ldr	r2, [pc, #156]	; (8002dd4 <HAL_DMA_Start_IT+0x218>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d01d      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a25      	ldr	r2, [pc, #148]	; (8002dd8 <HAL_DMA_Start_IT+0x21c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d018      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <HAL_DMA_Start_IT+0x220>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d013      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <HAL_DMA_Start_IT+0x224>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00e      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <HAL_DMA_Start_IT+0x228>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d009      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <HAL_DMA_Start_IT+0x22c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d004      	beq.n	8002d78 <HAL_DMA_Start_IT+0x1bc>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <HAL_DMA_Start_IT+0x230>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d101      	bne.n	8002d7c <HAL_DMA_Start_IT+0x1c0>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e000      	b.n	8002d7e <HAL_DMA_Start_IT+0x1c2>
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d036      	beq.n	8002df0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f023 021e 	bic.w	r2, r3, #30
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0216 	orr.w	r2, r2, #22
 8002d94:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d03e      	beq.n	8002e1c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f042 0208 	orr.w	r2, r2, #8
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e035      	b.n	8002e1c <HAL_DMA_Start_IT+0x260>
 8002db0:	40020010 	.word	0x40020010
 8002db4:	40020028 	.word	0x40020028
 8002db8:	40020040 	.word	0x40020040
 8002dbc:	40020058 	.word	0x40020058
 8002dc0:	40020070 	.word	0x40020070
 8002dc4:	40020088 	.word	0x40020088
 8002dc8:	400200a0 	.word	0x400200a0
 8002dcc:	400200b8 	.word	0x400200b8
 8002dd0:	40020410 	.word	0x40020410
 8002dd4:	40020428 	.word	0x40020428
 8002dd8:	40020440 	.word	0x40020440
 8002ddc:	40020458 	.word	0x40020458
 8002de0:	40020470 	.word	0x40020470
 8002de4:	40020488 	.word	0x40020488
 8002de8:	400204a0 	.word	0x400204a0
 8002dec:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 020e 	bic.w	r2, r3, #14
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 020a 	orr.w	r2, r2, #10
 8002e02:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0204 	orr.w	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a83      	ldr	r2, [pc, #524]	; (8003030 <HAL_DMA_Start_IT+0x474>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d072      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a82      	ldr	r2, [pc, #520]	; (8003034 <HAL_DMA_Start_IT+0x478>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d06d      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a80      	ldr	r2, [pc, #512]	; (8003038 <HAL_DMA_Start_IT+0x47c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d068      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7f      	ldr	r2, [pc, #508]	; (800303c <HAL_DMA_Start_IT+0x480>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d063      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a7d      	ldr	r2, [pc, #500]	; (8003040 <HAL_DMA_Start_IT+0x484>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d05e      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a7c      	ldr	r2, [pc, #496]	; (8003044 <HAL_DMA_Start_IT+0x488>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d059      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7a      	ldr	r2, [pc, #488]	; (8003048 <HAL_DMA_Start_IT+0x48c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d054      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a79      	ldr	r2, [pc, #484]	; (800304c <HAL_DMA_Start_IT+0x490>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d04f      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_DMA_Start_IT+0x494>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d04a      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a76      	ldr	r2, [pc, #472]	; (8003054 <HAL_DMA_Start_IT+0x498>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d045      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a74      	ldr	r2, [pc, #464]	; (8003058 <HAL_DMA_Start_IT+0x49c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d040      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a73      	ldr	r2, [pc, #460]	; (800305c <HAL_DMA_Start_IT+0x4a0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d03b      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a71      	ldr	r2, [pc, #452]	; (8003060 <HAL_DMA_Start_IT+0x4a4>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d036      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a70      	ldr	r2, [pc, #448]	; (8003064 <HAL_DMA_Start_IT+0x4a8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d031      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a6e      	ldr	r2, [pc, #440]	; (8003068 <HAL_DMA_Start_IT+0x4ac>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d02c      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6d      	ldr	r2, [pc, #436]	; (800306c <HAL_DMA_Start_IT+0x4b0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d027      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <HAL_DMA_Start_IT+0x4b4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d022      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a6a      	ldr	r2, [pc, #424]	; (8003074 <HAL_DMA_Start_IT+0x4b8>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d01d      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a68      	ldr	r2, [pc, #416]	; (8003078 <HAL_DMA_Start_IT+0x4bc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d018      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a67      	ldr	r2, [pc, #412]	; (800307c <HAL_DMA_Start_IT+0x4c0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a65      	ldr	r2, [pc, #404]	; (8003080 <HAL_DMA_Start_IT+0x4c4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a64      	ldr	r2, [pc, #400]	; (8003084 <HAL_DMA_Start_IT+0x4c8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a62      	ldr	r2, [pc, #392]	; (8003088 <HAL_DMA_Start_IT+0x4cc>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_Start_IT+0x350>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_DMA_Start_IT+0x4d0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d101      	bne.n	8002f10 <HAL_DMA_Start_IT+0x354>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e000      	b.n	8002f12 <HAL_DMA_Start_IT+0x356>
 8002f10:	2300      	movs	r3, #0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01a      	beq.n	8002f4c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d007      	beq.n	8002f34 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f32:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f4a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a37      	ldr	r2, [pc, #220]	; (8003030 <HAL_DMA_Start_IT+0x474>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d04a      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a36      	ldr	r2, [pc, #216]	; (8003034 <HAL_DMA_Start_IT+0x478>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d045      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a34      	ldr	r2, [pc, #208]	; (8003038 <HAL_DMA_Start_IT+0x47c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d040      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a33      	ldr	r2, [pc, #204]	; (800303c <HAL_DMA_Start_IT+0x480>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d03b      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a31      	ldr	r2, [pc, #196]	; (8003040 <HAL_DMA_Start_IT+0x484>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d036      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a30      	ldr	r2, [pc, #192]	; (8003044 <HAL_DMA_Start_IT+0x488>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d031      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a2e      	ldr	r2, [pc, #184]	; (8003048 <HAL_DMA_Start_IT+0x48c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02c      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2d      	ldr	r2, [pc, #180]	; (800304c <HAL_DMA_Start_IT+0x490>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d027      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2b      	ldr	r2, [pc, #172]	; (8003050 <HAL_DMA_Start_IT+0x494>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d022      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2a      	ldr	r2, [pc, #168]	; (8003054 <HAL_DMA_Start_IT+0x498>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d01d      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_DMA_Start_IT+0x49c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d018      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <HAL_DMA_Start_IT+0x4a0>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a25      	ldr	r2, [pc, #148]	; (8003060 <HAL_DMA_Start_IT+0x4a4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00e      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a24      	ldr	r2, [pc, #144]	; (8003064 <HAL_DMA_Start_IT+0x4a8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d009      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a22      	ldr	r2, [pc, #136]	; (8003068 <HAL_DMA_Start_IT+0x4ac>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_DMA_Start_IT+0x430>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_DMA_Start_IT+0x4b0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <HAL_DMA_Start_IT+0x442>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	e012      	b.n	8003024 <HAL_DMA_Start_IT+0x468>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e009      	b.n	8003024 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800301e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003024:	7dfb      	ldrb	r3, [r7, #23]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	58025408 	.word	0x58025408
 8003074:	5802541c 	.word	0x5802541c
 8003078:	58025430 	.word	0x58025430
 800307c:	58025444 	.word	0x58025444
 8003080:	58025458 	.word	0x58025458
 8003084:	5802546c 	.word	0x5802546c
 8003088:	58025480 	.word	0x58025480
 800308c:	58025494 	.word	0x58025494

08003090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003098:	f7fe fec4 	bl	8001e24 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e2dc      	b.n	8003662 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d008      	beq.n	80030c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e2cd      	b.n	8003662 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a76      	ldr	r2, [pc, #472]	; (80032a4 <HAL_DMA_Abort+0x214>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d04a      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a74      	ldr	r2, [pc, #464]	; (80032a8 <HAL_DMA_Abort+0x218>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d045      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a73      	ldr	r2, [pc, #460]	; (80032ac <HAL_DMA_Abort+0x21c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d040      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a71      	ldr	r2, [pc, #452]	; (80032b0 <HAL_DMA_Abort+0x220>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d03b      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a70      	ldr	r2, [pc, #448]	; (80032b4 <HAL_DMA_Abort+0x224>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d036      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6e      	ldr	r2, [pc, #440]	; (80032b8 <HAL_DMA_Abort+0x228>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d031      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6d      	ldr	r2, [pc, #436]	; (80032bc <HAL_DMA_Abort+0x22c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d02c      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a6b      	ldr	r2, [pc, #428]	; (80032c0 <HAL_DMA_Abort+0x230>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d027      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_DMA_Abort+0x234>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a68      	ldr	r2, [pc, #416]	; (80032c8 <HAL_DMA_Abort+0x238>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_DMA_Abort+0x23c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d018      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_DMA_Abort+0x240>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a64      	ldr	r2, [pc, #400]	; (80032d4 <HAL_DMA_Abort+0x244>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d00e      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a62      	ldr	r2, [pc, #392]	; (80032d8 <HAL_DMA_Abort+0x248>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d009      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a61      	ldr	r2, [pc, #388]	; (80032dc <HAL_DMA_Abort+0x24c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d004      	beq.n	8003166 <HAL_DMA_Abort+0xd6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a5f      	ldr	r2, [pc, #380]	; (80032e0 <HAL_DMA_Abort+0x250>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_DMA_Abort+0xda>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_DMA_Abort+0xdc>
 800316a:	2300      	movs	r3, #0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 021e 	bic.w	r2, r2, #30
 800317e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800318e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e00a      	b.n	80031ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 020e 	bic.w	r2, r2, #14
 80031a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a3c      	ldr	r2, [pc, #240]	; (80032a4 <HAL_DMA_Abort+0x214>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d072      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_DMA_Abort+0x218>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d06d      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a39      	ldr	r2, [pc, #228]	; (80032ac <HAL_DMA_Abort+0x21c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d068      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a37      	ldr	r2, [pc, #220]	; (80032b0 <HAL_DMA_Abort+0x220>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d063      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a36      	ldr	r2, [pc, #216]	; (80032b4 <HAL_DMA_Abort+0x224>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d05e      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <HAL_DMA_Abort+0x228>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d059      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a33      	ldr	r2, [pc, #204]	; (80032bc <HAL_DMA_Abort+0x22c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d054      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a31      	ldr	r2, [pc, #196]	; (80032c0 <HAL_DMA_Abort+0x230>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04f      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a30      	ldr	r2, [pc, #192]	; (80032c4 <HAL_DMA_Abort+0x234>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d04a      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a2e      	ldr	r2, [pc, #184]	; (80032c8 <HAL_DMA_Abort+0x238>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d045      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <HAL_DMA_Abort+0x23c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d040      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a2b      	ldr	r2, [pc, #172]	; (80032d0 <HAL_DMA_Abort+0x240>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d03b      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2a      	ldr	r2, [pc, #168]	; (80032d4 <HAL_DMA_Abort+0x244>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d036      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a28      	ldr	r2, [pc, #160]	; (80032d8 <HAL_DMA_Abort+0x248>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a27      	ldr	r2, [pc, #156]	; (80032dc <HAL_DMA_Abort+0x24c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d02c      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <HAL_DMA_Abort+0x250>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d027      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <HAL_DMA_Abort+0x254>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d022      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a22      	ldr	r2, [pc, #136]	; (80032e8 <HAL_DMA_Abort+0x258>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d01d      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <HAL_DMA_Abort+0x25c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d018      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <HAL_DMA_Abort+0x260>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d013      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1e      	ldr	r2, [pc, #120]	; (80032f4 <HAL_DMA_Abort+0x264>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d00e      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_DMA_Abort+0x268>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a1b      	ldr	r2, [pc, #108]	; (80032fc <HAL_DMA_Abort+0x26c>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d004      	beq.n	800329e <HAL_DMA_Abort+0x20e>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a19      	ldr	r2, [pc, #100]	; (8003300 <HAL_DMA_Abort+0x270>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d132      	bne.n	8003304 <HAL_DMA_Abort+0x274>
 800329e:	2301      	movs	r3, #1
 80032a0:	e031      	b.n	8003306 <HAL_DMA_Abort+0x276>
 80032a2:	bf00      	nop
 80032a4:	40020010 	.word	0x40020010
 80032a8:	40020028 	.word	0x40020028
 80032ac:	40020040 	.word	0x40020040
 80032b0:	40020058 	.word	0x40020058
 80032b4:	40020070 	.word	0x40020070
 80032b8:	40020088 	.word	0x40020088
 80032bc:	400200a0 	.word	0x400200a0
 80032c0:	400200b8 	.word	0x400200b8
 80032c4:	40020410 	.word	0x40020410
 80032c8:	40020428 	.word	0x40020428
 80032cc:	40020440 	.word	0x40020440
 80032d0:	40020458 	.word	0x40020458
 80032d4:	40020470 	.word	0x40020470
 80032d8:	40020488 	.word	0x40020488
 80032dc:	400204a0 	.word	0x400204a0
 80032e0:	400204b8 	.word	0x400204b8
 80032e4:	58025408 	.word	0x58025408
 80032e8:	5802541c 	.word	0x5802541c
 80032ec:	58025430 	.word	0x58025430
 80032f0:	58025444 	.word	0x58025444
 80032f4:	58025458 	.word	0x58025458
 80032f8:	5802546c 	.word	0x5802546c
 80032fc:	58025480 	.word	0x58025480
 8003300:	58025494 	.word	0x58025494
 8003304:	2300      	movs	r3, #0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003318:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6d      	ldr	r2, [pc, #436]	; (80034d4 <HAL_DMA_Abort+0x444>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d04a      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6b      	ldr	r2, [pc, #428]	; (80034d8 <HAL_DMA_Abort+0x448>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d045      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6a      	ldr	r2, [pc, #424]	; (80034dc <HAL_DMA_Abort+0x44c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d040      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a68      	ldr	r2, [pc, #416]	; (80034e0 <HAL_DMA_Abort+0x450>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d03b      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a67      	ldr	r2, [pc, #412]	; (80034e4 <HAL_DMA_Abort+0x454>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d036      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a65      	ldr	r2, [pc, #404]	; (80034e8 <HAL_DMA_Abort+0x458>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d031      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a64      	ldr	r2, [pc, #400]	; (80034ec <HAL_DMA_Abort+0x45c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d02c      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a62      	ldr	r2, [pc, #392]	; (80034f0 <HAL_DMA_Abort+0x460>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d027      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a61      	ldr	r2, [pc, #388]	; (80034f4 <HAL_DMA_Abort+0x464>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d022      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a5f      	ldr	r2, [pc, #380]	; (80034f8 <HAL_DMA_Abort+0x468>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d01d      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5e      	ldr	r2, [pc, #376]	; (80034fc <HAL_DMA_Abort+0x46c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d018      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5c      	ldr	r2, [pc, #368]	; (8003500 <HAL_DMA_Abort+0x470>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5b      	ldr	r2, [pc, #364]	; (8003504 <HAL_DMA_Abort+0x474>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00e      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a59      	ldr	r2, [pc, #356]	; (8003508 <HAL_DMA_Abort+0x478>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_DMA_Abort+0x47c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d004      	beq.n	80033ba <HAL_DMA_Abort+0x32a>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a56      	ldr	r2, [pc, #344]	; (8003510 <HAL_DMA_Abort+0x480>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d108      	bne.n	80033cc <HAL_DMA_Abort+0x33c>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e007      	b.n	80033dc <HAL_DMA_Abort+0x34c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033dc:	e013      	b.n	8003406 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033de:	f7fe fd21 	bl	8001e24 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b05      	cmp	r3, #5
 80033ea:	d90c      	bls.n	8003406 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e12d      	b.n	8003662 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e5      	bne.n	80033de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a2f      	ldr	r2, [pc, #188]	; (80034d4 <HAL_DMA_Abort+0x444>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a2d      	ldr	r2, [pc, #180]	; (80034d8 <HAL_DMA_Abort+0x448>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a2c      	ldr	r2, [pc, #176]	; (80034dc <HAL_DMA_Abort+0x44c>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <HAL_DMA_Abort+0x450>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <HAL_DMA_Abort+0x454>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a27      	ldr	r2, [pc, #156]	; (80034e8 <HAL_DMA_Abort+0x458>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a26      	ldr	r2, [pc, #152]	; (80034ec <HAL_DMA_Abort+0x45c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a24      	ldr	r2, [pc, #144]	; (80034f0 <HAL_DMA_Abort+0x460>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a23      	ldr	r2, [pc, #140]	; (80034f4 <HAL_DMA_Abort+0x464>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <HAL_DMA_Abort+0x468>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a20      	ldr	r2, [pc, #128]	; (80034fc <HAL_DMA_Abort+0x46c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_DMA_Abort+0x470>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_DMA_Abort+0x474>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_DMA_Abort+0x478>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1a      	ldr	r2, [pc, #104]	; (800350c <HAL_DMA_Abort+0x47c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_Abort+0x422>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a18      	ldr	r2, [pc, #96]	; (8003510 <HAL_DMA_Abort+0x480>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_DMA_Abort+0x426>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_Abort+0x428>
 80034b6:	2300      	movs	r3, #0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02b      	beq.n	8003514 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	223f      	movs	r2, #63	; 0x3f
 80034cc:	409a      	lsls	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	e02a      	b.n	800352a <HAL_DMA_Abort+0x49a>
 80034d4:	40020010 	.word	0x40020010
 80034d8:	40020028 	.word	0x40020028
 80034dc:	40020040 	.word	0x40020040
 80034e0:	40020058 	.word	0x40020058
 80034e4:	40020070 	.word	0x40020070
 80034e8:	40020088 	.word	0x40020088
 80034ec:	400200a0 	.word	0x400200a0
 80034f0:	400200b8 	.word	0x400200b8
 80034f4:	40020410 	.word	0x40020410
 80034f8:	40020428 	.word	0x40020428
 80034fc:	40020440 	.word	0x40020440
 8003500:	40020458 	.word	0x40020458
 8003504:	40020470 	.word	0x40020470
 8003508:	40020488 	.word	0x40020488
 800350c:	400204a0 	.word	0x400204a0
 8003510:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2201      	movs	r2, #1
 8003524:	409a      	lsls	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_DMA_Abort+0x5dc>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d072      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a4d      	ldr	r2, [pc, #308]	; (8003670 <HAL_DMA_Abort+0x5e0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d06d      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a4c      	ldr	r2, [pc, #304]	; (8003674 <HAL_DMA_Abort+0x5e4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d068      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4a      	ldr	r2, [pc, #296]	; (8003678 <HAL_DMA_Abort+0x5e8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d063      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a49      	ldr	r2, [pc, #292]	; (800367c <HAL_DMA_Abort+0x5ec>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d05e      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a47      	ldr	r2, [pc, #284]	; (8003680 <HAL_DMA_Abort+0x5f0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d059      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a46      	ldr	r2, [pc, #280]	; (8003684 <HAL_DMA_Abort+0x5f4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d054      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a44      	ldr	r2, [pc, #272]	; (8003688 <HAL_DMA_Abort+0x5f8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d04f      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a43      	ldr	r2, [pc, #268]	; (800368c <HAL_DMA_Abort+0x5fc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d04a      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a41      	ldr	r2, [pc, #260]	; (8003690 <HAL_DMA_Abort+0x600>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d045      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a40      	ldr	r2, [pc, #256]	; (8003694 <HAL_DMA_Abort+0x604>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d040      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a3e      	ldr	r2, [pc, #248]	; (8003698 <HAL_DMA_Abort+0x608>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d03b      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a3d      	ldr	r2, [pc, #244]	; (800369c <HAL_DMA_Abort+0x60c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d036      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a3b      	ldr	r2, [pc, #236]	; (80036a0 <HAL_DMA_Abort+0x610>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d031      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a3a      	ldr	r2, [pc, #232]	; (80036a4 <HAL_DMA_Abort+0x614>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d02c      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a38      	ldr	r2, [pc, #224]	; (80036a8 <HAL_DMA_Abort+0x618>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d027      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a37      	ldr	r2, [pc, #220]	; (80036ac <HAL_DMA_Abort+0x61c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d022      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a35      	ldr	r2, [pc, #212]	; (80036b0 <HAL_DMA_Abort+0x620>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01d      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a34      	ldr	r2, [pc, #208]	; (80036b4 <HAL_DMA_Abort+0x624>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d018      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a32      	ldr	r2, [pc, #200]	; (80036b8 <HAL_DMA_Abort+0x628>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a31      	ldr	r2, [pc, #196]	; (80036bc <HAL_DMA_Abort+0x62c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d00e      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a2f      	ldr	r2, [pc, #188]	; (80036c0 <HAL_DMA_Abort+0x630>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d009      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a2e      	ldr	r2, [pc, #184]	; (80036c4 <HAL_DMA_Abort+0x634>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_DMA_Abort+0x58a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_DMA_Abort+0x638>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_DMA_Abort+0x58e>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_DMA_Abort+0x590>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800362c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00c      	beq.n	8003650 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800364e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40020010 	.word	0x40020010
 8003670:	40020028 	.word	0x40020028
 8003674:	40020040 	.word	0x40020040
 8003678:	40020058 	.word	0x40020058
 800367c:	40020070 	.word	0x40020070
 8003680:	40020088 	.word	0x40020088
 8003684:	400200a0 	.word	0x400200a0
 8003688:	400200b8 	.word	0x400200b8
 800368c:	40020410 	.word	0x40020410
 8003690:	40020428 	.word	0x40020428
 8003694:	40020440 	.word	0x40020440
 8003698:	40020458 	.word	0x40020458
 800369c:	40020470 	.word	0x40020470
 80036a0:	40020488 	.word	0x40020488
 80036a4:	400204a0 	.word	0x400204a0
 80036a8:	400204b8 	.word	0x400204b8
 80036ac:	58025408 	.word	0x58025408
 80036b0:	5802541c 	.word	0x5802541c
 80036b4:	58025430 	.word	0x58025430
 80036b8:	58025444 	.word	0x58025444
 80036bc:	58025458 	.word	0x58025458
 80036c0:	5802546c 	.word	0x5802546c
 80036c4:	58025480 	.word	0x58025480
 80036c8:	58025494 	.word	0x58025494

080036cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a84      	ldr	r2, [pc, #528]	; (80038fc <DMA_SetConfig+0x230>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d072      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a82      	ldr	r2, [pc, #520]	; (8003900 <DMA_SetConfig+0x234>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d06d      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a81      	ldr	r2, [pc, #516]	; (8003904 <DMA_SetConfig+0x238>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d068      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7f      	ldr	r2, [pc, #508]	; (8003908 <DMA_SetConfig+0x23c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d063      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7e      	ldr	r2, [pc, #504]	; (800390c <DMA_SetConfig+0x240>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d05e      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a7c      	ldr	r2, [pc, #496]	; (8003910 <DMA_SetConfig+0x244>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d059      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <DMA_SetConfig+0x248>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d054      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a79      	ldr	r2, [pc, #484]	; (8003918 <DMA_SetConfig+0x24c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04f      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a78      	ldr	r2, [pc, #480]	; (800391c <DMA_SetConfig+0x250>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a76      	ldr	r2, [pc, #472]	; (8003920 <DMA_SetConfig+0x254>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <DMA_SetConfig+0x258>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a73      	ldr	r2, [pc, #460]	; (8003928 <DMA_SetConfig+0x25c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a72      	ldr	r2, [pc, #456]	; (800392c <DMA_SetConfig+0x260>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a70      	ldr	r2, [pc, #448]	; (8003930 <DMA_SetConfig+0x264>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6f      	ldr	r2, [pc, #444]	; (8003934 <DMA_SetConfig+0x268>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6d      	ldr	r2, [pc, #436]	; (8003938 <DMA_SetConfig+0x26c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6c      	ldr	r2, [pc, #432]	; (800393c <DMA_SetConfig+0x270>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <DMA_SetConfig+0x274>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a69      	ldr	r2, [pc, #420]	; (8003944 <DMA_SetConfig+0x278>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a67      	ldr	r2, [pc, #412]	; (8003948 <DMA_SetConfig+0x27c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a66      	ldr	r2, [pc, #408]	; (800394c <DMA_SetConfig+0x280>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a64      	ldr	r2, [pc, #400]	; (8003950 <DMA_SetConfig+0x284>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <DMA_SetConfig+0x288>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <DMA_SetConfig+0x10a>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a61      	ldr	r2, [pc, #388]	; (8003958 <DMA_SetConfig+0x28c>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d101      	bne.n	80037da <DMA_SetConfig+0x10e>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e000      	b.n	80037dc <DMA_SetConfig+0x110>
 80037da:	2300      	movs	r3, #0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80037e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a3e      	ldr	r2, [pc, #248]	; (80038fc <DMA_SetConfig+0x230>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a3d      	ldr	r2, [pc, #244]	; (8003900 <DMA_SetConfig+0x234>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3b      	ldr	r2, [pc, #236]	; (8003904 <DMA_SetConfig+0x238>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <DMA_SetConfig+0x1d0>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <DMA_SetConfig+0x23c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a38      	ldr	r2, [pc, #224]	; (800390c <DMA_SetConfig+0x240>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <DMA_SetConfig+0x1d0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a37      	ldr	r2, [pc, #220]	; (8003910 <DMA_SetConfig+0x244>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a35      	ldr	r2, [pc, #212]	; (8003914 <DMA_SetConfig+0x248>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a34      	ldr	r2, [pc, #208]	; (8003918 <DMA_SetConfig+0x24c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <DMA_SetConfig+0x1d0>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a32      	ldr	r2, [pc, #200]	; (800391c <DMA_SetConfig+0x250>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a31      	ldr	r2, [pc, #196]	; (8003920 <DMA_SetConfig+0x254>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <DMA_SetConfig+0x258>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <DMA_SetConfig+0x1d0>
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a2e      	ldr	r2, [pc, #184]	; (8003928 <DMA_SetConfig+0x25c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a2c      	ldr	r2, [pc, #176]	; (800392c <DMA_SetConfig+0x260>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <DMA_SetConfig+0x1d0>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2b      	ldr	r2, [pc, #172]	; (8003930 <DMA_SetConfig+0x264>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a29      	ldr	r2, [pc, #164]	; (8003934 <DMA_SetConfig+0x268>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <DMA_SetConfig+0x1d0>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a28      	ldr	r2, [pc, #160]	; (8003938 <DMA_SetConfig+0x26c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <DMA_SetConfig+0x1d4>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <DMA_SetConfig+0x1d6>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d05a      	beq.n	800395c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	223f      	movs	r2, #63	; 0x3f
 80038b0:	409a      	lsls	r2, r3
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b40      	cmp	r3, #64	; 0x40
 80038d4:	d108      	bne.n	80038e8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038e6:	e087      	b.n	80039f8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
}
 80038f8:	e07e      	b.n	80039f8 <DMA_SetConfig+0x32c>
 80038fa:	bf00      	nop
 80038fc:	40020010 	.word	0x40020010
 8003900:	40020028 	.word	0x40020028
 8003904:	40020040 	.word	0x40020040
 8003908:	40020058 	.word	0x40020058
 800390c:	40020070 	.word	0x40020070
 8003910:	40020088 	.word	0x40020088
 8003914:	400200a0 	.word	0x400200a0
 8003918:	400200b8 	.word	0x400200b8
 800391c:	40020410 	.word	0x40020410
 8003920:	40020428 	.word	0x40020428
 8003924:	40020440 	.word	0x40020440
 8003928:	40020458 	.word	0x40020458
 800392c:	40020470 	.word	0x40020470
 8003930:	40020488 	.word	0x40020488
 8003934:	400204a0 	.word	0x400204a0
 8003938:	400204b8 	.word	0x400204b8
 800393c:	58025408 	.word	0x58025408
 8003940:	5802541c 	.word	0x5802541c
 8003944:	58025430 	.word	0x58025430
 8003948:	58025444 	.word	0x58025444
 800394c:	58025458 	.word	0x58025458
 8003950:	5802546c 	.word	0x5802546c
 8003954:	58025480 	.word	0x58025480
 8003958:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a28      	ldr	r2, [pc, #160]	; (8003a04 <DMA_SetConfig+0x338>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d022      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a27      	ldr	r2, [pc, #156]	; (8003a08 <DMA_SetConfig+0x33c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d01d      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a25      	ldr	r2, [pc, #148]	; (8003a0c <DMA_SetConfig+0x340>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d018      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <DMA_SetConfig+0x344>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <DMA_SetConfig+0x348>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d00e      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <DMA_SetConfig+0x34c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d009      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1f      	ldr	r2, [pc, #124]	; (8003a1c <DMA_SetConfig+0x350>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d004      	beq.n	80039ac <DMA_SetConfig+0x2e0>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <DMA_SetConfig+0x354>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <DMA_SetConfig+0x2e4>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <DMA_SetConfig+0x2e6>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d020      	beq.n	80039f8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2201      	movs	r2, #1
 80039c0:	409a      	lsls	r2, r3
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b40      	cmp	r3, #64	; 0x40
 80039d4:	d108      	bne.n	80039e8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	60da      	str	r2, [r3, #12]
}
 80039e6:	e007      	b.n	80039f8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]
}
 80039f8:	bf00      	nop
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	58025408 	.word	0x58025408
 8003a08:	5802541c 	.word	0x5802541c
 8003a0c:	58025430 	.word	0x58025430
 8003a10:	58025444 	.word	0x58025444
 8003a14:	58025458 	.word	0x58025458
 8003a18:	5802546c 	.word	0x5802546c
 8003a1c:	58025480 	.word	0x58025480
 8003a20:	58025494 	.word	0x58025494

08003a24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a42      	ldr	r2, [pc, #264]	; (8003b3c <DMA_CalcBaseAndBitshift+0x118>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d04a      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a41      	ldr	r2, [pc, #260]	; (8003b40 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d045      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a3f      	ldr	r2, [pc, #252]	; (8003b44 <DMA_CalcBaseAndBitshift+0x120>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d040      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a3e      	ldr	r2, [pc, #248]	; (8003b48 <DMA_CalcBaseAndBitshift+0x124>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d03b      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a3c      	ldr	r2, [pc, #240]	; (8003b4c <DMA_CalcBaseAndBitshift+0x128>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d036      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a3b      	ldr	r2, [pc, #236]	; (8003b50 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d031      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a39      	ldr	r2, [pc, #228]	; (8003b54 <DMA_CalcBaseAndBitshift+0x130>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d02c      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <DMA_CalcBaseAndBitshift+0x134>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d027      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a36      	ldr	r2, [pc, #216]	; (8003b5c <DMA_CalcBaseAndBitshift+0x138>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d022      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a35      	ldr	r2, [pc, #212]	; (8003b60 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d01d      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a33      	ldr	r2, [pc, #204]	; (8003b64 <DMA_CalcBaseAndBitshift+0x140>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d018      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <DMA_CalcBaseAndBitshift+0x144>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d013      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <DMA_CalcBaseAndBitshift+0x148>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00e      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d009      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <DMA_CalcBaseAndBitshift+0x150>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d004      	beq.n	8003acc <DMA_CalcBaseAndBitshift+0xa8>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a2c      	ldr	r2, [pc, #176]	; (8003b78 <DMA_CalcBaseAndBitshift+0x154>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d101      	bne.n	8003ad0 <DMA_CalcBaseAndBitshift+0xac>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e000      	b.n	8003ad2 <DMA_CalcBaseAndBitshift+0xae>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d024      	beq.n	8003b20 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3b10      	subs	r3, #16
 8003ade:	4a27      	ldr	r2, [pc, #156]	; (8003b7c <DMA_CalcBaseAndBitshift+0x158>)
 8003ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae4:	091b      	lsrs	r3, r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	4a24      	ldr	r2, [pc, #144]	; (8003b80 <DMA_CalcBaseAndBitshift+0x15c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d908      	bls.n	8003b10 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <DMA_CalcBaseAndBitshift+0x160>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	; 0x58
 8003b0e:	e00d      	b.n	8003b2c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <DMA_CalcBaseAndBitshift+0x160>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b1e:	e005      	b.n	8003b2c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	40020010 	.word	0x40020010
 8003b40:	40020028 	.word	0x40020028
 8003b44:	40020040 	.word	0x40020040
 8003b48:	40020058 	.word	0x40020058
 8003b4c:	40020070 	.word	0x40020070
 8003b50:	40020088 	.word	0x40020088
 8003b54:	400200a0 	.word	0x400200a0
 8003b58:	400200b8 	.word	0x400200b8
 8003b5c:	40020410 	.word	0x40020410
 8003b60:	40020428 	.word	0x40020428
 8003b64:	40020440 	.word	0x40020440
 8003b68:	40020458 	.word	0x40020458
 8003b6c:	40020470 	.word	0x40020470
 8003b70:	40020488 	.word	0x40020488
 8003b74:	400204a0 	.word	0x400204a0
 8003b78:	400204b8 	.word	0x400204b8
 8003b7c:	aaaaaaab 	.word	0xaaaaaaab
 8003b80:	080166f0 	.word	0x080166f0
 8003b84:	fffffc00 	.word	0xfffffc00

08003b88 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d120      	bne.n	8003bde <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d858      	bhi.n	8003c56 <DMA_CheckFifoParam+0xce>
 8003ba4:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <DMA_CheckFifoParam+0x24>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bcf 	.word	0x08003bcf
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003c57 	.word	0x08003c57
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d048      	beq.n	8003c5a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bcc:	e045      	b.n	8003c5a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bd6:	d142      	bne.n	8003c5e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bdc:	e03f      	b.n	8003c5e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003be6:	d123      	bne.n	8003c30 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d838      	bhi.n	8003c62 <DMA_CheckFifoParam+0xda>
 8003bf0:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <DMA_CheckFifoParam+0x70>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c0f 	.word	0x08003c0f
 8003c00:	08003c09 	.word	0x08003c09
 8003c04:	08003c21 	.word	0x08003c21
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c0c:	e030      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d025      	beq.n	8003c66 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c1e:	e022      	b.n	8003c66 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c28:	d11f      	bne.n	8003c6a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c2e:	e01c      	b.n	8003c6a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <DMA_CheckFifoParam+0xb6>
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d003      	beq.n	8003c44 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c3c:	e018      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
        break;
 8003c42:	e015      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00e      	beq.n	8003c6e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
    break;
 8003c54:	e00b      	b.n	8003c6e <DMA_CheckFifoParam+0xe6>
        break;
 8003c56:	bf00      	nop
 8003c58:	e00a      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e008      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e006      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        break;
 8003c62:	bf00      	nop
 8003c64:	e004      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e002      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e000      	b.n	8003c70 <DMA_CheckFifoParam+0xe8>
    break;
 8003c6e:	bf00      	nop
    }
  }

  return status;
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop

08003c80 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a38      	ldr	r2, [pc, #224]	; (8003d74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d022      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a36      	ldr	r2, [pc, #216]	; (8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01d      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	; (8003d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d018      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a33      	ldr	r2, [pc, #204]	; (8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d013      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d00e      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d009      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d004      	beq.n	8003cde <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a2d      	ldr	r2, [pc, #180]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d101      	bne.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01a      	beq.n	8003d1e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	3b08      	subs	r3, #8
 8003cf0:	4a28      	ldr	r2, [pc, #160]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	461a      	mov	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a24      	ldr	r2, [pc, #144]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d0c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	2201      	movs	r2, #1
 8003d16:	409a      	lsls	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d1c:	e024      	b.n	8003d68 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	3b10      	subs	r3, #16
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4a1c      	ldr	r2, [pc, #112]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d806      	bhi.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d902      	bls.n	8003d46 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	3308      	adds	r3, #8
 8003d44:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4b18      	ldr	r3, [pc, #96]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	461a      	mov	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d58:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	2201      	movs	r2, #1
 8003d62:	409a      	lsls	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d68:	bf00      	nop
 8003d6a:	3714      	adds	r7, #20
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	58025408 	.word	0x58025408
 8003d78:	5802541c 	.word	0x5802541c
 8003d7c:	58025430 	.word	0x58025430
 8003d80:	58025444 	.word	0x58025444
 8003d84:	58025458 	.word	0x58025458
 8003d88:	5802546c 	.word	0x5802546c
 8003d8c:	58025480 	.word	0x58025480
 8003d90:	58025494 	.word	0x58025494
 8003d94:	cccccccd 	.word	0xcccccccd
 8003d98:	16009600 	.word	0x16009600
 8003d9c:	58025880 	.word	0x58025880
 8003da0:	aaaaaaab 	.word	0xaaaaaaab
 8003da4:	400204b8 	.word	0x400204b8
 8003da8:	4002040f 	.word	0x4002040f
 8003dac:	10008200 	.word	0x10008200
 8003db0:	40020880 	.word	0x40020880

08003db4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d04a      	beq.n	8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d847      	bhi.n	8003e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a25      	ldr	r2, [pc, #148]	; (8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d022      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a24      	ldr	r2, [pc, #144]	; (8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01d      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a21      	ldr	r2, [pc, #132]	; (8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1f      	ldr	r2, [pc, #124]	; (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a1e      	ldr	r2, [pc, #120]	; (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a1b      	ldr	r2, [pc, #108]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d101      	bne.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8003e3e:	e009      	b.n	8003e54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4b14      	ldr	r3, [pc, #80]	; (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a11      	ldr	r2, [pc, #68]	; (8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e52:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	2201      	movs	r2, #1
 8003e5a:	409a      	lsls	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	58025408 	.word	0x58025408
 8003e70:	5802541c 	.word	0x5802541c
 8003e74:	58025430 	.word	0x58025430
 8003e78:	58025444 	.word	0x58025444
 8003e7c:	58025458 	.word	0x58025458
 8003e80:	5802546c 	.word	0x5802546c
 8003e84:	58025480 	.word	0x58025480
 8003e88:	58025494 	.word	0x58025494
 8003e8c:	1600963f 	.word	0x1600963f
 8003e90:	58025940 	.word	0x58025940
 8003e94:	1000823f 	.word	0x1000823f
 8003e98:	40020940 	.word	0x40020940

08003e9c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d105      	bne.n	8003ec2 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e325      	b.n	800450e <HAL_DMAEx_MultiBufferStart_IT+0x672>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d101      	bne.n	8003ed0 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e31e      	b.n	800450e <HAL_DMAEx_MultiBufferStart_IT+0x672>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 830d 	bne.w	8004500 <HAL_DMAEx_MultiBufferStart_IT+0x664>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a82      	ldr	r2, [pc, #520]	; (8004104 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d04a      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a81      	ldr	r2, [pc, #516]	; (8004108 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d045      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7f      	ldr	r2, [pc, #508]	; (800410c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d040      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7e      	ldr	r2, [pc, #504]	; (8004110 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d03b      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d036      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a7b      	ldr	r2, [pc, #492]	; (8004118 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d031      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a79      	ldr	r2, [pc, #484]	; (800411c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d02c      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a78      	ldr	r2, [pc, #480]	; (8004120 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d027      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a76      	ldr	r2, [pc, #472]	; (8004124 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d022      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a75      	ldr	r2, [pc, #468]	; (8004128 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d01d      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a73      	ldr	r2, [pc, #460]	; (800412c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d018      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a72      	ldr	r2, [pc, #456]	; (8004130 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d013      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a70      	ldr	r2, [pc, #448]	; (8004134 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d00e      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6f      	ldr	r2, [pc, #444]	; (8004138 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6d      	ldr	r2, [pc, #436]	; (800413c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a6c      	ldr	r2, [pc, #432]	; (8004140 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d018      	beq.n	8003fd0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003fac:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	683a      	ldr	r2, [r7, #0]
 8003fb4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	3308      	adds	r3, #8
 8003fbc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	223f      	movs	r2, #63	; 0x3f
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e018      	b.n	8004002 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	f248 0320 	movw	r3, #32800	; 0x8020
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	3304      	adds	r3, #4
 8003ff0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f003 031f 	and.w	r3, r3, #31
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004002:	6a3b      	ldr	r3, [r7, #32]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68b9      	ldr	r1, [r7, #8]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fb41 	bl	8004690 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3c      	ldr	r2, [pc, #240]	; (8004104 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d072      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3a      	ldr	r2, [pc, #232]	; (8004108 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d06d      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a39      	ldr	r2, [pc, #228]	; (800410c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d068      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a37      	ldr	r2, [pc, #220]	; (8004110 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d063      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a36      	ldr	r2, [pc, #216]	; (8004114 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d05e      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a34      	ldr	r2, [pc, #208]	; (8004118 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d059      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a33      	ldr	r2, [pc, #204]	; (800411c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d054      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a31      	ldr	r2, [pc, #196]	; (8004120 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d04f      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a30      	ldr	r2, [pc, #192]	; (8004124 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d04a      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2e      	ldr	r2, [pc, #184]	; (8004128 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d045      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2d      	ldr	r2, [pc, #180]	; (800412c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d040      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d03b      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d036      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a28      	ldr	r2, [pc, #160]	; (8004138 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d031      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a27      	ldr	r2, [pc, #156]	; (800413c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d02c      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a25      	ldr	r2, [pc, #148]	; (8004140 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d027      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d022      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01d      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d018      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1f      	ldr	r2, [pc, #124]	; (8004150 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1e      	ldr	r2, [pc, #120]	; (8004154 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d00e      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1c      	ldr	r2, [pc, #112]	; (8004158 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a1b      	ldr	r2, [pc, #108]	; (800415c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d004      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d132      	bne.n	8004164 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80040fe:	2301      	movs	r3, #1
 8004100:	e031      	b.n	8004166 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004102:	bf00      	nop
 8004104:	40020010 	.word	0x40020010
 8004108:	40020028 	.word	0x40020028
 800410c:	40020040 	.word	0x40020040
 8004110:	40020058 	.word	0x40020058
 8004114:	40020070 	.word	0x40020070
 8004118:	40020088 	.word	0x40020088
 800411c:	400200a0 	.word	0x400200a0
 8004120:	400200b8 	.word	0x400200b8
 8004124:	40020410 	.word	0x40020410
 8004128:	40020428 	.word	0x40020428
 800412c:	40020440 	.word	0x40020440
 8004130:	40020458 	.word	0x40020458
 8004134:	40020470 	.word	0x40020470
 8004138:	40020488 	.word	0x40020488
 800413c:	400204a0 	.word	0x400204a0
 8004140:	400204b8 	.word	0x400204b8
 8004144:	58025408 	.word	0x58025408
 8004148:	5802541c 	.word	0x5802541c
 800414c:	58025430 	.word	0x58025430
 8004150:	58025444 	.word	0x58025444
 8004154:	58025458 	.word	0x58025458
 8004158:	5802546c 	.word	0x5802546c
 800415c:	58025480 	.word	0x58025480
 8004160:	58025494 	.word	0x58025494
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004172:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004184:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a85      	ldr	r2, [pc, #532]	; (80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a83      	ldr	r2, [pc, #524]	; (80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a82      	ldr	r2, [pc, #520]	; (80043a8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a80      	ldr	r2, [pc, #512]	; (80043ac <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7f      	ldr	r2, [pc, #508]	; (80043b0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a7c      	ldr	r2, [pc, #496]	; (80043b8 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a7a      	ldr	r2, [pc, #488]	; (80043bc <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a79      	ldr	r2, [pc, #484]	; (80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a77      	ldr	r2, [pc, #476]	; (80043c4 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a76      	ldr	r2, [pc, #472]	; (80043c8 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a74      	ldr	r2, [pc, #464]	; (80043cc <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a71      	ldr	r2, [pc, #452]	; (80043d4 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a70      	ldr	r2, [pc, #448]	; (80043d8 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6e      	ldr	r2, [pc, #440]	; (80043dc <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d101      	bne.n	800422a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800422a:	2300      	movs	r3, #0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d022      	beq.n	8004276 <HAL_DMAEx_MultiBufferStart_IT+0x3da>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 021e 	bic.w	r2, r3, #30
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0216 	orr.w	r2, r2, #22
 8004242:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	695a      	ldr	r2, [r3, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004252:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d103      	bne.n	8004264 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004260:	2b00      	cmp	r3, #0
 8004262:	d022      	beq.n	80042aa <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e019      	b.n	80042aa <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 020e 	bic.w	r2, r3, #14
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 020a 	orr.w	r2, r2, #10
 8004288:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_DMAEx_MultiBufferStart_IT+0x3fe>
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_DMAEx_MultiBufferStart_IT+0x40e>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0204 	orr.w	r2, r2, #4
 80042a8:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a3c      	ldr	r2, [pc, #240]	; (80043a0 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d072      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a3a      	ldr	r2, [pc, #232]	; (80043a4 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d06d      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a39      	ldr	r2, [pc, #228]	; (80043a8 <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d068      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a37      	ldr	r2, [pc, #220]	; (80043ac <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d063      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a36      	ldr	r2, [pc, #216]	; (80043b0 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d05e      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a34      	ldr	r2, [pc, #208]	; (80043b4 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d059      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a33      	ldr	r2, [pc, #204]	; (80043b8 <HAL_DMAEx_MultiBufferStart_IT+0x51c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d054      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a31      	ldr	r2, [pc, #196]	; (80043bc <HAL_DMAEx_MultiBufferStart_IT+0x520>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d04f      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a30      	ldr	r2, [pc, #192]	; (80043c0 <HAL_DMAEx_MultiBufferStart_IT+0x524>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d04a      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2e      	ldr	r2, [pc, #184]	; (80043c4 <HAL_DMAEx_MultiBufferStart_IT+0x528>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d045      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <HAL_DMAEx_MultiBufferStart_IT+0x52c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d040      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a2b      	ldr	r2, [pc, #172]	; (80043cc <HAL_DMAEx_MultiBufferStart_IT+0x530>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d03b      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a2a      	ldr	r2, [pc, #168]	; (80043d0 <HAL_DMAEx_MultiBufferStart_IT+0x534>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d036      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a28      	ldr	r2, [pc, #160]	; (80043d4 <HAL_DMAEx_MultiBufferStart_IT+0x538>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a27      	ldr	r2, [pc, #156]	; (80043d8 <HAL_DMAEx_MultiBufferStart_IT+0x53c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d02c      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a25      	ldr	r2, [pc, #148]	; (80043dc <HAL_DMAEx_MultiBufferStart_IT+0x540>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d027      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a24      	ldr	r2, [pc, #144]	; (80043e0 <HAL_DMAEx_MultiBufferStart_IT+0x544>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d022      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <HAL_DMAEx_MultiBufferStart_IT+0x548>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01d      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <HAL_DMAEx_MultiBufferStart_IT+0x54c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d018      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1f      	ldr	r2, [pc, #124]	; (80043ec <HAL_DMAEx_MultiBufferStart_IT+0x550>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_DMAEx_MultiBufferStart_IT+0x554>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00e      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <HAL_DMAEx_MultiBufferStart_IT+0x558>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d009      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d132      	bne.n	8004400 <HAL_DMAEx_MultiBufferStart_IT+0x564>
 800439a:	2301      	movs	r3, #1
 800439c:	e031      	b.n	8004402 <HAL_DMAEx_MultiBufferStart_IT+0x566>
 800439e:	bf00      	nop
 80043a0:	40020010 	.word	0x40020010
 80043a4:	40020028 	.word	0x40020028
 80043a8:	40020040 	.word	0x40020040
 80043ac:	40020058 	.word	0x40020058
 80043b0:	40020070 	.word	0x40020070
 80043b4:	40020088 	.word	0x40020088
 80043b8:	400200a0 	.word	0x400200a0
 80043bc:	400200b8 	.word	0x400200b8
 80043c0:	40020410 	.word	0x40020410
 80043c4:	40020428 	.word	0x40020428
 80043c8:	40020440 	.word	0x40020440
 80043cc:	40020458 	.word	0x40020458
 80043d0:	40020470 	.word	0x40020470
 80043d4:	40020488 	.word	0x40020488
 80043d8:	400204a0 	.word	0x400204a0
 80043dc:	400204b8 	.word	0x400204b8
 80043e0:	58025408 	.word	0x58025408
 80043e4:	5802541c 	.word	0x5802541c
 80043e8:	58025430 	.word	0x58025430
 80043ec:	58025444 	.word	0x58025444
 80043f0:	58025458 	.word	0x58025458
 80043f4:	5802546c 	.word	0x5802546c
 80043f8:	58025480 	.word	0x58025480
 80043fc:	58025494 	.word	0x58025494
 8004400:	2300      	movs	r3, #0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01a      	beq.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <HAL_DMAEx_MultiBufferStart_IT+0x588>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800441e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004422:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	; (8004518 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d04a      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a34      	ldr	r2, [pc, #208]	; (800451c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d045      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a32      	ldr	r2, [pc, #200]	; (8004520 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d040      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a31      	ldr	r2, [pc, #196]	; (8004524 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d03b      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d036      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d031      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d02c      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d027      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a29      	ldr	r2, [pc, #164]	; (8004538 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d022      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d01d      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d018      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d013      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00e      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d009      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a20      	ldr	r2, [pc, #128]	; (8004550 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d004      	beq.n	80044dc <HAL_DMAEx_MultiBufferStart_IT+0x640>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d108      	bne.n	80044ee <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e00e      	b.n	800450c <HAL_DMAEx_MultiBufferStart_IT+0x670>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f042 0201 	orr.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e005      	b.n	800450c <HAL_DMAEx_MultiBufferStart_IT+0x670>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40020010 	.word	0x40020010
 800451c:	40020028 	.word	0x40020028
 8004520:	40020040 	.word	0x40020040
 8004524:	40020058 	.word	0x40020058
 8004528:	40020070 	.word	0x40020070
 800452c:	40020088 	.word	0x40020088
 8004530:	400200a0 	.word	0x400200a0
 8004534:	400200b8 	.word	0x400200b8
 8004538:	40020410 	.word	0x40020410
 800453c:	40020428 	.word	0x40020428
 8004540:	40020440 	.word	0x40020440
 8004544:	40020458 	.word	0x40020458
 8004548:	40020470 	.word	0x40020470
 800454c:	40020488 	.word	0x40020488
 8004550:	400204a0 	.word	0x400204a0
 8004554:	400204b8 	.word	0x400204b8

08004558 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a39      	ldr	r2, [pc, #228]	; (8004650 <HAL_DMAEx_ChangeMemory+0xf8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04a      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a37      	ldr	r2, [pc, #220]	; (8004654 <HAL_DMAEx_ChangeMemory+0xfc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d045      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a36      	ldr	r2, [pc, #216]	; (8004658 <HAL_DMAEx_ChangeMemory+0x100>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d040      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a34      	ldr	r2, [pc, #208]	; (800465c <HAL_DMAEx_ChangeMemory+0x104>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d03b      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a33      	ldr	r2, [pc, #204]	; (8004660 <HAL_DMAEx_ChangeMemory+0x108>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d036      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a31      	ldr	r2, [pc, #196]	; (8004664 <HAL_DMAEx_ChangeMemory+0x10c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d031      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a30      	ldr	r2, [pc, #192]	; (8004668 <HAL_DMAEx_ChangeMemory+0x110>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d02c      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a2e      	ldr	r2, [pc, #184]	; (800466c <HAL_DMAEx_ChangeMemory+0x114>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d027      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a2d      	ldr	r2, [pc, #180]	; (8004670 <HAL_DMAEx_ChangeMemory+0x118>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d022      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a2b      	ldr	r2, [pc, #172]	; (8004674 <HAL_DMAEx_ChangeMemory+0x11c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d01d      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <HAL_DMAEx_ChangeMemory+0x120>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d018      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a28      	ldr	r2, [pc, #160]	; (800467c <HAL_DMAEx_ChangeMemory+0x124>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d013      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a27      	ldr	r2, [pc, #156]	; (8004680 <HAL_DMAEx_ChangeMemory+0x128>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d00e      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a25      	ldr	r2, [pc, #148]	; (8004684 <HAL_DMAEx_ChangeMemory+0x12c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a24      	ldr	r2, [pc, #144]	; (8004688 <HAL_DMAEx_ChangeMemory+0x130>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d004      	beq.n	8004606 <HAL_DMAEx_ChangeMemory+0xae>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a22      	ldr	r2, [pc, #136]	; (800468c <HAL_DMAEx_ChangeMemory+0x134>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d101      	bne.n	800460a <HAL_DMAEx_ChangeMemory+0xb2>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_DMAEx_ChangeMemory+0xb4>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8004610:	79fb      	ldrb	r3, [r7, #7]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d104      	bne.n	8004620 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	60da      	str	r2, [r3, #12]
 800461e:	e010      	b.n	8004642 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	611a      	str	r2, [r3, #16]
 8004628:	e00b      	b.n	8004642 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d104      	bne.n	800463a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	e003      	b.n	8004642 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	40020010 	.word	0x40020010
 8004654:	40020028 	.word	0x40020028
 8004658:	40020040 	.word	0x40020040
 800465c:	40020058 	.word	0x40020058
 8004660:	40020070 	.word	0x40020070
 8004664:	40020088 	.word	0x40020088
 8004668:	400200a0 	.word	0x400200a0
 800466c:	400200b8 	.word	0x400200b8
 8004670:	40020410 	.word	0x40020410
 8004674:	40020428 	.word	0x40020428
 8004678:	40020440 	.word	0x40020440
 800467c:	40020458 	.word	0x40020458
 8004680:	40020470 	.word	0x40020470
 8004684:	40020488 	.word	0x40020488
 8004688:	400204a0 	.word	0x400204a0
 800468c:	400204b8 	.word	0x400204b8

08004690 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a46      	ldr	r2, [pc, #280]	; (80047bc <DMA_MultiBufferSetConfig+0x12c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d04a      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a44      	ldr	r2, [pc, #272]	; (80047c0 <DMA_MultiBufferSetConfig+0x130>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d045      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a43      	ldr	r2, [pc, #268]	; (80047c4 <DMA_MultiBufferSetConfig+0x134>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d040      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a41      	ldr	r2, [pc, #260]	; (80047c8 <DMA_MultiBufferSetConfig+0x138>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d03b      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a40      	ldr	r2, [pc, #256]	; (80047cc <DMA_MultiBufferSetConfig+0x13c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d036      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a3e      	ldr	r2, [pc, #248]	; (80047d0 <DMA_MultiBufferSetConfig+0x140>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d031      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a3d      	ldr	r2, [pc, #244]	; (80047d4 <DMA_MultiBufferSetConfig+0x144>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d02c      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a3b      	ldr	r2, [pc, #236]	; (80047d8 <DMA_MultiBufferSetConfig+0x148>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d027      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a3a      	ldr	r2, [pc, #232]	; (80047dc <DMA_MultiBufferSetConfig+0x14c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d022      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a38      	ldr	r2, [pc, #224]	; (80047e0 <DMA_MultiBufferSetConfig+0x150>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01d      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a37      	ldr	r2, [pc, #220]	; (80047e4 <DMA_MultiBufferSetConfig+0x154>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d018      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a35      	ldr	r2, [pc, #212]	; (80047e8 <DMA_MultiBufferSetConfig+0x158>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d013      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a34      	ldr	r2, [pc, #208]	; (80047ec <DMA_MultiBufferSetConfig+0x15c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00e      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a32      	ldr	r2, [pc, #200]	; (80047f0 <DMA_MultiBufferSetConfig+0x160>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d009      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a31      	ldr	r2, [pc, #196]	; (80047f4 <DMA_MultiBufferSetConfig+0x164>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d004      	beq.n	800473e <DMA_MultiBufferSetConfig+0xae>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2f      	ldr	r2, [pc, #188]	; (80047f8 <DMA_MultiBufferSetConfig+0x168>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d101      	bne.n	8004742 <DMA_MultiBufferSetConfig+0xb2>
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <DMA_MultiBufferSetConfig+0xb4>
 8004742:	2300      	movs	r3, #0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d019      	beq.n	800477c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d108      	bne.n	800476a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8004768:	e021      	b.n	80047ae <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	60da      	str	r2, [r3, #12]
}
 800477a:	e018      	b.n	80047ae <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d108      	bne.n	800479e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	60da      	str	r2, [r3, #12]
}
 800479c:	e007      	b.n	80047ae <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	60da      	str	r2, [r3, #12]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40020010 	.word	0x40020010
 80047c0:	40020028 	.word	0x40020028
 80047c4:	40020040 	.word	0x40020040
 80047c8:	40020058 	.word	0x40020058
 80047cc:	40020070 	.word	0x40020070
 80047d0:	40020088 	.word	0x40020088
 80047d4:	400200a0 	.word	0x400200a0
 80047d8:	400200b8 	.word	0x400200b8
 80047dc:	40020410 	.word	0x40020410
 80047e0:	40020428 	.word	0x40020428
 80047e4:	40020440 	.word	0x40020440
 80047e8:	40020458 	.word	0x40020458
 80047ec:	40020470 	.word	0x40020470
 80047f0:	40020488 	.word	0x40020488
 80047f4:	400204a0 	.word	0x400204a0
 80047f8:	400204b8 	.word	0x400204b8

080047fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b089      	sub	sp, #36	; 0x24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004806:	2300      	movs	r3, #0
 8004808:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800480a:	4b89      	ldr	r3, [pc, #548]	; (8004a30 <HAL_GPIO_Init+0x234>)
 800480c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800480e:	e194      	b.n	8004b3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	2101      	movs	r1, #1
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	fa01 f303 	lsl.w	r3, r1, r3
 800481c:	4013      	ands	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f000 8186 	beq.w	8004b34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d00b      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d007      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800483c:	2b11      	cmp	r3, #17
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b12      	cmp	r3, #18
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4313      	orrs	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	4013      	ands	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	2203      	movs	r2, #3
 80048b6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ba:	43db      	mvns	r3, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4013      	ands	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	fa02 f303 	lsl.w	r3, r2, r3
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d003      	beq.n	80048ea <HAL_GPIO_Init+0xee>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b12      	cmp	r3, #18
 80048e8:	d123      	bne.n	8004932 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	08da      	lsrs	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3208      	adds	r2, #8
 80048f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	220f      	movs	r2, #15
 8004902:	fa02 f303 	lsl.w	r3, r2, r3
 8004906:	43db      	mvns	r3, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4013      	ands	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	2203      	movs	r2, #3
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43db      	mvns	r3, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4013      	ands	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 80e0 	beq.w	8004b34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004974:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <HAL_GPIO_Init+0x238>)
 8004976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800497a:	4a2e      	ldr	r2, [pc, #184]	; (8004a34 <HAL_GPIO_Init+0x238>)
 800497c:	f043 0302 	orr.w	r3, r3, #2
 8004980:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004984:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_GPIO_Init+0x238>)
 8004986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004992:	4a29      	ldr	r2, [pc, #164]	; (8004a38 <HAL_GPIO_Init+0x23c>)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	089b      	lsrs	r3, r3, #2
 8004998:	3302      	adds	r3, #2
 800499a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	220f      	movs	r2, #15
 80049aa:	fa02 f303 	lsl.w	r3, r2, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	4013      	ands	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a20      	ldr	r2, [pc, #128]	; (8004a3c <HAL_GPIO_Init+0x240>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d052      	beq.n	8004a64 <HAL_GPIO_Init+0x268>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a1f      	ldr	r2, [pc, #124]	; (8004a40 <HAL_GPIO_Init+0x244>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d031      	beq.n	8004a2a <HAL_GPIO_Init+0x22e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <HAL_GPIO_Init+0x248>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d02b      	beq.n	8004a26 <HAL_GPIO_Init+0x22a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_GPIO_Init+0x24c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d025      	beq.n	8004a22 <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a1c      	ldr	r2, [pc, #112]	; (8004a4c <HAL_GPIO_Init+0x250>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01f      	beq.n	8004a1e <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a1b      	ldr	r2, [pc, #108]	; (8004a50 <HAL_GPIO_Init+0x254>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d019      	beq.n	8004a1a <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <HAL_GPIO_Init+0x258>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d013      	beq.n	8004a16 <HAL_GPIO_Init+0x21a>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a19      	ldr	r2, [pc, #100]	; (8004a58 <HAL_GPIO_Init+0x25c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00d      	beq.n	8004a12 <HAL_GPIO_Init+0x216>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a18      	ldr	r2, [pc, #96]	; (8004a5c <HAL_GPIO_Init+0x260>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <HAL_GPIO_Init+0x212>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a17      	ldr	r2, [pc, #92]	; (8004a60 <HAL_GPIO_Init+0x264>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_GPIO_Init+0x20e>
 8004a06:	2309      	movs	r3, #9
 8004a08:	e02d      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	e02b      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a0e:	2308      	movs	r3, #8
 8004a10:	e029      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a12:	2307      	movs	r3, #7
 8004a14:	e027      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a16:	2306      	movs	r3, #6
 8004a18:	e025      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a1a:	2305      	movs	r3, #5
 8004a1c:	e023      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a1e:	2304      	movs	r3, #4
 8004a20:	e021      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a22:	2303      	movs	r3, #3
 8004a24:	e01f      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e01d      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e01b      	b.n	8004a66 <HAL_GPIO_Init+0x26a>
 8004a2e:	bf00      	nop
 8004a30:	58000080 	.word	0x58000080
 8004a34:	58024400 	.word	0x58024400
 8004a38:	58000400 	.word	0x58000400
 8004a3c:	58020000 	.word	0x58020000
 8004a40:	58020400 	.word	0x58020400
 8004a44:	58020800 	.word	0x58020800
 8004a48:	58020c00 	.word	0x58020c00
 8004a4c:	58021000 	.word	0x58021000
 8004a50:	58021400 	.word	0x58021400
 8004a54:	58021800 	.word	0x58021800
 8004a58:	58021c00 	.word	0x58021c00
 8004a5c:	58022000 	.word	0x58022000
 8004a60:	58022400 	.word	0x58022400
 8004a64:	2300      	movs	r3, #0
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	f002 0203 	and.w	r2, r2, #3
 8004a6c:	0092      	lsls	r2, r2, #2
 8004a6e:	4093      	lsls	r3, r2
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <HAL_GPIO_Init+0x35c>)
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	3302      	adds	r3, #2
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004afe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f47f ae63 	bne.w	8004810 <HAL_GPIO_Init+0x14>
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	3724      	adds	r7, #36	; 0x24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	58000400 	.word	0x58000400

08004b5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691a      	ldr	r2, [r3, #16]
 8004b6c:	887b      	ldrh	r3, [r7, #2]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
 8004b78:	e001      	b.n	8004b7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b9c:	787b      	ldrb	r3, [r7, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004ba8:	e003      	b.n	8004bb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	041a      	lsls	r2, r3, #16
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	619a      	str	r2, [r3, #24]
}
 8004bb2:	bf00      	nop
 8004bb4:	370c      	adds	r7, #12
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07f      	b.n	8004cd2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d106      	bne.n	8004bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fc fe58 	bl	800189c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 0201 	bic.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	e006      	b.n	8004c48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d104      	bne.n	8004c5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6859      	ldr	r1, [r3, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b1d      	ldr	r3, [pc, #116]	; (8004cdc <HAL_I2C_Init+0x11c>)
 8004c66:	430b      	orrs	r3, r1
 8004c68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691a      	ldr	r2, [r3, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	ea42 0103 	orr.w	r1, r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69d9      	ldr	r1, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	02008000 	.word	0x02008000

08004ce0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af02      	add	r7, sp, #8
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	461a      	mov	r2, r3
 8004cec:	460b      	mov	r3, r1
 8004cee:	817b      	strh	r3, [r7, #10]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	f040 80da 	bne.w	8004eb6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2C_Master_Transmit+0x30>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e0d3      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d18:	f7fd f884 	bl	8001e24 <HAL_GetTick>
 8004d1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	2319      	movs	r3, #25
 8004d24:	2201      	movs	r2, #1
 8004d26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f8f0 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e0be      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2221      	movs	r2, #33	; 0x21
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2210      	movs	r2, #16
 8004d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	893a      	ldrh	r2, [r7, #8]
 8004d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2bff      	cmp	r3, #255	; 0xff
 8004d6a:	d90e      	bls.n	8004d8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	22ff      	movs	r2, #255	; 0xff
 8004d70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	8979      	ldrh	r1, [r7, #10]
 8004d7a:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f9e6 	bl	8005154 <I2C_TransferConfig>
 8004d88:	e06c      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	8979      	ldrh	r1, [r7, #10]
 8004d9c:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f9d5 	bl	8005154 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004daa:	e05b      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	6a39      	ldr	r1, [r7, #32]
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 f8ed 	bl	8004f90 <I2C_WaitOnTXISFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e07b      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	781a      	ldrb	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d034      	beq.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d130      	bne.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	6a3b      	ldr	r3, [r7, #32]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f87f 	bl	8004f10 <I2C_WaitOnFlagUntilTimeout>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e04d      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2bff      	cmp	r3, #255	; 0xff
 8004e24:	d90e      	bls.n	8004e44 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	22ff      	movs	r2, #255	; 0xff
 8004e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e30:	b2da      	uxtb	r2, r3
 8004e32:	8979      	ldrh	r1, [r7, #10]
 8004e34:	2300      	movs	r3, #0
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f989 	bl	8005154 <I2C_TransferConfig>
 8004e42:	e00f      	b.n	8004e64 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	8979      	ldrh	r1, [r7, #10]
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f978 	bl	8005154 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d19e      	bne.n	8004dac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f8cc 	bl	8005010 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e01a      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004e96:	400b      	ands	r3, r1
 8004e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e000      	b.n	8004eb8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
  }
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	80002000 	.word	0x80002000
 8004ec4:	fe00e800 	.word	0xfe00e800

08004ec8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d103      	bne.n	8004ee6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d007      	beq.n	8004f04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	619a      	str	r2, [r3, #24]
  }
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f20:	e022      	b.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f28:	d01e      	beq.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fc ff7b 	bl	8001e24 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d113      	bne.n	8004f68 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f043 0220 	orr.w	r2, r3, #32
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e00f      	b.n	8004f88 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	79fb      	ldrb	r3, [r7, #7]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d0cd      	beq.n	8004f22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f9c:	e02c      	b.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f870 	bl	8005088 <I2C_IsAcknowledgeFailed>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e02a      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d01e      	beq.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fba:	f7fc ff33 	bl	8001e24 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d302      	bcc.n	8004fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d113      	bne.n	8004ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e007      	b.n	8005008 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d1cb      	bne.n	8004f9e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800501c:	e028      	b.n	8005070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f830 	bl	8005088 <I2C_IsAcknowledgeFailed>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e026      	b.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005032:	f7fc fef7 	bl	8001e24 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	429a      	cmp	r2, r3
 8005040:	d302      	bcc.n	8005048 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d113      	bne.n	8005070 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e007      	b.n	8005080 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f003 0320 	and.w	r3, r3, #32
 800507a:	2b20      	cmp	r3, #32
 800507c:	d1cf      	bne.n	800501e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0310 	and.w	r3, r3, #16
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d151      	bne.n	8005146 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a2:	e022      	b.n	80050ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d01e      	beq.n	80050ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ac:	f7fc feba 	bl	8001e24 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d302      	bcc.n	80050c2 <I2C_IsAcknowledgeFailed+0x3a>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d113      	bne.n	80050ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2220      	movs	r2, #32
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e02e      	b.n	8005148 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d1d5      	bne.n	80050a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2210      	movs	r2, #16
 80050fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2220      	movs	r2, #32
 8005106:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f7ff fedd 	bl	8004ec8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	4b0d      	ldr	r3, [pc, #52]	; (8005150 <I2C_IsAcknowledgeFailed+0xc8>)
 800511a:	400b      	ands	r3, r1
 800511c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005122:	f043 0204 	orr.w	r2, r3, #4
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	fe00e800 	.word	0xfe00e800

08005154 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	817b      	strh	r3, [r7, #10]
 8005162:	4613      	mov	r3, r2
 8005164:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	0d5b      	lsrs	r3, r3, #21
 8005170:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <I2C_TransferConfig+0x58>)
 8005176:	430b      	orrs	r3, r1
 8005178:	43db      	mvns	r3, r3
 800517a:	ea02 0103 	and.w	r1, r2, r3
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005184:	7a7b      	ldrb	r3, [r7, #9]
 8005186:	041b      	lsls	r3, r3, #16
 8005188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	431a      	orrs	r2, r3
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	430a      	orrs	r2, r1
 800519c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	03ff63ff 	.word	0x03ff63ff

080051b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d138      	bne.n	8005238 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d101      	bne.n	80051d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80051d0:	2302      	movs	r3, #2
 80051d2:	e032      	b.n	800523a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2224      	movs	r2, #36	; 0x24
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 0201 	bic.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005202:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6819      	ldr	r1, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2220      	movs	r2, #32
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005234:	2300      	movs	r3, #0
 8005236:	e000      	b.n	800523a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005238:	2302      	movs	r3, #2
  }
}
 800523a:	4618      	mov	r0, r3
 800523c:	370c      	adds	r7, #12
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b20      	cmp	r3, #32
 800525a:	d139      	bne.n	80052d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005266:	2302      	movs	r3, #2
 8005268:	e033      	b.n	80052d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2224      	movs	r2, #36	; 0x24
 8005276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005298:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052e0:	b08f      	sub	sp, #60	; 0x3c
 80052e2:	af0a      	add	r7, sp, #40	; 0x28
 80052e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e116      	b.n	800551e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f010 fbf0 	bl	8015af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2203      	movs	r2, #3
 8005314:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f008 feb1 	bl	800e096 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	687e      	ldr	r6, [r7, #4]
 800533c:	466d      	mov	r5, sp
 800533e:	f106 0410 	add.w	r4, r6, #16
 8005342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800534a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800534e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005352:	1d33      	adds	r3, r6, #4
 8005354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005356:	6838      	ldr	r0, [r7, #0]
 8005358:	f008 fd88 	bl	800de6c <USB_CoreInit>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0d7      	b.n	800551e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2100      	movs	r1, #0
 8005374:	4618      	mov	r0, r3
 8005376:	f008 fe9f 	bl	800e0b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537a:	2300      	movs	r3, #0
 800537c:	73fb      	strb	r3, [r7, #15]
 800537e:	e04a      	b.n	8005416 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	6879      	ldr	r1, [r7, #4]
 8005384:	4613      	mov	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	440b      	add	r3, r1
 800538e:	333d      	adds	r3, #61	; 0x3d
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	1a9b      	subs	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	333c      	adds	r3, #60	; 0x3c
 80053a4:	7bfa      	ldrb	r2, [r7, #15]
 80053a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053a8:	7bfa      	ldrb	r2, [r7, #15]
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	b298      	uxth	r0, r3
 80053ae:	6879      	ldr	r1, [r7, #4]
 80053b0:	4613      	mov	r3, r2
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	1a9b      	subs	r3, r3, r2
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	440b      	add	r3, r1
 80053ba:	3342      	adds	r3, #66	; 0x42
 80053bc:	4602      	mov	r2, r0
 80053be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053c0:	7bfa      	ldrb	r2, [r7, #15]
 80053c2:	6879      	ldr	r1, [r7, #4]
 80053c4:	4613      	mov	r3, r2
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	1a9b      	subs	r3, r3, r2
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	440b      	add	r3, r1
 80053ce:	333f      	adds	r3, #63	; 0x3f
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053d4:	7bfa      	ldrb	r2, [r7, #15]
 80053d6:	6879      	ldr	r1, [r7, #4]
 80053d8:	4613      	mov	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	1a9b      	subs	r3, r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	3344      	adds	r3, #68	; 0x44
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053e8:	7bfa      	ldrb	r2, [r7, #15]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3348      	adds	r3, #72	; 0x48
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80053fc:	7bfa      	ldrb	r2, [r7, #15]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	1a9b      	subs	r3, r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	3350      	adds	r3, #80	; 0x50
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	3301      	adds	r3, #1
 8005414:	73fb      	strb	r3, [r7, #15]
 8005416:	7bfa      	ldrb	r2, [r7, #15]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d3af      	bcc.n	8005380 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e044      	b.n	80054b0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	1a9b      	subs	r3, r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005452:	7bfa      	ldrb	r2, [r7, #15]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800547e:	7bfa      	ldrb	r2, [r7, #15]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	1a9b      	subs	r3, r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	3301      	adds	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
 80054b0:	7bfa      	ldrb	r2, [r7, #15]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d3b5      	bcc.n	8005426 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	687e      	ldr	r6, [r7, #4]
 80054c2:	466d      	mov	r5, sp
 80054c4:	f106 0410 	add.w	r4, r6, #16
 80054c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80054d8:	1d33      	adds	r3, r6, #4
 80054da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f008 fe15 	bl	800e10c <USB_DevInit>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2202      	movs	r2, #2
 80054ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e014      	b.n	800551e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	2b01      	cmp	r3, #1
 800550a:	d102      	bne.n	8005512 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f8bf 	bl	8006690 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f009 fe54 	bl	800f1c4 <USB_DevDisconnect>

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005526 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800553a:	2b01      	cmp	r3, #1
 800553c:	d101      	bne.n	8005542 <HAL_PCD_Start+0x1c>
 800553e:	2302      	movs	r3, #2
 8005540:	e020      	b.n	8005584 <HAL_PCD_Start+0x5e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554e:	2b01      	cmp	r3, #1
 8005550:	d109      	bne.n	8005566 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005556:	2b01      	cmp	r3, #1
 8005558:	d005      	beq.n	8005566 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f009 fe12 	bl	800f194 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f008 fd7d 	bl	800e074 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b08d      	sub	sp, #52	; 0x34
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f009 feb9 	bl	800f31a <USB_GetMode>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f040 83ca 	bne.w	8005d44 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f009 fe1d 	bl	800f1f4 <USB_ReadInterrupts>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 83c0 	beq.w	8005d42 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f009 fe14 	bl	800f1f4 <USB_ReadInterrupts>
 80055cc:	4603      	mov	r3, r0
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d107      	bne.n	80055e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f002 0202 	and.w	r2, r2, #2
 80055e4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f009 fe02 	bl	800f1f4 <USB_ReadInterrupts>
 80055f0:	4603      	mov	r3, r0
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b10      	cmp	r3, #16
 80055f8:	d161      	bne.n	80056be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0210 	bic.w	r2, r2, #16
 8005608:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f003 020f 	and.w	r2, r3, #15
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	0c5b      	lsrs	r3, r3, #17
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	2b02      	cmp	r3, #2
 8005634:	d124      	bne.n	8005680 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800563c:	4013      	ands	r3, r2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d035      	beq.n	80056ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800564c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005650:	b29b      	uxth	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	6a38      	ldr	r0, [r7, #32]
 8005656:	f009 fc7a 	bl	800ef4e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005666:	441a      	add	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	699a      	ldr	r2, [r3, #24]
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005678:	441a      	add	r2, r3
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	619a      	str	r2, [r3, #24]
 800567e:	e016      	b.n	80056ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	0c5b      	lsrs	r3, r3, #17
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	2b06      	cmp	r3, #6
 800568a:	d110      	bne.n	80056ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005692:	2208      	movs	r2, #8
 8005694:	4619      	mov	r1, r3
 8005696:	6a38      	ldr	r0, [r7, #32]
 8005698:	f009 fc59 	bl	800ef4e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	091b      	lsrs	r3, r3, #4
 80056a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056a8:	441a      	add	r2, r3
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699a      	ldr	r2, [r3, #24]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0210 	orr.w	r2, r2, #16
 80056bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f009 fd96 	bl	800f1f4 <USB_ReadInterrupts>
 80056c8:	4603      	mov	r3, r0
 80056ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056d2:	d16e      	bne.n	80057b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f009 fd9c 	bl	800f21a <USB_ReadDevAllOutEpInterrupt>
 80056e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80056e4:	e062      	b.n	80057ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d057      	beq.n	80057a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	4611      	mov	r1, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	f009 fdc1 	bl	800f282 <USB_ReadDevOutEPInterrupt>
 8005700:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005718:	461a      	mov	r2, r3
 800571a:	2301      	movs	r3, #1
 800571c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800571e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fe0b 	bl	800633c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	4413      	add	r3, r2
 8005738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573c:	461a      	mov	r2, r3
 800573e:	2308      	movs	r3, #8
 8005740:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 ff05 	bl	8006554 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	d008      	beq.n	8005766 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	015a      	lsls	r2, r3, #5
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005760:	461a      	mov	r2, r3
 8005762:	2310      	movs	r3, #16
 8005764:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d008      	beq.n	8005782 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577c:	461a      	mov	r2, r3
 800577e:	2320      	movs	r3, #32
 8005780:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005798:	461a      	mov	r2, r3
 800579a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800579e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	3301      	adds	r3, #1
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	085b      	lsrs	r3, r3, #1
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d199      	bne.n	80056e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f009 fd1c 	bl	800f1f4 <USB_ReadInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057c6:	f040 80c0 	bne.w	800594a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f009 fd3d 	bl	800f24e <USB_ReadDevAllInEpInterrupt>
 80057d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80057d6:	2300      	movs	r3, #0
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80057da:	e0b2      	b.n	8005942 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 80a7 	beq.w	8005936 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	4611      	mov	r1, r2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f009 fd63 	bl	800f2be <USB_ReadDevInEPInterrupt>
 80057f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d057      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	2201      	movs	r2, #1
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	43db      	mvns	r3, r3
 800581e:	69f9      	ldr	r1, [r7, #28]
 8005820:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005824:	4013      	ands	r3, r2
 8005826:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	461a      	mov	r2, r3
 8005836:	2301      	movs	r3, #1
 8005838:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d132      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	1a9b      	subs	r3, r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	3348      	adds	r3, #72	; 0x48
 8005852:	6819      	ldr	r1, [r3, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4403      	add	r3, r0
 8005862:	3344      	adds	r3, #68	; 0x44
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4419      	add	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	4613      	mov	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4403      	add	r3, r0
 8005876:	3348      	adds	r3, #72	; 0x48
 8005878:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	2b00      	cmp	r3, #0
 800587e:	d113      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x31c>
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	1a9b      	subs	r3, r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	3350      	adds	r3, #80	; 0x50
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d108      	bne.n	80058a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6818      	ldr	r0, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80058a0:	461a      	mov	r2, r3
 80058a2:	2101      	movs	r1, #1
 80058a4:	f009 fd6c 	bl	800f380 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f010 f99d 	bl	8015bee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d008      	beq.n	80058d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	461a      	mov	r2, r3
 80058cc:	2308      	movs	r3, #8
 80058ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d008      	beq.n	80058ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e6:	461a      	mov	r2, r3
 80058e8:	2310      	movs	r3, #16
 80058ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005902:	461a      	mov	r2, r3
 8005904:	2340      	movs	r3, #64	; 0x40
 8005906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	461a      	mov	r2, r3
 8005920:	2302      	movs	r3, #2
 8005922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fc75 	bl	8006220 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	3301      	adds	r3, #1
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	085b      	lsrs	r3, r3, #1
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	2b00      	cmp	r3, #0
 8005946:	f47f af49 	bne.w	80057dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f009 fc50 	bl	800f1f4 <USB_ReadInterrupts>
 8005954:	4603      	mov	r3, r0
 8005956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800595a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800595e:	d122      	bne.n	80059a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596e:	f023 0301 	bic.w	r3, r3, #1
 8005972:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005986:	2100      	movs	r1, #0
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 fea5 	bl	80066d8 <HAL_PCDEx_LPM_Callback>
 800598e:	e002      	b.n	8005996 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f010 f9a3 	bl	8015cdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695a      	ldr	r2, [r3, #20]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80059a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f009 fc22 	bl	800f1f4 <USB_ReadInterrupts>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ba:	d112      	bne.n	80059e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f003 0301 	and.w	r3, r3, #1
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f010 f95f 	bl	8015c90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	695a      	ldr	r2, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80059e0:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f009 fc04 	bl	800f1f4 <USB_ReadInterrupts>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059f6:	d121      	bne.n	8005a3c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005a06:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d111      	bne.n	8005a36 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	f003 020f 	and.w	r2, r3, #15
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fe52 	bl	80066d8 <HAL_PCDEx_LPM_Callback>
 8005a34:	e002      	b.n	8005a3c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f010 f92a 	bl	8015c90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f009 fbd7 	bl	800f1f4 <USB_ReadInterrupts>
 8005a46:	4603      	mov	r3, r0
 8005a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a50:	f040 80c7 	bne.w	8005be2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a62:	f023 0301 	bic.w	r3, r3, #1
 8005a66:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2110      	movs	r1, #16
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f008 fcaa 	bl	800e3c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a74:	2300      	movs	r3, #0
 8005a76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a78:	e056      	b.n	8005b28 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	015a      	lsls	r2, r3, #5
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a86:	461a      	mov	r2, r3
 8005a88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a8c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a90:	015a      	lsls	r2, r3, #5
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	4413      	add	r3, r2
 8005a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a9e:	0151      	lsls	r1, r2, #5
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	440a      	add	r2, r1
 8005aa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aa8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005aac:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ac8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005acc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ae0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b24:	3301      	adds	r3, #1
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d3a3      	bcc.n	8005a7a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d016      	beq.n	8005b7c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5e:	f043 030b 	orr.w	r3, r3, #11
 8005b62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6e:	69fa      	ldr	r2, [r7, #28]
 8005b70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b74:	f043 030b 	orr.w	r3, r3, #11
 8005b78:	6453      	str	r3, [r2, #68]	; 0x44
 8005b7a:	e015      	b.n	8005ba8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f242 032b 	movw	r3, #8235	; 0x202b
 8005b90:	4313      	orrs	r3, r2
 8005b92:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba2:	f043 030b 	orr.w	r3, r3, #11
 8005ba6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69fa      	ldr	r2, [r7, #28]
 8005bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005bba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005bcc:	461a      	mov	r2, r3
 8005bce:	f009 fbd7 	bl	800f380 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f009 fb04 	bl	800f1f4 <USB_ReadInterrupts>
 8005bec:	4603      	mov	r3, r0
 8005bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf6:	d124      	bne.n	8005c42 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f009 fb9b 	bl	800f338 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f008 fc3f 	bl	800e48a <USB_GetDevSpeed>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	461a      	mov	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681c      	ldr	r4, [r3, #0]
 8005c18:	f001 fd56 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 8005c1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	4620      	mov	r0, r4
 8005c28:	f008 f982 	bl	800df30 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f010 f806 	bl	8015c3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695a      	ldr	r2, [r3, #20]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f009 fad4 	bl	800f1f4 <USB_ReadInterrupts>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f003 0308 	and.w	r3, r3, #8
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d10a      	bne.n	8005c6c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f00f ffe3 	bl	8015c22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f002 0208 	and.w	r2, r2, #8
 8005c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f009 fabf 	bl	800f1f4 <USB_ReadInterrupts>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c80:	d10f      	bne.n	8005ca2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f010 f845 	bl	8015d1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f009 faa4 	bl	800f1f4 <USB_ReadInterrupts>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb6:	d10f      	bne.n	8005cd8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f010 f818 	bl	8015cf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f009 fa89 	bl	800f1f4 <USB_ReadInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d10a      	bne.n	8005d04 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f010 f826 	bl	8015d40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f009 fa73 	bl	800f1f4 <USB_ReadInterrupts>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b04      	cmp	r3, #4
 8005d16:	d115      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f010 f816 	bl	8015d5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6859      	ldr	r1, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
 8005d40:	e000      	b.n	8005d44 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005d42:	bf00      	nop
    }
  }
}
 8005d44:	3734      	adds	r7, #52	; 0x34
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd90      	pop	{r4, r7, pc}

08005d4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <HAL_PCD_SetAddress+0x1a>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e013      	b.n	8005d8c <HAL_PCD_SetAddress+0x42>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	78fa      	ldrb	r2, [r7, #3]
 8005d70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f009 f9e3 	bl	800f148 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	461a      	mov	r2, r3
 8005da2:	4603      	mov	r3, r0
 8005da4:	70fb      	strb	r3, [r7, #3]
 8005da6:	460b      	mov	r3, r1
 8005da8:	803b      	strh	r3, [r7, #0]
 8005daa:	4613      	mov	r3, r2
 8005dac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da0f      	bge.n	8005dda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	3338      	adds	r3, #56	; 0x38
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3304      	adds	r3, #4
 8005dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	705a      	strb	r2, [r3, #1]
 8005dd8:	e00f      	b.n	8005dfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005dda:	78fb      	ldrb	r3, [r7, #3]
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	4613      	mov	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4413      	add	r3, r2
 8005df0:	3304      	adds	r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dfa:	78fb      	ldrb	r3, [r7, #3]
 8005dfc:	f003 030f 	and.w	r3, r3, #15
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e06:	883a      	ldrh	r2, [r7, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	78ba      	ldrb	r2, [r7, #2]
 8005e10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	785b      	ldrb	r3, [r3, #1]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d004      	beq.n	8005e24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e24:	78bb      	ldrb	r3, [r7, #2]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d102      	bne.n	8005e30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_PCD_EP_Open+0xaa>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e00e      	b.n	8005e5c <HAL_PCD_EP_Open+0xc8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f008 fb41 	bl	800e4d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da0f      	bge.n	8005e98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e78:	78fb      	ldrb	r3, [r7, #3]
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	1a9b      	subs	r3, r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	3338      	adds	r3, #56	; 0x38
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	705a      	strb	r2, [r3, #1]
 8005e96:	e00f      	b.n	8005eb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 020f 	and.w	r2, r3, #15
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	00db      	lsls	r3, r3, #3
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	4413      	add	r3, r2
 8005eae:	3304      	adds	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d101      	bne.n	8005ed2 <HAL_PCD_EP_Close+0x6e>
 8005ece:	2302      	movs	r3, #2
 8005ed0:	e00e      	b.n	8005ef0 <HAL_PCD_EP_Close+0x8c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f008 fb7f 	bl	800e5e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	607a      	str	r2, [r7, #4]
 8005f02:	603b      	str	r3, [r7, #0]
 8005f04:	460b      	mov	r3, r1
 8005f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f08:	7afb      	ldrb	r3, [r7, #11]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	4613      	mov	r3, r2
 8005f10:	00db      	lsls	r3, r3, #3
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2200      	movs	r2, #0
 8005f38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f3a:	7afb      	ldrb	r3, [r7, #11]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d102      	bne.n	8005f54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f54:	7afb      	ldrb	r3, [r7, #11]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d109      	bne.n	8005f72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6979      	ldr	r1, [r7, #20]
 8005f6c:	f008 fe62 	bl	800ec34 <USB_EP0StartXfer>
 8005f70:	e008      	b.n	8005f84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	f008 fc0c 	bl	800e79c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f9a:	78fb      	ldrb	r3, [r7, #3]
 8005f9c:	f003 020f 	and.w	r2, r3, #15
 8005fa0:	6879      	ldr	r1, [r7, #4]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	1a9b      	subs	r3, r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	440b      	add	r3, r1
 8005fac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005fb0:	681b      	ldr	r3, [r3, #0]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fce:	7afb      	ldrb	r3, [r7, #11]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	3338      	adds	r3, #56	; 0x38
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	b2da      	uxtb	r2, r3
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d102      	bne.n	8006018 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006018:	7afb      	ldrb	r3, [r7, #11]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	b2db      	uxtb	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	6979      	ldr	r1, [r7, #20]
 8006030:	f008 fe00 	bl	800ec34 <USB_EP0StartXfer>
 8006034:	e008      	b.n	8006048 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	b2db      	uxtb	r3, r3
 8006040:	461a      	mov	r2, r3
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	f008 fbaa 	bl	800e79c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	429a      	cmp	r2, r3
 800606a:	d901      	bls.n	8006070 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e050      	b.n	8006112 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006074:	2b00      	cmp	r3, #0
 8006076:	da0f      	bge.n	8006098 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	4613      	mov	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	1a9b      	subs	r3, r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	3338      	adds	r3, #56	; 0x38
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2201      	movs	r2, #1
 8006094:	705a      	strb	r2, [r3, #1]
 8006096:	e00d      	b.n	80060b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	4613      	mov	r3, r2
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	1a9b      	subs	r3, r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_PCD_EP_SetStall+0x82>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e01e      	b.n	8006112 <HAL_PCD_EP_SetStall+0xc0>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68f9      	ldr	r1, [r7, #12]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f008 ff5c 	bl	800efa0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	b2d9      	uxtb	r1, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006102:	461a      	mov	r2, r3
 8006104:	f009 f93c 	bl	800f380 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d901      	bls.n	8006138 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e042      	b.n	80061be <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	da0f      	bge.n	8006160 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	1a9b      	subs	r3, r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	3338      	adds	r3, #56	; 0x38
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	4413      	add	r3, r2
 8006154:	3304      	adds	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2201      	movs	r2, #1
 800615c:	705a      	strb	r2, [r3, #1]
 800615e:	e00f      	b.n	8006180 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006160:	78fb      	ldrb	r3, [r7, #3]
 8006162:	f003 020f 	and.w	r2, r3, #15
 8006166:	4613      	mov	r3, r2
 8006168:	00db      	lsls	r3, r3, #3
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	3304      	adds	r3, #4
 8006178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 030f 	and.w	r3, r3, #15
 800618c:	b2da      	uxtb	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006198:	2b01      	cmp	r3, #1
 800619a:	d101      	bne.n	80061a0 <HAL_PCD_EP_ClrStall+0x86>
 800619c:	2302      	movs	r3, #2
 800619e:	e00e      	b.n	80061be <HAL_PCD_EP_ClrStall+0xa4>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f008 ff64 	bl	800f07c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_PCD_EP_Flush+0x1a>
 80061dc:	2302      	movs	r3, #2
 80061de:	e01b      	b.n	8006218 <HAL_PCD_EP_Flush+0x52>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80061e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	da09      	bge.n	8006204 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f008 f8e3 	bl	800e3c8 <USB_FlushTxFifo>
 8006202:	e004      	b.n	800620e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f008 f903 	bl	800e414 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af02      	add	r7, sp, #8
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	00db      	lsls	r3, r3, #3
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	3338      	adds	r3, #56	; 0x38
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	4413      	add	r3, r2
 8006244:	3304      	adds	r3, #4
 8006246:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699a      	ldr	r2, [r3, #24]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	d901      	bls.n	8006258 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e06c      	b.n	8006332 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	429a      	cmp	r2, r3
 800626c:	d902      	bls.n	8006274 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3303      	adds	r3, #3
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800627c:	e02b      	b.n	80062d6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	429a      	cmp	r2, r3
 8006292:	d902      	bls.n	800629a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3303      	adds	r3, #3
 800629e:	089b      	lsrs	r3, r3, #2
 80062a0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68d9      	ldr	r1, [r3, #12]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	4603      	mov	r3, r0
 80062b8:	6978      	ldr	r0, [r7, #20]
 80062ba:	f008 fe13 	bl	800eee4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	699a      	ldr	r2, [r3, #24]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	441a      	add	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d809      	bhi.n	8006300 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	699a      	ldr	r2, [r3, #24]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d203      	bcs.n	8006300 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1be      	bne.n	800627e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	d811      	bhi.n	8006330 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	2201      	movs	r2, #1
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	43db      	mvns	r3, r3
 8006326:	6939      	ldr	r1, [r7, #16]
 8006328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800632c:	4013      	ands	r3, r2
 800632e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3720      	adds	r7, #32
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	333c      	adds	r3, #60	; 0x3c
 8006354:	3304      	adds	r3, #4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b01      	cmp	r3, #1
 8006370:	f040 80a0 	bne.w	80064b4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d015      	beq.n	80063aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a72      	ldr	r2, [pc, #456]	; (800654c <PCD_EP_OutXfrComplete_int+0x210>)
 8006382:	4293      	cmp	r3, r2
 8006384:	f240 80dd 	bls.w	8006542 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80d7 	beq.w	8006542 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	6093      	str	r3, [r2, #8]
 80063a8:	e0cb      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d009      	beq.n	80063c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	2320      	movs	r3, #32
 80063c4:	6093      	str	r3, [r2, #8]
 80063c6:	e0bc      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 80b7 	bne.w	8006542 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4a5d      	ldr	r2, [pc, #372]	; (800654c <PCD_EP_OutXfrComplete_int+0x210>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d90f      	bls.n	80063fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00a      	beq.n	80063fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	015a      	lsls	r2, r3, #5
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4413      	add	r3, r2
 80063ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f2:	461a      	mov	r2, r3
 80063f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063f8:	6093      	str	r3, [r2, #8]
 80063fa:	e0a2      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80063fc:	6879      	ldr	r1, [r7, #4]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800640e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	0159      	lsls	r1, r3, #5
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	440b      	add	r3, r1
 8006418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006422:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	683a      	ldr	r2, [r7, #0]
 8006428:	4613      	mov	r3, r2
 800642a:	00db      	lsls	r3, r3, #3
 800642c:	1a9b      	subs	r3, r3, r2
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4403      	add	r3, r0
 8006432:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006436:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	683a      	ldr	r2, [r7, #0]
 800643c:	4613      	mov	r3, r2
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	1a9b      	subs	r3, r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	440b      	add	r3, r1
 8006446:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800644a:	6819      	ldr	r1, [r3, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	683a      	ldr	r2, [r7, #0]
 8006450:	4613      	mov	r3, r2
 8006452:	00db      	lsls	r3, r3, #3
 8006454:	1a9b      	subs	r3, r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4403      	add	r3, r0
 800645a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4419      	add	r1, r3
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	4613      	mov	r3, r2
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	1a9b      	subs	r3, r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4403      	add	r3, r0
 8006470:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006474:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d114      	bne.n	80064a6 <PCD_EP_OutXfrComplete_int+0x16a>
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	1a9b      	subs	r3, r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d108      	bne.n	80064a6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800649e:	461a      	mov	r2, r3
 80064a0:	2101      	movs	r1, #1
 80064a2:	f008 ff6d 	bl	800f380 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f00f fb83 	bl	8015bb8 <HAL_PCD_DataOutStageCallback>
 80064b2:	e046      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4a26      	ldr	r2, [pc, #152]	; (8006550 <PCD_EP_OutXfrComplete_int+0x214>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d124      	bne.n	8006506 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	461a      	mov	r2, r3
 80064d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d8:	6093      	str	r3, [r2, #8]
 80064da:	e032      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0320 	and.w	r3, r3, #32
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d008      	beq.n	80064f8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	461a      	mov	r2, r3
 80064f4:	2320      	movs	r3, #32
 80064f6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f00f fb5a 	bl	8015bb8 <HAL_PCD_DataOutStageCallback>
 8006504:	e01d      	b.n	8006542 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d114      	bne.n	8006536 <PCD_EP_OutXfrComplete_int+0x1fa>
 800650c:	6879      	ldr	r1, [r7, #4]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	4613      	mov	r3, r2
 8006512:	00db      	lsls	r3, r3, #3
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d108      	bne.n	8006536 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6818      	ldr	r0, [r3, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800652e:	461a      	mov	r2, r3
 8006530:	2100      	movs	r1, #0
 8006532:	f008 ff25 	bl	800f380 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f00f fb3b 	bl	8015bb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3718      	adds	r7, #24
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	4f54300a 	.word	0x4f54300a
 8006550:	4f54310a 	.word	0x4f54310a

08006554 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	333c      	adds	r3, #60	; 0x3c
 800656c:	3304      	adds	r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <PCD_EP_OutSetupPacket_int+0x88>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d90e      	bls.n	80065a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f00f faf3 	bl	8015b94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <PCD_EP_OutSetupPacket_int+0x88>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d90c      	bls.n	80065d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d108      	bne.n	80065d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80065c8:	461a      	mov	r2, r3
 80065ca:	2101      	movs	r1, #1
 80065cc:	f008 fed8 	bl	800f380 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	4f54300a 	.word	0x4f54300a

080065e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
 80065ec:	4613      	mov	r3, r2
 80065ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d107      	bne.n	800660e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065fe:	883b      	ldrh	r3, [r7, #0]
 8006600:	0419      	lsls	r1, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	430a      	orrs	r2, r1
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
 800660c:	e028      	b.n	8006660 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4413      	add	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800661c:	2300      	movs	r3, #0
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e00d      	b.n	800663e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3340      	adds	r3, #64	; 0x40
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	3301      	adds	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	7bfa      	ldrb	r2, [r7, #15]
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	3b01      	subs	r3, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	d3ec      	bcc.n	8006622 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006648:	883b      	ldrh	r3, [r7, #0]
 800664a:	0418      	lsls	r0, r3, #16
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	3b01      	subs	r3, #1
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	4302      	orrs	r2, r0
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	10000003 	.word	0x10000003

080066d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066f8:	4b19      	ldr	r3, [pc, #100]	; (8006760 <HAL_PWREx_ConfigSupply+0x70>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0304 	and.w	r3, r3, #4
 8006700:	2b04      	cmp	r3, #4
 8006702:	d00a      	beq.n	800671a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006704:	4b16      	ldr	r3, [pc, #88]	; (8006760 <HAL_PWREx_ConfigSupply+0x70>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	429a      	cmp	r2, r3
 8006710:	d001      	beq.n	8006716 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e01f      	b.n	8006756 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006716:	2300      	movs	r3, #0
 8006718:	e01d      	b.n	8006756 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800671a:	4b11      	ldr	r3, [pc, #68]	; (8006760 <HAL_PWREx_ConfigSupply+0x70>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f023 0207 	bic.w	r2, r3, #7
 8006722:	490f      	ldr	r1, [pc, #60]	; (8006760 <HAL_PWREx_ConfigSupply+0x70>)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800672a:	f7fb fb7b 	bl	8001e24 <HAL_GetTick>
 800672e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006730:	e009      	b.n	8006746 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006732:	f7fb fb77 	bl	8001e24 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006740:	d901      	bls.n	8006746 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e007      	b.n	8006756 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <HAL_PWREx_ConfigSupply+0x70>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800674e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006752:	d1ee      	bne.n	8006732 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	58024800 	.word	0x58024800

08006764 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4a04      	ldr	r2, [pc, #16]	; (8006780 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800676e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006772:	60d3      	str	r3, [r2, #12]
}
 8006774:	bf00      	nop
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	58024800 	.word	0x58024800

08006784 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08c      	sub	sp, #48	; 0x30
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e3ff      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8087 	beq.w	80068b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067a4:	4b99      	ldr	r3, [pc, #612]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067ae:	4b97      	ldr	r3, [pc, #604]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b6:	2b10      	cmp	r3, #16
 80067b8:	d007      	beq.n	80067ca <HAL_RCC_OscConfig+0x46>
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	2b18      	cmp	r3, #24
 80067be:	d110      	bne.n	80067e2 <HAL_RCC_OscConfig+0x5e>
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d10b      	bne.n	80067e2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ca:	4b90      	ldr	r3, [pc, #576]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d06c      	beq.n	80068b0 <HAL_RCC_OscConfig+0x12c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d168      	bne.n	80068b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e3d9      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ea:	d106      	bne.n	80067fa <HAL_RCC_OscConfig+0x76>
 80067ec:	4b87      	ldr	r3, [pc, #540]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a86      	ldr	r2, [pc, #536]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80067f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	e02e      	b.n	8006858 <HAL_RCC_OscConfig+0xd4>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10c      	bne.n	800681c <HAL_RCC_OscConfig+0x98>
 8006802:	4b82      	ldr	r3, [pc, #520]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a81      	ldr	r2, [pc, #516]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	4b7f      	ldr	r3, [pc, #508]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a7e      	ldr	r2, [pc, #504]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e01d      	b.n	8006858 <HAL_RCC_OscConfig+0xd4>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006824:	d10c      	bne.n	8006840 <HAL_RCC_OscConfig+0xbc>
 8006826:	4b79      	ldr	r3, [pc, #484]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a78      	ldr	r2, [pc, #480]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800682c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	4b76      	ldr	r3, [pc, #472]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a75      	ldr	r2, [pc, #468]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e00b      	b.n	8006858 <HAL_RCC_OscConfig+0xd4>
 8006840:	4b72      	ldr	r3, [pc, #456]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a71      	ldr	r2, [pc, #452]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	4b6f      	ldr	r3, [pc, #444]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6e      	ldr	r2, [pc, #440]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d013      	beq.n	8006888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fb fae0 	bl	8001e24 <HAL_GetTick>
 8006864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006868:	f7fb fadc 	bl	8001e24 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b64      	cmp	r3, #100	; 0x64
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e38d      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800687a:	4b64      	ldr	r3, [pc, #400]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d0f0      	beq.n	8006868 <HAL_RCC_OscConfig+0xe4>
 8006886:	e014      	b.n	80068b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006888:	f7fb facc 	bl	8001e24 <HAL_GetTick>
 800688c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800688e:	e008      	b.n	80068a2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006890:	f7fb fac8 	bl	8001e24 <HAL_GetTick>
 8006894:	4602      	mov	r2, r0
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	2b64      	cmp	r3, #100	; 0x64
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e379      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068a2:	4b5a      	ldr	r3, [pc, #360]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1f0      	bne.n	8006890 <HAL_RCC_OscConfig+0x10c>
 80068ae:	e000      	b.n	80068b2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80ae 	beq.w	8006a1c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068c0:	4b52      	ldr	r3, [pc, #328]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068ca:	4b50      	ldr	r3, [pc, #320]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068d0:	6a3b      	ldr	r3, [r7, #32]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <HAL_RCC_OscConfig+0x162>
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2b18      	cmp	r3, #24
 80068da:	d13a      	bne.n	8006952 <HAL_RCC_OscConfig+0x1ce>
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d135      	bne.n	8006952 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068e6:	4b49      	ldr	r3, [pc, #292]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_RCC_OscConfig+0x17a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e34b      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068fe:	f7fb fabf 	bl	8001e80 <HAL_GetREVID>
 8006902:	4602      	mov	r2, r0
 8006904:	f241 0303 	movw	r3, #4099	; 0x1003
 8006908:	429a      	cmp	r2, r3
 800690a:	d817      	bhi.n	800693c <HAL_RCC_OscConfig+0x1b8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	2b40      	cmp	r3, #64	; 0x40
 8006912:	d108      	bne.n	8006926 <HAL_RCC_OscConfig+0x1a2>
 8006914:	4b3d      	ldr	r3, [pc, #244]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800691c:	4a3b      	ldr	r2, [pc, #236]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800691e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006922:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006924:	e07a      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	031b      	lsls	r3, r3, #12
 8006934:	4935      	ldr	r1, [pc, #212]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006936:	4313      	orrs	r3, r2
 8006938:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800693a:	e06f      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693c:	4b33      	ldr	r3, [pc, #204]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	4930      	ldr	r1, [pc, #192]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800694c:	4313      	orrs	r3, r2
 800694e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006950:	e064      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d045      	beq.n	80069e6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f023 0219 	bic.w	r2, r3, #25
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4929      	ldr	r1, [pc, #164]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006968:	4313      	orrs	r3, r2
 800696a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696c:	f7fb fa5a 	bl	8001e24 <HAL_GetTick>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006974:	f7fb fa56 	bl	8001e24 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e307      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006986:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d0f0      	beq.n	8006974 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006992:	f7fb fa75 	bl	8001e80 <HAL_GetREVID>
 8006996:	4602      	mov	r2, r0
 8006998:	f241 0303 	movw	r3, #4099	; 0x1003
 800699c:	429a      	cmp	r2, r3
 800699e:	d817      	bhi.n	80069d0 <HAL_RCC_OscConfig+0x24c>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d108      	bne.n	80069ba <HAL_RCC_OscConfig+0x236>
 80069a8:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069b0:	4a16      	ldr	r2, [pc, #88]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069b6:	6053      	str	r3, [r2, #4]
 80069b8:	e030      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	031b      	lsls	r3, r3, #12
 80069c8:	4910      	ldr	r1, [pc, #64]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	604b      	str	r3, [r1, #4]
 80069ce:	e025      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
 80069d0:	4b0e      	ldr	r3, [pc, #56]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	490b      	ldr	r1, [pc, #44]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	604b      	str	r3, [r1, #4]
 80069e4:	e01a      	b.n	8006a1c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e6:	4b09      	ldr	r3, [pc, #36]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <HAL_RCC_OscConfig+0x288>)
 80069ec:	f023 0301 	bic.w	r3, r3, #1
 80069f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f2:	f7fb fa17 	bl	8001e24 <HAL_GetTick>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80069f8:	e00a      	b.n	8006a10 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069fa:	f7fb fa13 	bl	8001e24 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d903      	bls.n	8006a10 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e2c4      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
 8006a0c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a10:	4ba4      	ldr	r3, [pc, #656]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1ee      	bne.n	80069fa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 80a9 	beq.w	8006b7c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a2a:	4b9e      	ldr	r3, [pc, #632]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a34:	4b9b      	ldr	r3, [pc, #620]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d007      	beq.n	8006a50 <HAL_RCC_OscConfig+0x2cc>
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b18      	cmp	r3, #24
 8006a44:	d13a      	bne.n	8006abc <HAL_RCC_OscConfig+0x338>
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d135      	bne.n	8006abc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a50:	4b94      	ldr	r3, [pc, #592]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2e4>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d001      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e296      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a68:	f7fb fa0a 	bl	8001e80 <HAL_GetREVID>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d817      	bhi.n	8006aa6 <HAL_RCC_OscConfig+0x322>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	2b20      	cmp	r3, #32
 8006a7c:	d108      	bne.n	8006a90 <HAL_RCC_OscConfig+0x30c>
 8006a7e:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a86:	4a87      	ldr	r2, [pc, #540]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a8e:	e075      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a90:	4b84      	ldr	r3, [pc, #528]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	069b      	lsls	r3, r3, #26
 8006a9e:	4981      	ldr	r1, [pc, #516]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aa4:	e06a      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aa6:	4b7f      	ldr	r3, [pc, #508]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
 8006ab2:	061b      	lsls	r3, r3, #24
 8006ab4:	497b      	ldr	r1, [pc, #492]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aba:	e05f      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d042      	beq.n	8006b4a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006ac4:	4b77      	ldr	r3, [pc, #476]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a76      	ldr	r2, [pc, #472]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad0:	f7fb f9a8 	bl	8001e24 <HAL_GetTick>
 8006ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ad8:	f7fb f9a4 	bl	8001e24 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e255      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aea:	4b6e      	ldr	r3, [pc, #440]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006af6:	f7fb f9c3 	bl	8001e80 <HAL_GetREVID>
 8006afa:	4602      	mov	r2, r0
 8006afc:	f241 0303 	movw	r3, #4099	; 0x1003
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d817      	bhi.n	8006b34 <HAL_RCC_OscConfig+0x3b0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a1b      	ldr	r3, [r3, #32]
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d108      	bne.n	8006b1e <HAL_RCC_OscConfig+0x39a>
 8006b0c:	4b65      	ldr	r3, [pc, #404]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b14:	4a63      	ldr	r2, [pc, #396]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b1a:	6053      	str	r3, [r2, #4]
 8006b1c:	e02e      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
 8006b1e:	4b61      	ldr	r3, [pc, #388]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	069b      	lsls	r3, r3, #26
 8006b2c:	495d      	ldr	r1, [pc, #372]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	604b      	str	r3, [r1, #4]
 8006b32:	e023      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
 8006b34:	4b5b      	ldr	r3, [pc, #364]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	061b      	lsls	r3, r3, #24
 8006b42:	4958      	ldr	r1, [pc, #352]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60cb      	str	r3, [r1, #12]
 8006b48:	e018      	b.n	8006b7c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b4a:	4b56      	ldr	r3, [pc, #344]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a55      	ldr	r2, [pc, #340]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b56:	f7fb f965 	bl	8001e24 <HAL_GetTick>
 8006b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b5c:	e008      	b.n	8006b70 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b5e:	f7fb f961 	bl	8001e24 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d901      	bls.n	8006b70 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e212      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b70:	4b4c      	ldr	r3, [pc, #304]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1f0      	bne.n	8006b5e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0308 	and.w	r3, r3, #8
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d036      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d019      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b90:	4b44      	ldr	r3, [pc, #272]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b94:	4a43      	ldr	r2, [pc, #268]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fb f942 	bl	8001e24 <HAL_GetTick>
 8006ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ba4:	f7fb f93e 	bl	8001e24 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e1ef      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x420>
 8006bc2:	e018      	b.n	8006bf6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc4:	4b37      	ldr	r3, [pc, #220]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc8:	4a36      	ldr	r2, [pc, #216]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006bca:	f023 0301 	bic.w	r3, r3, #1
 8006bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd0:	f7fb f928 	bl	8001e24 <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006bd8:	f7fb f924 	bl	8001e24 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e1d5      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bea:	4b2e      	ldr	r3, [pc, #184]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1f0      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d036      	beq.n	8006c70 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d019      	beq.n	8006c3e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c0a:	4b26      	ldr	r3, [pc, #152]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a25      	ldr	r2, [pc, #148]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c16:	f7fb f905 	bl	8001e24 <HAL_GetTick>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c1e:	f7fb f901 	bl	8001e24 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e1b2      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c30:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x49a>
 8006c3c:	e018      	b.n	8006c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c3e:	4b19      	ldr	r3, [pc, #100]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a18      	ldr	r2, [pc, #96]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c4a:	f7fb f8eb 	bl	8001e24 <HAL_GetTick>
 8006c4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c52:	f7fb f8e7 	bl	8001e24 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e198      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c64:	4b0f      	ldr	r3, [pc, #60]	; (8006ca4 <HAL_RCC_OscConfig+0x520>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1f0      	bne.n	8006c52 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 8085 	beq.w	8006d88 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <HAL_RCC_OscConfig+0x524>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a09      	ldr	r2, [pc, #36]	; (8006ca8 <HAL_RCC_OscConfig+0x524>)
 8006c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c8a:	f7fb f8cb 	bl	8001e24 <HAL_GetTick>
 8006c8e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c90:	e00c      	b.n	8006cac <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c92:	f7fb f8c7 	bl	8001e24 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b64      	cmp	r3, #100	; 0x64
 8006c9e:	d905      	bls.n	8006cac <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e178      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cac:	4b96      	ldr	r3, [pc, #600]	; (8006f08 <HAL_RCC_OscConfig+0x784>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0ec      	beq.n	8006c92 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d106      	bne.n	8006cce <HAL_RCC_OscConfig+0x54a>
 8006cc0:	4b92      	ldr	r3, [pc, #584]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	4a91      	ldr	r2, [pc, #580]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cc6:	f043 0301 	orr.w	r3, r3, #1
 8006cca:	6713      	str	r3, [r2, #112]	; 0x70
 8006ccc:	e02d      	b.n	8006d2a <HAL_RCC_OscConfig+0x5a6>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10c      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x56c>
 8006cd6:	4b8d      	ldr	r3, [pc, #564]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a8c      	ldr	r2, [pc, #560]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce2:	4b8a      	ldr	r3, [pc, #552]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	4a89      	ldr	r2, [pc, #548]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ce8:	f023 0304 	bic.w	r3, r3, #4
 8006cec:	6713      	str	r3, [r2, #112]	; 0x70
 8006cee:	e01c      	b.n	8006d2a <HAL_RCC_OscConfig+0x5a6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b05      	cmp	r3, #5
 8006cf6:	d10c      	bne.n	8006d12 <HAL_RCC_OscConfig+0x58e>
 8006cf8:	4b84      	ldr	r3, [pc, #528]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfc:	4a83      	ldr	r2, [pc, #524]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006cfe:	f043 0304 	orr.w	r3, r3, #4
 8006d02:	6713      	str	r3, [r2, #112]	; 0x70
 8006d04:	4b81      	ldr	r3, [pc, #516]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	4a80      	ldr	r2, [pc, #512]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d10:	e00b      	b.n	8006d2a <HAL_RCC_OscConfig+0x5a6>
 8006d12:	4b7e      	ldr	r3, [pc, #504]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d16:	4a7d      	ldr	r2, [pc, #500]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d18:	f023 0301 	bic.w	r3, r3, #1
 8006d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1e:	4b7b      	ldr	r3, [pc, #492]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	4a7a      	ldr	r2, [pc, #488]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d24:	f023 0304 	bic.w	r3, r3, #4
 8006d28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d015      	beq.n	8006d5e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d32:	f7fb f877 	bl	8001e24 <HAL_GetTick>
 8006d36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d38:	e00a      	b.n	8006d50 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d3a:	f7fb f873 	bl	8001e24 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d901      	bls.n	8006d50 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e122      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d50:	4b6e      	ldr	r3, [pc, #440]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ee      	beq.n	8006d3a <HAL_RCC_OscConfig+0x5b6>
 8006d5c:	e014      	b.n	8006d88 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d5e:	f7fb f861 	bl	8001e24 <HAL_GetTick>
 8006d62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d64:	e00a      	b.n	8006d7c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d66:	f7fb f85d 	bl	8001e24 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d901      	bls.n	8006d7c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e10c      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d7c:	4b63      	ldr	r3, [pc, #396]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ee      	bne.n	8006d66 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8101 	beq.w	8006f94 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006d92:	4b5e      	ldr	r3, [pc, #376]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d9a:	2b18      	cmp	r3, #24
 8006d9c:	f000 80bc 	beq.w	8006f18 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da4:	2b02      	cmp	r3, #2
 8006da6:	f040 8095 	bne.w	8006ed4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006daa:	4b58      	ldr	r3, [pc, #352]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a57      	ldr	r2, [pc, #348]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006db0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db6:	f7fb f835 	bl	8001e24 <HAL_GetTick>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dbc:	e008      	b.n	8006dd0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dbe:	f7fb f831 	bl	8001e24 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d901      	bls.n	8006dd0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e0e2      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dd0:	4b4e      	ldr	r3, [pc, #312]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d1f0      	bne.n	8006dbe <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ddc:	4b4b      	ldr	r3, [pc, #300]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006dde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006de0:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <HAL_RCC_OscConfig+0x78c>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dec:	0112      	lsls	r2, r2, #4
 8006dee:	430a      	orrs	r2, r1
 8006df0:	4946      	ldr	r1, [pc, #280]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	628b      	str	r3, [r1, #40]	; 0x28
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e04:	3b01      	subs	r3, #1
 8006e06:	025b      	lsls	r3, r3, #9
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	3b01      	subs	r3, #1
 8006e12:	041b      	lsls	r3, r3, #16
 8006e14:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1e:	3b01      	subs	r3, #1
 8006e20:	061b      	lsls	r3, r3, #24
 8006e22:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e26:	4939      	ldr	r1, [pc, #228]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e2c:	4b37      	ldr	r3, [pc, #220]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e30:	4a36      	ldr	r2, [pc, #216]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e38:	4b34      	ldr	r3, [pc, #208]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3c:	4b35      	ldr	r3, [pc, #212]	; (8006f14 <HAL_RCC_OscConfig+0x790>)
 8006e3e:	4013      	ands	r3, r2
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e44:	00d2      	lsls	r2, r2, #3
 8006e46:	4931      	ldr	r1, [pc, #196]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	f023 020c 	bic.w	r2, r3, #12
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e58:	492c      	ldr	r1, [pc, #176]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e5e:	4b2b      	ldr	r3, [pc, #172]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e62:	f023 0202 	bic.w	r2, r3, #2
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	4928      	ldr	r1, [pc, #160]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e70:	4b26      	ldr	r3, [pc, #152]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e74:	4a25      	ldr	r2, [pc, #148]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e7c:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e80:	4a22      	ldr	r2, [pc, #136]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e88:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006e94:	4b1d      	ldr	r3, [pc, #116]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006e9a:	f043 0301 	orr.w	r3, r3, #1
 8006e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea0:	4b1a      	ldr	r3, [pc, #104]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a19      	ldr	r2, [pc, #100]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fa ffba 	bl	8001e24 <HAL_GetTick>
 8006eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eb4:	f7fa ffb6 	bl	8001e24 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e067      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ec6:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x730>
 8006ed2:	e05f      	b.n	8006f94 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed4:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fa ffa0 	bl	8001e24 <HAL_GetTick>
 8006ee4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee8:	f7fa ff9c 	bl	8001e24 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e04d      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006efa:	4b04      	ldr	r3, [pc, #16]	; (8006f0c <HAL_RCC_OscConfig+0x788>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x764>
 8006f06:	e045      	b.n	8006f94 <HAL_RCC_OscConfig+0x810>
 8006f08:	58024800 	.word	0x58024800
 8006f0c:	58024400 	.word	0x58024400
 8006f10:	fffffc0c 	.word	0xfffffc0c
 8006f14:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f18:	4b21      	ldr	r3, [pc, #132]	; (8006fa0 <HAL_RCC_OscConfig+0x81c>)
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f1e:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <HAL_RCC_OscConfig+0x81c>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d031      	beq.n	8006f90 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	f003 0203 	and.w	r2, r3, #3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d12a      	bne.n	8006f90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	091b      	lsrs	r3, r3, #4
 8006f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d122      	bne.n	8006f90 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d11a      	bne.n	8006f90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	0a5b      	lsrs	r3, r3, #9
 8006f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d111      	bne.n	8006f90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	0c1b      	lsrs	r3, r3, #16
 8006f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	d108      	bne.n	8006f90 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	0e1b      	lsrs	r3, r3, #24
 8006f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e000      	b.n	8006f96 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3730      	adds	r7, #48	; 0x30
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	58024400 	.word	0x58024400

08006fa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e19c      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb8:	4b8a      	ldr	r3, [pc, #552]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 030f 	and.w	r3, r3, #15
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d910      	bls.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fc6:	4b87      	ldr	r3, [pc, #540]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f023 020f 	bic.w	r2, r3, #15
 8006fce:	4985      	ldr	r1, [pc, #532]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fd6:	4b83      	ldr	r3, [pc, #524]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e184      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691a      	ldr	r2, [r3, #16]
 8006ff8:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007000:	429a      	cmp	r2, r3
 8007002:	d908      	bls.n	8007016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007004:	4b78      	ldr	r3, [pc, #480]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	4975      	ldr	r1, [pc, #468]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007012:	4313      	orrs	r3, r2
 8007014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0308 	and.w	r3, r3, #8
 800701e:	2b00      	cmp	r3, #0
 8007020:	d010      	beq.n	8007044 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	695a      	ldr	r2, [r3, #20]
 8007026:	4b70      	ldr	r3, [pc, #448]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800702e:	429a      	cmp	r2, r3
 8007030:	d908      	bls.n	8007044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007032:	4b6d      	ldr	r3, [pc, #436]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	496a      	ldr	r1, [pc, #424]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007040:	4313      	orrs	r3, r2
 8007042:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b00      	cmp	r3, #0
 800704e:	d010      	beq.n	8007072 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	699a      	ldr	r2, [r3, #24]
 8007054:	4b64      	ldr	r3, [pc, #400]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800705c:	429a      	cmp	r2, r3
 800705e:	d908      	bls.n	8007072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007060:	4b61      	ldr	r3, [pc, #388]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007062:	69db      	ldr	r3, [r3, #28]
 8007064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	495e      	ldr	r1, [pc, #376]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 800706e:	4313      	orrs	r3, r2
 8007070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d010      	beq.n	80070a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	4b59      	ldr	r3, [pc, #356]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800708a:	429a      	cmp	r2, r3
 800708c:	d908      	bls.n	80070a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800708e:	4b56      	ldr	r3, [pc, #344]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	4953      	ldr	r1, [pc, #332]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 800709c:	4313      	orrs	r3, r2
 800709e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d010      	beq.n	80070ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	4b4d      	ldr	r3, [pc, #308]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	f003 030f 	and.w	r3, r3, #15
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d908      	bls.n	80070ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070bc:	4b4a      	ldr	r3, [pc, #296]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	f023 020f 	bic.w	r2, r3, #15
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	4947      	ldr	r1, [pc, #284]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d055      	beq.n	8007186 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80070da:	4b43      	ldr	r3, [pc, #268]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	4940      	ldr	r1, [pc, #256]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d107      	bne.n	8007104 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80070f4:	4b3c      	ldr	r3, [pc, #240]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d121      	bne.n	8007144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e0f6      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d107      	bne.n	800711c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800710c:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d115      	bne.n	8007144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0ea      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d107      	bne.n	8007134 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007124:	4b30      	ldr	r3, [pc, #192]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712c:	2b00      	cmp	r3, #0
 800712e:	d109      	bne.n	8007144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	e0de      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007134:	4b2c      	ldr	r3, [pc, #176]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e0d6      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007144:	4b28      	ldr	r3, [pc, #160]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f023 0207 	bic.w	r2, r3, #7
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	4925      	ldr	r1, [pc, #148]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007152:	4313      	orrs	r3, r2
 8007154:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007156:	f7fa fe65 	bl	8001e24 <HAL_GetTick>
 800715a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715c:	e00a      	b.n	8007174 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800715e:	f7fa fe61 	bl	8001e24 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	f241 3288 	movw	r2, #5000	; 0x1388
 800716c:	4293      	cmp	r3, r2
 800716e:	d901      	bls.n	8007174 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e0be      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007174:	4b1c      	ldr	r3, [pc, #112]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	429a      	cmp	r2, r3
 8007184:	d1eb      	bne.n	800715e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d010      	beq.n	80071b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	4b14      	ldr	r3, [pc, #80]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	429a      	cmp	r2, r3
 80071a0:	d208      	bcs.n	80071b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071a2:	4b11      	ldr	r3, [pc, #68]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	f023 020f 	bic.w	r2, r3, #15
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	490e      	ldr	r1, [pc, #56]	; (80071e8 <HAL_RCC_ClockConfig+0x244>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d214      	bcs.n	80071ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b08      	ldr	r3, [pc, #32]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f023 020f 	bic.w	r2, r3, #15
 80071ca:	4906      	ldr	r1, [pc, #24]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <HAL_RCC_ClockConfig+0x240>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d005      	beq.n	80071ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e086      	b.n	80072f2 <HAL_RCC_ClockConfig+0x34e>
 80071e4:	52002000 	.word	0x52002000
 80071e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0304 	and.w	r3, r3, #4
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d010      	beq.n	800721a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	4b3f      	ldr	r3, [pc, #252]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007204:	429a      	cmp	r2, r3
 8007206:	d208      	bcs.n	800721a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007208:	4b3c      	ldr	r3, [pc, #240]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	4939      	ldr	r1, [pc, #228]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007216:	4313      	orrs	r3, r2
 8007218:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d010      	beq.n	8007248 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	695a      	ldr	r2, [r3, #20]
 800722a:	4b34      	ldr	r3, [pc, #208]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 800722c:	69db      	ldr	r3, [r3, #28]
 800722e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007232:	429a      	cmp	r2, r3
 8007234:	d208      	bcs.n	8007248 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007236:	4b31      	ldr	r3, [pc, #196]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	492e      	ldr	r1, [pc, #184]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007244:	4313      	orrs	r3, r2
 8007246:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d010      	beq.n	8007276 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	4b28      	ldr	r3, [pc, #160]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007260:	429a      	cmp	r2, r3
 8007262:	d208      	bcs.n	8007276 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007264:	4b25      	ldr	r3, [pc, #148]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	4922      	ldr	r1, [pc, #136]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007272:	4313      	orrs	r3, r2
 8007274:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d010      	beq.n	80072a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69da      	ldr	r2, [r3, #28]
 8007286:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007288:	6a1b      	ldr	r3, [r3, #32]
 800728a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800728e:	429a      	cmp	r2, r3
 8007290:	d208      	bcs.n	80072a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007292:	4b1a      	ldr	r3, [pc, #104]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	4917      	ldr	r1, [pc, #92]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072a4:	f000 f89e 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 80072a8:	4601      	mov	r1, r0
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	4a12      	ldr	r2, [pc, #72]	; (8007300 <HAL_RCC_ClockConfig+0x35c>)
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	fa21 f303 	lsr.w	r3, r1, r3
 80072c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <HAL_RCC_ClockConfig+0x358>)
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f003 030f 	and.w	r3, r3, #15
 80072ca:	4a0d      	ldr	r2, [pc, #52]	; (8007300 <HAL_RCC_ClockConfig+0x35c>)
 80072cc:	5cd3      	ldrb	r3, [r2, r3]
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
 80072d8:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <HAL_RCC_ClockConfig+0x360>)
 80072da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072dc:	4a0a      	ldr	r2, [pc, #40]	; (8007308 <HAL_RCC_ClockConfig+0x364>)
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80072e2:	4b0a      	ldr	r3, [pc, #40]	; (800730c <HAL_RCC_ClockConfig+0x368>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fa fbca 	bl	8001a80 <HAL_InitTick>
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	58024400 	.word	0x58024400
 8007300:	080166e0 	.word	0x080166e0
 8007304:	24000098 	.word	0x24000098
 8007308:	24000094 	.word	0x24000094
 800730c:	2400009c 	.word	0x2400009c

08007310 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d12a      	bne.n	8007378 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007322:	4b2d      	ldr	r3, [pc, #180]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 8007324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007328:	4a2b      	ldr	r2, [pc, #172]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 800732a:	f043 0301 	orr.w	r3, r3, #1
 800732e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007332:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 8007334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007346:	2302      	movs	r3, #2
 8007348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800734a:	2303      	movs	r3, #3
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007352:	2300      	movs	r3, #0
 8007354:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007356:	f107 031c 	add.w	r3, r7, #28
 800735a:	4619      	mov	r1, r3
 800735c:	481f      	ldr	r0, [pc, #124]	; (80073dc <HAL_RCC_MCOConfig+0xcc>)
 800735e:	f7fd fa4d 	bl	80047fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007362:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800736a:	68b9      	ldr	r1, [r7, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	430b      	orrs	r3, r1
 8007370:	4919      	ldr	r1, [pc, #100]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 8007372:	4313      	orrs	r3, r2
 8007374:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8007376:	e02a      	b.n	80073ce <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8007378:	4b17      	ldr	r3, [pc, #92]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 800737a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800737e:	4a16      	ldr	r2, [pc, #88]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007388:	4b13      	ldr	r3, [pc, #76]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 800738a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800738e:	f003 0304 	and.w	r3, r3, #4
 8007392:	617b      	str	r3, [r7, #20]
 8007394:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800739a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073a0:	2303      	movs	r3, #3
 80073a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a4:	2300      	movs	r3, #0
 80073a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80073a8:	2300      	movs	r3, #0
 80073aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80073ac:	f107 031c 	add.w	r3, r7, #28
 80073b0:	4619      	mov	r1, r3
 80073b2:	480b      	ldr	r0, [pc, #44]	; (80073e0 <HAL_RCC_MCOConfig+0xd0>)
 80073b4:	f7fd fa22 	bl	80047fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	01d9      	lsls	r1, r3, #7
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	430b      	orrs	r3, r1
 80073c8:	4903      	ldr	r1, [pc, #12]	; (80073d8 <HAL_RCC_MCOConfig+0xc8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	610b      	str	r3, [r1, #16]
}
 80073ce:	bf00      	nop
 80073d0:	3730      	adds	r7, #48	; 0x30
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	58024400 	.word	0x58024400
 80073dc:	58020000 	.word	0x58020000
 80073e0:	58020800 	.word	0x58020800

080073e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80073ea:	4baf      	ldr	r3, [pc, #700]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073f2:	2b18      	cmp	r3, #24
 80073f4:	f200 814e 	bhi.w	8007694 <HAL_RCC_GetSysClockFreq+0x2b0>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <HAL_RCC_GetSysClockFreq+0x1c>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007465 	.word	0x08007465
 8007404:	08007695 	.word	0x08007695
 8007408:	08007695 	.word	0x08007695
 800740c:	08007695 	.word	0x08007695
 8007410:	08007695 	.word	0x08007695
 8007414:	08007695 	.word	0x08007695
 8007418:	08007695 	.word	0x08007695
 800741c:	08007695 	.word	0x08007695
 8007420:	0800748b 	.word	0x0800748b
 8007424:	08007695 	.word	0x08007695
 8007428:	08007695 	.word	0x08007695
 800742c:	08007695 	.word	0x08007695
 8007430:	08007695 	.word	0x08007695
 8007434:	08007695 	.word	0x08007695
 8007438:	08007695 	.word	0x08007695
 800743c:	08007695 	.word	0x08007695
 8007440:	08007491 	.word	0x08007491
 8007444:	08007695 	.word	0x08007695
 8007448:	08007695 	.word	0x08007695
 800744c:	08007695 	.word	0x08007695
 8007450:	08007695 	.word	0x08007695
 8007454:	08007695 	.word	0x08007695
 8007458:	08007695 	.word	0x08007695
 800745c:	08007695 	.word	0x08007695
 8007460:	08007497 	.word	0x08007497
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007464:	4b90      	ldr	r3, [pc, #576]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0320 	and.w	r3, r3, #32
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007470:	4b8d      	ldr	r3, [pc, #564]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	08db      	lsrs	r3, r3, #3
 8007476:	f003 0303 	and.w	r3, r3, #3
 800747a:	4a8c      	ldr	r2, [pc, #560]	; (80076ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 800747c:	fa22 f303 	lsr.w	r3, r2, r3
 8007480:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007482:	e10a      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007484:	4b89      	ldr	r3, [pc, #548]	; (80076ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007486:	61bb      	str	r3, [r7, #24]
    break;
 8007488:	e107      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800748a:	4b89      	ldr	r3, [pc, #548]	; (80076b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800748c:	61bb      	str	r3, [r7, #24]
    break;
 800748e:	e104      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007490:	4b88      	ldr	r3, [pc, #544]	; (80076b4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8007492:	61bb      	str	r3, [r7, #24]
    break;
 8007494:	e101      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007496:	4b84      	ldr	r3, [pc, #528]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	f003 0303 	and.w	r3, r3, #3
 800749e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80074a0:	4b81      	ldr	r3, [pc, #516]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a4:	091b      	lsrs	r3, r3, #4
 80074a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074aa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80074ac:	4b7e      	ldr	r3, [pc, #504]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074b6:	4b7c      	ldr	r3, [pc, #496]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ba:	08db      	lsrs	r3, r3, #3
 80074bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	fb02 f303 	mul.w	r3, r2, r3
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 80da 	beq.w	800768e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d05a      	beq.n	8007596 <HAL_RCC_GetSysClockFreq+0x1b2>
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d302      	bcc.n	80074ea <HAL_RCC_GetSysClockFreq+0x106>
 80074e4:	2b02      	cmp	r3, #2
 80074e6:	d078      	beq.n	80075da <HAL_RCC_GetSysClockFreq+0x1f6>
 80074e8:	e099      	b.n	800761e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ea:	4b6f      	ldr	r3, [pc, #444]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d02d      	beq.n	8007552 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074f6:	4b6c      	ldr	r3, [pc, #432]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a6a      	ldr	r2, [pc, #424]	; (80076ac <HAL_RCC_GetSysClockFreq+0x2c8>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007520:	4b61      	ldr	r3, [pc, #388]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007530:	ed97 6a02 	vldr	s12, [r7, #8]
 8007534:	eddf 5a60 	vldr	s11, [pc, #384]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007550:	e087      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80076bc <HAL_RCC_GetSysClockFreq+0x2d8>
 8007560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007564:	4b50      	ldr	r3, [pc, #320]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007574:	ed97 6a02 	vldr	s12, [r7, #8]
 8007578:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 800757c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007590:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007594:	e065      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a0:	eddf 6a47 	vldr	s13, [pc, #284]	; 80076c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 80075a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a8:	4b3f      	ldr	r3, [pc, #252]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80075bc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80075c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075d8:	e043      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80076c4 <HAL_RCC_GetSysClockFreq+0x2e0>
 80075e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ec:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8007600:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800761c:	e021      	b.n	8007662 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	eddf 6a25 	vldr	s13, [pc, #148]	; 80076c0 <HAL_RCC_GetSysClockFreq+0x2dc>
 800762c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	ed97 6a02 	vldr	s12, [r7, #8]
 8007644:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80076b8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8007648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007660:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007662:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	0a5b      	lsrs	r3, r3, #9
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	3301      	adds	r3, #1
 800766e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800767a:	edd7 6a07 	vldr	s13, [r7, #28]
 800767e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007686:	ee17 3a90 	vmov	r3, s15
 800768a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800768c:	e005      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
    break;
 8007692:	e002      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8007694:	4b06      	ldr	r3, [pc, #24]	; (80076b0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8007696:	61bb      	str	r3, [r7, #24]
    break;
 8007698:	bf00      	nop
  }

  return sysclockfreq;
 800769a:	69bb      	ldr	r3, [r7, #24]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3724      	adds	r7, #36	; 0x24
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr
 80076a8:	58024400 	.word	0x58024400
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	003d0900 	.word	0x003d0900
 80076b4:	016e3600 	.word	0x016e3600
 80076b8:	46000000 	.word	0x46000000
 80076bc:	4c742400 	.word	0x4c742400
 80076c0:	4a742400 	.word	0x4a742400
 80076c4:	4bb71b00 	.word	0x4bb71b00

080076c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80076ce:	f7ff fe89 	bl	80073e4 <HAL_RCC_GetSysClockFreq>
 80076d2:	4601      	mov	r1, r0
 80076d4:	4b10      	ldr	r3, [pc, #64]	; (8007718 <HAL_RCC_GetHCLKFreq+0x50>)
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	0a1b      	lsrs	r3, r3, #8
 80076da:	f003 030f 	and.w	r3, r3, #15
 80076de:	4a0f      	ldr	r2, [pc, #60]	; (800771c <HAL_RCC_GetHCLKFreq+0x54>)
 80076e0:	5cd3      	ldrb	r3, [r2, r3]
 80076e2:	f003 031f 	and.w	r3, r3, #31
 80076e6:	fa21 f303 	lsr.w	r3, r1, r3
 80076ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076ec:	4b0a      	ldr	r3, [pc, #40]	; (8007718 <HAL_RCC_GetHCLKFreq+0x50>)
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f003 030f 	and.w	r3, r3, #15
 80076f4:	4a09      	ldr	r2, [pc, #36]	; (800771c <HAL_RCC_GetHCLKFreq+0x54>)
 80076f6:	5cd3      	ldrb	r3, [r2, r3]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007702:	4a07      	ldr	r2, [pc, #28]	; (8007720 <HAL_RCC_GetHCLKFreq+0x58>)
 8007704:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007706:	4a07      	ldr	r2, [pc, #28]	; (8007724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800770c:	4b04      	ldr	r3, [pc, #16]	; (8007720 <HAL_RCC_GetHCLKFreq+0x58>)
 800770e:	681b      	ldr	r3, [r3, #0]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	58024400 	.word	0x58024400
 800771c:	080166e0 	.word	0x080166e0
 8007720:	24000098 	.word	0x24000098
 8007724:	24000094 	.word	0x24000094

08007728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800772c:	f7ff ffcc 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 8007730:	4601      	mov	r1, r0
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	091b      	lsrs	r3, r3, #4
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	4a04      	ldr	r2, [pc, #16]	; (8007750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800773e:	5cd3      	ldrb	r3, [r2, r3]
 8007740:	f003 031f 	and.w	r3, r3, #31
 8007744:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007748:	4618      	mov	r0, r3
 800774a:	bd80      	pop	{r7, pc}
 800774c:	58024400 	.word	0x58024400
 8007750:	080166e0 	.word	0x080166e0

08007754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007758:	f7ff ffb6 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 800775c:	4601      	mov	r1, r0
 800775e:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	4a04      	ldr	r2, [pc, #16]	; (800777c <HAL_RCC_GetPCLK2Freq+0x28>)
 800776a:	5cd3      	ldrb	r3, [r2, r3]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007774:	4618      	mov	r0, r3
 8007776:	bd80      	pop	{r7, pc}
 8007778:	58024400 	.word	0x58024400
 800777c:	080166e0 	.word	0x080166e0

08007780 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	223f      	movs	r2, #63	; 0x3f
 800778e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007790:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	f003 0207 	and.w	r2, r3, #7
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800779c:	4b17      	ldr	r3, [pc, #92]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80077a8:	4b14      	ldr	r3, [pc, #80]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f003 020f 	and.w	r2, r3, #15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80077b4:	4b11      	ldr	r3, [pc, #68]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80077c0:	4b0e      	ldr	r3, [pc, #56]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80077cc:	4b0b      	ldr	r3, [pc, #44]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80077d8:	4b08      	ldr	r3, [pc, #32]	; (80077fc <HAL_RCC_GetClockConfig+0x7c>)
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077e4:	4b06      	ldr	r3, [pc, #24]	; (8007800 <HAL_RCC_GetClockConfig+0x80>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 020f 	and.w	r2, r3, #15
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	601a      	str	r2, [r3, #0]
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	58024400 	.word	0x58024400
 8007800:	52002000 	.word	0x52002000

08007804 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800780c:	2300      	movs	r3, #0
 800780e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007810:	2300      	movs	r3, #0
 8007812:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d03d      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007828:	d013      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800782a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800782e:	d802      	bhi.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8007834:	e01f      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8007836:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800783a:	d013      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800783c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007840:	d01c      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8007842:	e018      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007844:	4baf      	ldr	r3, [pc, #700]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007848:	4aae      	ldr	r2, [pc, #696]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800784a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007850:	e015      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3304      	adds	r3, #4
 8007856:	2102      	movs	r1, #2
 8007858:	4618      	mov	r0, r3
 800785a:	f001 fd33 	bl	80092c4 <RCCEx_PLL2_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007862:	e00c      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3324      	adds	r3, #36	; 0x24
 8007868:	2102      	movs	r1, #2
 800786a:	4618      	mov	r0, r3
 800786c:	f001 fddc 	bl	8009428 <RCCEx_PLL3_Config>
 8007870:	4603      	mov	r3, r0
 8007872:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007874:	e003      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	e000      	b.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800787c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d109      	bne.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007884:	4b9f      	ldr	r3, [pc, #636]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007890:	499c      	ldr	r1, [pc, #624]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007892:	4313      	orrs	r3, r2
 8007894:	650b      	str	r3, [r1, #80]	; 0x50
 8007896:	e001      	b.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007898:	7dfb      	ldrb	r3, [r7, #23]
 800789a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d03d      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	2b04      	cmp	r3, #4
 80078ae:	d826      	bhi.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80078b0:	a201      	add	r2, pc, #4	; (adr r2, 80078b8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078cd 	.word	0x080078cd
 80078bc:	080078db 	.word	0x080078db
 80078c0:	080078ed 	.word	0x080078ed
 80078c4:	08007905 	.word	0x08007905
 80078c8:	08007905 	.word	0x08007905
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b8d      	ldr	r3, [pc, #564]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a8c      	ldr	r2, [pc, #560]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078d8:	e015      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2100      	movs	r1, #0
 80078e0:	4618      	mov	r0, r3
 80078e2:	f001 fcef 	bl	80092c4 <RCCEx_PLL2_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078ea:	e00c      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	3324      	adds	r3, #36	; 0x24
 80078f0:	2100      	movs	r1, #0
 80078f2:	4618      	mov	r0, r3
 80078f4:	f001 fd98 	bl	8009428 <RCCEx_PLL3_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078fc:	e003      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	75fb      	strb	r3, [r7, #23]
      break;
 8007902:	e000      	b.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8007904:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007906:	7dfb      	ldrb	r3, [r7, #23]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d109      	bne.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800790c:	4b7d      	ldr	r3, [pc, #500]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800790e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007910:	f023 0207 	bic.w	r2, r3, #7
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	497a      	ldr	r1, [pc, #488]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800791a:	4313      	orrs	r3, r2
 800791c:	650b      	str	r3, [r1, #80]	; 0x50
 800791e:	e001      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007920:	7dfb      	ldrb	r3, [r7, #23]
 8007922:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800792c:	2b00      	cmp	r3, #0
 800792e:	d03e      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d01c      	beq.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8007938:	2b80      	cmp	r3, #128	; 0x80
 800793a:	d804      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800793c:	2b00      	cmp	r3, #0
 800793e:	d008      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007940:	2b40      	cmp	r3, #64	; 0x40
 8007942:	d00d      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007944:	e01e      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007946:	2bc0      	cmp	r3, #192	; 0xc0
 8007948:	d01f      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800794a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800794e:	d01e      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007950:	e018      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007952:	4b6c      	ldr	r3, [pc, #432]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4a6b      	ldr	r2, [pc, #428]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800795c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800795e:	e017      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3304      	adds	r3, #4
 8007964:	2100      	movs	r1, #0
 8007966:	4618      	mov	r0, r3
 8007968:	f001 fcac 	bl	80092c4 <RCCEx_PLL2_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007970:	e00e      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3324      	adds	r3, #36	; 0x24
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f001 fd55 	bl	8009428 <RCCEx_PLL3_Config>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007982:	e005      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	75fb      	strb	r3, [r7, #23]
      break;
 8007988:	e002      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800798a:	bf00      	nop
 800798c:	e000      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800798e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007990:	7dfb      	ldrb	r3, [r7, #23]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d109      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007996:	4b5b      	ldr	r3, [pc, #364]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a2:	4958      	ldr	r1, [pc, #352]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	650b      	str	r3, [r1, #80]	; 0x50
 80079a8:	e001      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d044      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c4:	d01f      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80079c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ca:	d805      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80079d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079d4:	d00e      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80079d6:	e01f      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80079d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079dc:	d01f      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80079de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079e2:	d01e      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80079e4:	e018      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079e6:	4b47      	ldr	r3, [pc, #284]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	4a46      	ldr	r2, [pc, #280]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80079ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079f2:	e017      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fc62 	bl	80092c4 <RCCEx_PLL2_Config>
 8007a00:	4603      	mov	r3, r0
 8007a02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a04:	e00e      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	3324      	adds	r3, #36	; 0x24
 8007a0a:	2100      	movs	r1, #0
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 fd0b 	bl	8009428 <RCCEx_PLL3_Config>
 8007a12:	4603      	mov	r3, r0
 8007a14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a16:	e005      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	e002      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007a1e:	bf00      	nop
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8007a22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a2a:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a38:	4932      	ldr	r1, [pc, #200]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007a3e:	e001      	b.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a40:	7dfb      	ldrb	r3, [r7, #23]
 8007a42:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d044      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a5a:	d01f      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a60:	d805      	bhi.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8007a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a6a:	d00e      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8007a6c:	e01f      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8007a6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a72:	d01f      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007a74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a78:	d01e      	beq.n	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007a7a:	e018      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a7c:	4b21      	ldr	r3, [pc, #132]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	4a20      	ldr	r2, [pc, #128]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a88:	e017      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 fc17 	bl	80092c4 <RCCEx_PLL2_Config>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a9a:	e00e      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3324      	adds	r3, #36	; 0x24
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f001 fcc0 	bl	8009428 <RCCEx_PLL3_Config>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007aac:	e005      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab2:	e002      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007ab4:	bf00      	nop
 8007ab6:	e000      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8007ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ac0:	4b10      	ldr	r3, [pc, #64]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ace:	490d      	ldr	r1, [pc, #52]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	658b      	str	r3, [r1, #88]	; 0x58
 8007ad4:	e001      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d035      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aea:	2b10      	cmp	r3, #16
 8007aec:	d00c      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8007aee:	2b10      	cmp	r3, #16
 8007af0:	d802      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01b      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8007af6:	e017      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	d00c      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8007afc:	2b30      	cmp	r3, #48	; 0x30
 8007afe:	d018      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8007b00:	e012      	b.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8007b02:	bf00      	nop
 8007b04:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b08:	4baf      	ldr	r3, [pc, #700]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	4aae      	ldr	r2, [pc, #696]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b14:	e00e      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f001 fbd1 	bl	80092c4 <RCCEx_PLL2_Config>
 8007b22:	4603      	mov	r3, r0
 8007b24:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b26:	e005      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b2c:	e002      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007b2e:	bf00      	nop
 8007b30:	e000      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8007b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d109      	bne.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b3a:	4ba3      	ldr	r3, [pc, #652]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b46:	49a0      	ldr	r1, [pc, #640]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b4c:	e001      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d042      	beq.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	d01f      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6c:	d805      	bhi.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d00e      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007b78:	e01f      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8007b7a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b7e:	d01f      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b84:	d01e      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8007b86:	e018      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b88:	4b8f      	ldr	r3, [pc, #572]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a8e      	ldr	r2, [pc, #568]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b94:	e017      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	3304      	adds	r3, #4
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f001 fb91 	bl	80092c4 <RCCEx_PLL2_Config>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ba6:	e00e      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	3324      	adds	r3, #36	; 0x24
 8007bac:	2100      	movs	r1, #0
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 fc3a 	bl	8009428 <RCCEx_PLL3_Config>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007bb8:	e005      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007bbe:	e002      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007bc0:	bf00      	nop
 8007bc2:	e000      	b.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8007bc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bc6:	7dfb      	ldrb	r3, [r7, #23]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d109      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bcc:	4b7e      	ldr	r3, [pc, #504]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd8:	497b      	ldr	r1, [pc, #492]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	650b      	str	r3, [r1, #80]	; 0x50
 8007bde:	e001      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be0:	7dfb      	ldrb	r3, [r7, #23]
 8007be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d042      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d01b      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bfe:	d805      	bhi.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d022      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8007c0a:	e01b      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8007c0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c10:	d01d      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8007c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c16:	d01c      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8007c18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c1c:	d01b      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8007c1e:	e011      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	3304      	adds	r3, #4
 8007c24:	2101      	movs	r1, #1
 8007c26:	4618      	mov	r0, r3
 8007c28:	f001 fb4c 	bl	80092c4 <RCCEx_PLL2_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c30:	e012      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	3324      	adds	r3, #36	; 0x24
 8007c36:	2101      	movs	r1, #1
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 fbf5 	bl	8009428 <RCCEx_PLL3_Config>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007c42:	e009      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
      break;
 8007c48:	e006      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8007c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007c5e:	4b5a      	ldr	r3, [pc, #360]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c62:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6a:	4957      	ldr	r1, [pc, #348]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	650b      	str	r3, [r1, #80]	; 0x50
 8007c70:	e001      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d044      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c8c:	d01b      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007c8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c92:	d805      	bhi.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d022      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c9c:	d00a      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8007c9e:	e01b      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8007ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca4:	d01d      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007caa:	d01c      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007cac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cb0:	d01b      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8007cb2:	e011      	b.n	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f001 fb02 	bl	80092c4 <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cc4:	e012      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	3324      	adds	r3, #36	; 0x24
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f001 fbab 	bl	8009428 <RCCEx_PLL3_Config>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007cd6:	e009      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e006      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e004      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007ce2:	bf00      	nop
 8007ce4:	e002      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007ce6:	bf00      	nop
 8007ce8:	e000      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8007cea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007cf2:	4b35      	ldr	r3, [pc, #212]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d00:	4931      	ldr	r1, [pc, #196]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	658b      	str	r3, [r1, #88]	; 0x58
 8007d06:	e001      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d02d      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d20:	d005      	beq.n	8007d2e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007d22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d26:	d009      	beq.n	8007d3c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d013      	beq.n	8007d54 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d2c:	e00f      	b.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d2e:	4b26      	ldr	r3, [pc, #152]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d32:	4a25      	ldr	r2, [pc, #148]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d3a:	e00c      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3304      	adds	r3, #4
 8007d40:	2101      	movs	r1, #1
 8007d42:	4618      	mov	r0, r3
 8007d44:	f001 fabe 	bl	80092c4 <RCCEx_PLL2_Config>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007d4c:	e003      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	75fb      	strb	r3, [r7, #23]
      break;
 8007d52:	e000      	b.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8007d54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d109      	bne.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d68:	4917      	ldr	r1, [pc, #92]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	650b      	str	r3, [r1, #80]	; 0x50
 8007d6e:	e001      	b.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d70:	7dfb      	ldrb	r3, [r7, #23]
 8007d72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d035      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d81b      	bhi.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8007d88:	a201      	add	r2, pc, #4	; (adr r2, 8007d90 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8007d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8e:	bf00      	nop
 8007d90:	08007dcd 	.word	0x08007dcd
 8007d94:	08007da1 	.word	0x08007da1
 8007d98:	08007daf 	.word	0x08007daf
 8007d9c:	08007dcd 	.word	0x08007dcd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da0:	4b09      	ldr	r3, [pc, #36]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da4:	4a08      	ldr	r2, [pc, #32]	; (8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8007da6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007daa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007dac:	e00f      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	3304      	adds	r3, #4
 8007db2:	2102      	movs	r1, #2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fa85 	bl	80092c4 <RCCEx_PLL2_Config>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007dbe:	e006      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007dc6:	bf00      	nop
 8007dc8:	58024400 	.word	0x58024400
      break;
 8007dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dce:	7dfb      	ldrb	r3, [r7, #23]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007dd4:	4bba      	ldr	r3, [pc, #744]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd8:	f023 0203 	bic.w	r2, r3, #3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de0:	49b7      	ldr	r1, [pc, #732]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007de6:	e001      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 8086 	beq.w	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dfa:	4bb2      	ldr	r3, [pc, #712]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4ab1      	ldr	r2, [pc, #708]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e06:	f7fa f80d 	bl	8001e24 <HAL_GetTick>
 8007e0a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e0c:	e009      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e0e:	f7fa f809 	bl	8001e24 <HAL_GetTick>
 8007e12:	4602      	mov	r2, r0
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2b64      	cmp	r3, #100	; 0x64
 8007e1a:	d902      	bls.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	75fb      	strb	r3, [r7, #23]
        break;
 8007e20:	e005      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e22:	4ba8      	ldr	r3, [pc, #672]	; (80080c4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d0ef      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8007e2e:	7dfb      	ldrb	r3, [r7, #23]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d166      	bne.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007e34:	4ba2      	ldr	r3, [pc, #648]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e3e:	4053      	eors	r3, r2
 8007e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d013      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e48:	4b9d      	ldr	r3, [pc, #628]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e50:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e52:	4b9b      	ldr	r3, [pc, #620]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	4a9a      	ldr	r2, [pc, #616]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e5e:	4b98      	ldr	r3, [pc, #608]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	4a97      	ldr	r2, [pc, #604]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007e6a:	4a95      	ldr	r2, [pc, #596]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e7a:	d115      	bne.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7f9 ffd2 	bl	8001e24 <HAL_GetTick>
 8007e80:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e82:	e00b      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e84:	f7f9 ffce 	bl	8001e24 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d902      	bls.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	75fb      	strb	r3, [r7, #23]
            break;
 8007e9a:	e005      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e9c:	4b88      	ldr	r3, [pc, #544]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d0ed      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d126      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ebc:	d10d      	bne.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8007ebe:	4b80      	ldr	r3, [pc, #512]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ecc:	0919      	lsrs	r1, r3, #4
 8007ece:	4b7e      	ldr	r3, [pc, #504]	; (80080c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8007ed0:	400b      	ands	r3, r1
 8007ed2:	497b      	ldr	r1, [pc, #492]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	610b      	str	r3, [r1, #16]
 8007ed8:	e005      	b.n	8007ee6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8007eda:	4b79      	ldr	r3, [pc, #484]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	4a78      	ldr	r2, [pc, #480]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ee0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007ee4:	6113      	str	r3, [r2, #16]
 8007ee6:	4b76      	ldr	r3, [pc, #472]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ef4:	4972      	ldr	r1, [pc, #456]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	670b      	str	r3, [r1, #112]	; 0x70
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	75bb      	strb	r3, [r7, #22]
 8007f00:	e001      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f02:	7dfb      	ldrb	r3, [r7, #23]
 8007f04:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d07d      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f16:	2b28      	cmp	r3, #40	; 0x28
 8007f18:	d866      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007fef 	.word	0x08007fef
 8007f24:	08007fe9 	.word	0x08007fe9
 8007f28:	08007fe9 	.word	0x08007fe9
 8007f2c:	08007fe9 	.word	0x08007fe9
 8007f30:	08007fe9 	.word	0x08007fe9
 8007f34:	08007fe9 	.word	0x08007fe9
 8007f38:	08007fe9 	.word	0x08007fe9
 8007f3c:	08007fe9 	.word	0x08007fe9
 8007f40:	08007fc5 	.word	0x08007fc5
 8007f44:	08007fe9 	.word	0x08007fe9
 8007f48:	08007fe9 	.word	0x08007fe9
 8007f4c:	08007fe9 	.word	0x08007fe9
 8007f50:	08007fe9 	.word	0x08007fe9
 8007f54:	08007fe9 	.word	0x08007fe9
 8007f58:	08007fe9 	.word	0x08007fe9
 8007f5c:	08007fe9 	.word	0x08007fe9
 8007f60:	08007fd7 	.word	0x08007fd7
 8007f64:	08007fe9 	.word	0x08007fe9
 8007f68:	08007fe9 	.word	0x08007fe9
 8007f6c:	08007fe9 	.word	0x08007fe9
 8007f70:	08007fe9 	.word	0x08007fe9
 8007f74:	08007fe9 	.word	0x08007fe9
 8007f78:	08007fe9 	.word	0x08007fe9
 8007f7c:	08007fe9 	.word	0x08007fe9
 8007f80:	08007fef 	.word	0x08007fef
 8007f84:	08007fe9 	.word	0x08007fe9
 8007f88:	08007fe9 	.word	0x08007fe9
 8007f8c:	08007fe9 	.word	0x08007fe9
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007fe9 	.word	0x08007fe9
 8007f98:	08007fe9 	.word	0x08007fe9
 8007f9c:	08007fe9 	.word	0x08007fe9
 8007fa0:	08007fef 	.word	0x08007fef
 8007fa4:	08007fe9 	.word	0x08007fe9
 8007fa8:	08007fe9 	.word	0x08007fe9
 8007fac:	08007fe9 	.word	0x08007fe9
 8007fb0:	08007fe9 	.word	0x08007fe9
 8007fb4:	08007fe9 	.word	0x08007fe9
 8007fb8:	08007fe9 	.word	0x08007fe9
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	08007fef 	.word	0x08007fef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f001 f97a 	bl	80092c4 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fd4:	e00c      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3324      	adds	r3, #36	; 0x24
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 fa23 	bl	8009428 <RCCEx_PLL3_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
      break;
 8007fec:	e000      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8007fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007ff6:	4b32      	ldr	r3, [pc, #200]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008002:	492f      	ldr	r1, [pc, #188]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008004:	4313      	orrs	r3, r2
 8008006:	654b      	str	r3, [r1, #84]	; 0x54
 8008008:	e001      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	2b00      	cmp	r3, #0
 8008018:	d037      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800801e:	2b05      	cmp	r3, #5
 8008020:	d820      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8008022:	a201      	add	r2, pc, #4	; (adr r2, 8008028 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	0800806b 	.word	0x0800806b
 800802c:	08008041 	.word	0x08008041
 8008030:	08008053 	.word	0x08008053
 8008034:	0800806b 	.word	0x0800806b
 8008038:	0800806b 	.word	0x0800806b
 800803c:	0800806b 	.word	0x0800806b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	3304      	adds	r3, #4
 8008044:	2101      	movs	r1, #1
 8008046:	4618      	mov	r0, r3
 8008048:	f001 f93c 	bl	80092c4 <RCCEx_PLL2_Config>
 800804c:	4603      	mov	r3, r0
 800804e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008050:	e00c      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	2101      	movs	r1, #1
 8008058:	4618      	mov	r0, r3
 800805a:	f001 f9e5 	bl	8009428 <RCCEx_PLL3_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008062:	e003      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e000      	b.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800806a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800806c:	7dfb      	ldrb	r3, [r7, #23]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d109      	bne.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008072:	4b13      	ldr	r3, [pc, #76]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008076:	f023 0207 	bic.w	r2, r3, #7
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800807e:	4910      	ldr	r1, [pc, #64]	; (80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8008080:	4313      	orrs	r3, r2
 8008082:	654b      	str	r3, [r1, #84]	; 0x54
 8008084:	e001      	b.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d040      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800809c:	2b05      	cmp	r3, #5
 800809e:	d827      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080f7 	.word	0x080080f7
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	080080df 	.word	0x080080df
 80080b4:	080080f7 	.word	0x080080f7
 80080b8:	080080f7 	.word	0x080080f7
 80080bc:	080080f7 	.word	0x080080f7
 80080c0:	58024400 	.word	0x58024400
 80080c4:	58024800 	.word	0x58024800
 80080c8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	2101      	movs	r1, #1
 80080d2:	4618      	mov	r0, r3
 80080d4:	f001 f8f6 	bl	80092c4 <RCCEx_PLL2_Config>
 80080d8:	4603      	mov	r3, r0
 80080da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080dc:	e00c      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	3324      	adds	r3, #36	; 0x24
 80080e2:	2101      	movs	r1, #1
 80080e4:	4618      	mov	r0, r3
 80080e6:	f001 f99f 	bl	8009428 <RCCEx_PLL3_Config>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80080ee:	e003      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	75fb      	strb	r3, [r7, #23]
      break;
 80080f4:	e000      	b.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80080f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10a      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80080fe:	4bb2      	ldr	r3, [pc, #712]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008102:	f023 0207 	bic.w	r2, r3, #7
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810c:	49ae      	ldr	r1, [pc, #696]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800810e:	4313      	orrs	r3, r2
 8008110:	658b      	str	r3, [r1, #88]	; 0x58
 8008112:	e001      	b.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0320 	and.w	r3, r3, #32
 8008120:	2b00      	cmp	r3, #0
 8008122:	d044      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800812e:	d01b      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8008130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008134:	d805      	bhi.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d022      	beq.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800813a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800813e:	d00a      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8008140:	e01b      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8008142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008146:	d01d      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8008148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800814c:	d01c      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800814e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008152:	d01b      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008154:	e011      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	3304      	adds	r3, #4
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f001 f8b1 	bl	80092c4 <RCCEx_PLL2_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008166:	e012      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3324      	adds	r3, #36	; 0x24
 800816c:	2102      	movs	r1, #2
 800816e:	4618      	mov	r0, r3
 8008170:	f001 f95a 	bl	8009428 <RCCEx_PLL3_Config>
 8008174:	4603      	mov	r3, r0
 8008176:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008178:	e009      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	75fb      	strb	r3, [r7, #23]
      break;
 800817e:	e006      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008180:	bf00      	nop
 8008182:	e004      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008184:	bf00      	nop
 8008186:	e002      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8008188:	bf00      	nop
 800818a:	e000      	b.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800818c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008194:	4b8c      	ldr	r3, [pc, #560]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008198:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a2:	4989      	ldr	r1, [pc, #548]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	654b      	str	r3, [r1, #84]	; 0x54
 80081a8:	e001      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d044      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c4:	d01b      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80081c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ca:	d805      	bhi.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d022      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80081d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d4:	d00a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80081d6:	e01b      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80081d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081dc:	d01d      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80081de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80081e2:	d01c      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80081e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e8:	d01b      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80081ea:	e011      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3304      	adds	r3, #4
 80081f0:	2100      	movs	r1, #0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f001 f866 	bl	80092c4 <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081fc:	e012      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f001 f90f 	bl	8009428 <RCCEx_PLL3_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800820e:	e009      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      break;
 8008214:	e006      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008216:	bf00      	nop
 8008218:	e004      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800821a:	bf00      	nop
 800821c:	e002      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800821e:	bf00      	nop
 8008220:	e000      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8008222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800822a:	4b67      	ldr	r3, [pc, #412]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008238:	4963      	ldr	r1, [pc, #396]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800823a:	4313      	orrs	r3, r2
 800823c:	658b      	str	r3, [r1, #88]	; 0x58
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824c:	2b00      	cmp	r3, #0
 800824e:	d044      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008256:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800825a:	d01b      	beq.n	8008294 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800825c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008260:	d805      	bhi.n	800826e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d022      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800826a:	d00a      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800826c:	e01b      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800826e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008272:	d01d      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8008274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008278:	d01c      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800827a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800827e:	d01b      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8008280:	e011      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3304      	adds	r3, #4
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f001 f81b 	bl	80092c4 <RCCEx_PLL2_Config>
 800828e:	4603      	mov	r3, r0
 8008290:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008292:	e012      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3324      	adds	r3, #36	; 0x24
 8008298:	2102      	movs	r1, #2
 800829a:	4618      	mov	r0, r3
 800829c:	f001 f8c4 	bl	8009428 <RCCEx_PLL3_Config>
 80082a0:	4603      	mov	r3, r0
 80082a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80082a4:	e009      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
      break;
 80082aa:	e006      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80082ac:	bf00      	nop
 80082ae:	e004      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80082b0:	bf00      	nop
 80082b2:	e002      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80082b4:	bf00      	nop
 80082b6:	e000      	b.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80082b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80082c0:	4b41      	ldr	r3, [pc, #260]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082ce:	493e      	ldr	r1, [pc, #248]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	658b      	str	r3, [r1, #88]	; 0x58
 80082d4:	e001      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0308 	and.w	r3, r3, #8
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d01a      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f0:	d10a      	bne.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3324      	adds	r3, #36	; 0x24
 80082f6:	2102      	movs	r1, #2
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 f895 	bl	8009428 <RCCEx_PLL3_Config>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008308:	4b2f      	ldr	r3, [pc, #188]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800830a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800830c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	492c      	ldr	r1, [pc, #176]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8008318:	4313      	orrs	r3, r2
 800831a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0310 	and.w	r3, r3, #16
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01a      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800832e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008332:	d10a      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	3324      	adds	r3, #36	; 0x24
 8008338:	2102      	movs	r1, #2
 800833a:	4618      	mov	r0, r3
 800833c:	f001 f874 	bl	8009428 <RCCEx_PLL3_Config>
 8008340:	4603      	mov	r3, r0
 8008342:	2b00      	cmp	r3, #0
 8008344:	d001      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800834a:	4b1f      	ldr	r3, [pc, #124]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800834c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008358:	491b      	ldr	r1, [pc, #108]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800835a:	4313      	orrs	r3, r2
 800835c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d032      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008374:	d00d      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8008376:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800837a:	d016      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d111      	bne.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f000 ff9c 	bl	80092c4 <RCCEx_PLL2_Config>
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008390:	e00c      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3324      	adds	r3, #36	; 0x24
 8008396:	2102      	movs	r1, #2
 8008398:	4618      	mov	r0, r3
 800839a:	f001 f845 	bl	8009428 <RCCEx_PLL3_Config>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80083a2:	e003      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	75fb      	strb	r3, [r7, #23]
      break;
 80083a8:	e000      	b.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80083aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10c      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80083b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80083c0:	4901      	ldr	r1, [pc, #4]	; (80083c8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	658b      	str	r3, [r1, #88]	; 0x58
 80083c6:	e003      	b.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80083c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083cc:	7dfb      	ldrb	r3, [r7, #23]
 80083ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d02f      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083e6:	d00c      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80083e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083ec:	d015      	beq.n	800841a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80083ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f2:	d10f      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083f4:	4b79      	ldr	r3, [pc, #484]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80083f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f8:	4a78      	ldr	r2, [pc, #480]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80083fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008400:	e00c      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3324      	adds	r3, #36	; 0x24
 8008406:	2101      	movs	r1, #1
 8008408:	4618      	mov	r0, r3
 800840a:	f001 f80d 	bl	8009428 <RCCEx_PLL3_Config>
 800840e:	4603      	mov	r3, r0
 8008410:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	75fb      	strb	r3, [r7, #23]
      break;
 8008418:	e000      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800841a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800841c:	7dfb      	ldrb	r3, [r7, #23]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10a      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008422:	4b6e      	ldr	r3, [pc, #440]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008426:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008430:	496a      	ldr	r1, [pc, #424]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008432:	4313      	orrs	r3, r2
 8008434:	654b      	str	r3, [r1, #84]	; 0x54
 8008436:	e001      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d029      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008454:	d007      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008456:	e00f      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008458:	4b60      	ldr	r3, [pc, #384]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800845a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845c:	4a5f      	ldr	r2, [pc, #380]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800845e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008462:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008464:	e00b      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	2102      	movs	r1, #2
 800846c:	4618      	mov	r0, r3
 800846e:	f000 ff29 	bl	80092c4 <RCCEx_PLL2_Config>
 8008472:	4603      	mov	r3, r0
 8008474:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008476:	e002      	b.n	800847e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	75fb      	strb	r3, [r7, #23]
      break;
 800847c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008484:	4b55      	ldr	r3, [pc, #340]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008490:	4952      	ldr	r1, [pc, #328]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008492:	4313      	orrs	r3, r2
 8008494:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008496:	e001      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3324      	adds	r3, #36	; 0x24
 80084ac:	2102      	movs	r1, #2
 80084ae:	4618      	mov	r0, r3
 80084b0:	f000 ffba 	bl	8009428 <RCCEx_PLL3_Config>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d02f      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d2:	d00c      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80084d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d8:	d802      	bhi.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d011      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80084de:	e00d      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80084e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084e4:	d00f      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80084e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084ea:	d00e      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80084ec:	e006      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084ee:	4b3b      	ldr	r3, [pc, #236]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	4a3a      	ldr	r2, [pc, #232]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80084f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084fa:	e007      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008500:	e004      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008502:	bf00      	nop
 8008504:	e002      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8008506:	bf00      	nop
 8008508:	e000      	b.n	800850c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800850a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800850c:	7dfb      	ldrb	r3, [r7, #23]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d109      	bne.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008512:	4b32      	ldr	r3, [pc, #200]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008516:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851e:	492f      	ldr	r1, [pc, #188]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008520:	4313      	orrs	r3, r2
 8008522:	654b      	str	r3, [r1, #84]	; 0x54
 8008524:	e001      	b.n	800852a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008526:	7dfb      	ldrb	r3, [r7, #23]
 8008528:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d008      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008536:	4b29      	ldr	r3, [pc, #164]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800853a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	4926      	ldr	r1, [pc, #152]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008544:	4313      	orrs	r3, r2
 8008546:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008554:	4b21      	ldr	r3, [pc, #132]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008562:	491e      	ldr	r1, [pc, #120]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008564:	4313      	orrs	r3, r2
 8008566:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008574:	4b19      	ldr	r3, [pc, #100]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008578:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008580:	4916      	ldr	r1, [pc, #88]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008582:	4313      	orrs	r3, r2
 8008584:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800858e:	2b00      	cmp	r3, #0
 8008590:	d00d      	beq.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008592:	4b12      	ldr	r3, [pc, #72]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	4a11      	ldr	r2, [pc, #68]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8008598:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800859c:	6113      	str	r3, [r2, #16]
 800859e:	4b0f      	ldr	r3, [pc, #60]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80085a0:	691a      	ldr	r2, [r3, #16]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80085a8:	490c      	ldr	r1, [pc, #48]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da08      	bge.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80085b6:	4b09      	ldr	r3, [pc, #36]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80085b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085c2:	4906      	ldr	r1, [pc, #24]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80085c8:	7dbb      	ldrb	r3, [r7, #22]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e000      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3718      	adds	r7, #24
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	58024400 	.word	0x58024400

080085e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b090      	sub	sp, #64	; 0x40
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ee:	d150      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80085f0:	4ba1      	ldr	r3, [pc, #644]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80085f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085f4:	f003 0307 	and.w	r3, r3, #7
 80085f8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	2b04      	cmp	r3, #4
 80085fe:	d844      	bhi.n	800868a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8008600:	a201      	add	r2, pc, #4	; (adr r2, 8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008606:	bf00      	nop
 8008608:	0800861d 	.word	0x0800861d
 800860c:	0800862d 	.word	0x0800862d
 8008610:	0800863d 	.word	0x0800863d
 8008614:	08008685 	.word	0x08008685
 8008618:	0800864d 	.word	0x0800864d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800861c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008620:	4618      	mov	r0, r3
 8008622:	f000 fd03 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800862a:	e241      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800862c:	f107 0318 	add.w	r3, r7, #24
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fa63 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800863a:	e239      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800863c:	f107 030c 	add.w	r3, r7, #12
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fba7 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800864a:	e231      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800864c:	4b8a      	ldr	r3, [pc, #552]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800864e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008650:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008654:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d102      	bne.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800865c:	4b87      	ldr	r3, [pc, #540]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008660:	e226      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8008662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008664:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008668:	d102      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800866a:	4b85      	ldr	r3, [pc, #532]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800866e:	e21f      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008676:	d102      	bne.n	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8008678:	4b82      	ldr	r3, [pc, #520]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800867c:	e218      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008682:	e215      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008684:	4b80      	ldr	r3, [pc, #512]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8008686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008688:	e212      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800868a:	2300      	movs	r3, #0
 800868c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800868e:	bf00      	nop
 8008690:	e20e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008698:	d14f      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800869a:	4b77      	ldr	r3, [pc, #476]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800869c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800869e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80086a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	d01c      	beq.n	80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d804      	bhi.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d008      	beq.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 80086b2:	2b40      	cmp	r3, #64	; 0x40
 80086b4:	d00e      	beq.n	80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80086b6:	e03c      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 80086b8:	2bc0      	cmp	r3, #192	; 0xc0
 80086ba:	d037      	beq.n	800872c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 80086bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086c0:	d018      	beq.n	80086f4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80086c2:	e036      	b.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80086c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 fcaf 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80086ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086d2:	e1ed      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086d4:	f107 0318 	add.w	r3, r7, #24
 80086d8:	4618      	mov	r0, r3
 80086da:	f000 fa0f 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086e2:	e1e5      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fb53 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80086f2:	e1dd      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80086f4:	4b60      	ldr	r3, [pc, #384]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80086f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80086fc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	2b00      	cmp	r3, #0
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008704:	4b5d      	ldr	r3, [pc, #372]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008706:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008708:	e1d2      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008710:	d102      	bne.n	8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8008712:	4b5b      	ldr	r3, [pc, #364]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008714:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008716:	e1cb      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800871e:	d102      	bne.n	8008726 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8008720:	4b58      	ldr	r3, [pc, #352]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008724:	e1c4      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800872a:	e1c1      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800872c:	4b56      	ldr	r3, [pc, #344]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008730:	e1be      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008732:	2300      	movs	r3, #0
 8008734:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008736:	bf00      	nop
 8008738:	e1ba      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008740:	d153      	bne.n	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008742:	4b4d      	ldr	r3, [pc, #308]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008746:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800874a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800874c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008752:	d01f      	beq.n	8008794 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8008754:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008758:	d805      	bhi.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800875e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008762:	d00f      	beq.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8008764:	e03d      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8008766:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800876a:	d037      	beq.n	80087dc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800876c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008770:	d018      	beq.n	80087a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8008772:	e036      	b.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fc57 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800877e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008780:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008782:	e195      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008784:	f107 0318 	add.w	r3, r7, #24
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f9b7 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008792:	e18d      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	4618      	mov	r0, r3
 800879a:	f000 fafb 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087a2:	e185      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80087a4:	4b34      	ldr	r3, [pc, #208]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087ac:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80087ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d102      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80087b4:	4b31      	ldr	r3, [pc, #196]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80087b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80087b8:	e17a      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087c0:	d102      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80087c2:	4b2f      	ldr	r3, [pc, #188]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80087c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087c6:	e173      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80087d0:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087d4:	e16c      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087da:	e169      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80087dc:	4b2a      	ldr	r3, [pc, #168]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80087de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087e0:	e166      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80087e6:	bf00      	nop
 80087e8:	e162      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f0:	d15d      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80087f2:	4b21      	ldr	r3, [pc, #132]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80087f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80087fa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008802:	d01f      	beq.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008808:	d805      	bhi.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800880e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008812:	d00f      	beq.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008814:	e047      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8008816:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800881a:	d041      	beq.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800881c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008820:	d018      	beq.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8008822:	e040      	b.n	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008828:	4618      	mov	r0, r3
 800882a:	f000 fbff 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008832:	e13d      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008834:	f107 0318 	add.w	r3, r7, #24
 8008838:	4618      	mov	r0, r3
 800883a:	f000 f95f 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008842:	e135      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	4618      	mov	r0, r3
 800884a:	f000 faa3 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008852:	e12d      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008854:	4b08      	ldr	r3, [pc, #32]	; (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008858:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800885c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d102      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008864:	4b05      	ldr	r3, [pc, #20]	; (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8008868:	e122      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800886a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800886c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008870:	d10c      	bne.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8008872:	4b03      	ldr	r3, [pc, #12]	; (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008874:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008876:	e11b      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	003d0900 	.word	0x003d0900
 8008884:	016e3600 	.word	0x016e3600
 8008888:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800888e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008892:	d102      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8008894:	4b89      	ldr	r3, [pc, #548]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008898:	e10a      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800889e:	e107      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80088a0:	4b87      	ldr	r3, [pc, #540]	; (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 80088a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088a4:	e104      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088aa:	bf00      	nop
 80088ac:	e100      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088b4:	d153      	bne.n	800895e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80088b6:	4b83      	ldr	r3, [pc, #524]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80088b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088ba:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80088be:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088c6:	d01f      	beq.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80088c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088cc:	d805      	bhi.n	80088da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80088d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d6:	d00f      	beq.n	80088f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80088d8:	e03d      	b.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80088da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80088de:	d037      	beq.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80088e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088e4:	d018      	beq.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80088e6:	e036      	b.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 fb9d 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80088f6:	e0db      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f8:	f107 0318 	add.w	r3, r7, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 f8fd 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008906:	e0d3      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008908:	f107 030c 	add.w	r3, r7, #12
 800890c:	4618      	mov	r0, r3
 800890e:	f000 fa41 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008916:	e0cb      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008918:	4b6a      	ldr	r3, [pc, #424]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800891a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008920:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8008922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8008928:	4b67      	ldr	r3, [pc, #412]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800892a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800892c:	e0c0      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008934:	d102      	bne.n	800893c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8008936:	4b65      	ldr	r3, [pc, #404]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008938:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800893a:	e0b9      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800893c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800893e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008942:	d102      	bne.n	800894a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8008944:	4b5d      	ldr	r3, [pc, #372]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008948:	e0b2      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800894a:	2300      	movs	r3, #0
 800894c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800894e:	e0af      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008950:	4b5b      	ldr	r3, [pc, #364]	; (8008ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8008952:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008954:	e0ac      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8008956:	2300      	movs	r3, #0
 8008958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800895a:	bf00      	nop
 800895c:	e0a8      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008964:	d13d      	bne.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8008966:	4b57      	ldr	r3, [pc, #348]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800896e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008976:	d00c      	beq.n	8008992 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8008978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800897c:	d011      	beq.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d12b      	bne.n	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008982:	f107 0318 	add.w	r3, r7, #24
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f8b8 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008990:	e08e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008992:	f107 030c 	add.w	r3, r7, #12
 8008996:	4618      	mov	r0, r3
 8008998:	f000 f9fc 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089a0:	e086      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80089a2:	4b48      	ldr	r3, [pc, #288]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80089a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80089aa:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80089ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d102      	bne.n	80089b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80089b2:	4b45      	ldr	r3, [pc, #276]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80089b6:	e07b      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80089b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80089be:	d102      	bne.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80089c0:	4b42      	ldr	r3, [pc, #264]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80089c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089c4:	e074      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80089c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089cc:	d102      	bne.n	80089d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80089ce:	4b3b      	ldr	r3, [pc, #236]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80089d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d2:	e06d      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089d8:	e06a      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80089da:	2300      	movs	r3, #0
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80089de:	bf00      	nop
 80089e0:	e066      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e8:	d11f      	bne.n	8008a2a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80089ea:	4b36      	ldr	r3, [pc, #216]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80089ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80089f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d003      	beq.n	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80089fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089fe:	d008      	beq.n	8008a12 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8008a00:	e00f      	b.n	8008a22 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fb10 	bl	800902c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a10:	e04e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a12:	f107 0318 	add.w	r3, r7, #24
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f870 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a20:	e046      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8008a22:	2300      	movs	r3, #0
 8008a24:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a26:	bf00      	nop
 8008a28:	e042      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a30:	d13c      	bne.n	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8008a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a36:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008a3a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a42:	d01e      	beq.n	8008a82 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8008a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a48:	d805      	bhi.n	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00d      	beq.n	8008a6a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8008a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a52:	d00e      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8008a54:	e026      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8008a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5a:	d01d      	beq.n	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008a60:	d01d      	beq.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8008a62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008a66:	d014      	beq.n	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008a68:	e01c      	b.n	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008a6a:	f000 f831 	bl	8008ad0 <HAL_RCCEx_GetD3PCLK1Freq>
 8008a6e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8008a70:	e01e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a72:	f107 0318 	add.w	r3, r7, #24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f840 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a80:	e016      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 f984 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a90:	e00e      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8008a92:	4b0d      	ldr	r3, [pc, #52]	; (8008ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8008a94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a96:	e00b      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8008a98:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8008a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008a9c:	e008      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 8008a9e:	4b07      	ldr	r3, [pc, #28]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8008aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa2:	e005      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008aa8:	bf00      	nop
 8008aaa:	e001      	b.n	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8008ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3740      	adds	r7, #64	; 0x40
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	016e3600 	.word	0x016e3600
 8008ac0:	00bb8000 	.word	0x00bb8000
 8008ac4:	58024400 	.word	0x58024400
 8008ac8:	03d09000 	.word	0x03d09000
 8008acc:	003d0900 	.word	0x003d0900

08008ad0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008ad4:	f7fe fdf8 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 8008ad8:	4601      	mov	r1, r0
 8008ada:	4b06      	ldr	r3, [pc, #24]	; (8008af4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008ae6:	5cd3      	ldrb	r3, [r2, r3]
 8008ae8:	f003 031f 	and.w	r3, r3, #31
 8008aec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	58024400 	.word	0x58024400
 8008af8:	080166e0 	.word	0x080166e0

08008afc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b089      	sub	sp, #36	; 0x24
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b04:	4b9d      	ldr	r3, [pc, #628]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008b0e:	4b9b      	ldr	r3, [pc, #620]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	0b1b      	lsrs	r3, r3, #12
 8008b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b1a:	4b98      	ldr	r3, [pc, #608]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1e:	091b      	lsrs	r3, r3, #4
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008b26:	4b95      	ldr	r3, [pc, #596]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b2a:	08db      	lsrs	r3, r3, #3
 8008b2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008b30:	693a      	ldr	r2, [r7, #16]
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 810a 	beq.w	8008d5e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d05a      	beq.n	8008c06 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d302      	bcc.n	8008b5a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d078      	beq.n	8008c4a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8008b58:	e099      	b.n	8008c8e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b5a:	4b88      	ldr	r3, [pc, #544]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d02d      	beq.n	8008bc2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008b66:	4b85      	ldr	r3, [pc, #532]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	08db      	lsrs	r3, r3, #3
 8008b6c:	f003 0303 	and.w	r3, r3, #3
 8008b70:	4a83      	ldr	r2, [pc, #524]	; (8008d80 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8008b72:	fa22 f303 	lsr.w	r3, r2, r3
 8008b76:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	ee07 3a90 	vmov	s15, r3
 8008b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b90:	4b7a      	ldr	r3, [pc, #488]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ba4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008bc0:	e087      	b.n	8008cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	ee07 3a90 	vmov	s15, r3
 8008bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bcc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008d88 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8008bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bd4:	4b69      	ldr	r3, [pc, #420]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008be4:	ed97 6a03 	vldr	s12, [r7, #12]
 8008be8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008bec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bf4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bf8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c04:	e065      	b.n	8008cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	ee07 3a90 	vmov	s15, r3
 8008c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c18:	4b58      	ldr	r3, [pc, #352]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c20:	ee07 3a90 	vmov	s15, r3
 8008c24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c28:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c48:	e043      	b.n	8008cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008d90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8008c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c5c:	4b47      	ldr	r3, [pc, #284]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c64:	ee07 3a90 	vmov	s15, r3
 8008c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008c8c:	e021      	b.n	8008cd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	ee07 3a90 	vmov	s15, r3
 8008c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8008d8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8008c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca0:	4b36      	ldr	r3, [pc, #216]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca8:	ee07 3a90 	vmov	s15, r3
 8008cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008d84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8008cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ccc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008cd0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008cd2:	4b2a      	ldr	r3, [pc, #168]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	0a5b      	lsrs	r3, r3, #9
 8008cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cdc:	ee07 3a90 	vmov	s15, r3
 8008ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ce8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cec:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cf8:	ee17 2a90 	vmov	r2, s15
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008d00:	4b1e      	ldr	r3, [pc, #120]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0a:	ee07 3a90 	vmov	s15, r3
 8008d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d26:	ee17 2a90 	vmov	r2, s15
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8008d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d32:	0e1b      	lsrs	r3, r3, #24
 8008d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d38:	ee07 3a90 	vmov	s15, r3
 8008d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8008d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d54:	ee17 2a90 	vmov	r2, s15
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008d5c:	e008      	b.n	8008d70 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	609a      	str	r2, [r3, #8]
}
 8008d70:	bf00      	nop
 8008d72:	3724      	adds	r7, #36	; 0x24
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	58024400 	.word	0x58024400
 8008d80:	03d09000 	.word	0x03d09000
 8008d84:	46000000 	.word	0x46000000
 8008d88:	4c742400 	.word	0x4c742400
 8008d8c:	4a742400 	.word	0x4a742400
 8008d90:	4bb71b00 	.word	0x4bb71b00

08008d94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b089      	sub	sp, #36	; 0x24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d9c:	4b9d      	ldr	r3, [pc, #628]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	f003 0303 	and.w	r3, r3, #3
 8008da4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008da6:	4b9b      	ldr	r3, [pc, #620]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008daa:	0d1b      	lsrs	r3, r3, #20
 8008dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008db0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008db2:	4b98      	ldr	r3, [pc, #608]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008dbe:	4b95      	ldr	r3, [pc, #596]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dc2:	08db      	lsrs	r3, r3, #3
 8008dc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008dc8:	693a      	ldr	r2, [r7, #16]
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 810a 	beq.w	8008ff6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d05a      	beq.n	8008e9e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d302      	bcc.n	8008df2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d078      	beq.n	8008ee2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8008df0:	e099      	b.n	8008f26 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008df2:	4b88      	ldr	r3, [pc, #544]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d02d      	beq.n	8008e5a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008dfe:	4b85      	ldr	r3, [pc, #532]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	08db      	lsrs	r3, r3, #3
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	4a83      	ldr	r2, [pc, #524]	; (8009018 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	ee07 3a90 	vmov	s15, r3
 8008e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e28:	4b7a      	ldr	r3, [pc, #488]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e30:	ee07 3a90 	vmov	s15, r3
 8008e34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e38:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008e40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008e58:	e087      	b.n	8008f6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	ee07 3a90 	vmov	s15, r3
 8008e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009020 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8008e68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e6c:	4b69      	ldr	r3, [pc, #420]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e74:	ee07 3a90 	vmov	s15, r3
 8008e78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e80:	eddf 5a66 	vldr	s11, [pc, #408]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008e84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e9c:	e065      	b.n	8008f6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	ee07 3a90 	vmov	s15, r3
 8008ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ea8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008eac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008eb0:	4b58      	ldr	r3, [pc, #352]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eb8:	ee07 3a90 	vmov	s15, r3
 8008ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec0:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ec4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008ec8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ed0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ed4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008edc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ee0:	e043      	b.n	8008f6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	ee07 3a90 	vmov	s15, r3
 8008ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009028 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8008ef0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ef4:	4b47      	ldr	r3, [pc, #284]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008efc:	ee07 3a90 	vmov	s15, r3
 8008f00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f04:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f08:	eddf 5a44 	vldr	s11, [pc, #272]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f24:	e021      	b.n	8008f6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	ee07 3a90 	vmov	s15, r3
 8008f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8009024 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8008f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f38:	4b36      	ldr	r3, [pc, #216]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f48:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800901c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8008f50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008f68:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008f6a:	4b2a      	ldr	r3, [pc, #168]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6e:	0a5b      	lsrs	r3, r3, #9
 8008f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f74:	ee07 3a90 	vmov	s15, r3
 8008f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f90:	ee17 2a90 	vmov	r2, s15
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008f98:	4b1e      	ldr	r3, [pc, #120]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9c:	0c1b      	lsrs	r3, r3, #16
 8008f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa2:	ee07 3a90 	vmov	s15, r3
 8008fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008faa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fbe:	ee17 2a90 	vmov	r2, s15
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008fc6:	4b13      	ldr	r3, [pc, #76]	; (8009014 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	0e1b      	lsrs	r3, r3, #24
 8008fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd0:	ee07 3a90 	vmov	s15, r3
 8008fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fec:	ee17 2a90 	vmov	r2, s15
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008ff4:	e008      	b.n	8009008 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	609a      	str	r2, [r3, #8]
}
 8009008:	bf00      	nop
 800900a:	3724      	adds	r7, #36	; 0x24
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	58024400 	.word	0x58024400
 8009018:	03d09000 	.word	0x03d09000
 800901c:	46000000 	.word	0x46000000
 8009020:	4c742400 	.word	0x4c742400
 8009024:	4a742400 	.word	0x4a742400
 8009028:	4bb71b00 	.word	0x4bb71b00

0800902c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800902c:	b480      	push	{r7}
 800902e:	b089      	sub	sp, #36	; 0x24
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009034:	4b9d      	ldr	r3, [pc, #628]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800903e:	4b9b      	ldr	r3, [pc, #620]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009042:	091b      	lsrs	r3, r3, #4
 8009044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009048:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800904a:	4b98      	ldr	r3, [pc, #608]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009054:	4b95      	ldr	r3, [pc, #596]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009058:	08db      	lsrs	r3, r3, #3
 800905a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	fb02 f303 	mul.w	r3, r2, r3
 8009064:	ee07 3a90 	vmov	s15, r3
 8009068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800906c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f000 810a 	beq.w	800928c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d05a      	beq.n	8009134 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800907e:	2b01      	cmp	r3, #1
 8009080:	d302      	bcc.n	8009088 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8009082:	2b02      	cmp	r3, #2
 8009084:	d078      	beq.n	8009178 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8009086:	e099      	b.n	80091bc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009088:	4b88      	ldr	r3, [pc, #544]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0320 	and.w	r3, r3, #32
 8009090:	2b00      	cmp	r3, #0
 8009092:	d02d      	beq.n	80090f0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009094:	4b85      	ldr	r3, [pc, #532]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	08db      	lsrs	r3, r3, #3
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	4a84      	ldr	r2, [pc, #528]	; (80092b0 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	ee07 3a90 	vmov	s15, r3
 80090ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090be:	4b7b      	ldr	r3, [pc, #492]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090c6:	ee07 3a90 	vmov	s15, r3
 80090ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80090d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80090d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80090ee:	e087      	b.n	8009200 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	ee07 3a90 	vmov	s15, r3
 80090f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80092b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80090fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009102:	4b6a      	ldr	r3, [pc, #424]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009112:	ed97 6a03 	vldr	s12, [r7, #12]
 8009116:	eddf 5a67 	vldr	s11, [pc, #412]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800911a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800911e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800912a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800912e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009132:	e065      	b.n	8009200 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800913e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80092bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8009142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009146:	4b59      	ldr	r3, [pc, #356]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800914a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009156:	ed97 6a03 	vldr	s12, [r7, #12]
 800915a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800915e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800916a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800916e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009172:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009176:	e043      	b.n	8009200 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	ee07 3a90 	vmov	s15, r3
 800917e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009182:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80092c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800918a:	4b48      	ldr	r3, [pc, #288]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800919a:	ed97 6a03 	vldr	s12, [r7, #12]
 800919e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80091a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091ba:	e021      	b.n	8009200 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80092bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 80091ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091ce:	4b37      	ldr	r3, [pc, #220]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091de:	ed97 6a03 	vldr	s12, [r7, #12]
 80091e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80092b4 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80091e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80091fe:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009200:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009204:	0a5b      	lsrs	r3, r3, #9
 8009206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009216:	ee37 7a87 	vadd.f32	s14, s15, s14
 800921a:	edd7 6a07 	vldr	s13, [r7, #28]
 800921e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009226:	ee17 2a90 	vmov	r2, s15
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800922e:	4b1f      	ldr	r3, [pc, #124]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	0c1b      	lsrs	r3, r3, #16
 8009234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009238:	ee07 3a90 	vmov	s15, r3
 800923c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009240:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009244:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009248:	edd7 6a07 	vldr	s13, [r7, #28]
 800924c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009250:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009254:	ee17 2a90 	vmov	r2, s15
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800925c:	4b13      	ldr	r3, [pc, #76]	; (80092ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009260:	0e1b      	lsrs	r3, r3, #24
 8009262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800926e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009272:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009276:	edd7 6a07 	vldr	s13, [r7, #28]
 800927a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800927e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009282:	ee17 2a90 	vmov	r2, s15
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800928a:	e008      	b.n	800929e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	609a      	str	r2, [r3, #8]
}
 800929e:	bf00      	nop
 80092a0:	3724      	adds	r7, #36	; 0x24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	58024400 	.word	0x58024400
 80092b0:	03d09000 	.word	0x03d09000
 80092b4:	46000000 	.word	0x46000000
 80092b8:	4c742400 	.word	0x4c742400
 80092bc:	4a742400 	.word	0x4a742400
 80092c0:	4bb71b00 	.word	0x4bb71b00

080092c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092d2:	4b53      	ldr	r3, [pc, #332]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d6:	f003 0303 	and.w	r3, r3, #3
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d101      	bne.n	80092e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e099      	b.n	8009416 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80092e2:	4b4f      	ldr	r3, [pc, #316]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a4e      	ldr	r2, [pc, #312]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80092e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80092ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092ee:	f7f8 fd99 	bl	8001e24 <HAL_GetTick>
 80092f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092f4:	e008      	b.n	8009308 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80092f6:	f7f8 fd95 	bl	8001e24 <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	2b02      	cmp	r3, #2
 8009302:	d901      	bls.n	8009308 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	e086      	b.n	8009416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009308:	4b45      	ldr	r3, [pc, #276]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009310:	2b00      	cmp	r3, #0
 8009312:	d1f0      	bne.n	80092f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009314:	4b42      	ldr	r3, [pc, #264]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009318:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	031b      	lsls	r3, r3, #12
 8009322:	493f      	ldr	r1, [pc, #252]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009324:	4313      	orrs	r3, r2
 8009326:	628b      	str	r3, [r1, #40]	; 0x28
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	3b01      	subs	r3, #1
 800932e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	3b01      	subs	r3, #1
 8009338:	025b      	lsls	r3, r3, #9
 800933a:	b29b      	uxth	r3, r3
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	3b01      	subs	r3, #1
 8009344:	041b      	lsls	r3, r3, #16
 8009346:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800934a:	431a      	orrs	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	3b01      	subs	r3, #1
 8009352:	061b      	lsls	r3, r3, #24
 8009354:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009358:	4931      	ldr	r1, [pc, #196]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800935a:	4313      	orrs	r3, r2
 800935c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800935e:	4b30      	ldr	r3, [pc, #192]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	492d      	ldr	r1, [pc, #180]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800936c:	4313      	orrs	r3, r2
 800936e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009370:	4b2b      	ldr	r3, [pc, #172]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	f023 0220 	bic.w	r2, r3, #32
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	4928      	ldr	r1, [pc, #160]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800937e:	4313      	orrs	r3, r2
 8009380:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009382:	4b27      	ldr	r3, [pc, #156]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009386:	4a26      	ldr	r2, [pc, #152]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009388:	f023 0310 	bic.w	r3, r3, #16
 800938c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 8009390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <RCCEx_PLL2_Config+0x160>)
 8009394:	4013      	ands	r3, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	69d2      	ldr	r2, [r2, #28]
 800939a:	00d2      	lsls	r2, r2, #3
 800939c:	4920      	ldr	r1, [pc, #128]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80093a2:	4b1f      	ldr	r3, [pc, #124]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4a1e      	ldr	r2, [pc, #120]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093a8:	f043 0310 	orr.w	r3, r3, #16
 80093ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d106      	bne.n	80093c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80093b4:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a19      	ldr	r2, [pc, #100]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093c0:	e00f      	b.n	80093e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d106      	bne.n	80093d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80093c8:	4b15      	ldr	r3, [pc, #84]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	4a14      	ldr	r2, [pc, #80]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093d4:	e005      	b.n	80093e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80093d6:	4b12      	ldr	r3, [pc, #72]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093da:	4a11      	ldr	r2, [pc, #68]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 80093e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093ee:	f7f8 fd19 	bl	8001e24 <HAL_GetTick>
 80093f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093f4:	e008      	b.n	8009408 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80093f6:	f7f8 fd15 	bl	8001e24 <HAL_GetTick>
 80093fa:	4602      	mov	r2, r0
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	1ad3      	subs	r3, r2, r3
 8009400:	2b02      	cmp	r3, #2
 8009402:	d901      	bls.n	8009408 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e006      	b.n	8009416 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009408:	4b05      	ldr	r3, [pc, #20]	; (8009420 <RCCEx_PLL2_Config+0x15c>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d0f0      	beq.n	80093f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009414:	7bfb      	ldrb	r3, [r7, #15]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	58024400 	.word	0x58024400
 8009424:	ffff0007 	.word	0xffff0007

08009428 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009436:	4b53      	ldr	r3, [pc, #332]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	2b03      	cmp	r3, #3
 8009440:	d101      	bne.n	8009446 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e099      	b.n	800957a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009446:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a4e      	ldr	r2, [pc, #312]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800944c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009450:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009452:	f7f8 fce7 	bl	8001e24 <HAL_GetTick>
 8009456:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009458:	e008      	b.n	800946c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800945a:	f7f8 fce3 	bl	8001e24 <HAL_GetTick>
 800945e:	4602      	mov	r2, r0
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	1ad3      	subs	r3, r2, r3
 8009464:	2b02      	cmp	r3, #2
 8009466:	d901      	bls.n	800946c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009468:	2303      	movs	r3, #3
 800946a:	e086      	b.n	800957a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800946c:	4b45      	ldr	r3, [pc, #276]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1f0      	bne.n	800945a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009478:	4b42      	ldr	r3, [pc, #264]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	051b      	lsls	r3, r3, #20
 8009486:	493f      	ldr	r1, [pc, #252]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009488:	4313      	orrs	r3, r2
 800948a:	628b      	str	r3, [r1, #40]	; 0x28
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	3b01      	subs	r3, #1
 8009492:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	3b01      	subs	r3, #1
 800949c:	025b      	lsls	r3, r3, #9
 800949e:	b29b      	uxth	r3, r3
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	3b01      	subs	r3, #1
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80094ae:	431a      	orrs	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	691b      	ldr	r3, [r3, #16]
 80094b4:	3b01      	subs	r3, #1
 80094b6:	061b      	lsls	r3, r3, #24
 80094b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094bc:	4931      	ldr	r1, [pc, #196]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094be:	4313      	orrs	r3, r2
 80094c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80094c2:	4b30      	ldr	r3, [pc, #192]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	492d      	ldr	r1, [pc, #180]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80094d4:	4b2b      	ldr	r3, [pc, #172]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	4928      	ldr	r1, [pc, #160]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094e2:	4313      	orrs	r3, r2
 80094e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80094e6:	4b27      	ldr	r3, [pc, #156]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ea:	4a26      	ldr	r2, [pc, #152]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80094f2:	4b24      	ldr	r3, [pc, #144]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 80094f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094f6:	4b24      	ldr	r3, [pc, #144]	; (8009588 <RCCEx_PLL3_Config+0x160>)
 80094f8:	4013      	ands	r3, r2
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	69d2      	ldr	r2, [r2, #28]
 80094fe:	00d2      	lsls	r2, r2, #3
 8009500:	4920      	ldr	r1, [pc, #128]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009502:	4313      	orrs	r3, r2
 8009504:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009506:	4b1f      	ldr	r3, [pc, #124]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4a1e      	ldr	r2, [pc, #120]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800950c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009510:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d106      	bne.n	8009526 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009518:	4b1a      	ldr	r3, [pc, #104]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800951a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951c:	4a19      	ldr	r2, [pc, #100]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800951e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009524:	e00f      	b.n	8009546 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d106      	bne.n	800953a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800952c:	4b15      	ldr	r3, [pc, #84]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800952e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009530:	4a14      	ldr	r2, [pc, #80]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009536:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009538:	e005      	b.n	8009546 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	4a11      	ldr	r2, [pc, #68]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009540:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009544:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009546:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a0e      	ldr	r2, [pc, #56]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800954c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009552:	f7f8 fc67 	bl	8001e24 <HAL_GetTick>
 8009556:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009558:	e008      	b.n	800956c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800955a:	f7f8 fc63 	bl	8001e24 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	2b02      	cmp	r3, #2
 8009566:	d901      	bls.n	800956c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e006      	b.n	800957a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <RCCEx_PLL3_Config+0x15c>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d0f0      	beq.n	800955a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	58024400 	.word	0x58024400
 8009588:	ffff0007 	.word	0xffff0007

0800958c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08a      	sub	sp, #40	; 0x28
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e07c      	b.n	8009698 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d10c      	bne.n	80095c4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f7f8 f8e0 	bl	8001784 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2203      	movs	r2, #3
 80095c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f867 	bl	80096a0 <HAL_SD_InitCard>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d001      	beq.n	80095dc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e05d      	b.n	8009698 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80095dc:	f107 0308 	add.w	r3, r7, #8
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 fdbe 	bl	800a164 <HAL_SD_GetCardStatus>
 80095e8:	4603      	mov	r3, r0
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d001      	beq.n	80095f2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	e052      	b.n	8009698 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80095f2:	7e3b      	ldrb	r3, [r7, #24]
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80095f8:	7e7b      	ldrb	r3, [r7, #25]
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d10a      	bne.n	800961c <HAL_SD_Init+0x90>
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <HAL_SD_Init+0x86>
 800960c:	6a3b      	ldr	r3, [r7, #32]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009618:	65da      	str	r2, [r3, #92]	; 0x5c
 800961a:	e00b      	b.n	8009634 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d104      	bne.n	800962e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800962a:	65da      	str	r2, [r3, #92]	; 0x5c
 800962c:	e002      	b.n	8009634 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	4619      	mov	r1, r3
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 fe74 	bl	800a328 <HAL_SD_ConfigWideBusOperation>
 8009640:	4603      	mov	r3, r0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d001      	beq.n	800964a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e026      	b.n	8009698 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800964a:	f7f8 fbeb 	bl	8001e24 <HAL_GetTick>
 800964e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009650:	e011      	b.n	8009676 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8009652:	f7f8 fbe7 	bl	8001e24 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d109      	bne.n	8009676 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2201      	movs	r2, #1
 800966e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e010      	b.n	8009698 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 ff00 	bl	800a47c <HAL_SD_GetCardState>
 800967c:	4603      	mov	r3, r0
 800967e:	2b04      	cmp	r3, #4
 8009680:	d1e7      	bne.n	8009652 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2201      	movs	r2, #1
 8009692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3728      	adds	r7, #40	; 0x28
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80096a0:	b5b0      	push	{r4, r5, r7, lr}
 80096a2:	b08e      	sub	sp, #56	; 0x38
 80096a4:	af04      	add	r7, sp, #16
 80096a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80096a8:	2300      	movs	r3, #0
 80096aa:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80096b0:	2300      	movs	r3, #0
 80096b2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80096b8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80096bc:	f7fe ff90 	bl	80085e0 <HAL_RCCEx_GetPeriphCLKFreq>
 80096c0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80096c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c4:	0a1b      	lsrs	r3, r3, #8
 80096c6:	4a40      	ldr	r2, [pc, #256]	; (80097c8 <HAL_SD_InitCard+0x128>)
 80096c8:	fba2 2303 	umull	r2, r3, r2, r3
 80096cc:	091b      	lsrs	r3, r3, #4
 80096ce:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d107      	bne.n	80096e8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f042 0210 	orr.w	r2, r2, #16
 80096e6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681d      	ldr	r5, [r3, #0]
 80096ec:	466c      	mov	r4, sp
 80096ee:	f107 0314 	add.w	r3, r7, #20
 80096f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80096f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096fa:	f107 0308 	add.w	r3, r7, #8
 80096fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009700:	4628      	mov	r0, r5
 8009702:	f003 fdc7 	bl	800d294 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4618      	mov	r0, r3
 800970c:	f003 fe0a 	bl	800d324 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	005b      	lsls	r3, r3, #1
 8009714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009716:	fbb2 f3f3 	udiv	r3, r2, r3
 800971a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8009722:	4a2a      	ldr	r2, [pc, #168]	; (80097cc <HAL_SD_InitCard+0x12c>)
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	3301      	adds	r3, #1
 800972c:	4618      	mov	r0, r3
 800972e:	f7f8 fb85 	bl	8001e3c <HAL_Delay>
 8009732:	e002      	b.n	800973a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8009734:	2002      	movs	r0, #2
 8009736:	f7f8 fb81 	bl	8001e3c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 ff7c 	bl	800a638 <SD_PowerON>
 8009740:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00b      	beq.n	8009760 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	431a      	orrs	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e02e      	b.n	80097be <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 feab 	bl	800a4bc <SD_InitCard>
 8009766:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e01b      	b.n	80097be <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800978e:	4618      	mov	r0, r3
 8009790:	f003 fe5e 	bl	800d450 <SDMMC_CmdBlockLength>
 8009794:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00f      	beq.n	80097bc <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a0b      	ldr	r2, [pc, #44]	; (80097d0 <HAL_SD_InitCard+0x130>)
 80097a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3728      	adds	r7, #40	; 0x28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bdb0      	pop	{r4, r5, r7, pc}
 80097c6:	bf00      	nop
 80097c8:	014f8b59 	.word	0x014f8b59
 80097cc:	00012110 	.word	0x00012110
 80097d0:	1fe00fff 	.word	0x1fe00fff

080097d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b092      	sub	sp, #72	; 0x48
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097e2:	f7f8 fb1f 	bl	8001e24 <HAL_GetTick>
 80097e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d107      	bne.n	8009806 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e167      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b01      	cmp	r3, #1
 8009810:	f040 815a 	bne.w	8009ac8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2200      	movs	r2, #0
 8009818:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800981a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	441a      	add	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009824:	429a      	cmp	r2, r3
 8009826:	d907      	bls.n	8009838 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800982c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e14e      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2203      	movs	r2, #3
 800983c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800984c:	2b01      	cmp	r3, #1
 800984e:	d002      	beq.n	8009856 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	025b      	lsls	r3, r3, #9
 8009854:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009856:	f04f 33ff 	mov.w	r3, #4294967295
 800985a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	025b      	lsls	r3, r3, #9
 8009860:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009862:	2390      	movs	r3, #144	; 0x90
 8009864:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009866:	2302      	movs	r3, #2
 8009868:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800986a:	2300      	movs	r3, #0
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800986e:	2300      	movs	r3, #0
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f107 0214 	add.w	r2, r7, #20
 800987a:	4611      	mov	r1, r2
 800987c:	4618      	mov	r0, r3
 800987e:	f003 fdbb 	bl	800d3f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009890:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d90a      	bls.n	80098ae <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2202      	movs	r2, #2
 800989c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098a4:	4618      	mov	r0, r3
 80098a6:	f003 fe19 	bl	800d4dc <SDMMC_CmdReadMultiBlock>
 80098aa:	6478      	str	r0, [r7, #68]	; 0x44
 80098ac:	e009      	b.n	80098c2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2201      	movs	r2, #1
 80098b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098ba:	4618      	mov	r0, r3
 80098bc:	f003 fdeb 	bl	800d496 <SDMMC_CmdReadSingleBlock>
 80098c0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80098c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d012      	beq.n	80098ee <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a84      	ldr	r2, [pc, #528]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098d6:	431a      	orrs	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	2201      	movs	r2, #1
 80098e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2200      	movs	r2, #0
 80098e8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e0f3      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80098f2:	e058      	b.n	80099a6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d033      	beq.n	800996a <HAL_SD_ReadBlocks+0x196>
 8009902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009904:	2b1f      	cmp	r3, #31
 8009906:	d930      	bls.n	800996a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8009908:	2300      	movs	r3, #0
 800990a:	643b      	str	r3, [r7, #64]	; 0x40
 800990c:	e027      	b.n	800995e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4618      	mov	r0, r3
 8009914:	f003 fce8 	bl	800d2e8 <SDMMC_ReadFIFO>
 8009918:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800991a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991c:	b2da      	uxtb	r2, r3
 800991e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009920:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009924:	3301      	adds	r3, #1
 8009926:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	b2da      	uxtb	r2, r3
 800992e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009930:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009934:	3301      	adds	r3, #1
 8009936:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993a:	0c1b      	lsrs	r3, r3, #16
 800993c:	b2da      	uxtb	r2, r3
 800993e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009940:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009944:	3301      	adds	r3, #1
 8009946:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	0e1b      	lsrs	r3, r3, #24
 800994c:	b2da      	uxtb	r2, r3
 800994e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009950:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	3301      	adds	r3, #1
 8009956:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8009958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800995a:	3301      	adds	r3, #1
 800995c:	643b      	str	r3, [r7, #64]	; 0x40
 800995e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009960:	2b07      	cmp	r3, #7
 8009962:	d9d4      	bls.n	800990e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009966:	3b20      	subs	r3, #32
 8009968:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800996a:	f7f8 fa5b 	bl	8001e24 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009976:	429a      	cmp	r2, r3
 8009978:	d902      	bls.n	8009980 <HAL_SD_ReadBlocks+0x1ac>
 800997a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800997c:	2b00      	cmp	r3, #0
 800997e:	d112      	bne.n	80099a6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	4a56      	ldr	r2, [pc, #344]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e097      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ac:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d09f      	beq.n	80098f4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099c2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d022      	beq.n	8009a18 <HAL_SD_ReadBlocks+0x244>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d91f      	bls.n	8009a18 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d01b      	beq.n	8009a18 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4618      	mov	r0, r3
 80099e6:	f003 fde3 	bl	800d5b0 <SDMMC_CmdStopTransfer>
 80099ea:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80099ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d012      	beq.n	8009a18 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3a      	ldr	r2, [pc, #232]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 80099f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a00:	431a      	orrs	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	e05e      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a1e:	f003 0308 	and.w	r3, r3, #8
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d012      	beq.n	8009a4c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a2d      	ldr	r2, [pc, #180]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a32:	f043 0208 	orr.w	r2, r3, #8
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2200      	movs	r2, #0
 8009a46:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e044      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a52:	f003 0302 	and.w	r3, r3, #2
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d012      	beq.n	8009a80 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a20      	ldr	r2, [pc, #128]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 8009a60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	f043 0202 	orr.w	r2, r3, #2
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2201      	movs	r2, #1
 8009a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e02a      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d012      	beq.n	8009ab4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a13      	ldr	r2, [pc, #76]	; (8009ae0 <HAL_SD_ReadBlocks+0x30c>)
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9a:	f043 0220 	orr.w	r2, r3, #32
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e010      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a0a      	ldr	r2, [pc, #40]	; (8009ae4 <HAL_SD_ReadBlocks+0x310>)
 8009aba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e006      	b.n	8009ad6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009acc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ad4:	2301      	movs	r3, #1
  }
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3748      	adds	r7, #72	; 0x48
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	1fe00fff 	.word	0x1fe00fff
 8009ae4:	18000f3a 	.word	0x18000f3a

08009ae8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b092      	sub	sp, #72	; 0x48
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009af6:	f7f8 f995 	bl	8001e24 <HAL_GetTick>
 8009afa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d107      	bne.n	8009b1a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b0e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e16b      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	f040 815e 	bne.w	8009de4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	441a      	add	r2, r3
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d907      	bls.n	8009b4c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e152      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2203      	movs	r2, #3
 8009b50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d002      	beq.n	8009b6a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8009b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b66:	025b      	lsls	r3, r3, #9
 8009b68:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	025b      	lsls	r3, r3, #9
 8009b74:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b76:	2390      	movs	r3, #144	; 0x90
 8009b78:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b82:	2300      	movs	r3, #0
 8009b84:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f107 0218 	add.w	r2, r7, #24
 8009b8e:	4611      	mov	r1, r2
 8009b90:	4618      	mov	r0, r3
 8009b92:	f003 fc31 	bl	800d3f8 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68da      	ldr	r2, [r3, #12]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ba4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d90a      	bls.n	8009bc2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f003 fcd5 	bl	800d568 <SDMMC_CmdWriteMultiBlock>
 8009bbe:	6478      	str	r0, [r7, #68]	; 0x44
 8009bc0:	e009      	b.n	8009bd6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2210      	movs	r2, #16
 8009bc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f003 fca7 	bl	800d522 <SDMMC_CmdWriteSingleBlock>
 8009bd4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d012      	beq.n	8009c02 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a86      	ldr	r2, [pc, #536]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009be2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009bea:	431a      	orrs	r2, r3
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e0f7      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009c06:	e05c      	b.n	8009cc2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d037      	beq.n	8009c86 <HAL_SD_WriteBlocks+0x19e>
 8009c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c18:	2b1f      	cmp	r3, #31
 8009c1a:	d934      	bls.n	8009c86 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009c20:	e02b      	b.n	8009c7a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	021a      	lsls	r2, r3, #8
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	041a      	lsls	r2, r3, #16
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c4e:	3301      	adds	r3, #1
 8009c50:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	061a      	lsls	r2, r3, #24
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c60:	3301      	adds	r3, #1
 8009c62:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f107 0214 	add.w	r2, r7, #20
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f003 fb47 	bl	800d302 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8009c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c76:	3301      	adds	r3, #1
 8009c78:	643b      	str	r3, [r7, #64]	; 0x40
 8009c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c7c:	2b07      	cmp	r3, #7
 8009c7e:	d9d0      	bls.n	8009c22 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8009c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c82:	3b20      	subs	r3, #32
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8009c86:	f7f8 f8cd 	bl	8001e24 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d902      	bls.n	8009c9c <HAL_SD_WriteBlocks+0x1b4>
 8009c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d112      	bne.n	8009cc2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a56      	ldr	r2, [pc, #344]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ca8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009caa:	431a      	orrs	r2, r3
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	e097      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d09b      	beq.n	8009c08 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cde:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d022      	beq.n	8009d34 <HAL_SD_WriteBlocks+0x24c>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d91f      	bls.n	8009d34 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cf8:	2b03      	cmp	r3, #3
 8009cfa:	d01b      	beq.n	8009d34 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4618      	mov	r0, r3
 8009d02:	f003 fc55 	bl	800d5b0 <SDMMC_CmdStopTransfer>
 8009d06:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d012      	beq.n	8009d34 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a3a      	ldr	r2, [pc, #232]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d1c:	431a      	orrs	r2, r3
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2201      	movs	r2, #1
 8009d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
 8009d32:	e05e      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d3a:	f003 0308 	and.w	r3, r3, #8
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d012      	beq.n	8009d68 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a2d      	ldr	r2, [pc, #180]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009d48:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d4e:	f043 0208 	orr.w	r2, r3, #8
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2200      	movs	r2, #0
 8009d62:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e044      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d6e:	f003 0302 	and.w	r3, r3, #2
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d012      	beq.n	8009d9c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a20      	ldr	r2, [pc, #128]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d82:	f043 0202 	orr.w	r2, r3, #2
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	e02a      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d012      	beq.n	8009dd0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a13      	ldr	r2, [pc, #76]	; (8009dfc <HAL_SD_WriteBlocks+0x314>)
 8009db0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db6:	f043 0210 	orr.w	r2, r3, #16
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e010      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0a      	ldr	r2, [pc, #40]	; (8009e00 <HAL_SD_WriteBlocks+0x318>)
 8009dd6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	e006      	b.n	8009df2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009de8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009df0:	2301      	movs	r3, #1
  }
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3748      	adds	r7, #72	; 0x48
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	1fe00fff 	.word	0x1fe00fff
 8009e00:	18000f3a 	.word	0x18000f3a

08009e04 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8009e0e:	bf00      	nop
 8009e10:	370c      	adds	r7, #12
 8009e12:	46bd      	mov	sp, r7
 8009e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e18:	4770      	bx	lr
	...

08009e1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2a:	0f9b      	lsrs	r3, r3, #30
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e36:	0e9b      	lsrs	r3, r3, #26
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	f003 030f 	and.w	r3, r3, #15
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e48:	0e1b      	lsrs	r3, r3, #24
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	b2da      	uxtb	r2, r3
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5a:	0c1b      	lsrs	r3, r3, #16
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e66:	0a1b      	lsrs	r3, r3, #8
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e7c:	0d1b      	lsrs	r3, r3, #20
 8009e7e:	b29a      	uxth	r2, r3
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e88:	0c1b      	lsrs	r3, r3, #16
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	f003 030f 	and.w	r3, r3, #15
 8009e90:	b2da      	uxtb	r2, r3
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9a:	0bdb      	lsrs	r3, r3, #15
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eac:	0b9b      	lsrs	r3, r3, #14
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ebe:	0b5b      	lsrs	r3, r3, #13
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	b2da      	uxtb	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ed0:	0b1b      	lsrs	r3, r3, #12
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	b2da      	uxtb	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d163      	bne.n	8009fb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ef0:	009a      	lsls	r2, r3, #2
 8009ef2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009efc:	0f92      	lsrs	r2, r2, #30
 8009efe:	431a      	orrs	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f08:	0edb      	lsrs	r3, r3, #27
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0307 	and.w	r3, r3, #7
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f1a:	0e1b      	lsrs	r3, r3, #24
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	f003 0307 	and.w	r3, r3, #7
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f2c:	0d5b      	lsrs	r3, r3, #21
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	f003 0307 	and.w	r3, r3, #7
 8009f34:	b2da      	uxtb	r2, r3
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f3e:	0c9b      	lsrs	r3, r3, #18
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	f003 0307 	and.w	r3, r3, #7
 8009f46:	b2da      	uxtb	r2, r3
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f50:	0bdb      	lsrs	r3, r3, #15
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	f003 0307 	and.w	r3, r3, #7
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	7e1b      	ldrb	r3, [r3, #24]
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	3302      	adds	r3, #2
 8009f74:	2201      	movs	r2, #1
 8009f76:	fa02 f303 	lsl.w	r3, r2, r3
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009f7e:	fb02 f203 	mul.w	r2, r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	7a1b      	ldrb	r3, [r3, #8]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 030f 	and.w	r3, r3, #15
 8009f90:	2201      	movs	r2, #1
 8009f92:	409a      	lsls	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009fa0:	0a52      	lsrs	r2, r2, #9
 8009fa2:	fb02 f203 	mul.w	r2, r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8009fb2:	e031      	b.n	800a018 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d11d      	bne.n	8009ff8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fc0:	041b      	lsls	r3, r3, #16
 8009fc2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fca:	0c1b      	lsrs	r3, r3, #16
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	691b      	ldr	r3, [r3, #16]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	029a      	lsls	r2, r3, #10
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8009ff6:	e00f      	b.n	800a018 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a58      	ldr	r2, [pc, #352]	; (800a160 <HAL_SD_GetCardCSD+0x344>)
 8009ffe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2201      	movs	r2, #1
 800a010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e09d      	b.n	800a154 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a01c:	0b9b      	lsrs	r3, r3, #14
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	b2da      	uxtb	r2, r3
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a02e:	09db      	lsrs	r3, r3, #7
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a036:	b2da      	uxtb	r2, r3
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a040:	b2db      	uxtb	r3, r3
 800a042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a046:	b2da      	uxtb	r2, r3
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a050:	0fdb      	lsrs	r3, r3, #31
 800a052:	b2da      	uxtb	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a05c:	0f5b      	lsrs	r3, r3, #29
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	b2da      	uxtb	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a06e:	0e9b      	lsrs	r3, r3, #26
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	b2da      	uxtb	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a080:	0d9b      	lsrs	r3, r3, #22
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 030f 	and.w	r3, r3, #15
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a092:	0d5b      	lsrs	r3, r3, #21
 800a094:	b2db      	uxtb	r3, r3
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	b2da      	uxtb	r2, r3
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ae:	0c1b      	lsrs	r3, r3, #16
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0c2:	0bdb      	lsrs	r3, r3, #15
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d6:	0b9b      	lsrs	r3, r3, #14
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ea:	0b5b      	lsrs	r3, r3, #13
 800a0ec:	b2db      	uxtb	r3, r3
 800a0ee:	f003 0301 	and.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0fe:	0b1b      	lsrs	r3, r3, #12
 800a100:	b2db      	uxtb	r3, r3
 800a102:	f003 0301 	and.w	r3, r3, #1
 800a106:	b2da      	uxtb	r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a112:	0a9b      	lsrs	r3, r3, #10
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a126:	0a1b      	lsrs	r3, r3, #8
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	f003 0303 	and.w	r3, r3, #3
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a13a:	085b      	lsrs	r3, r3, #1
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a142:	b2da      	uxtb	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr
 800a160:	1fe00fff 	.word	0x1fe00fff

0800a164 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b094      	sub	sp, #80	; 0x50
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a174:	f107 0308 	add.w	r3, r7, #8
 800a178:	4619      	mov	r1, r3
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 fb64 	bl	800a848 <SD_SendSDStatus>
 800a180:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a184:	2b00      	cmp	r3, #0
 800a186:	d011      	beq.n	800a1ac <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a4f      	ldr	r2, [pc, #316]	; (800a2cc <HAL_SD_GetCardStatus+0x168>)
 800a18e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2201      	movs	r2, #1
 800a1a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800a1aa:	e070      	b.n	800a28e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	099b      	lsrs	r3, r3, #6
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	f003 0303 	and.w	r3, r3, #3
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	b2da      	uxtb	r2, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	0a1b      	lsrs	r3, r3, #8
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	0e1b      	lsrs	r3, r3, #24
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	061a      	lsls	r2, r3, #24
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	0a1b      	lsrs	r3, r3, #8
 800a1f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	0e1b      	lsrs	r3, r3, #24
 800a202:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	0a1b      	lsrs	r3, r3, #8
 800a214:	b2da      	uxtb	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	0d1b      	lsrs	r3, r3, #20
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	b2da      	uxtb	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a234:	b29a      	uxth	r2, r3
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4313      	orrs	r3, r2
 800a240:	b29a      	uxth	r2, r3
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	0a9b      	lsrs	r3, r3, #10
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a250:	b2da      	uxtb	r2, r3
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	f003 0303 	and.w	r3, r3, #3
 800a260:	b2da      	uxtb	r2, r3
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	091b      	lsrs	r3, r3, #4
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	f003 030f 	and.w	r3, r3, #15
 800a270:	b2da      	uxtb	r2, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a284:	69bb      	ldr	r3, [r7, #24]
 800a286:	0e1b      	lsrs	r3, r3, #24
 800a288:	b2da      	uxtb	r2, r3
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a296:	4618      	mov	r0, r3
 800a298:	f003 f8da 	bl	800d450 <SDMMC_CmdBlockLength>
 800a29c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800a29e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4a08      	ldr	r2, [pc, #32]	; (800a2cc <HAL_SD_GetCardStatus+0x168>)
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800a2c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3750      	adds	r7, #80	; 0x50
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	1fe00fff 	.word	0x1fe00fff

0800a2d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a328:	b5b0      	push	{r4, r5, r7, lr}
 800a32a:	b08e      	sub	sp, #56	; 0x38
 800a32c:	af04      	add	r7, sp, #16
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a332:	2300      	movs	r3, #0
 800a334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2203      	movs	r2, #3
 800a33c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a344:	2b03      	cmp	r3, #3
 800a346:	d02e      	beq.n	800a3a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a34e:	d106      	bne.n	800a35e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
 800a35c:	e029      	b.n	800a3b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a364:	d10a      	bne.n	800a37c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fb66 	bl	800aa38 <SD_WideBus_Enable>
 800a36c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a372:	6a3b      	ldr	r3, [r7, #32]
 800a374:	431a      	orrs	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
 800a37a:	e01a      	b.n	800a3b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10a      	bne.n	800a398 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fba3 	bl	800aace <SD_WideBus_Disable>
 800a388:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a38e:	6a3b      	ldr	r3, [r7, #32]
 800a390:	431a      	orrs	r2, r3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	639a      	str	r2, [r3, #56]	; 0x38
 800a396:	e00c      	b.n	800a3b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	639a      	str	r2, [r3, #56]	; 0x38
 800a3a4:	e005      	b.n	800a3b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d007      	beq.n	800a3ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a2e      	ldr	r2, [pc, #184]	; (800a478 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a3c0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3c8:	e034      	b.n	800a434 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	695b      	ldr	r3, [r3, #20]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d903      	bls.n	800a3f0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	695b      	ldr	r3, [r3, #20]
 800a3ec:	61bb      	str	r3, [r7, #24]
 800a3ee:	e012      	b.n	800a416 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3f8:	d103      	bne.n	800a402 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	61bb      	str	r3, [r7, #24]
 800a400:	e009      	b.n	800a416 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a40a:	d102      	bne.n	800a412 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800a40c:	2302      	movs	r3, #2
 800a40e:	61bb      	str	r3, [r7, #24]
 800a410:	e001      	b.n	800a416 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800a412:	2304      	movs	r3, #4
 800a414:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681d      	ldr	r5, [r3, #0]
 800a41a:	466c      	mov	r4, sp
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a428:	f107 0308 	add.w	r3, r7, #8
 800a42c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a42e:	4628      	mov	r0, r5
 800a430:	f002 ff30 	bl	800d294 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a43c:	4618      	mov	r0, r3
 800a43e:	f003 f807 	bl	800d450 <SDMMC_CmdBlockLength>
 800a442:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a444:	6a3b      	ldr	r3, [r7, #32]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00c      	beq.n	800a464 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a0a      	ldr	r2, [pc, #40]	; (800a478 <HAL_SD_ConfigWideBusOperation+0x150>)
 800a450:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800a45e:	2301      	movs	r3, #1
 800a460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800a46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a470:	4618      	mov	r0, r3
 800a472:	3728      	adds	r7, #40	; 0x28
 800a474:	46bd      	mov	sp, r7
 800a476:	bdb0      	pop	{r4, r5, r7, pc}
 800a478:	1fe00fff 	.word	0x1fe00fff

0800a47c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b086      	sub	sp, #24
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a488:	f107 030c 	add.w	r3, r7, #12
 800a48c:	4619      	mov	r1, r3
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 faaa 	bl	800a9e8 <SD_SendStatus>
 800a494:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	0a5b      	lsrs	r3, r3, #9
 800a4ac:	f003 030f 	and.w	r3, r3, #15
 800a4b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a4b2:	693b      	ldr	r3, [r7, #16]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b091      	sub	sp, #68	; 0x44
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f002 ff3a 	bl	800d346 <SDMMC_GetPowerState>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d102      	bne.n	800a4de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a4d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a4dc:	e0a8      	b.n	800a630 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	2b03      	cmp	r3, #3
 800a4e4:	d02e      	beq.n	800a544 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f003 f986 	bl	800d7fc <SDMMC_CmdSendCID>
 800a4f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <SD_InitCard+0x40>
    {
      return errorstate;
 800a4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4fa:	e099      	b.n	800a630 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2100      	movs	r1, #0
 800a502:	4618      	mov	r0, r3
 800a504:	f002 ff65 	bl	800d3d2 <SDMMC_GetResponse>
 800a508:	4602      	mov	r2, r0
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2104      	movs	r1, #4
 800a514:	4618      	mov	r0, r3
 800a516:	f002 ff5c 	bl	800d3d2 <SDMMC_GetResponse>
 800a51a:	4602      	mov	r2, r0
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2108      	movs	r1, #8
 800a526:	4618      	mov	r0, r3
 800a528:	f002 ff53 	bl	800d3d2 <SDMMC_GetResponse>
 800a52c:	4602      	mov	r2, r0
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	210c      	movs	r1, #12
 800a538:	4618      	mov	r0, r3
 800a53a:	f002 ff4a 	bl	800d3d2 <SDMMC_GetResponse>
 800a53e:	4602      	mov	r2, r0
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d00d      	beq.n	800a568 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f107 020e 	add.w	r2, r7, #14
 800a554:	4611      	mov	r1, r2
 800a556:	4618      	mov	r0, r3
 800a558:	f003 f98f 	bl	800d87a <SDMMC_CmdSetRelAdd>
 800a55c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a55e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <SD_InitCard+0xac>
    {
      return errorstate;
 800a564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a566:	e063      	b.n	800a630 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d036      	beq.n	800a5de <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a570:	89fb      	ldrh	r3, [r7, #14]
 800a572:	461a      	mov	r2, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681a      	ldr	r2, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a580:	041b      	lsls	r3, r3, #16
 800a582:	4619      	mov	r1, r3
 800a584:	4610      	mov	r0, r2
 800a586:	f003 f958 	bl	800d83a <SDMMC_CmdSendCSD>
 800a58a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <SD_InitCard+0xda>
    {
      return errorstate;
 800a592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a594:	e04c      	b.n	800a630 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2100      	movs	r1, #0
 800a59c:	4618      	mov	r0, r3
 800a59e:	f002 ff18 	bl	800d3d2 <SDMMC_GetResponse>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2104      	movs	r1, #4
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f002 ff0f 	bl	800d3d2 <SDMMC_GetResponse>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2108      	movs	r1, #8
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f002 ff06 	bl	800d3d2 <SDMMC_GetResponse>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	210c      	movs	r1, #12
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f002 fefd 	bl	800d3d2 <SDMMC_GetResponse>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2104      	movs	r1, #4
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f002 fef4 	bl	800d3d2 <SDMMC_GetResponse>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	0d1a      	lsrs	r2, r3, #20
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a5f2:	f107 0310 	add.w	r3, r7, #16
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fc0f 	bl	8009e1c <HAL_SD_GetCardCSD>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a608:	e012      	b.n	800a630 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6819      	ldr	r1, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a612:	041b      	lsls	r3, r3, #16
 800a614:	f04f 0400 	mov.w	r4, #0
 800a618:	461a      	mov	r2, r3
 800a61a:	4623      	mov	r3, r4
 800a61c:	4608      	mov	r0, r1
 800a61e:	f003 f803 	bl	800d628 <SDMMC_CmdSelDesel>
 800a622:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d001      	beq.n	800a62e <SD_InitCard+0x172>
  {
    return errorstate;
 800a62a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a62c:	e000      	b.n	800a630 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a62e:	2300      	movs	r3, #0
}
 800a630:	4618      	mov	r0, r3
 800a632:	3744      	adds	r7, #68	; 0x44
 800a634:	46bd      	mov	sp, r7
 800a636:	bd90      	pop	{r4, r7, pc}

0800a638 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a640:	2300      	movs	r3, #0
 800a642:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]
 800a648:	2300      	movs	r3, #0
 800a64a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800a64c:	f7f7 fbea 	bl	8001e24 <HAL_GetTick>
 800a650:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f003 f80a 	bl	800d670 <SDMMC_CmdGoIdleState>
 800a65c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <SD_PowerON+0x30>
  {
    return errorstate;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	e0e9      	b.n	800a83c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f003 f81d 	bl	800d6ac <SDMMC_CmdOperCond>
 800a672:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00d      	beq.n	800a696 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4618      	mov	r0, r3
 800a686:	f002 fff3 	bl	800d670 <SDMMC_CmdGoIdleState>
 800a68a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <SD_PowerON+0x64>
    {
      return errorstate;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	e0d2      	b.n	800a83c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d137      	bne.n	800a714 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f003 f81e 	bl	800d6ec <SDMMC_CmdAppCommand>
 800a6b0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02d      	beq.n	800a714 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a6bc:	e0be      	b.n	800a83c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f003 f811 	bl	800d6ec <SDMMC_CmdAppCommand>
 800a6ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <SD_PowerON+0x9e>
    {
      return errorstate;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	e0b2      	b.n	800a83c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	495a      	ldr	r1, [pc, #360]	; (800a844 <SD_PowerON+0x20c>)
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f003 f828 	bl	800d732 <SDMMC_CmdAppOperCommand>
 800a6e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d002      	beq.n	800a6f0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a6ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a6ee:	e0a5      	b.n	800a83c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f002 fe6b 	bl	800d3d2 <SDMMC_GetResponse>
 800a6fc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	0fdb      	lsrs	r3, r3, #31
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <SD_PowerON+0xd2>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <SD_PowerON+0xd4>
 800a70a:	2300      	movs	r3, #0
 800a70c:	61bb      	str	r3, [r7, #24]

    count++;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d802      	bhi.n	800a724 <SD_PowerON+0xec>
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0cc      	beq.n	800a6be <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d902      	bls.n	800a734 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a72e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a732:	e083      	b.n	800a83c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d07d      	beq.n	800a83a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2201      	movs	r2, #1
 800a742:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	699b      	ldr	r3, [r3, #24]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d176      	bne.n	800a83a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d071      	beq.n	800a83a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a75c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f042 0208 	orr.w	r2, r2, #8
 800a76c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4618      	mov	r0, r3
 800a774:	f003 f8e8 	bl	800d948 <SDMMC_CmdVoltageSwitch>
 800a778:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00c      	beq.n	800a79a <SD_PowerON+0x162>
        {
          return errorstate;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	e05b      	b.n	800a83c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a784:	f7f7 fb4e 	bl	8001e24 <HAL_GetTick>
 800a788:	4602      	mov	r2, r0
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a792:	d102      	bne.n	800a79a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800a794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a798:	e050      	b.n	800a83c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7a8:	d1ec      	bne.n	800a784 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7c2:	d002      	beq.n	800a7ca <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800a7c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a7c8:	e038      	b.n	800a83c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	f7ff fb1a 	bl	8009e04 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0204 	orr.w	r2, r2, #4
 800a7de:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a7e0:	e00a      	b.n	800a7f8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7e2:	f7f7 fb1f 	bl	8001e24 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d102      	bne.n	800a7f8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800a7f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7f6:	e021      	b.n	800a83c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a806:	d1ec      	bne.n	800a7e2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800a810:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a81c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a820:	d102      	bne.n	800a828 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a822:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a826:	e009      	b.n	800a83c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2213      	movs	r2, #19
 800a82e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f04f 32ff 	mov.w	r2, #4294967295
 800a838:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	c1100000 	.word	0xc1100000

0800a848 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b08c      	sub	sp, #48	; 0x30
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a852:	f7f7 fae7 	bl	8001e24 <HAL_GetTick>
 800a856:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f002 fdb5 	bl	800d3d2 <SDMMC_GetResponse>
 800a868:	4603      	mov	r3, r0
 800a86a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a86e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a872:	d102      	bne.n	800a87a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a878:	e0b0      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2140      	movs	r1, #64	; 0x40
 800a880:	4618      	mov	r0, r3
 800a882:	f002 fde5 	bl	800d450 <SDMMC_CmdBlockLength>
 800a886:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a896:	6a3b      	ldr	r3, [r7, #32]
 800a898:	e0a0      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8a2:	041b      	lsls	r3, r3, #16
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	f002 ff20 	bl	800d6ec <SDMMC_CmdAppCommand>
 800a8ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8ae:	6a3b      	ldr	r3, [r7, #32]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d005      	beq.n	800a8c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	e08d      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a8c6:	2340      	movs	r3, #64	; 0x40
 800a8c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a8ca:	2360      	movs	r3, #96	; 0x60
 800a8cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f107 0208 	add.w	r2, r7, #8
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f002 fd87 	bl	800d3f8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f003 f808 	bl	800d904 <SDMMC_CmdStatusRegister>
 800a8f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d02b      	beq.n	800a954 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	e069      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a912:	2b00      	cmp	r3, #0
 800a914:	d013      	beq.n	800a93e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800a916:	2300      	movs	r3, #0
 800a918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a91a:	e00d      	b.n	800a938 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4618      	mov	r0, r3
 800a922:	f002 fce1 	bl	800d2e8 <SDMMC_ReadFIFO>
 800a926:	4602      	mov	r2, r0
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	601a      	str	r2, [r3, #0]
        pData++;
 800a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92e:	3304      	adds	r3, #4
 800a930:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800a932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a934:	3301      	adds	r3, #1
 800a936:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	2b07      	cmp	r3, #7
 800a93c:	d9ee      	bls.n	800a91c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a93e:	f7f7 fa71 	bl	8001e24 <HAL_GetTick>
 800a942:	4602      	mov	r2, r0
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	1ad3      	subs	r3, r2, r3
 800a948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a94c:	d102      	bne.n	800a954 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a94e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a952:	e043      	b.n	800a9dc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d0d2      	beq.n	800a908 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a970:	2308      	movs	r3, #8
 800a972:	e033      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d001      	beq.n	800a986 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a982:	2302      	movs	r3, #2
 800a984:	e02a      	b.n	800a9dc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a98c:	f003 0320 	and.w	r3, r3, #32
 800a990:	2b00      	cmp	r3, #0
 800a992:	d017      	beq.n	800a9c4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a994:	2320      	movs	r3, #32
 800a996:	e021      	b.n	800a9dc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f002 fca3 	bl	800d2e8 <SDMMC_ReadFIFO>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a6:	601a      	str	r2, [r3, #0]
    pData++;
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	3304      	adds	r3, #4
 800a9ac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a9ae:	f7f7 fa39 	bl	8001e24 <HAL_GetTick>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b6:	1ad3      	subs	r3, r2, r3
 800a9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9bc:	d102      	bne.n	800a9c4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a9be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9c2:	e00b      	b.n	800a9dc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d1e2      	bne.n	800a998 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4a03      	ldr	r2, [pc, #12]	; (800a9e4 <SD_SendSDStatus+0x19c>)
 800a9d8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3730      	adds	r7, #48	; 0x30
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}
 800a9e4:	18000f3a 	.word	0x18000f3a

0800a9e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
 800a9f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a9f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9fc:	e018      	b.n	800aa30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa06:	041b      	lsls	r3, r3, #16
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f002 ff57 	bl	800d8be <SDMMC_CmdSendStatus>
 800aa10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d001      	beq.n	800aa1c <SD_SendStatus+0x34>
  {
    return errorstate;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	e009      	b.n	800aa30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f002 fcd5 	bl	800d3d2 <SDMMC_GetResponse>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	2300      	movs	r3, #0
 800aa46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2100      	movs	r1, #0
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f002 fcbf 	bl	800d3d2 <SDMMC_GetResponse>
 800aa54:	4603      	mov	r3, r0
 800aa56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa5e:	d102      	bne.n	800aa66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa64:	e02f      	b.n	800aac6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa66:	f107 030c 	add.w	r3, r7, #12
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f879 	bl	800ab64 <SD_FindSCR>
 800aa72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	e023      	b.n	800aac6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01c      	beq.n	800aac2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa90:	041b      	lsls	r3, r3, #16
 800aa92:	4619      	mov	r1, r3
 800aa94:	4610      	mov	r0, r2
 800aa96:	f002 fe29 	bl	800d6ec <SDMMC_CmdAppCommand>
 800aa9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	e00f      	b.n	800aac6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2102      	movs	r1, #2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f002 fe60 	bl	800d772 <SDMMC_CmdBusWidth>
 800aab2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d001      	beq.n	800aabe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	e003      	b.n	800aac6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e001      	b.n	800aac6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aac2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b086      	sub	sp, #24
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	2300      	movs	r3, #0
 800aadc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	2100      	movs	r1, #0
 800aae4:	4618      	mov	r0, r3
 800aae6:	f002 fc74 	bl	800d3d2 <SDMMC_GetResponse>
 800aaea:	4603      	mov	r3, r0
 800aaec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaf4:	d102      	bne.n	800aafc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aaf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aafa:	e02f      	b.n	800ab5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aafc:	f107 030c 	add.w	r3, r7, #12
 800ab00:	4619      	mov	r1, r3
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f82e 	bl	800ab64 <SD_FindSCR>
 800ab08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	e023      	b.n	800ab5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d01c      	beq.n	800ab58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab26:	041b      	lsls	r3, r3, #16
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	f002 fdde 	bl	800d6ec <SDMMC_CmdAppCommand>
 800ab30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d001      	beq.n	800ab3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	e00f      	b.n	800ab5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f002 fe15 	bl	800d772 <SDMMC_CmdBusWidth>
 800ab48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	e003      	b.n	800ab5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e001      	b.n	800ab5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ab58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3718      	adds	r7, #24
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08e      	sub	sp, #56	; 0x38
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab6e:	f7f7 f959 	bl	8001e24 <HAL_GetTick>
 800ab72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ab78:	2300      	movs	r3, #0
 800ab7a:	60bb      	str	r3, [r7, #8]
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2108      	movs	r1, #8
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f002 fc60 	bl	800d450 <SDMMC_CmdBlockLength>
 800ab90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d001      	beq.n	800ab9c <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	e0ad      	b.n	800acf8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aba4:	041b      	lsls	r3, r3, #16
 800aba6:	4619      	mov	r1, r3
 800aba8:	4610      	mov	r0, r2
 800abaa:	f002 fd9f 	bl	800d6ec <SDMMC_CmdAppCommand>
 800abae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <SD_FindSCR+0x56>
  {
    return errorstate;
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	e09e      	b.n	800acf8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abba:	f04f 33ff 	mov.w	r3, #4294967295
 800abbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800abc0:	2308      	movs	r3, #8
 800abc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800abc4:	2330      	movs	r3, #48	; 0x30
 800abc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800abc8:	2302      	movs	r3, #2
 800abca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800abcc:	2300      	movs	r3, #0
 800abce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800abd0:	2301      	movs	r3, #1
 800abd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f107 0210 	add.w	r2, r7, #16
 800abdc:	4611      	mov	r1, r2
 800abde:	4618      	mov	r0, r3
 800abe0:	f002 fc0a 	bl	800d3f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4618      	mov	r0, r3
 800abea:	f002 fde5 	bl	800d7b8 <SDMMC_CmdSendSCR>
 800abee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d027      	beq.n	800ac46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800abf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf8:	e07e      	b.n	800acf8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d113      	bne.n	800ac30 <SD_FindSCR+0xcc>
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d110      	bne.n	800ac30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f002 fb68 	bl	800d2e8 <SDMMC_ReadFIFO>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4618      	mov	r0, r3
 800ac22:	f002 fb61 	bl	800d2e8 <SDMMC_ReadFIFO>
 800ac26:	4603      	mov	r3, r0
 800ac28:	60fb      	str	r3, [r7, #12]
      index++;
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ac30:	f7f7 f8f8 	bl	8001e24 <HAL_GetTick>
 800ac34:	4602      	mov	r2, r0
 800ac36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac3e:	d102      	bne.n	800ac46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ac40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac44:	e058      	b.n	800acf8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac4c:	f240 532a 	movw	r3, #1322	; 0x52a
 800ac50:	4013      	ands	r3, r2
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d0d1      	beq.n	800abfa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d005      	beq.n	800ac70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2208      	movs	r2, #8
 800ac6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac6c:	2308      	movs	r3, #8
 800ac6e:	e043      	b.n	800acf8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	2202      	movs	r2, #2
 800ac84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac86:	2302      	movs	r3, #2
 800ac88:	e036      	b.n	800acf8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d005      	beq.n	800aca4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2220      	movs	r2, #32
 800ac9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aca0:	2320      	movs	r3, #32
 800aca2:	e029      	b.n	800acf8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a15      	ldr	r2, [pc, #84]	; (800ad00 <SD_FindSCR+0x19c>)
 800acaa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	061a      	lsls	r2, r3, #24
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	021b      	lsls	r3, r3, #8
 800acb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800acb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	0a1b      	lsrs	r3, r3, #8
 800acbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800acc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	0e1b      	lsrs	r3, r3, #24
 800acc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800acca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800accc:	601a      	str	r2, [r3, #0]
    scr++;
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	3304      	adds	r3, #4
 800acd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	061a      	lsls	r2, r3, #24
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ace0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	0a1b      	lsrs	r3, r3, #8
 800ace6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	0e1b      	lsrs	r3, r3, #24
 800acf0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800acf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3738      	adds	r7, #56	; 0x38
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	18000f3a 	.word	0x18000f3a

0800ad04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b082      	sub	sp, #8
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d101      	bne.n	800ad16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e049      	b.n	800adaa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d106      	bne.n	800ad30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f7f6 fe4a 	bl	80019c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2202      	movs	r2, #2
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4619      	mov	r1, r3
 800ad42:	4610      	mov	r0, r2
 800ad44:	f000 fc8e 	bl	800b664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ada8:	2300      	movs	r3, #0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b085      	sub	sp, #20
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	2b01      	cmp	r3, #1
 800adc6:	d001      	beq.n	800adcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e021      	b.n	800ae10 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f042 0201 	orr.w	r2, r2, #1
 800ade2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <HAL_TIM_Base_Start_IT+0x68>)
 800adec:	4013      	ands	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	2b06      	cmp	r3, #6
 800adf4:	d00b      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x5a>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfc:	d007      	beq.n	800ae0e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f042 0201 	orr.w	r2, r2, #1
 800ae0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	00010007 	.word	0x00010007

0800ae20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e049      	b.n	800aec6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d106      	bne.n	800ae4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f841 	bl	800aece <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3304      	adds	r3, #4
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	4610      	mov	r0, r2
 800ae60:	f000 fc00 	bl	800b664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <HAL_TIM_PWM_Start+0x24>
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	bf14      	ite	ne
 800af00:	2301      	movne	r3, #1
 800af02:	2300      	moveq	r3, #0
 800af04:	b2db      	uxtb	r3, r3
 800af06:	e03c      	b.n	800af82 <HAL_TIM_PWM_Start+0x9e>
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	2b04      	cmp	r3, #4
 800af0c:	d109      	bne.n	800af22 <HAL_TIM_PWM_Start+0x3e>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af14:	b2db      	uxtb	r3, r3
 800af16:	2b01      	cmp	r3, #1
 800af18:	bf14      	ite	ne
 800af1a:	2301      	movne	r3, #1
 800af1c:	2300      	moveq	r3, #0
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	e02f      	b.n	800af82 <HAL_TIM_PWM_Start+0x9e>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	2b08      	cmp	r3, #8
 800af26:	d109      	bne.n	800af3c <HAL_TIM_PWM_Start+0x58>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af2e:	b2db      	uxtb	r3, r3
 800af30:	2b01      	cmp	r3, #1
 800af32:	bf14      	ite	ne
 800af34:	2301      	movne	r3, #1
 800af36:	2300      	moveq	r3, #0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	e022      	b.n	800af82 <HAL_TIM_PWM_Start+0x9e>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b0c      	cmp	r3, #12
 800af40:	d109      	bne.n	800af56 <HAL_TIM_PWM_Start+0x72>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	bf14      	ite	ne
 800af4e:	2301      	movne	r3, #1
 800af50:	2300      	moveq	r3, #0
 800af52:	b2db      	uxtb	r3, r3
 800af54:	e015      	b.n	800af82 <HAL_TIM_PWM_Start+0x9e>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b10      	cmp	r3, #16
 800af5a:	d109      	bne.n	800af70 <HAL_TIM_PWM_Start+0x8c>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	e008      	b.n	800af82 <HAL_TIM_PWM_Start+0x9e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800af76:	b2db      	uxtb	r3, r3
 800af78:	2b01      	cmp	r3, #1
 800af7a:	bf14      	ite	ne
 800af7c:	2301      	movne	r3, #1
 800af7e:	2300      	moveq	r3, #0
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e06e      	b.n	800b068 <HAL_TIM_PWM_Start+0x184>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d104      	bne.n	800af9a <HAL_TIM_PWM_Start+0xb6>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2202      	movs	r2, #2
 800af94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af98:	e023      	b.n	800afe2 <HAL_TIM_PWM_Start+0xfe>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	2b04      	cmp	r3, #4
 800af9e:	d104      	bne.n	800afaa <HAL_TIM_PWM_Start+0xc6>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800afa8:	e01b      	b.n	800afe2 <HAL_TIM_PWM_Start+0xfe>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b08      	cmp	r3, #8
 800afae:	d104      	bne.n	800afba <HAL_TIM_PWM_Start+0xd6>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2202      	movs	r2, #2
 800afb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800afb8:	e013      	b.n	800afe2 <HAL_TIM_PWM_Start+0xfe>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	2b0c      	cmp	r3, #12
 800afbe:	d104      	bne.n	800afca <HAL_TIM_PWM_Start+0xe6>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800afc8:	e00b      	b.n	800afe2 <HAL_TIM_PWM_Start+0xfe>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	2b10      	cmp	r3, #16
 800afce:	d104      	bne.n	800afda <HAL_TIM_PWM_Start+0xf6>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800afd8:	e003      	b.n	800afe2 <HAL_TIM_PWM_Start+0xfe>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2201      	movs	r2, #1
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	4618      	mov	r0, r3
 800afec:	f000 fea2 	bl	800bd34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a1e      	ldr	r2, [pc, #120]	; (800b070 <HAL_TIM_PWM_Start+0x18c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d013      	beq.n	800b022 <HAL_TIM_PWM_Start+0x13e>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a1d      	ldr	r2, [pc, #116]	; (800b074 <HAL_TIM_PWM_Start+0x190>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d00e      	beq.n	800b022 <HAL_TIM_PWM_Start+0x13e>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a1b      	ldr	r2, [pc, #108]	; (800b078 <HAL_TIM_PWM_Start+0x194>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d009      	beq.n	800b022 <HAL_TIM_PWM_Start+0x13e>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a1a      	ldr	r2, [pc, #104]	; (800b07c <HAL_TIM_PWM_Start+0x198>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d004      	beq.n	800b022 <HAL_TIM_PWM_Start+0x13e>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a18      	ldr	r2, [pc, #96]	; (800b080 <HAL_TIM_PWM_Start+0x19c>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d101      	bne.n	800b026 <HAL_TIM_PWM_Start+0x142>
 800b022:	2301      	movs	r3, #1
 800b024:	e000      	b.n	800b028 <HAL_TIM_PWM_Start+0x144>
 800b026:	2300      	movs	r3, #0
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d007      	beq.n	800b03c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b03a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	689a      	ldr	r2, [r3, #8]
 800b042:	4b10      	ldr	r3, [pc, #64]	; (800b084 <HAL_TIM_PWM_Start+0x1a0>)
 800b044:	4013      	ands	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b06      	cmp	r3, #6
 800b04c:	d00b      	beq.n	800b066 <HAL_TIM_PWM_Start+0x182>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b054:	d007      	beq.n	800b066 <HAL_TIM_PWM_Start+0x182>
  {
    __HAL_TIM_ENABLE(htim);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f042 0201 	orr.w	r2, r2, #1
 800b064:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}
 800b070:	40010000 	.word	0x40010000
 800b074:	40010400 	.word	0x40010400
 800b078:	40014000 	.word	0x40014000
 800b07c:	40014400 	.word	0x40014400
 800b080:	40014800 	.word	0x40014800
 800b084:	00010007 	.word	0x00010007

0800b088 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2200      	movs	r2, #0
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f000 fe4a 	bl	800bd34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a3e      	ldr	r2, [pc, #248]	; (800b1a0 <HAL_TIM_PWM_Stop+0x118>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d013      	beq.n	800b0d2 <HAL_TIM_PWM_Stop+0x4a>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a3d      	ldr	r2, [pc, #244]	; (800b1a4 <HAL_TIM_PWM_Stop+0x11c>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00e      	beq.n	800b0d2 <HAL_TIM_PWM_Stop+0x4a>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a3b      	ldr	r2, [pc, #236]	; (800b1a8 <HAL_TIM_PWM_Stop+0x120>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d009      	beq.n	800b0d2 <HAL_TIM_PWM_Stop+0x4a>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a3a      	ldr	r2, [pc, #232]	; (800b1ac <HAL_TIM_PWM_Stop+0x124>)
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d004      	beq.n	800b0d2 <HAL_TIM_PWM_Stop+0x4a>
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a38      	ldr	r2, [pc, #224]	; (800b1b0 <HAL_TIM_PWM_Stop+0x128>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d101      	bne.n	800b0d6 <HAL_TIM_PWM_Stop+0x4e>
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e000      	b.n	800b0d8 <HAL_TIM_PWM_Stop+0x50>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d017      	beq.n	800b10c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	6a1a      	ldr	r2, [r3, #32]
 800b0e2:	f241 1311 	movw	r3, #4369	; 0x1111
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d10f      	bne.n	800b10c <HAL_TIM_PWM_Stop+0x84>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6a1a      	ldr	r2, [r3, #32]
 800b0f2:	f240 4344 	movw	r3, #1092	; 0x444
 800b0f6:	4013      	ands	r3, r2
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d107      	bne.n	800b10c <HAL_TIM_PWM_Stop+0x84>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b10a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6a1a      	ldr	r2, [r3, #32]
 800b112:	f241 1311 	movw	r3, #4369	; 0x1111
 800b116:	4013      	ands	r3, r2
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d10f      	bne.n	800b13c <HAL_TIM_PWM_Stop+0xb4>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6a1a      	ldr	r2, [r3, #32]
 800b122:	f240 4344 	movw	r3, #1092	; 0x444
 800b126:	4013      	ands	r3, r2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d107      	bne.n	800b13c <HAL_TIM_PWM_Stop+0xb4>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f022 0201 	bic.w	r2, r2, #1
 800b13a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d104      	bne.n	800b14c <HAL_TIM_PWM_Stop+0xc4>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2201      	movs	r2, #1
 800b146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b14a:	e023      	b.n	800b194 <HAL_TIM_PWM_Stop+0x10c>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d104      	bne.n	800b15c <HAL_TIM_PWM_Stop+0xd4>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b15a:	e01b      	b.n	800b194 <HAL_TIM_PWM_Stop+0x10c>
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b08      	cmp	r3, #8
 800b160:	d104      	bne.n	800b16c <HAL_TIM_PWM_Stop+0xe4>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b16a:	e013      	b.n	800b194 <HAL_TIM_PWM_Stop+0x10c>
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	2b0c      	cmp	r3, #12
 800b170:	d104      	bne.n	800b17c <HAL_TIM_PWM_Stop+0xf4>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b17a:	e00b      	b.n	800b194 <HAL_TIM_PWM_Stop+0x10c>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b10      	cmp	r3, #16
 800b180:	d104      	bne.n	800b18c <HAL_TIM_PWM_Stop+0x104>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b18a:	e003      	b.n	800b194 <HAL_TIM_PWM_Stop+0x10c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	40010000 	.word	0x40010000
 800b1a4:	40010400 	.word	0x40010400
 800b1a8:	40014000 	.word	0x40014000
 800b1ac:	40014400 	.word	0x40014400
 800b1b0:	40014800 	.word	0x40014800

0800b1b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b02      	cmp	r3, #2
 800b1c8:	d122      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f003 0302 	and.w	r3, r3, #2
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d11b      	bne.n	800b210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f06f 0202 	mvn.w	r2, #2
 800b1e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d003      	beq.n	800b1fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fa16 	bl	800b628 <HAL_TIM_IC_CaptureCallback>
 800b1fc:	e005      	b.n	800b20a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fa08 	bl	800b614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fa19 	bl	800b63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0304 	and.w	r3, r3, #4
 800b21a:	2b04      	cmp	r3, #4
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0304 	and.w	r3, r3, #4
 800b228:	2b04      	cmp	r3, #4
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0204 	mvn.w	r2, #4
 800b234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f9ec 	bl	800b628 <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f9de 	bl	800b614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f9ef 	bl	800b63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0308 	and.w	r3, r3, #8
 800b26e:	2b08      	cmp	r3, #8
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0308 	and.w	r3, r3, #8
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0208 	mvn.w	r2, #8
 800b288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2204      	movs	r2, #4
 800b28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	69db      	ldr	r3, [r3, #28]
 800b296:	f003 0303 	and.w	r3, r3, #3
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9c2 	bl	800b628 <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9b4 	bl	800b614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f9c5 	bl	800b63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	2b10      	cmp	r3, #16
 800b2c4:	d122      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0310 	and.w	r3, r3, #16
 800b2d0:	2b10      	cmp	r3, #16
 800b2d2:	d11b      	bne.n	800b30c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0210 	mvn.w	r2, #16
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2208      	movs	r2, #8
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f998 	bl	800b628 <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f98a 	bl	800b614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f99b 	bl	800b63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	2b01      	cmp	r3, #1
 800b318:	d10e      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 0301 	and.w	r3, r3, #1
 800b324:	2b01      	cmp	r3, #1
 800b326:	d107      	bne.n	800b338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0201 	mvn.w	r2, #1
 800b330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7f6 f8ee 	bl	8001514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b342:	2b80      	cmp	r3, #128	; 0x80
 800b344:	d10e      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b350:	2b80      	cmp	r3, #128	; 0x80
 800b352:	d107      	bne.n	800b364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b35c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fd96 	bl	800be90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b36e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b372:	d10e      	bne.n	800b392 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68db      	ldr	r3, [r3, #12]
 800b37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b37e:	2b80      	cmp	r3, #128	; 0x80
 800b380:	d107      	bne.n	800b392 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fd89 	bl	800bea4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b39c:	2b40      	cmp	r3, #64	; 0x40
 800b39e:	d10e      	bne.n	800b3be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3aa:	2b40      	cmp	r3, #64	; 0x40
 800b3ac:	d107      	bne.n	800b3be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b3b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 f949 	bl	800b650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	f003 0320 	and.w	r3, r3, #32
 800b3c8:	2b20      	cmp	r3, #32
 800b3ca:	d10e      	bne.n	800b3ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	f003 0320 	and.w	r3, r3, #32
 800b3d6:	2b20      	cmp	r3, #32
 800b3d8:	d107      	bne.n	800b3ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f06f 0220 	mvn.w	r2, #32
 800b3e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fd49 	bl	800be7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	3708      	adds	r7, #8
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
	...

0800b3f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e0fd      	b.n	800b60a <HAL_TIM_PWM_ConfigChannel+0x216>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2b14      	cmp	r3, #20
 800b41a:	f200 80f0 	bhi.w	800b5fe <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b41e:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b424:	0800b479 	.word	0x0800b479
 800b428:	0800b5ff 	.word	0x0800b5ff
 800b42c:	0800b5ff 	.word	0x0800b5ff
 800b430:	0800b5ff 	.word	0x0800b5ff
 800b434:	0800b4b9 	.word	0x0800b4b9
 800b438:	0800b5ff 	.word	0x0800b5ff
 800b43c:	0800b5ff 	.word	0x0800b5ff
 800b440:	0800b5ff 	.word	0x0800b5ff
 800b444:	0800b4fb 	.word	0x0800b4fb
 800b448:	0800b5ff 	.word	0x0800b5ff
 800b44c:	0800b5ff 	.word	0x0800b5ff
 800b450:	0800b5ff 	.word	0x0800b5ff
 800b454:	0800b53b 	.word	0x0800b53b
 800b458:	0800b5ff 	.word	0x0800b5ff
 800b45c:	0800b5ff 	.word	0x0800b5ff
 800b460:	0800b5ff 	.word	0x0800b5ff
 800b464:	0800b57d 	.word	0x0800b57d
 800b468:	0800b5ff 	.word	0x0800b5ff
 800b46c:	0800b5ff 	.word	0x0800b5ff
 800b470:	0800b5ff 	.word	0x0800b5ff
 800b474:	0800b5bd 	.word	0x0800b5bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 f98a 	bl	800b798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0208 	orr.w	r2, r2, #8
 800b492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	699a      	ldr	r2, [r3, #24]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f022 0204 	bic.w	r2, r2, #4
 800b4a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	6999      	ldr	r1, [r3, #24]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	691a      	ldr	r2, [r3, #16]
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	619a      	str	r2, [r3, #24]
      break;
 800b4b6:	e0a3      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68b9      	ldr	r1, [r7, #8]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 f9fa 	bl	800b8b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b4d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	699a      	ldr	r2, [r3, #24]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	6999      	ldr	r1, [r3, #24]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	021a      	lsls	r2, r3, #8
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	430a      	orrs	r2, r1
 800b4f6:	619a      	str	r2, [r3, #24]
      break;
 800b4f8:	e082      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68b9      	ldr	r1, [r7, #8]
 800b500:	4618      	mov	r0, r3
 800b502:	f000 fa63 	bl	800b9cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	69da      	ldr	r2, [r3, #28]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f042 0208 	orr.w	r2, r2, #8
 800b514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	69da      	ldr	r2, [r3, #28]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f022 0204 	bic.w	r2, r2, #4
 800b524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	69d9      	ldr	r1, [r3, #28]
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	691a      	ldr	r2, [r3, #16]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	430a      	orrs	r2, r1
 800b536:	61da      	str	r2, [r3, #28]
      break;
 800b538:	e062      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68b9      	ldr	r1, [r7, #8]
 800b540:	4618      	mov	r0, r3
 800b542:	f000 fac9 	bl	800bad8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	69da      	ldr	r2, [r3, #28]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	69da      	ldr	r2, [r3, #28]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	69d9      	ldr	r1, [r3, #28]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	021a      	lsls	r2, r3, #8
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	430a      	orrs	r2, r1
 800b578:	61da      	str	r2, [r3, #28]
      break;
 800b57a:	e041      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 fb10 	bl	800bba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0208 	orr.w	r2, r2, #8
 800b596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f022 0204 	bic.w	r2, r2, #4
 800b5a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	691a      	ldr	r2, [r3, #16]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	430a      	orrs	r2, r1
 800b5b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5ba:	e021      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	68b9      	ldr	r1, [r7, #8]
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f000 fb52 	bl	800bc6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b5d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	021a      	lsls	r2, r3, #8
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b5fc:	e000      	b.n	800b600 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b5fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop

0800b614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b61c:	bf00      	nop
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b630:	bf00      	nop
 800b632:	370c      	adds	r7, #12
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b650:	b480      	push	{r7}
 800b652:	b083      	sub	sp, #12
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b658:	bf00      	nop
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a40      	ldr	r2, [pc, #256]	; (800b778 <TIM_Base_SetConfig+0x114>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d013      	beq.n	800b6a4 <TIM_Base_SetConfig+0x40>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b682:	d00f      	beq.n	800b6a4 <TIM_Base_SetConfig+0x40>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a3d      	ldr	r2, [pc, #244]	; (800b77c <TIM_Base_SetConfig+0x118>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d00b      	beq.n	800b6a4 <TIM_Base_SetConfig+0x40>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a3c      	ldr	r2, [pc, #240]	; (800b780 <TIM_Base_SetConfig+0x11c>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d007      	beq.n	800b6a4 <TIM_Base_SetConfig+0x40>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	4a3b      	ldr	r2, [pc, #236]	; (800b784 <TIM_Base_SetConfig+0x120>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d003      	beq.n	800b6a4 <TIM_Base_SetConfig+0x40>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	4a3a      	ldr	r2, [pc, #232]	; (800b788 <TIM_Base_SetConfig+0x124>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d108      	bne.n	800b6b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	68fa      	ldr	r2, [r7, #12]
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a2f      	ldr	r2, [pc, #188]	; (800b778 <TIM_Base_SetConfig+0x114>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d01f      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c4:	d01b      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4a2c      	ldr	r2, [pc, #176]	; (800b77c <TIM_Base_SetConfig+0x118>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d017      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a2b      	ldr	r2, [pc, #172]	; (800b780 <TIM_Base_SetConfig+0x11c>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d013      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a2a      	ldr	r2, [pc, #168]	; (800b784 <TIM_Base_SetConfig+0x120>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00f      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	4a29      	ldr	r2, [pc, #164]	; (800b788 <TIM_Base_SetConfig+0x124>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00b      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	4a28      	ldr	r2, [pc, #160]	; (800b78c <TIM_Base_SetConfig+0x128>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d007      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	4a27      	ldr	r2, [pc, #156]	; (800b790 <TIM_Base_SetConfig+0x12c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d003      	beq.n	800b6fe <TIM_Base_SetConfig+0x9a>
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a26      	ldr	r2, [pc, #152]	; (800b794 <TIM_Base_SetConfig+0x130>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d108      	bne.n	800b710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	695b      	ldr	r3, [r3, #20]
 800b71a:	4313      	orrs	r3, r2
 800b71c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4a10      	ldr	r2, [pc, #64]	; (800b778 <TIM_Base_SetConfig+0x114>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00f      	beq.n	800b75c <TIM_Base_SetConfig+0xf8>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	4a12      	ldr	r2, [pc, #72]	; (800b788 <TIM_Base_SetConfig+0x124>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d00b      	beq.n	800b75c <TIM_Base_SetConfig+0xf8>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a11      	ldr	r2, [pc, #68]	; (800b78c <TIM_Base_SetConfig+0x128>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d007      	beq.n	800b75c <TIM_Base_SetConfig+0xf8>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a10      	ldr	r2, [pc, #64]	; (800b790 <TIM_Base_SetConfig+0x12c>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d003      	beq.n	800b75c <TIM_Base_SetConfig+0xf8>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a0f      	ldr	r2, [pc, #60]	; (800b794 <TIM_Base_SetConfig+0x130>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d103      	bne.n	800b764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	691a      	ldr	r2, [r3, #16]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2201      	movs	r2, #1
 800b768:	615a      	str	r2, [r3, #20]
}
 800b76a:	bf00      	nop
 800b76c:	3714      	adds	r7, #20
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	40010000 	.word	0x40010000
 800b77c:	40000400 	.word	0x40000400
 800b780:	40000800 	.word	0x40000800
 800b784:	40000c00 	.word	0x40000c00
 800b788:	40010400 	.word	0x40010400
 800b78c:	40014000 	.word	0x40014000
 800b790:	40014400 	.word	0x40014400
 800b794:	40014800 	.word	0x40014800

0800b798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b798:	b480      	push	{r7}
 800b79a:	b087      	sub	sp, #28
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a1b      	ldr	r3, [r3, #32]
 800b7a6:	f023 0201 	bic.w	r2, r3, #1
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	699b      	ldr	r3, [r3, #24]
 800b7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	4b37      	ldr	r3, [pc, #220]	; (800b8a0 <TIM_OC1_SetConfig+0x108>)
 800b7c4:	4013      	ands	r3, r2
 800b7c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f023 0303 	bic.w	r3, r3, #3
 800b7ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	4313      	orrs	r3, r2
 800b7d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f023 0302 	bic.w	r3, r3, #2
 800b7e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	4313      	orrs	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	4a2d      	ldr	r2, [pc, #180]	; (800b8a4 <TIM_OC1_SetConfig+0x10c>)
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	d00f      	beq.n	800b814 <TIM_OC1_SetConfig+0x7c>
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	4a2c      	ldr	r2, [pc, #176]	; (800b8a8 <TIM_OC1_SetConfig+0x110>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d00b      	beq.n	800b814 <TIM_OC1_SetConfig+0x7c>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	4a2b      	ldr	r2, [pc, #172]	; (800b8ac <TIM_OC1_SetConfig+0x114>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d007      	beq.n	800b814 <TIM_OC1_SetConfig+0x7c>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	4a2a      	ldr	r2, [pc, #168]	; (800b8b0 <TIM_OC1_SetConfig+0x118>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d003      	beq.n	800b814 <TIM_OC1_SetConfig+0x7c>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a29      	ldr	r2, [pc, #164]	; (800b8b4 <TIM_OC1_SetConfig+0x11c>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d10c      	bne.n	800b82e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	f023 0308 	bic.w	r3, r3, #8
 800b81a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f023 0304 	bic.w	r3, r3, #4
 800b82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a1c      	ldr	r2, [pc, #112]	; (800b8a4 <TIM_OC1_SetConfig+0x10c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d00f      	beq.n	800b856 <TIM_OC1_SetConfig+0xbe>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a1b      	ldr	r2, [pc, #108]	; (800b8a8 <TIM_OC1_SetConfig+0x110>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d00b      	beq.n	800b856 <TIM_OC1_SetConfig+0xbe>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4a1a      	ldr	r2, [pc, #104]	; (800b8ac <TIM_OC1_SetConfig+0x114>)
 800b842:	4293      	cmp	r3, r2
 800b844:	d007      	beq.n	800b856 <TIM_OC1_SetConfig+0xbe>
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	4a19      	ldr	r2, [pc, #100]	; (800b8b0 <TIM_OC1_SetConfig+0x118>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d003      	beq.n	800b856 <TIM_OC1_SetConfig+0xbe>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	4a18      	ldr	r2, [pc, #96]	; (800b8b4 <TIM_OC1_SetConfig+0x11c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d111      	bne.n	800b87a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b85c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	693a      	ldr	r2, [r7, #16]
 800b876:	4313      	orrs	r3, r2
 800b878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	693a      	ldr	r2, [r7, #16]
 800b87e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	685a      	ldr	r2, [r3, #4]
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	697a      	ldr	r2, [r7, #20]
 800b892:	621a      	str	r2, [r3, #32]
}
 800b894:	bf00      	nop
 800b896:	371c      	adds	r7, #28
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr
 800b8a0:	fffeff8f 	.word	0xfffeff8f
 800b8a4:	40010000 	.word	0x40010000
 800b8a8:	40010400 	.word	0x40010400
 800b8ac:	40014000 	.word	0x40014000
 800b8b0:	40014400 	.word	0x40014400
 800b8b4:	40014800 	.word	0x40014800

0800b8b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b087      	sub	sp, #28
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a1b      	ldr	r3, [r3, #32]
 800b8c6:	f023 0210 	bic.w	r2, r3, #16
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	685b      	ldr	r3, [r3, #4]
 800b8d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	4b34      	ldr	r3, [pc, #208]	; (800b9b4 <TIM_OC2_SetConfig+0xfc>)
 800b8e4:	4013      	ands	r3, r2
 800b8e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	021b      	lsls	r3, r3, #8
 800b8f6:	68fa      	ldr	r2, [r7, #12]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f023 0320 	bic.w	r3, r3, #32
 800b902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	011b      	lsls	r3, r3, #4
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4a29      	ldr	r2, [pc, #164]	; (800b9b8 <TIM_OC2_SetConfig+0x100>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d003      	beq.n	800b920 <TIM_OC2_SetConfig+0x68>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a28      	ldr	r2, [pc, #160]	; (800b9bc <TIM_OC2_SetConfig+0x104>)
 800b91c:	4293      	cmp	r3, r2
 800b91e:	d10d      	bne.n	800b93c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4313      	orrs	r3, r2
 800b932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b93a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	4a1e      	ldr	r2, [pc, #120]	; (800b9b8 <TIM_OC2_SetConfig+0x100>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d00f      	beq.n	800b964 <TIM_OC2_SetConfig+0xac>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	4a1d      	ldr	r2, [pc, #116]	; (800b9bc <TIM_OC2_SetConfig+0x104>)
 800b948:	4293      	cmp	r3, r2
 800b94a:	d00b      	beq.n	800b964 <TIM_OC2_SetConfig+0xac>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4a1c      	ldr	r2, [pc, #112]	; (800b9c0 <TIM_OC2_SetConfig+0x108>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d007      	beq.n	800b964 <TIM_OC2_SetConfig+0xac>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	4a1b      	ldr	r2, [pc, #108]	; (800b9c4 <TIM_OC2_SetConfig+0x10c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d003      	beq.n	800b964 <TIM_OC2_SetConfig+0xac>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a1a      	ldr	r2, [pc, #104]	; (800b9c8 <TIM_OC2_SetConfig+0x110>)
 800b960:	4293      	cmp	r3, r2
 800b962:	d113      	bne.n	800b98c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b96a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	4313      	orrs	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	621a      	str	r2, [r3, #32]
}
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
 800b9b2:	bf00      	nop
 800b9b4:	feff8fff 	.word	0xfeff8fff
 800b9b8:	40010000 	.word	0x40010000
 800b9bc:	40010400 	.word	0x40010400
 800b9c0:	40014000 	.word	0x40014000
 800b9c4:	40014400 	.word	0x40014400
 800b9c8:	40014800 	.word	0x40014800

0800b9cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b087      	sub	sp, #28
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6a1b      	ldr	r3, [r3, #32]
 800b9e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	69db      	ldr	r3, [r3, #28]
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 0303 	bic.w	r3, r3, #3
 800ba02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	021b      	lsls	r3, r3, #8
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	4a27      	ldr	r2, [pc, #156]	; (800bac4 <TIM_OC3_SetConfig+0xf8>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d003      	beq.n	800ba32 <TIM_OC3_SetConfig+0x66>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	4a26      	ldr	r2, [pc, #152]	; (800bac8 <TIM_OC3_SetConfig+0xfc>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d10d      	bne.n	800ba4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ba38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	021b      	lsls	r3, r3, #8
 800ba40:	697a      	ldr	r2, [r7, #20]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ba4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <TIM_OC3_SetConfig+0xf8>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d00f      	beq.n	800ba76 <TIM_OC3_SetConfig+0xaa>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a1b      	ldr	r2, [pc, #108]	; (800bac8 <TIM_OC3_SetConfig+0xfc>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d00b      	beq.n	800ba76 <TIM_OC3_SetConfig+0xaa>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a1a      	ldr	r2, [pc, #104]	; (800bacc <TIM_OC3_SetConfig+0x100>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d007      	beq.n	800ba76 <TIM_OC3_SetConfig+0xaa>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a19      	ldr	r2, [pc, #100]	; (800bad0 <TIM_OC3_SetConfig+0x104>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d003      	beq.n	800ba76 <TIM_OC3_SetConfig+0xaa>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a18      	ldr	r2, [pc, #96]	; (800bad4 <TIM_OC3_SetConfig+0x108>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d113      	bne.n	800ba9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ba84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	695b      	ldr	r3, [r3, #20]
 800ba8a:	011b      	lsls	r3, r3, #4
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	693a      	ldr	r2, [r7, #16]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	685a      	ldr	r2, [r3, #4]
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	697a      	ldr	r2, [r7, #20]
 800bab6:	621a      	str	r2, [r3, #32]
}
 800bab8:	bf00      	nop
 800baba:	371c      	adds	r7, #28
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	40010000 	.word	0x40010000
 800bac8:	40010400 	.word	0x40010400
 800bacc:	40014000 	.word	0x40014000
 800bad0:	40014400 	.word	0x40014400
 800bad4:	40014800 	.word	0x40014800

0800bad8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bad8:	b480      	push	{r7}
 800bada:	b087      	sub	sp, #28
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	685b      	ldr	r3, [r3, #4]
 800baf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	69db      	ldr	r3, [r3, #28]
 800bafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	021b      	lsls	r3, r3, #8
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	689b      	ldr	r3, [r3, #8]
 800bb28:	031b      	lsls	r3, r3, #12
 800bb2a:	693a      	ldr	r2, [r7, #16]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	4a18      	ldr	r2, [pc, #96]	; (800bb94 <TIM_OC4_SetConfig+0xbc>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d00f      	beq.n	800bb58 <TIM_OC4_SetConfig+0x80>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a17      	ldr	r2, [pc, #92]	; (800bb98 <TIM_OC4_SetConfig+0xc0>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d00b      	beq.n	800bb58 <TIM_OC4_SetConfig+0x80>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a16      	ldr	r2, [pc, #88]	; (800bb9c <TIM_OC4_SetConfig+0xc4>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d007      	beq.n	800bb58 <TIM_OC4_SetConfig+0x80>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a15      	ldr	r2, [pc, #84]	; (800bba0 <TIM_OC4_SetConfig+0xc8>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d003      	beq.n	800bb58 <TIM_OC4_SetConfig+0x80>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	4a14      	ldr	r2, [pc, #80]	; (800bba4 <TIM_OC4_SetConfig+0xcc>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d109      	bne.n	800bb6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	019b      	lsls	r3, r3, #6
 800bb66:	697a      	ldr	r2, [r7, #20]
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	68fa      	ldr	r2, [r7, #12]
 800bb76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	693a      	ldr	r2, [r7, #16]
 800bb84:	621a      	str	r2, [r3, #32]
}
 800bb86:	bf00      	nop
 800bb88:	371c      	adds	r7, #28
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	40010000 	.word	0x40010000
 800bb98:	40010400 	.word	0x40010400
 800bb9c:	40014000 	.word	0x40014000
 800bba0:	40014400 	.word	0x40014400
 800bba4:	40014800 	.word	0x40014800

0800bba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b087      	sub	sp, #28
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6a1b      	ldr	r3, [r3, #32]
 800bbc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	685b      	ldr	r3, [r3, #4]
 800bbc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68fa      	ldr	r2, [r7, #12]
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bbe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	689b      	ldr	r3, [r3, #8]
 800bbee:	041b      	lsls	r3, r3, #16
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <TIM_OC5_SetConfig+0xb0>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00f      	beq.n	800bc1e <TIM_OC5_SetConfig+0x76>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a16      	ldr	r2, [pc, #88]	; (800bc5c <TIM_OC5_SetConfig+0xb4>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d00b      	beq.n	800bc1e <TIM_OC5_SetConfig+0x76>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a15      	ldr	r2, [pc, #84]	; (800bc60 <TIM_OC5_SetConfig+0xb8>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d007      	beq.n	800bc1e <TIM_OC5_SetConfig+0x76>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4a14      	ldr	r2, [pc, #80]	; (800bc64 <TIM_OC5_SetConfig+0xbc>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d003      	beq.n	800bc1e <TIM_OC5_SetConfig+0x76>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a13      	ldr	r2, [pc, #76]	; (800bc68 <TIM_OC5_SetConfig+0xc0>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d109      	bne.n	800bc32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	021b      	lsls	r3, r3, #8
 800bc2c:	697a      	ldr	r2, [r7, #20]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	697a      	ldr	r2, [r7, #20]
 800bc36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	685a      	ldr	r2, [r3, #4]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	621a      	str	r2, [r3, #32]
}
 800bc4c:	bf00      	nop
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	40010000 	.word	0x40010000
 800bc5c:	40010400 	.word	0x40010400
 800bc60:	40014000 	.word	0x40014000
 800bc64:	40014400 	.word	0x40014400
 800bc68:	40014800 	.word	0x40014800

0800bc6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b087      	sub	sp, #28
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6a1b      	ldr	r3, [r3, #32]
 800bc7a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6a1b      	ldr	r3, [r3, #32]
 800bc86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bcae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	051b      	lsls	r3, r3, #20
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a18      	ldr	r2, [pc, #96]	; (800bd20 <TIM_OC6_SetConfig+0xb4>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d00f      	beq.n	800bce4 <TIM_OC6_SetConfig+0x78>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a17      	ldr	r2, [pc, #92]	; (800bd24 <TIM_OC6_SetConfig+0xb8>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d00b      	beq.n	800bce4 <TIM_OC6_SetConfig+0x78>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	4a16      	ldr	r2, [pc, #88]	; (800bd28 <TIM_OC6_SetConfig+0xbc>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d007      	beq.n	800bce4 <TIM_OC6_SetConfig+0x78>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	4a15      	ldr	r2, [pc, #84]	; (800bd2c <TIM_OC6_SetConfig+0xc0>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d003      	beq.n	800bce4 <TIM_OC6_SetConfig+0x78>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <TIM_OC6_SetConfig+0xc4>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d109      	bne.n	800bcf8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800bcea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	695b      	ldr	r3, [r3, #20]
 800bcf0:	029b      	lsls	r3, r3, #10
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	685a      	ldr	r2, [r3, #4]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	621a      	str	r2, [r3, #32]
}
 800bd12:	bf00      	nop
 800bd14:	371c      	adds	r7, #28
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr
 800bd1e:	bf00      	nop
 800bd20:	40010000 	.word	0x40010000
 800bd24:	40010400 	.word	0x40010400
 800bd28:	40014000 	.word	0x40014000
 800bd2c:	40014400 	.word	0x40014400
 800bd30:	40014800 	.word	0x40014800

0800bd34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b087      	sub	sp, #28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f003 031f 	and.w	r3, r3, #31
 800bd46:	2201      	movs	r2, #1
 800bd48:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6a1a      	ldr	r2, [r3, #32]
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	43db      	mvns	r3, r3
 800bd56:	401a      	ands	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6a1a      	ldr	r2, [r3, #32]
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	f003 031f 	and.w	r3, r3, #31
 800bd66:	6879      	ldr	r1, [r7, #4]
 800bd68:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6c:	431a      	orrs	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	621a      	str	r2, [r3, #32]
}
 800bd72:	bf00      	nop
 800bd74:	371c      	adds	r7, #28
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
	...

0800bd80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d101      	bne.n	800bd9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e065      	b.n	800be68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	689b      	ldr	r3, [r3, #8]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	695b      	ldr	r3, [r3, #20]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	699b      	ldr	r3, [r3, #24]
 800be10:	041b      	lsls	r3, r3, #16
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a16      	ldr	r2, [pc, #88]	; (800be74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d004      	beq.n	800be2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a14      	ldr	r2, [pc, #80]	; (800be78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d115      	bne.n	800be56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be34:	051b      	lsls	r3, r3, #20
 800be36:	4313      	orrs	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	4313      	orrs	r3, r2
 800be46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be66:	2300      	movs	r3, #0
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	40010000 	.word	0x40010000
 800be78:	40010400 	.word	0x40010400

0800be7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be84:	bf00      	nop
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d101      	bne.n	800beca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bec6:	2301      	movs	r3, #1
 800bec8:	e042      	b.n	800bf50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d106      	bne.n	800bee2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f7f5 fd27 	bl	8001930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2224      	movs	r2, #36	; 0x24
 800bee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0201 	bic.w	r2, r2, #1
 800bef8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 f992 	bl	800c224 <UART_SetConfig>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e022      	b.n	800bf50 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 ff36 	bl	800cd84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689a      	ldr	r2, [r3, #8]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f042 0201 	orr.w	r2, r2, #1
 800bf46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 ffbd 	bl	800cec8 <UART_CheckIdleState>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	603b      	str	r3, [r7, #0]
 800bf64:	4613      	mov	r3, r2
 800bf66:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf6e:	2b20      	cmp	r3, #32
 800bf70:	f040 8083 	bne.w	800c07a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <HAL_UART_Transmit+0x28>
 800bf7a:	88fb      	ldrh	r3, [r7, #6]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bf80:	2301      	movs	r3, #1
 800bf82:	e07b      	b.n	800c07c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <HAL_UART_Transmit+0x3a>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e074      	b.n	800c07c <HAL_UART_Transmit+0x124>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2221      	movs	r2, #33	; 0x21
 800bfa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800bfaa:	f7f5 ff3b 	bl	8001e24 <HAL_GetTick>
 800bfae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	88fa      	ldrh	r2, [r7, #6]
 800bfb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	88fa      	ldrh	r2, [r7, #6]
 800bfbc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfc8:	d108      	bne.n	800bfdc <HAL_UART_Transmit+0x84>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d104      	bne.n	800bfdc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	61bb      	str	r3, [r7, #24]
 800bfda:	e003      	b.n	800bfe4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800bfec:	e02c      	b.n	800c048 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	2200      	movs	r2, #0
 800bff6:	2180      	movs	r1, #128	; 0x80
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	f000 ffad 	bl	800cf58 <UART_WaitOnFlagUntilTimeout>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d001      	beq.n	800c008 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c004:	2303      	movs	r3, #3
 800c006:	e039      	b.n	800c07c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c008:	69fb      	ldr	r3, [r7, #28]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10b      	bne.n	800c026 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c01c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c01e:	69bb      	ldr	r3, [r7, #24]
 800c020:	3302      	adds	r3, #2
 800c022:	61bb      	str	r3, [r7, #24]
 800c024:	e007      	b.n	800c036 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	781a      	ldrb	r2, [r3, #0]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	3301      	adds	r3, #1
 800c034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	3b01      	subs	r3, #1
 800c040:	b29a      	uxth	r2, r3
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c04e:	b29b      	uxth	r3, r3
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1cc      	bne.n	800bfee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	2200      	movs	r2, #0
 800c05c:	2140      	movs	r1, #64	; 0x40
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f000 ff7a 	bl	800cf58 <UART_WaitOnFlagUntilTimeout>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d001      	beq.n	800c06e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e006      	b.n	800c07c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2220      	movs	r2, #32
 800c072:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	e000      	b.n	800c07c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c07a:	2302      	movs	r3, #2
  }
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3720      	adds	r7, #32
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08a      	sub	sp, #40	; 0x28
 800c088:	af02      	add	r7, sp, #8
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	603b      	str	r3, [r7, #0]
 800c090:	4613      	mov	r3, r2
 800c092:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c09a:	2b20      	cmp	r3, #32
 800c09c:	f040 80bd 	bne.w	800c21a <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <HAL_UART_Receive+0x28>
 800c0a6:	88fb      	ldrh	r3, [r7, #6]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d101      	bne.n	800c0b0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e0b5      	b.n	800c21c <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d101      	bne.n	800c0be <HAL_UART_Receive+0x3a>
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	e0ae      	b.n	800c21c <HAL_UART_Receive+0x198>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2222      	movs	r2, #34	; 0x22
 800c0d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800c0d6:	f7f5 fea5 	bl	8001e24 <HAL_GetTick>
 800c0da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	88fa      	ldrh	r2, [r7, #6]
 800c0e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	88fa      	ldrh	r2, [r7, #6]
 800c0e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f4:	d10e      	bne.n	800c114 <HAL_UART_Receive+0x90>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d105      	bne.n	800c10a <HAL_UART_Receive+0x86>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c108:	e02d      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	22ff      	movs	r2, #255	; 0xff
 800c10e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c112:	e028      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d10d      	bne.n	800c138 <HAL_UART_Receive+0xb4>
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d104      	bne.n	800c12e <HAL_UART_Receive+0xaa>
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	22ff      	movs	r2, #255	; 0xff
 800c128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c12c:	e01b      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	227f      	movs	r2, #127	; 0x7f
 800c132:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c136:	e016      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c140:	d10d      	bne.n	800c15e <HAL_UART_Receive+0xda>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <HAL_UART_Receive+0xd0>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	227f      	movs	r2, #127	; 0x7f
 800c14e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c152:	e008      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	223f      	movs	r2, #63	; 0x3f
 800c158:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c15c:	e003      	b.n	800c166 <HAL_UART_Receive+0xe2>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2200      	movs	r2, #0
 800c162:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c16c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c176:	d108      	bne.n	800c18a <HAL_UART_Receive+0x106>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d104      	bne.n	800c18a <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 800c180:	2300      	movs	r3, #0
 800c182:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	61bb      	str	r3, [r7, #24]
 800c188:	e003      	b.n	800c192 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c18e:	2300      	movs	r3, #0
 800c190:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c19a:	e032      	b.n	800c202 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	9300      	str	r3, [sp, #0]
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	2120      	movs	r1, #32
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f000 fed6 	bl	800cf58 <UART_WaitOnFlagUntilTimeout>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d001      	beq.n	800c1b6 <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e032      	b.n	800c21c <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10c      	bne.n	800c1d6 <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	8a7b      	ldrh	r3, [r7, #18]
 800c1c6:	4013      	ands	r3, r2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	61bb      	str	r3, [r7, #24]
 800c1d4:	e00c      	b.n	800c1f0 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1dc:	b2da      	uxtb	r2, r3
 800c1de:	8a7b      	ldrh	r3, [r7, #18]
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	4013      	ands	r3, r2
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c1ea:	69fb      	ldr	r3, [r7, #28]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	3b01      	subs	r3, #1
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c208:	b29b      	uxth	r3, r3
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1c6      	bne.n	800c19c <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2220      	movs	r2, #32
 800c212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	e000      	b.n	800c21c <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800c21a:	2302      	movs	r3, #2
  }
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3720      	adds	r7, #32
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c224:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c228:	b08e      	sub	sp, #56	; 0x38
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c22e:	2300      	movs	r3, #0
 800c230:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	431a      	orrs	r2, r3
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	695b      	ldr	r3, [r3, #20]
 800c242:	431a      	orrs	r2, r3
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	4313      	orrs	r3, r2
 800c24a:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c250:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c252:	4313      	orrs	r3, r2
 800c254:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	4bc1      	ldr	r3, [pc, #772]	; (800c564 <UART_SetConfig+0x340>)
 800c25e:	4013      	ands	r3, r2
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	6812      	ldr	r2, [r2, #0]
 800c264:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c266:	430b      	orrs	r3, r1
 800c268:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68da      	ldr	r2, [r3, #12]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	699b      	ldr	r3, [r3, #24]
 800c284:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4ab7      	ldr	r2, [pc, #732]	; (800c568 <UART_SetConfig+0x344>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d004      	beq.n	800c29a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c296:	4313      	orrs	r3, r2
 800c298:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689a      	ldr	r2, [r3, #8]
 800c2a0:	4bb2      	ldr	r3, [pc, #712]	; (800c56c <UART_SetConfig+0x348>)
 800c2a2:	4013      	ands	r3, r2
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c2aa:	430b      	orrs	r3, r1
 800c2ac:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b4:	f023 010f 	bic.w	r1, r3, #15
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4aa9      	ldr	r2, [pc, #676]	; (800c570 <UART_SetConfig+0x34c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d177      	bne.n	800c3be <UART_SetConfig+0x19a>
 800c2ce:	4ba9      	ldr	r3, [pc, #676]	; (800c574 <UART_SetConfig+0x350>)
 800c2d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2d6:	2b28      	cmp	r3, #40	; 0x28
 800c2d8:	d86c      	bhi.n	800c3b4 <UART_SetConfig+0x190>
 800c2da:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <UART_SetConfig+0xbc>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c385 	.word	0x0800c385
 800c2e4:	0800c3b5 	.word	0x0800c3b5
 800c2e8:	0800c3b5 	.word	0x0800c3b5
 800c2ec:	0800c3b5 	.word	0x0800c3b5
 800c2f0:	0800c3b5 	.word	0x0800c3b5
 800c2f4:	0800c3b5 	.word	0x0800c3b5
 800c2f8:	0800c3b5 	.word	0x0800c3b5
 800c2fc:	0800c3b5 	.word	0x0800c3b5
 800c300:	0800c38d 	.word	0x0800c38d
 800c304:	0800c3b5 	.word	0x0800c3b5
 800c308:	0800c3b5 	.word	0x0800c3b5
 800c30c:	0800c3b5 	.word	0x0800c3b5
 800c310:	0800c3b5 	.word	0x0800c3b5
 800c314:	0800c3b5 	.word	0x0800c3b5
 800c318:	0800c3b5 	.word	0x0800c3b5
 800c31c:	0800c3b5 	.word	0x0800c3b5
 800c320:	0800c395 	.word	0x0800c395
 800c324:	0800c3b5 	.word	0x0800c3b5
 800c328:	0800c3b5 	.word	0x0800c3b5
 800c32c:	0800c3b5 	.word	0x0800c3b5
 800c330:	0800c3b5 	.word	0x0800c3b5
 800c334:	0800c3b5 	.word	0x0800c3b5
 800c338:	0800c3b5 	.word	0x0800c3b5
 800c33c:	0800c3b5 	.word	0x0800c3b5
 800c340:	0800c39d 	.word	0x0800c39d
 800c344:	0800c3b5 	.word	0x0800c3b5
 800c348:	0800c3b5 	.word	0x0800c3b5
 800c34c:	0800c3b5 	.word	0x0800c3b5
 800c350:	0800c3b5 	.word	0x0800c3b5
 800c354:	0800c3b5 	.word	0x0800c3b5
 800c358:	0800c3b5 	.word	0x0800c3b5
 800c35c:	0800c3b5 	.word	0x0800c3b5
 800c360:	0800c3a5 	.word	0x0800c3a5
 800c364:	0800c3b5 	.word	0x0800c3b5
 800c368:	0800c3b5 	.word	0x0800c3b5
 800c36c:	0800c3b5 	.word	0x0800c3b5
 800c370:	0800c3b5 	.word	0x0800c3b5
 800c374:	0800c3b5 	.word	0x0800c3b5
 800c378:	0800c3b5 	.word	0x0800c3b5
 800c37c:	0800c3b5 	.word	0x0800c3b5
 800c380:	0800c3ad 	.word	0x0800c3ad
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c38a:	e233      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c38c:	2304      	movs	r3, #4
 800c38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c392:	e22f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c394:	2308      	movs	r3, #8
 800c396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c39a:	e22b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c39c:	2310      	movs	r3, #16
 800c39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3a2:	e227      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c3a4:	2320      	movs	r3, #32
 800c3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3aa:	e223      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c3ac:	2340      	movs	r3, #64	; 0x40
 800c3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3b2:	e21f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c3b4:	2380      	movs	r3, #128	; 0x80
 800c3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3ba:	bf00      	nop
 800c3bc:	e21a      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a6d      	ldr	r2, [pc, #436]	; (800c578 <UART_SetConfig+0x354>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d132      	bne.n	800c42e <UART_SetConfig+0x20a>
 800c3c8:	4b6a      	ldr	r3, [pc, #424]	; (800c574 <UART_SetConfig+0x350>)
 800c3ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3cc:	f003 0307 	and.w	r3, r3, #7
 800c3d0:	2b05      	cmp	r3, #5
 800c3d2:	d827      	bhi.n	800c424 <UART_SetConfig+0x200>
 800c3d4:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <UART_SetConfig+0x1b8>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c3fd 	.word	0x0800c3fd
 800c3e4:	0800c405 	.word	0x0800c405
 800c3e8:	0800c40d 	.word	0x0800c40d
 800c3ec:	0800c415 	.word	0x0800c415
 800c3f0:	0800c41d 	.word	0x0800c41d
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c3fa:	e1fb      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c3fc:	2304      	movs	r3, #4
 800c3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c402:	e1f7      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c404:	2308      	movs	r3, #8
 800c406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c40a:	e1f3      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c40c:	2310      	movs	r3, #16
 800c40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c412:	e1ef      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c414:	2320      	movs	r3, #32
 800c416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c41a:	e1eb      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c41c:	2340      	movs	r3, #64	; 0x40
 800c41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c422:	e1e7      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c424:	2380      	movs	r3, #128	; 0x80
 800c426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c42a:	bf00      	nop
 800c42c:	e1e2      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a52      	ldr	r2, [pc, #328]	; (800c57c <UART_SetConfig+0x358>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d132      	bne.n	800c49e <UART_SetConfig+0x27a>
 800c438:	4b4e      	ldr	r3, [pc, #312]	; (800c574 <UART_SetConfig+0x350>)
 800c43a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c43c:	f003 0307 	and.w	r3, r3, #7
 800c440:	2b05      	cmp	r3, #5
 800c442:	d827      	bhi.n	800c494 <UART_SetConfig+0x270>
 800c444:	a201      	add	r2, pc, #4	; (adr r2, 800c44c <UART_SetConfig+0x228>)
 800c446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c44a:	bf00      	nop
 800c44c:	0800c465 	.word	0x0800c465
 800c450:	0800c46d 	.word	0x0800c46d
 800c454:	0800c475 	.word	0x0800c475
 800c458:	0800c47d 	.word	0x0800c47d
 800c45c:	0800c485 	.word	0x0800c485
 800c460:	0800c48d 	.word	0x0800c48d
 800c464:	2300      	movs	r3, #0
 800c466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c46a:	e1c3      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c46c:	2304      	movs	r3, #4
 800c46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c472:	e1bf      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c474:	2308      	movs	r3, #8
 800c476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c47a:	e1bb      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c47c:	2310      	movs	r3, #16
 800c47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c482:	e1b7      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c484:	2320      	movs	r3, #32
 800c486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c48a:	e1b3      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c492:	e1af      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c494:	2380      	movs	r3, #128	; 0x80
 800c496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c49a:	bf00      	nop
 800c49c:	e1aa      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a37      	ldr	r2, [pc, #220]	; (800c580 <UART_SetConfig+0x35c>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d132      	bne.n	800c50e <UART_SetConfig+0x2ea>
 800c4a8:	4b32      	ldr	r3, [pc, #200]	; (800c574 <UART_SetConfig+0x350>)
 800c4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ac:	f003 0307 	and.w	r3, r3, #7
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	d827      	bhi.n	800c504 <UART_SetConfig+0x2e0>
 800c4b4:	a201      	add	r2, pc, #4	; (adr r2, 800c4bc <UART_SetConfig+0x298>)
 800c4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ba:	bf00      	nop
 800c4bc:	0800c4d5 	.word	0x0800c4d5
 800c4c0:	0800c4dd 	.word	0x0800c4dd
 800c4c4:	0800c4e5 	.word	0x0800c4e5
 800c4c8:	0800c4ed 	.word	0x0800c4ed
 800c4cc:	0800c4f5 	.word	0x0800c4f5
 800c4d0:	0800c4fd 	.word	0x0800c4fd
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4da:	e18b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c4dc:	2304      	movs	r3, #4
 800c4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4e2:	e187      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c4e4:	2308      	movs	r3, #8
 800c4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4ea:	e183      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4f2:	e17f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c4f4:	2320      	movs	r3, #32
 800c4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c4fa:	e17b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c4fc:	2340      	movs	r3, #64	; 0x40
 800c4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c502:	e177      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c504:	2380      	movs	r3, #128	; 0x80
 800c506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c50a:	bf00      	nop
 800c50c:	e172      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a1c      	ldr	r2, [pc, #112]	; (800c584 <UART_SetConfig+0x360>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d144      	bne.n	800c5a2 <UART_SetConfig+0x37e>
 800c518:	4b16      	ldr	r3, [pc, #88]	; (800c574 <UART_SetConfig+0x350>)
 800c51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51c:	f003 0307 	and.w	r3, r3, #7
 800c520:	2b05      	cmp	r3, #5
 800c522:	d839      	bhi.n	800c598 <UART_SetConfig+0x374>
 800c524:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x308>)
 800c526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52a:	bf00      	nop
 800c52c:	0800c545 	.word	0x0800c545
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c55d 	.word	0x0800c55d
 800c53c:	0800c589 	.word	0x0800c589
 800c540:	0800c591 	.word	0x0800c591
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c54a:	e153      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c54c:	2304      	movs	r3, #4
 800c54e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c552:	e14f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c554:	2308      	movs	r3, #8
 800c556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c55a:	e14b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c55c:	2310      	movs	r3, #16
 800c55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c562:	e147      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c564:	cfff69f3 	.word	0xcfff69f3
 800c568:	58000c00 	.word	0x58000c00
 800c56c:	11fff4ff 	.word	0x11fff4ff
 800c570:	40011000 	.word	0x40011000
 800c574:	58024400 	.word	0x58024400
 800c578:	40004400 	.word	0x40004400
 800c57c:	40004800 	.word	0x40004800
 800c580:	40004c00 	.word	0x40004c00
 800c584:	40005000 	.word	0x40005000
 800c588:	2320      	movs	r3, #32
 800c58a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c58e:	e131      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c590:	2340      	movs	r3, #64	; 0x40
 800c592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c596:	e12d      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c598:	2380      	movs	r3, #128	; 0x80
 800c59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c59e:	bf00      	nop
 800c5a0:	e128      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	4ab6      	ldr	r2, [pc, #728]	; (800c880 <UART_SetConfig+0x65c>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d178      	bne.n	800c69e <UART_SetConfig+0x47a>
 800c5ac:	4bb5      	ldr	r3, [pc, #724]	; (800c884 <UART_SetConfig+0x660>)
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c5b4:	2b28      	cmp	r3, #40	; 0x28
 800c5b6:	d86d      	bhi.n	800c694 <UART_SetConfig+0x470>
 800c5b8:	a201      	add	r2, pc, #4	; (adr r2, 800c5c0 <UART_SetConfig+0x39c>)
 800c5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5be:	bf00      	nop
 800c5c0:	0800c665 	.word	0x0800c665
 800c5c4:	0800c695 	.word	0x0800c695
 800c5c8:	0800c695 	.word	0x0800c695
 800c5cc:	0800c695 	.word	0x0800c695
 800c5d0:	0800c695 	.word	0x0800c695
 800c5d4:	0800c695 	.word	0x0800c695
 800c5d8:	0800c695 	.word	0x0800c695
 800c5dc:	0800c695 	.word	0x0800c695
 800c5e0:	0800c66d 	.word	0x0800c66d
 800c5e4:	0800c695 	.word	0x0800c695
 800c5e8:	0800c695 	.word	0x0800c695
 800c5ec:	0800c695 	.word	0x0800c695
 800c5f0:	0800c695 	.word	0x0800c695
 800c5f4:	0800c695 	.word	0x0800c695
 800c5f8:	0800c695 	.word	0x0800c695
 800c5fc:	0800c695 	.word	0x0800c695
 800c600:	0800c675 	.word	0x0800c675
 800c604:	0800c695 	.word	0x0800c695
 800c608:	0800c695 	.word	0x0800c695
 800c60c:	0800c695 	.word	0x0800c695
 800c610:	0800c695 	.word	0x0800c695
 800c614:	0800c695 	.word	0x0800c695
 800c618:	0800c695 	.word	0x0800c695
 800c61c:	0800c695 	.word	0x0800c695
 800c620:	0800c67d 	.word	0x0800c67d
 800c624:	0800c695 	.word	0x0800c695
 800c628:	0800c695 	.word	0x0800c695
 800c62c:	0800c695 	.word	0x0800c695
 800c630:	0800c695 	.word	0x0800c695
 800c634:	0800c695 	.word	0x0800c695
 800c638:	0800c695 	.word	0x0800c695
 800c63c:	0800c695 	.word	0x0800c695
 800c640:	0800c685 	.word	0x0800c685
 800c644:	0800c695 	.word	0x0800c695
 800c648:	0800c695 	.word	0x0800c695
 800c64c:	0800c695 	.word	0x0800c695
 800c650:	0800c695 	.word	0x0800c695
 800c654:	0800c695 	.word	0x0800c695
 800c658:	0800c695 	.word	0x0800c695
 800c65c:	0800c695 	.word	0x0800c695
 800c660:	0800c68d 	.word	0x0800c68d
 800c664:	2301      	movs	r3, #1
 800c666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c66a:	e0c3      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c66c:	2304      	movs	r3, #4
 800c66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c672:	e0bf      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c674:	2308      	movs	r3, #8
 800c676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c67a:	e0bb      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c67c:	2310      	movs	r3, #16
 800c67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c682:	e0b7      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c684:	2320      	movs	r3, #32
 800c686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c68a:	e0b3      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c692:	e0af      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c694:	2380      	movs	r3, #128	; 0x80
 800c696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c69a:	bf00      	nop
 800c69c:	e0aa      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a79      	ldr	r2, [pc, #484]	; (800c888 <UART_SetConfig+0x664>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d132      	bne.n	800c70e <UART_SetConfig+0x4ea>
 800c6a8:	4b76      	ldr	r3, [pc, #472]	; (800c884 <UART_SetConfig+0x660>)
 800c6aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ac:	f003 0307 	and.w	r3, r3, #7
 800c6b0:	2b05      	cmp	r3, #5
 800c6b2:	d827      	bhi.n	800c704 <UART_SetConfig+0x4e0>
 800c6b4:	a201      	add	r2, pc, #4	; (adr r2, 800c6bc <UART_SetConfig+0x498>)
 800c6b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ba:	bf00      	nop
 800c6bc:	0800c6d5 	.word	0x0800c6d5
 800c6c0:	0800c6dd 	.word	0x0800c6dd
 800c6c4:	0800c6e5 	.word	0x0800c6e5
 800c6c8:	0800c6ed 	.word	0x0800c6ed
 800c6cc:	0800c6f5 	.word	0x0800c6f5
 800c6d0:	0800c6fd 	.word	0x0800c6fd
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6da:	e08b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c6dc:	2304      	movs	r3, #4
 800c6de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6e2:	e087      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c6e4:	2308      	movs	r3, #8
 800c6e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6ea:	e083      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6f2:	e07f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c6f4:	2320      	movs	r3, #32
 800c6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c6fa:	e07b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c6fc:	2340      	movs	r3, #64	; 0x40
 800c6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c702:	e077      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c704:	2380      	movs	r3, #128	; 0x80
 800c706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c70a:	bf00      	nop
 800c70c:	e072      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a5e      	ldr	r2, [pc, #376]	; (800c88c <UART_SetConfig+0x668>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d132      	bne.n	800c77e <UART_SetConfig+0x55a>
 800c718:	4b5a      	ldr	r3, [pc, #360]	; (800c884 <UART_SetConfig+0x660>)
 800c71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c71c:	f003 0307 	and.w	r3, r3, #7
 800c720:	2b05      	cmp	r3, #5
 800c722:	d827      	bhi.n	800c774 <UART_SetConfig+0x550>
 800c724:	a201      	add	r2, pc, #4	; (adr r2, 800c72c <UART_SetConfig+0x508>)
 800c726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c72a:	bf00      	nop
 800c72c:	0800c745 	.word	0x0800c745
 800c730:	0800c74d 	.word	0x0800c74d
 800c734:	0800c755 	.word	0x0800c755
 800c738:	0800c75d 	.word	0x0800c75d
 800c73c:	0800c765 	.word	0x0800c765
 800c740:	0800c76d 	.word	0x0800c76d
 800c744:	2300      	movs	r3, #0
 800c746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c74a:	e053      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c74c:	2304      	movs	r3, #4
 800c74e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c752:	e04f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c754:	2308      	movs	r3, #8
 800c756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c75a:	e04b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c75c:	2310      	movs	r3, #16
 800c75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c762:	e047      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c764:	2320      	movs	r3, #32
 800c766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c76a:	e043      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c76c:	2340      	movs	r3, #64	; 0x40
 800c76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c772:	e03f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c774:	2380      	movs	r3, #128	; 0x80
 800c776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c77a:	bf00      	nop
 800c77c:	e03a      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a43      	ldr	r2, [pc, #268]	; (800c890 <UART_SetConfig+0x66c>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d132      	bne.n	800c7ee <UART_SetConfig+0x5ca>
 800c788:	4b3e      	ldr	r3, [pc, #248]	; (800c884 <UART_SetConfig+0x660>)
 800c78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c78c:	f003 0307 	and.w	r3, r3, #7
 800c790:	2b05      	cmp	r3, #5
 800c792:	d827      	bhi.n	800c7e4 <UART_SetConfig+0x5c0>
 800c794:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <UART_SetConfig+0x578>)
 800c796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79a:	bf00      	nop
 800c79c:	0800c7b5 	.word	0x0800c7b5
 800c7a0:	0800c7bd 	.word	0x0800c7bd
 800c7a4:	0800c7c5 	.word	0x0800c7c5
 800c7a8:	0800c7cd 	.word	0x0800c7cd
 800c7ac:	0800c7d5 	.word	0x0800c7d5
 800c7b0:	0800c7dd 	.word	0x0800c7dd
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ba:	e01b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7bc:	2304      	movs	r3, #4
 800c7be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7c2:	e017      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7c4:	2308      	movs	r3, #8
 800c7c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ca:	e013      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7cc:	2310      	movs	r3, #16
 800c7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7d2:	e00f      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7da:	e00b      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7dc:	2340      	movs	r3, #64	; 0x40
 800c7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7e2:	e007      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c7ea:	bf00      	nop
 800c7ec:	e002      	b.n	800c7f4 <UART_SetConfig+0x5d0>
 800c7ee:	2380      	movs	r3, #128	; 0x80
 800c7f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a25      	ldr	r2, [pc, #148]	; (800c890 <UART_SetConfig+0x66c>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	f040 80b8 	bne.w	800c970 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c800:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c804:	2b08      	cmp	r3, #8
 800c806:	d019      	beq.n	800c83c <UART_SetConfig+0x618>
 800c808:	2b08      	cmp	r3, #8
 800c80a:	dc04      	bgt.n	800c816 <UART_SetConfig+0x5f2>
 800c80c:	2b02      	cmp	r3, #2
 800c80e:	d009      	beq.n	800c824 <UART_SetConfig+0x600>
 800c810:	2b04      	cmp	r3, #4
 800c812:	d00b      	beq.n	800c82c <UART_SetConfig+0x608>
 800c814:	e042      	b.n	800c89c <UART_SetConfig+0x678>
 800c816:	2b20      	cmp	r3, #32
 800c818:	d02b      	beq.n	800c872 <UART_SetConfig+0x64e>
 800c81a:	2b40      	cmp	r3, #64	; 0x40
 800c81c:	d02c      	beq.n	800c878 <UART_SetConfig+0x654>
 800c81e:	2b10      	cmp	r3, #16
 800c820:	d014      	beq.n	800c84c <UART_SetConfig+0x628>
 800c822:	e03b      	b.n	800c89c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c824:	f7fc f954 	bl	8008ad0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c828:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c82a:	e03d      	b.n	800c8a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82c:	f107 0314 	add.w	r3, r7, #20
 800c830:	4618      	mov	r0, r3
 800c832:	f7fc f963 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c83a:	e035      	b.n	800c8a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c83c:	f107 0308 	add.w	r3, r7, #8
 800c840:	4618      	mov	r0, r3
 800c842:	f7fc faa7 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c84a:	e02d      	b.n	800c8a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c84c:	4b0d      	ldr	r3, [pc, #52]	; (800c884 <UART_SetConfig+0x660>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b00      	cmp	r3, #0
 800c856:	d009      	beq.n	800c86c <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c858:	4b0a      	ldr	r3, [pc, #40]	; (800c884 <UART_SetConfig+0x660>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	08db      	lsrs	r3, r3, #3
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	4a0c      	ldr	r2, [pc, #48]	; (800c894 <UART_SetConfig+0x670>)
 800c864:	fa22 f303 	lsr.w	r3, r2, r3
 800c868:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c86a:	e01d      	b.n	800c8a8 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800c86c:	4b09      	ldr	r3, [pc, #36]	; (800c894 <UART_SetConfig+0x670>)
 800c86e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c870:	e01a      	b.n	800c8a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c872:	4b09      	ldr	r3, [pc, #36]	; (800c898 <UART_SetConfig+0x674>)
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c876:	e017      	b.n	800c8a8 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c87e:	e013      	b.n	800c8a8 <UART_SetConfig+0x684>
 800c880:	40011400 	.word	0x40011400
 800c884:	58024400 	.word	0x58024400
 800c888:	40007800 	.word	0x40007800
 800c88c:	40007c00 	.word	0x40007c00
 800c890:	58000c00 	.word	0x58000c00
 800c894:	03d09000 	.word	0x03d09000
 800c898:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800c89c:	2300      	movs	r3, #0
 800c89e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c8a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	f000 824d 	beq.w	800cd4a <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8b4:	4aad      	ldr	r2, [pc, #692]	; (800cb6c <UART_SetConfig+0x948>)
 800c8b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8c2:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	6a3a      	ldr	r2, [r7, #32]
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d305      	bcc.n	800c8e0 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c8da:	6a3a      	ldr	r2, [r7, #32]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d903      	bls.n	800c8e8 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c8e6:	e230      	b.n	800cd4a <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f04f 0100 	mov.w	r1, #0
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f4:	4a9d      	ldr	r2, [pc, #628]	; (800cb6c <UART_SetConfig+0x948>)
 800c8f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	f04f 0400 	mov.w	r4, #0
 800c900:	461a      	mov	r2, r3
 800c902:	4623      	mov	r3, r4
 800c904:	f7f3 fcf4 	bl	80002f0 <__aeabi_uldivmod>
 800c908:	4603      	mov	r3, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	4619      	mov	r1, r3
 800c90e:	4622      	mov	r2, r4
 800c910:	f04f 0300 	mov.w	r3, #0
 800c914:	f04f 0400 	mov.w	r4, #0
 800c918:	0214      	lsls	r4, r2, #8
 800c91a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800c91e:	020b      	lsls	r3, r1, #8
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	6852      	ldr	r2, [r2, #4]
 800c924:	0852      	lsrs	r2, r2, #1
 800c926:	4611      	mov	r1, r2
 800c928:	f04f 0200 	mov.w	r2, #0
 800c92c:	eb13 0b01 	adds.w	fp, r3, r1
 800c930:	eb44 0c02 	adc.w	ip, r4, r2
 800c934:	4658      	mov	r0, fp
 800c936:	4661      	mov	r1, ip
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	f04f 0400 	mov.w	r4, #0
 800c940:	461a      	mov	r2, r3
 800c942:	4623      	mov	r3, r4
 800c944:	f7f3 fcd4 	bl	80002f0 <__aeabi_uldivmod>
 800c948:	4603      	mov	r3, r0
 800c94a:	460c      	mov	r4, r1
 800c94c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c954:	d308      	bcc.n	800c968 <UART_SetConfig+0x744>
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c95c:	d204      	bcs.n	800c968 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	e1f0      	b.n	800cd4a <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c96e:	e1ec      	b.n	800cd4a <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	69db      	ldr	r3, [r3, #28]
 800c974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c978:	f040 8100 	bne.w	800cb7c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800c97c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c980:	2b40      	cmp	r3, #64	; 0x40
 800c982:	f200 80b7 	bhi.w	800caf4 <UART_SetConfig+0x8d0>
 800c986:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <UART_SetConfig+0x768>)
 800c988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98c:	0800ca91 	.word	0x0800ca91
 800c990:	0800ca99 	.word	0x0800ca99
 800c994:	0800caf5 	.word	0x0800caf5
 800c998:	0800caf5 	.word	0x0800caf5
 800c99c:	0800caa1 	.word	0x0800caa1
 800c9a0:	0800caf5 	.word	0x0800caf5
 800c9a4:	0800caf5 	.word	0x0800caf5
 800c9a8:	0800caf5 	.word	0x0800caf5
 800c9ac:	0800cab1 	.word	0x0800cab1
 800c9b0:	0800caf5 	.word	0x0800caf5
 800c9b4:	0800caf5 	.word	0x0800caf5
 800c9b8:	0800caf5 	.word	0x0800caf5
 800c9bc:	0800caf5 	.word	0x0800caf5
 800c9c0:	0800caf5 	.word	0x0800caf5
 800c9c4:	0800caf5 	.word	0x0800caf5
 800c9c8:	0800caf5 	.word	0x0800caf5
 800c9cc:	0800cac1 	.word	0x0800cac1
 800c9d0:	0800caf5 	.word	0x0800caf5
 800c9d4:	0800caf5 	.word	0x0800caf5
 800c9d8:	0800caf5 	.word	0x0800caf5
 800c9dc:	0800caf5 	.word	0x0800caf5
 800c9e0:	0800caf5 	.word	0x0800caf5
 800c9e4:	0800caf5 	.word	0x0800caf5
 800c9e8:	0800caf5 	.word	0x0800caf5
 800c9ec:	0800caf5 	.word	0x0800caf5
 800c9f0:	0800caf5 	.word	0x0800caf5
 800c9f4:	0800caf5 	.word	0x0800caf5
 800c9f8:	0800caf5 	.word	0x0800caf5
 800c9fc:	0800caf5 	.word	0x0800caf5
 800ca00:	0800caf5 	.word	0x0800caf5
 800ca04:	0800caf5 	.word	0x0800caf5
 800ca08:	0800caf5 	.word	0x0800caf5
 800ca0c:	0800cae7 	.word	0x0800cae7
 800ca10:	0800caf5 	.word	0x0800caf5
 800ca14:	0800caf5 	.word	0x0800caf5
 800ca18:	0800caf5 	.word	0x0800caf5
 800ca1c:	0800caf5 	.word	0x0800caf5
 800ca20:	0800caf5 	.word	0x0800caf5
 800ca24:	0800caf5 	.word	0x0800caf5
 800ca28:	0800caf5 	.word	0x0800caf5
 800ca2c:	0800caf5 	.word	0x0800caf5
 800ca30:	0800caf5 	.word	0x0800caf5
 800ca34:	0800caf5 	.word	0x0800caf5
 800ca38:	0800caf5 	.word	0x0800caf5
 800ca3c:	0800caf5 	.word	0x0800caf5
 800ca40:	0800caf5 	.word	0x0800caf5
 800ca44:	0800caf5 	.word	0x0800caf5
 800ca48:	0800caf5 	.word	0x0800caf5
 800ca4c:	0800caf5 	.word	0x0800caf5
 800ca50:	0800caf5 	.word	0x0800caf5
 800ca54:	0800caf5 	.word	0x0800caf5
 800ca58:	0800caf5 	.word	0x0800caf5
 800ca5c:	0800caf5 	.word	0x0800caf5
 800ca60:	0800caf5 	.word	0x0800caf5
 800ca64:	0800caf5 	.word	0x0800caf5
 800ca68:	0800caf5 	.word	0x0800caf5
 800ca6c:	0800caf5 	.word	0x0800caf5
 800ca70:	0800caf5 	.word	0x0800caf5
 800ca74:	0800caf5 	.word	0x0800caf5
 800ca78:	0800caf5 	.word	0x0800caf5
 800ca7c:	0800caf5 	.word	0x0800caf5
 800ca80:	0800caf5 	.word	0x0800caf5
 800ca84:	0800caf5 	.word	0x0800caf5
 800ca88:	0800caf5 	.word	0x0800caf5
 800ca8c:	0800caed 	.word	0x0800caed
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca90:	f7fa fe4a 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 800ca94:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca96:	e033      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca98:	f7fa fe5c 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800ca9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ca9e:	e02f      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caa0:	f107 0314 	add.w	r3, r7, #20
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7fc f829 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caae:	e027      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cab0:	f107 0308 	add.w	r3, r7, #8
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7fc f96d 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cabe:	e01f      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cac0:	4b2b      	ldr	r3, [pc, #172]	; (800cb70 <UART_SetConfig+0x94c>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f003 0320 	and.w	r3, r3, #32
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d009      	beq.n	800cae0 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cacc:	4b28      	ldr	r3, [pc, #160]	; (800cb70 <UART_SetConfig+0x94c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	08db      	lsrs	r3, r3, #3
 800cad2:	f003 0303 	and.w	r3, r3, #3
 800cad6:	4a27      	ldr	r2, [pc, #156]	; (800cb74 <UART_SetConfig+0x950>)
 800cad8:	fa22 f303 	lsr.w	r3, r2, r3
 800cadc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cade:	e00f      	b.n	800cb00 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800cae0:	4b24      	ldr	r3, [pc, #144]	; (800cb74 <UART_SetConfig+0x950>)
 800cae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cae4:	e00c      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cae6:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <UART_SetConfig+0x954>)
 800cae8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caea:	e009      	b.n	800cb00 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800caec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800caf2:	e005      	b.n	800cb00 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800caf4:	2300      	movs	r3, #0
 800caf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cafe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	f000 8121 	beq.w	800cd4a <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	4a17      	ldr	r2, [pc, #92]	; (800cb6c <UART_SetConfig+0x948>)
 800cb0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb12:	461a      	mov	r2, r3
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb1a:	005a      	lsls	r2, r3, #1
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	085b      	lsrs	r3, r3, #1
 800cb22:	441a      	add	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb32:	2b0f      	cmp	r3, #15
 800cb34:	d916      	bls.n	800cb64 <UART_SetConfig+0x940>
 800cb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb3c:	d212      	bcs.n	800cb64 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb40:	b29b      	uxth	r3, r3
 800cb42:	f023 030f 	bic.w	r3, r3, #15
 800cb46:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cb48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb4a:	085b      	lsrs	r3, r3, #1
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	f003 0307 	and.w	r3, r3, #7
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cb56:	4313      	orrs	r3, r2
 800cb58:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cb60:	60da      	str	r2, [r3, #12]
 800cb62:	e0f2      	b.n	800cd4a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cb6a:	e0ee      	b.n	800cd4a <UART_SetConfig+0xb26>
 800cb6c:	080166f8 	.word	0x080166f8
 800cb70:	58024400 	.word	0x58024400
 800cb74:	03d09000 	.word	0x03d09000
 800cb78:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800cb7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb80:	2b40      	cmp	r3, #64	; 0x40
 800cb82:	f200 80b7 	bhi.w	800ccf4 <UART_SetConfig+0xad0>
 800cb86:	a201      	add	r2, pc, #4	; (adr r2, 800cb8c <UART_SetConfig+0x968>)
 800cb88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb8c:	0800cc91 	.word	0x0800cc91
 800cb90:	0800cc99 	.word	0x0800cc99
 800cb94:	0800ccf5 	.word	0x0800ccf5
 800cb98:	0800ccf5 	.word	0x0800ccf5
 800cb9c:	0800cca1 	.word	0x0800cca1
 800cba0:	0800ccf5 	.word	0x0800ccf5
 800cba4:	0800ccf5 	.word	0x0800ccf5
 800cba8:	0800ccf5 	.word	0x0800ccf5
 800cbac:	0800ccb1 	.word	0x0800ccb1
 800cbb0:	0800ccf5 	.word	0x0800ccf5
 800cbb4:	0800ccf5 	.word	0x0800ccf5
 800cbb8:	0800ccf5 	.word	0x0800ccf5
 800cbbc:	0800ccf5 	.word	0x0800ccf5
 800cbc0:	0800ccf5 	.word	0x0800ccf5
 800cbc4:	0800ccf5 	.word	0x0800ccf5
 800cbc8:	0800ccf5 	.word	0x0800ccf5
 800cbcc:	0800ccc1 	.word	0x0800ccc1
 800cbd0:	0800ccf5 	.word	0x0800ccf5
 800cbd4:	0800ccf5 	.word	0x0800ccf5
 800cbd8:	0800ccf5 	.word	0x0800ccf5
 800cbdc:	0800ccf5 	.word	0x0800ccf5
 800cbe0:	0800ccf5 	.word	0x0800ccf5
 800cbe4:	0800ccf5 	.word	0x0800ccf5
 800cbe8:	0800ccf5 	.word	0x0800ccf5
 800cbec:	0800ccf5 	.word	0x0800ccf5
 800cbf0:	0800ccf5 	.word	0x0800ccf5
 800cbf4:	0800ccf5 	.word	0x0800ccf5
 800cbf8:	0800ccf5 	.word	0x0800ccf5
 800cbfc:	0800ccf5 	.word	0x0800ccf5
 800cc00:	0800ccf5 	.word	0x0800ccf5
 800cc04:	0800ccf5 	.word	0x0800ccf5
 800cc08:	0800ccf5 	.word	0x0800ccf5
 800cc0c:	0800cce7 	.word	0x0800cce7
 800cc10:	0800ccf5 	.word	0x0800ccf5
 800cc14:	0800ccf5 	.word	0x0800ccf5
 800cc18:	0800ccf5 	.word	0x0800ccf5
 800cc1c:	0800ccf5 	.word	0x0800ccf5
 800cc20:	0800ccf5 	.word	0x0800ccf5
 800cc24:	0800ccf5 	.word	0x0800ccf5
 800cc28:	0800ccf5 	.word	0x0800ccf5
 800cc2c:	0800ccf5 	.word	0x0800ccf5
 800cc30:	0800ccf5 	.word	0x0800ccf5
 800cc34:	0800ccf5 	.word	0x0800ccf5
 800cc38:	0800ccf5 	.word	0x0800ccf5
 800cc3c:	0800ccf5 	.word	0x0800ccf5
 800cc40:	0800ccf5 	.word	0x0800ccf5
 800cc44:	0800ccf5 	.word	0x0800ccf5
 800cc48:	0800ccf5 	.word	0x0800ccf5
 800cc4c:	0800ccf5 	.word	0x0800ccf5
 800cc50:	0800ccf5 	.word	0x0800ccf5
 800cc54:	0800ccf5 	.word	0x0800ccf5
 800cc58:	0800ccf5 	.word	0x0800ccf5
 800cc5c:	0800ccf5 	.word	0x0800ccf5
 800cc60:	0800ccf5 	.word	0x0800ccf5
 800cc64:	0800ccf5 	.word	0x0800ccf5
 800cc68:	0800ccf5 	.word	0x0800ccf5
 800cc6c:	0800ccf5 	.word	0x0800ccf5
 800cc70:	0800ccf5 	.word	0x0800ccf5
 800cc74:	0800ccf5 	.word	0x0800ccf5
 800cc78:	0800ccf5 	.word	0x0800ccf5
 800cc7c:	0800ccf5 	.word	0x0800ccf5
 800cc80:	0800ccf5 	.word	0x0800ccf5
 800cc84:	0800ccf5 	.word	0x0800ccf5
 800cc88:	0800ccf5 	.word	0x0800ccf5
 800cc8c:	0800cced 	.word	0x0800cced
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc90:	f7fa fd4a 	bl	8007728 <HAL_RCC_GetPCLK1Freq>
 800cc94:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc96:	e033      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc98:	f7fa fd5c 	bl	8007754 <HAL_RCC_GetPCLK2Freq>
 800cc9c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800cc9e:	e02f      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cca0:	f107 0314 	add.w	r3, r7, #20
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fb ff29 	bl	8008afc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccae:	e027      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fc f86d 	bl	8008d94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccbe:	e01f      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc0:	4b2c      	ldr	r3, [pc, #176]	; (800cd74 <UART_SetConfig+0xb50>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d009      	beq.n	800cce0 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cccc:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <UART_SetConfig+0xb50>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	08db      	lsrs	r3, r3, #3
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	4a28      	ldr	r2, [pc, #160]	; (800cd78 <UART_SetConfig+0xb54>)
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ccde:	e00f      	b.n	800cd00 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800cce0:	4b25      	ldr	r3, [pc, #148]	; (800cd78 <UART_SetConfig+0xb54>)
 800cce2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cce4:	e00c      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cce6:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <UART_SetConfig+0xb58>)
 800cce8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccea:	e009      	b.n	800cd00 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ccec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ccf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ccf2:	e005      	b.n	800cd00 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ccfe:	bf00      	nop
    }

    if (pclk != 0U)
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d021      	beq.n	800cd4a <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd0a:	4a1d      	ldr	r2, [pc, #116]	; (800cd80 <UART_SetConfig+0xb5c>)
 800cd0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd10:	461a      	mov	r2, r3
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	085b      	lsrs	r3, r3, #1
 800cd1e:	441a      	add	r2, r3
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cd2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2e:	2b0f      	cmp	r3, #15
 800cd30:	d908      	bls.n	800cd44 <UART_SetConfig+0xb20>
 800cd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd38:	d204      	bcs.n	800cd44 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd40:	60da      	str	r2, [r3, #12]
 800cd42:	e002      	b.n	800cd4a <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800cd66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3738      	adds	r7, #56	; 0x38
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800cd74:	58024400 	.word	0x58024400
 800cd78:	03d09000 	.word	0x03d09000
 800cd7c:	003d0900 	.word	0x003d0900
 800cd80:	080166f8 	.word	0x080166f8

0800cd84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b083      	sub	sp, #12
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd90:	f003 0301 	and.w	r3, r3, #1
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00a      	beq.n	800cdae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	f003 0302 	and.w	r3, r3, #2
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00a      	beq.n	800cdd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	430a      	orrs	r2, r1
 800cdce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdd4:	f003 0304 	and.w	r3, r3, #4
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00a      	beq.n	800cdf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf6:	f003 0308 	and.w	r3, r3, #8
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00a      	beq.n	800ce14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	430a      	orrs	r2, r1
 800ce12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce18:	f003 0310 	and.w	r3, r3, #16
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00a      	beq.n	800ce36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	430a      	orrs	r2, r1
 800ce34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	f003 0320 	and.w	r3, r3, #32
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d00a      	beq.n	800ce58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	430a      	orrs	r2, r1
 800ce56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d01a      	beq.n	800ce9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	685b      	ldr	r3, [r3, #4]
 800ce6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	430a      	orrs	r2, r1
 800ce78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce82:	d10a      	bne.n	800ce9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00a      	beq.n	800cebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	430a      	orrs	r2, r1
 800ceba:	605a      	str	r2, [r3, #4]
  }
}
 800cebc:	bf00      	nop
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af02      	add	r7, sp, #8
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ced8:	f7f4 ffa4 	bl	8001e24 <HAL_GetTick>
 800cedc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f003 0308 	and.w	r3, r3, #8
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	d10e      	bne.n	800cf0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ceec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cef0:	9300      	str	r3, [sp, #0]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 f82c 	bl	800cf58 <UART_WaitOnFlagUntilTimeout>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d001      	beq.n	800cf0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf06:	2303      	movs	r3, #3
 800cf08:	e022      	b.n	800cf50 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b04      	cmp	r3, #4
 800cf16:	d10e      	bne.n	800cf36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cf18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cf1c:	9300      	str	r3, [sp, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 f816 	bl	800cf58 <UART_WaitOnFlagUntilTimeout>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d001      	beq.n	800cf36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	e00c      	b.n	800cf50 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2220      	movs	r2, #32
 800cf42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	4613      	mov	r3, r2
 800cf66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf68:	e062      	b.n	800d030 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf70:	d05e      	beq.n	800d030 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf72:	f7f4 ff57 	bl	8001e24 <HAL_GetTick>
 800cf76:	4602      	mov	r2, r0
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	69ba      	ldr	r2, [r7, #24]
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	d302      	bcc.n	800cf88 <UART_WaitOnFlagUntilTimeout+0x30>
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d11d      	bne.n	800cfc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	681a      	ldr	r2, [r3, #0]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cf96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	689a      	ldr	r2, [r3, #8]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f022 0201 	bic.w	r2, r2, #1
 800cfa6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	2220      	movs	r2, #32
 800cfac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e045      	b.n	800d050 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f003 0304 	and.w	r3, r3, #4
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d02e      	beq.n	800d030 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cfe0:	d126      	bne.n	800d030 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800cffa:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	689a      	ldr	r2, [r3, #8]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f022 0201 	bic.w	r2, r2, #1
 800d00a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2220      	movs	r2, #32
 800d010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2220      	movs	r2, #32
 800d018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2220      	movs	r2, #32
 800d020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e00f      	b.n	800d050 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	69da      	ldr	r2, [r3, #28]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	4013      	ands	r3, r2
 800d03a:	68ba      	ldr	r2, [r7, #8]
 800d03c:	429a      	cmp	r2, r3
 800d03e:	bf0c      	ite	eq
 800d040:	2301      	moveq	r3, #1
 800d042:	2300      	movne	r3, #0
 800d044:	b2db      	uxtb	r3, r3
 800d046:	461a      	mov	r2, r3
 800d048:	79fb      	ldrb	r3, [r7, #7]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d08d      	beq.n	800cf6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d066:	2b01      	cmp	r3, #1
 800d068:	d101      	bne.n	800d06e <HAL_UARTEx_DisableFifoMode+0x16>
 800d06a:	2302      	movs	r3, #2
 800d06c:	e027      	b.n	800d0be <HAL_UARTEx_DisableFifoMode+0x66>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2201      	movs	r2, #1
 800d072:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2224      	movs	r2, #36	; 0x24
 800d07a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f022 0201 	bic.w	r2, r2, #1
 800d094:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d09c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	68fa      	ldr	r2, [r7, #12]
 800d0aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2220      	movs	r2, #32
 800d0b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3714      	adds	r7, #20
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b084      	sub	sp, #16
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d101      	bne.n	800d0e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0de:	2302      	movs	r3, #2
 800d0e0:	e02d      	b.n	800d13e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2201      	movs	r2, #1
 800d0e6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2224      	movs	r2, #36	; 0x24
 800d0ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	681a      	ldr	r2, [r3, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f022 0201 	bic.w	r2, r2, #1
 800d108:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f850 	bl	800d1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2220      	movs	r2, #32
 800d130:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b084      	sub	sp, #16
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
 800d14e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800d156:	2b01      	cmp	r3, #1
 800d158:	d101      	bne.n	800d15e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d15a:	2302      	movs	r3, #2
 800d15c:	e02d      	b.n	800d1ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2201      	movs	r2, #1
 800d162:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2224      	movs	r2, #36	; 0x24
 800d16a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f022 0201 	bic.w	r2, r2, #1
 800d184:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	683a      	ldr	r2, [r7, #0]
 800d196:	430a      	orrs	r2, r1
 800d198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 f812 	bl	800d1c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3710      	adds	r7, #16
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
	...

0800d1c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b089      	sub	sp, #36	; 0x24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800d1cc:	4a2f      	ldr	r2, [pc, #188]	; (800d28c <UARTEx_SetNbDataToProcess+0xc8>)
 800d1ce:	f107 0314 	add.w	r3, r7, #20
 800d1d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1d6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800d1da:	4a2d      	ldr	r2, [pc, #180]	; (800d290 <UARTEx_SetNbDataToProcess+0xcc>)
 800d1dc:	f107 030c 	add.w	r3, r7, #12
 800d1e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1e4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d108      	bne.n	800d202 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d200:	e03d      	b.n	800d27e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d202:	2310      	movs	r3, #16
 800d204:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d206:	2310      	movs	r3, #16
 800d208:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	0e5b      	lsrs	r3, r3, #25
 800d212:	b2db      	uxtb	r3, r3
 800d214:	f003 0307 	and.w	r3, r3, #7
 800d218:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
 800d220:	0f5b      	lsrs	r3, r3, #29
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0307 	and.w	r3, r3, #7
 800d228:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800d22a:	7fbb      	ldrb	r3, [r7, #30]
 800d22c:	7f3a      	ldrb	r2, [r7, #28]
 800d22e:	f107 0120 	add.w	r1, r7, #32
 800d232:	440a      	add	r2, r1
 800d234:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d238:	fb02 f303 	mul.w	r3, r2, r3
 800d23c:	7f3a      	ldrb	r2, [r7, #28]
 800d23e:	f107 0120 	add.w	r1, r7, #32
 800d242:	440a      	add	r2, r1
 800d244:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d248:	fb93 f3f2 	sdiv	r3, r3, r2
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800d254:	7ffb      	ldrb	r3, [r7, #31]
 800d256:	7f7a      	ldrb	r2, [r7, #29]
 800d258:	f107 0120 	add.w	r1, r7, #32
 800d25c:	440a      	add	r2, r1
 800d25e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800d262:	fb02 f303 	mul.w	r3, r2, r3
 800d266:	7f7a      	ldrb	r2, [r7, #29]
 800d268:	f107 0120 	add.w	r1, r7, #32
 800d26c:	440a      	add	r2, r1
 800d26e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800d272:	fb93 f3f2 	sdiv	r3, r3, r2
 800d276:	b29a      	uxth	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d27e:	bf00      	nop
 800d280:	3724      	adds	r7, #36	; 0x24
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr
 800d28a:	bf00      	nop
 800d28c:	08016608 	.word	0x08016608
 800d290:	08016610 	.word	0x08016610

0800d294 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d294:	b084      	sub	sp, #16
 800d296:	b480      	push	{r7}
 800d298:	b085      	sub	sp, #20
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	6078      	str	r0, [r7, #4]
 800d29e:	f107 001c 	add.w	r0, r7, #28
 800d2a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d2aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d2ae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800d2b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800d2b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800d2ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d2bc:	68fa      	ldr	r2, [r7, #12]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685a      	ldr	r2, [r3, #4]
 800d2c6:	4b07      	ldr	r3, [pc, #28]	; (800d2e4 <SDMMC_Init+0x50>)
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	68fa      	ldr	r2, [r7, #12]
 800d2cc:	431a      	orrs	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d2d2:	2300      	movs	r3, #0
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3714      	adds	r7, #20
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2de:	b004      	add	sp, #16
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	ffc02c00 	.word	0xffc02c00

0800d2e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d302:	b480      	push	{r7}
 800d304:	b083      	sub	sp, #12
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
 800d30a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d316:	2300      	movs	r3, #0
}
 800d318:	4618      	mov	r0, r3
 800d31a:	370c      	adds	r7, #12
 800d31c:	46bd      	mov	sp, r7
 800d31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d322:	4770      	bx	lr

0800d324 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f043 0203 	orr.w	r2, r3, #3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr

0800d346 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d346:	b480      	push	{r7}
 800d348:	b083      	sub	sp, #12
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f003 0303 	and.w	r3, r3, #3
}
 800d356:	4618      	mov	r0, r3
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
	...

0800d364 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d364:	b480      	push	{r7}
 800d366:	b085      	sub	sp, #20
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d36e:	2300      	movs	r3, #0
 800d370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681a      	ldr	r2, [r3, #0]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d382:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d388:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d38e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d390:	68fa      	ldr	r2, [r7, #12]
 800d392:	4313      	orrs	r3, r2
 800d394:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	68da      	ldr	r2, [r3, #12]
 800d39a:	4b06      	ldr	r3, [pc, #24]	; (800d3b4 <SDMMC_SendCommand+0x50>)
 800d39c:	4013      	ands	r3, r2
 800d39e:	68fa      	ldr	r2, [r7, #12]
 800d3a0:	431a      	orrs	r2, r3
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3a6:	2300      	movs	r3, #0
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3714      	adds	r7, #20
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b2:	4770      	bx	lr
 800d3b4:	fffee0c0 	.word	0xfffee0c0

0800d3b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	691b      	ldr	r3, [r3, #16]
 800d3c4:	b2db      	uxtb	r3, r3
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	370c      	adds	r7, #12
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d0:	4770      	bx	lr

0800d3d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d3d2:	b480      	push	{r7}
 800d3d4:	b085      	sub	sp, #20
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
 800d3da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	3314      	adds	r3, #20
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3714      	adds	r7, #20
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b085      	sub	sp, #20
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d402:	2300      	movs	r3, #0
 800d404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	685a      	ldr	r2, [r3, #4]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d41e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d424:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d42a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4313      	orrs	r3, r2
 800d430:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d436:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	431a      	orrs	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d442:	2300      	movs	r3, #0

}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b088      	sub	sp, #32
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d45e:	2310      	movs	r3, #16
 800d460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d462:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d468:	2300      	movs	r3, #0
 800d46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d46c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d470:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d472:	f107 0308 	add.w	r3, r7, #8
 800d476:	4619      	mov	r1, r3
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f7ff ff73 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d47e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d482:	2110      	movs	r1, #16
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 faaf 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d48a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d48c:	69fb      	ldr	r3, [r7, #28]
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3720      	adds	r7, #32
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b088      	sub	sp, #32
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d4a4:	2311      	movs	r3, #17
 800d4a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4b8:	f107 0308 	add.w	r3, r7, #8
 800d4bc:	4619      	mov	r1, r3
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff ff50 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4c8:	2111      	movs	r1, #17
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 fa8c 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d4d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d2:	69fb      	ldr	r3, [r7, #28]
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3720      	adds	r7, #32
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b088      	sub	sp, #32
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d4ea:	2312      	movs	r3, #18
 800d4ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4fe:	f107 0308 	add.w	r3, r7, #8
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ff2d 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d50e:	2112      	movs	r1, #18
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 fa69 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d518:	69fb      	ldr	r3, [r7, #28]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3720      	adds	r7, #32
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b088      	sub	sp, #32
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
 800d52a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d530:	2318      	movs	r3, #24
 800d532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d534:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d53e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d544:	f107 0308 	add.w	r3, r7, #8
 800d548:	4619      	mov	r1, r3
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f7ff ff0a 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d550:	f241 3288 	movw	r2, #5000	; 0x1388
 800d554:	2118      	movs	r1, #24
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa46 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d55c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d55e:	69fb      	ldr	r3, [r7, #28]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3720      	adds	r7, #32
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d576:	2319      	movs	r3, #25
 800d578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d57a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d580:	2300      	movs	r3, #0
 800d582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d58a:	f107 0308 	add.w	r3, r7, #8
 800d58e:	4619      	mov	r1, r3
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f7ff fee7 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d596:	f241 3288 	movw	r2, #5000	; 0x1388
 800d59a:	2119      	movs	r1, #25
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 fa23 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d5a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5a4:	69fb      	ldr	r3, [r7, #28]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3720      	adds	r7, #32
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bd80      	pop	{r7, pc}
	...

0800d5b0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b088      	sub	sp, #32
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d5bc:	230c      	movs	r3, #12
 800d5be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d5ce:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	68db      	ldr	r3, [r3, #12]
 800d5e0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5e8:	f107 0308 	add.w	r3, r7, #8
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7ff feb8 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d5f4:	4a0b      	ldr	r2, [pc, #44]	; (800d624 <SDMMC_CmdStopTransfer+0x74>)
 800d5f6:	210c      	movs	r1, #12
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f9f5 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d5fe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	68db      	ldr	r3, [r3, #12]
 800d604:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d60c:	69fb      	ldr	r3, [r7, #28]
 800d60e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d612:	d101      	bne.n	800d618 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d614:	2300      	movs	r3, #0
 800d616:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d618:	69fb      	ldr	r3, [r7, #28]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3720      	adds	r7, #32
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}
 800d622:	bf00      	nop
 800d624:	05f5e100 	.word	0x05f5e100

0800d628 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b08a      	sub	sp, #40	; 0x28
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d638:	2307      	movs	r3, #7
 800d63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d63c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d640:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d642:	2300      	movs	r3, #0
 800d644:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d64a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d64c:	f107 0310 	add.w	r3, r7, #16
 800d650:	4619      	mov	r1, r3
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f7ff fe86 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d658:	f241 3288 	movw	r2, #5000	; 0x1388
 800d65c:	2107      	movs	r1, #7
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f000 f9c2 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d664:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3728      	adds	r7, #40	; 0x28
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d678:	2300      	movs	r3, #0
 800d67a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d67c:	2300      	movs	r3, #0
 800d67e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d680:	2300      	movs	r3, #0
 800d682:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d684:	2300      	movs	r3, #0
 800d686:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d68c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d68e:	f107 0308 	add.w	r3, r7, #8
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7ff fe65 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f976 	bl	800d98c <SDMMC_GetCmdError>
 800d6a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6a2:	69fb      	ldr	r3, [r7, #28]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3720      	adds	r7, #32
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b088      	sub	sp, #32
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d6b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d6ba:	2308      	movs	r3, #8
 800d6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6be:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6ce:	f107 0308 	add.w	r3, r7, #8
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f7ff fe45 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fb78 	bl	800ddd0 <SDMMC_GetCmdResp7>
 800d6e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6e2:	69fb      	ldr	r3, [r7, #28]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6fa:	2337      	movs	r3, #55	; 0x37
 800d6fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d704:	2300      	movs	r3, #0
 800d706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d70c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d70e:	f107 0308 	add.w	r3, r7, #8
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f7ff fe25 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d71a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d71e:	2137      	movs	r1, #55	; 0x37
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 f961 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d726:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d728:	69fb      	ldr	r3, [r7, #28]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3720      	adds	r7, #32
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}

0800d732 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d732:	b580      	push	{r7, lr}
 800d734:	b088      	sub	sp, #32
 800d736:	af00      	add	r7, sp, #0
 800d738:	6078      	str	r0, [r7, #4]
 800d73a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d740:	2329      	movs	r3, #41	; 0x29
 800d742:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d748:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d74a:	2300      	movs	r3, #0
 800d74c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d74e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d752:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d754:	f107 0308 	add.w	r3, r7, #8
 800d758:	4619      	mov	r1, r3
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fe02 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f000 fa7d 	bl	800dc60 <SDMMC_GetCmdResp3>
 800d766:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d768:	69fb      	ldr	r3, [r7, #28]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3720      	adds	r7, #32
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b088      	sub	sp, #32
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
 800d77a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d780:	2306      	movs	r3, #6
 800d782:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d784:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d788:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d78a:	2300      	movs	r3, #0
 800d78c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d792:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d794:	f107 0308 	add.w	r3, r7, #8
 800d798:	4619      	mov	r1, r3
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff fde2 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d7a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7a4:	2106      	movs	r1, #6
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 f91e 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d7ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7ae:	69fb      	ldr	r3, [r7, #28]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3720      	adds	r7, #32
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b088      	sub	sp, #32
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d7c4:	2333      	movs	r3, #51	; 0x33
 800d7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7d8:	f107 0308 	add.w	r3, r7, #8
 800d7dc:	4619      	mov	r1, r3
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f7ff fdc0 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7e8:	2133      	movs	r1, #51	; 0x33
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 f8fc 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7f2:	69fb      	ldr	r3, [r7, #28]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3720      	adds	r7, #32
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b088      	sub	sp, #32
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d804:	2300      	movs	r3, #0
 800d806:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d808:	2302      	movs	r3, #2
 800d80a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d80c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d812:	2300      	movs	r3, #0
 800d814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d81c:	f107 0308 	add.w	r3, r7, #8
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f7ff fd9e 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 f9cf 	bl	800dbcc <SDMMC_GetCmdResp2>
 800d82e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d830:	69fb      	ldr	r3, [r7, #28]
}
 800d832:	4618      	mov	r0, r3
 800d834:	3720      	adds	r7, #32
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d83a:	b580      	push	{r7, lr}
 800d83c:	b088      	sub	sp, #32
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d848:	2309      	movs	r3, #9
 800d84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d84c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d850:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d852:	2300      	movs	r3, #0
 800d854:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d85a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d85c:	f107 0308 	add.w	r3, r7, #8
 800d860:	4619      	mov	r1, r3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f7ff fd7e 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 f9af 	bl	800dbcc <SDMMC_GetCmdResp2>
 800d86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d870:	69fb      	ldr	r3, [r7, #28]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3720      	adds	r7, #32
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b088      	sub	sp, #32
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d884:	2300      	movs	r3, #0
 800d886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d888:	2303      	movs	r3, #3
 800d88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d88c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d892:	2300      	movs	r3, #0
 800d894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d89a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d89c:	f107 0308 	add.w	r3, r7, #8
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7ff fd5e 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	2103      	movs	r1, #3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fa17 	bl	800dce0 <SDMMC_GetCmdResp6>
 800d8b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b4:	69fb      	ldr	r3, [r7, #28]
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}

0800d8be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d8be:	b580      	push	{r7, lr}
 800d8c0:	b088      	sub	sp, #32
 800d8c2:	af00      	add	r7, sp, #0
 800d8c4:	6078      	str	r0, [r7, #4]
 800d8c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d8cc:	230d      	movs	r3, #13
 800d8ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fd3c 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d8ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8f0:	210d      	movs	r1, #13
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f000 f878 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8fa:	69fb      	ldr	r3, [r7, #28]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3720      	adds	r7, #32
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b088      	sub	sp, #32
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d90c:	2300      	movs	r3, #0
 800d90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d910:	230d      	movs	r3, #13
 800d912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d914:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d918:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d91e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d922:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d924:	f107 0308 	add.w	r3, r7, #8
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff fd1a 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d930:	f241 3288 	movw	r2, #5000	; 0x1388
 800d934:	210d      	movs	r1, #13
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f856 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d93c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d93e:	69fb      	ldr	r3, [r7, #28]
}
 800d940:	4618      	mov	r0, r3
 800d942:	3720      	adds	r7, #32
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b088      	sub	sp, #32
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800d950:	2300      	movs	r3, #0
 800d952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800d954:	230b      	movs	r3, #11
 800d956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d958:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d95c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d95e:	2300      	movs	r3, #0
 800d960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d966:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d968:	f107 0308 	add.w	r3, r7, #8
 800d96c:	4619      	mov	r1, r3
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fcf8 	bl	800d364 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800d974:	f241 3288 	movw	r2, #5000	; 0x1388
 800d978:	210b      	movs	r1, #11
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f834 	bl	800d9e8 <SDMMC_GetCmdResp1>
 800d980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d982:	69fb      	ldr	r3, [r7, #28]
}
 800d984:	4618      	mov	r0, r3
 800d986:	3720      	adds	r7, #32
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d994:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <SDMMC_GetCmdError+0x50>)
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a11      	ldr	r2, [pc, #68]	; (800d9e0 <SDMMC_GetCmdError+0x54>)
 800d99a:	fba2 2303 	umull	r2, r3, r2, r3
 800d99e:	0a5b      	lsrs	r3, r3, #9
 800d9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9a4:	fb02 f303 	mul.w	r3, r2, r3
 800d9a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	1e5a      	subs	r2, r3, #1
 800d9ae:	60fa      	str	r2, [r7, #12]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d102      	bne.n	800d9ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9b8:	e009      	b.n	800d9ce <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d0f1      	beq.n	800d9aa <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a06      	ldr	r2, [pc, #24]	; (800d9e4 <SDMMC_GetCmdError+0x58>)
 800d9ca:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3714      	adds	r7, #20
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	24000094 	.word	0x24000094
 800d9e0:	10624dd3 	.word	0x10624dd3
 800d9e4:	002000c5 	.word	0x002000c5

0800d9e8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b088      	sub	sp, #32
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	60f8      	str	r0, [r7, #12]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	607a      	str	r2, [r7, #4]
 800d9f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9f6:	4b70      	ldr	r3, [pc, #448]	; (800dbb8 <SDMMC_GetCmdResp1+0x1d0>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a70      	ldr	r2, [pc, #448]	; (800dbbc <SDMMC_GetCmdResp1+0x1d4>)
 800d9fc:	fba2 2303 	umull	r2, r3, r2, r3
 800da00:	0a5a      	lsrs	r2, r3, #9
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	fb02 f303 	mul.w	r3, r2, r3
 800da08:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	1e5a      	subs	r2, r3, #1
 800da0e:	61fa      	str	r2, [r7, #28]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d102      	bne.n	800da1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da18:	e0c9      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	4b67      	ldr	r3, [pc, #412]	; (800dbc0 <SDMMC_GetCmdResp1+0x1d8>)
 800da24:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0ef      	beq.n	800da0a <SDMMC_GetCmdResp1+0x22>
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1ea      	bne.n	800da0a <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da38:	f003 0304 	and.w	r3, r3, #4
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d004      	beq.n	800da4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2204      	movs	r2, #4
 800da44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da46:	2304      	movs	r3, #4
 800da48:	e0b1      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4e:	f003 0301 	and.w	r3, r3, #1
 800da52:	2b00      	cmp	r3, #0
 800da54:	d004      	beq.n	800da60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2201      	movs	r2, #1
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e0a6      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	4a58      	ldr	r2, [pc, #352]	; (800dbc4 <SDMMC_GetCmdResp1+0x1dc>)
 800da64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff fca6 	bl	800d3b8 <SDMMC_GetCommandResponse>
 800da6c:	4603      	mov	r3, r0
 800da6e:	461a      	mov	r2, r3
 800da70:	7afb      	ldrb	r3, [r7, #11]
 800da72:	4293      	cmp	r3, r2
 800da74:	d001      	beq.n	800da7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da76:	2301      	movs	r3, #1
 800da78:	e099      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800da7a:	2100      	movs	r1, #0
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f7ff fca8 	bl	800d3d2 <SDMMC_GetResponse>
 800da82:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	4b50      	ldr	r3, [pc, #320]	; (800dbc8 <SDMMC_GetCmdResp1+0x1e0>)
 800da88:	4013      	ands	r3, r2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800da8e:	2300      	movs	r3, #0
 800da90:	e08d      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2b00      	cmp	r3, #0
 800da96:	da02      	bge.n	800da9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da9c:	e087      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800daa8:	2340      	movs	r3, #64	; 0x40
 800daaa:	e080      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800dab6:	2380      	movs	r3, #128	; 0x80
 800dab8:	e079      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d002      	beq.n	800daca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800dac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dac8:	e071      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d002      	beq.n	800dada <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800dad4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dad8:	e069      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d002      	beq.n	800daea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dae8:	e061      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800daf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800daf8:	e059      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800db04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800db08:	e051      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db10:	2b00      	cmp	r3, #0
 800db12:	d002      	beq.n	800db1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800db14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800db18:	e049      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800db20:	2b00      	cmp	r3, #0
 800db22:	d002      	beq.n	800db2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800db24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800db28:	e041      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800db34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db38:	e039      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db40:	2b00      	cmp	r3, #0
 800db42:	d002      	beq.n	800db4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db48:	e031      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800db58:	e029      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800db68:	e021      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d002      	beq.n	800db7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800db78:	e019      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d002      	beq.n	800db8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800db88:	e011      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db90:	2b00      	cmp	r3, #0
 800db92:	d002      	beq.n	800db9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db98:	e009      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f003 0308 	and.w	r3, r3, #8
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dba4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dba8:	e001      	b.n	800dbae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dbaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3720      	adds	r7, #32
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	24000094 	.word	0x24000094
 800dbbc:	10624dd3 	.word	0x10624dd3
 800dbc0:	00200045 	.word	0x00200045
 800dbc4:	002000c5 	.word	0x002000c5
 800dbc8:	fdffe008 	.word	0xfdffe008

0800dbcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dbd4:	4b1f      	ldr	r3, [pc, #124]	; (800dc54 <SDMMC_GetCmdResp2+0x88>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a1f      	ldr	r2, [pc, #124]	; (800dc58 <SDMMC_GetCmdResp2+0x8c>)
 800dbda:	fba2 2303 	umull	r2, r3, r2, r3
 800dbde:	0a5b      	lsrs	r3, r3, #9
 800dbe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dbe4:	fb02 f303 	mul.w	r3, r2, r3
 800dbe8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	1e5a      	subs	r2, r3, #1
 800dbee:	60fa      	str	r2, [r7, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d102      	bne.n	800dbfa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbf8:	e026      	b.n	800dc48 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbfe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d0ef      	beq.n	800dbea <SDMMC_GetCmdResp2+0x1e>
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d1ea      	bne.n	800dbea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc18:	f003 0304 	and.w	r3, r3, #4
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d004      	beq.n	800dc2a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2204      	movs	r2, #4
 800dc24:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc26:	2304      	movs	r3, #4
 800dc28:	e00e      	b.n	800dc48 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc2e:	f003 0301 	and.w	r3, r3, #1
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	e003      	b.n	800dc48 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a06      	ldr	r2, [pc, #24]	; (800dc5c <SDMMC_GetCmdResp2+0x90>)
 800dc44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc46:	2300      	movs	r3, #0
}
 800dc48:	4618      	mov	r0, r3
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	24000094 	.word	0x24000094
 800dc58:	10624dd3 	.word	0x10624dd3
 800dc5c:	002000c5 	.word	0x002000c5

0800dc60 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800dc60:	b480      	push	{r7}
 800dc62:	b085      	sub	sp, #20
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc68:	4b1a      	ldr	r3, [pc, #104]	; (800dcd4 <SDMMC_GetCmdResp3+0x74>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	4a1a      	ldr	r2, [pc, #104]	; (800dcd8 <SDMMC_GetCmdResp3+0x78>)
 800dc6e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc72:	0a5b      	lsrs	r3, r3, #9
 800dc74:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc78:	fb02 f303 	mul.w	r3, r2, r3
 800dc7c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	1e5a      	subs	r2, r3, #1
 800dc82:	60fa      	str	r2, [r7, #12]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc8c:	e01b      	b.n	800dcc6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc92:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d0ef      	beq.n	800dc7e <SDMMC_GetCmdResp3+0x1e>
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1ea      	bne.n	800dc7e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcac:	f003 0304 	and.w	r3, r3, #4
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d004      	beq.n	800dcbe <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2204      	movs	r2, #4
 800dcb8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcba:	2304      	movs	r3, #4
 800dcbc:	e003      	b.n	800dcc6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a06      	ldr	r2, [pc, #24]	; (800dcdc <SDMMC_GetCmdResp3+0x7c>)
 800dcc2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr
 800dcd2:	bf00      	nop
 800dcd4:	24000094 	.word	0x24000094
 800dcd8:	10624dd3 	.word	0x10624dd3
 800dcdc:	002000c5 	.word	0x002000c5

0800dce0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	60f8      	str	r0, [r7, #12]
 800dce8:	460b      	mov	r3, r1
 800dcea:	607a      	str	r2, [r7, #4]
 800dcec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dcee:	4b35      	ldr	r3, [pc, #212]	; (800ddc4 <SDMMC_GetCmdResp6+0xe4>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	4a35      	ldr	r2, [pc, #212]	; (800ddc8 <SDMMC_GetCmdResp6+0xe8>)
 800dcf4:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf8:	0a5b      	lsrs	r3, r3, #9
 800dcfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcfe:	fb02 f303 	mul.w	r3, r2, r3
 800dd02:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	1e5a      	subs	r2, r3, #1
 800dd08:	61fa      	str	r2, [r7, #28]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d102      	bne.n	800dd14 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd12:	e052      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd18:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d0ef      	beq.n	800dd04 <SDMMC_GetCmdResp6+0x24>
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d1ea      	bne.n	800dd04 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd32:	f003 0304 	and.w	r3, r3, #4
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d004      	beq.n	800dd44 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2204      	movs	r2, #4
 800dd3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd40:	2304      	movs	r3, #4
 800dd42:	e03a      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d004      	beq.n	800dd5a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2201      	movs	r2, #1
 800dd54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd56:	2301      	movs	r3, #1
 800dd58:	e02f      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f7ff fb2c 	bl	800d3b8 <SDMMC_GetCommandResponse>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	7afb      	ldrb	r3, [r7, #11]
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d001      	beq.n	800dd6e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	e025      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	4a16      	ldr	r2, [pc, #88]	; (800ddcc <SDMMC_GetCmdResp6+0xec>)
 800dd72:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dd74:	2100      	movs	r1, #0
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff fb2b 	bl	800d3d2 <SDMMC_GetResponse>
 800dd7c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d106      	bne.n	800dd96 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	0c1b      	lsrs	r3, r3, #16
 800dd8c:	b29a      	uxth	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dd92:	2300      	movs	r3, #0
 800dd94:	e011      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dda0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dda4:	e009      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d002      	beq.n	800ddb6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ddb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ddb4:	e001      	b.n	800ddba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ddb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	24000094 	.word	0x24000094
 800ddc8:	10624dd3 	.word	0x10624dd3
 800ddcc:	002000c5 	.word	0x002000c5

0800ddd0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b085      	sub	sp, #20
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ddd8:	4b22      	ldr	r3, [pc, #136]	; (800de64 <SDMMC_GetCmdResp7+0x94>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a22      	ldr	r2, [pc, #136]	; (800de68 <SDMMC_GetCmdResp7+0x98>)
 800ddde:	fba2 2303 	umull	r2, r3, r2, r3
 800dde2:	0a5b      	lsrs	r3, r3, #9
 800dde4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dde8:	fb02 f303 	mul.w	r3, r2, r3
 800ddec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	1e5a      	subs	r2, r3, #1
 800ddf2:	60fa      	str	r2, [r7, #12]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d102      	bne.n	800ddfe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddfc:	e02c      	b.n	800de58 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d0ef      	beq.n	800ddee <SDMMC_GetCmdResp7+0x1e>
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800de14:	2b00      	cmp	r3, #0
 800de16:	d1ea      	bne.n	800ddee <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2204      	movs	r2, #4
 800de28:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800de2a:	2304      	movs	r3, #4
 800de2c:	e014      	b.n	800de58 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d004      	beq.n	800de44 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2201      	movs	r2, #1
 800de3e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800de40:	2301      	movs	r3, #1
 800de42:	e009      	b.n	800de58 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d002      	beq.n	800de56 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2240      	movs	r2, #64	; 0x40
 800de54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800de56:	2300      	movs	r3, #0

}
 800de58:	4618      	mov	r0, r3
 800de5a:	3714      	adds	r7, #20
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr
 800de64:	24000094 	.word	0x24000094
 800de68:	10624dd3 	.word	0x10624dd3

0800de6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800de6c:	b084      	sub	sp, #16
 800de6e:	b580      	push	{r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	f107 001c 	add.w	r0, r7, #28
 800de7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de80:	2b01      	cmp	r3, #1
 800de82:	d120      	bne.n	800dec6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68da      	ldr	r2, [r3, #12]
 800de94:	4b25      	ldr	r3, [pc, #148]	; (800df2c <USB_CoreInit+0xc0>)
 800de96:	4013      	ands	r3, r2
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deaa:	2b01      	cmp	r3, #1
 800deac:	d105      	bne.n	800deba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68db      	ldr	r3, [r3, #12]
 800deb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f001 fabe 	bl	800f43c <USB_CoreReset>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
 800dec4:	e01a      	b.n	800defc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	68db      	ldr	r3, [r3, #12]
 800deca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f001 fab2 	bl	800f43c <USB_CoreReset>
 800ded8:	4603      	mov	r3, r0
 800deda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d106      	bne.n	800def0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	639a      	str	r2, [r3, #56]	; 0x38
 800deee:	e005      	b.n	800defc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800defc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defe:	2b01      	cmp	r3, #1
 800df00:	d10b      	bne.n	800df1a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	f043 0206 	orr.w	r2, r3, #6
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	689b      	ldr	r3, [r3, #8]
 800df12:	f043 0220 	orr.w	r2, r3, #32
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800df1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df26:	b004      	add	sp, #16
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop
 800df2c:	ffbdffbf 	.word	0xffbdffbf

0800df30 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800df30:	b480      	push	{r7}
 800df32:	b087      	sub	sp, #28
 800df34:	af00      	add	r7, sp, #0
 800df36:	60f8      	str	r0, [r7, #12]
 800df38:	60b9      	str	r1, [r7, #8]
 800df3a:	4613      	mov	r3, r2
 800df3c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800df3e:	79fb      	ldrb	r3, [r7, #7]
 800df40:	2b02      	cmp	r3, #2
 800df42:	d165      	bne.n	800e010 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	4a41      	ldr	r2, [pc, #260]	; (800e04c <USB_SetTurnaroundTime+0x11c>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d906      	bls.n	800df5a <USB_SetTurnaroundTime+0x2a>
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	4a40      	ldr	r2, [pc, #256]	; (800e050 <USB_SetTurnaroundTime+0x120>)
 800df50:	4293      	cmp	r3, r2
 800df52:	d802      	bhi.n	800df5a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800df54:	230f      	movs	r3, #15
 800df56:	617b      	str	r3, [r7, #20]
 800df58:	e062      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	4a3c      	ldr	r2, [pc, #240]	; (800e050 <USB_SetTurnaroundTime+0x120>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d906      	bls.n	800df70 <USB_SetTurnaroundTime+0x40>
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	4a3b      	ldr	r2, [pc, #236]	; (800e054 <USB_SetTurnaroundTime+0x124>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d802      	bhi.n	800df70 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800df6a:	230e      	movs	r3, #14
 800df6c:	617b      	str	r3, [r7, #20]
 800df6e:	e057      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	4a38      	ldr	r2, [pc, #224]	; (800e054 <USB_SetTurnaroundTime+0x124>)
 800df74:	4293      	cmp	r3, r2
 800df76:	d906      	bls.n	800df86 <USB_SetTurnaroundTime+0x56>
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	4a37      	ldr	r2, [pc, #220]	; (800e058 <USB_SetTurnaroundTime+0x128>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d802      	bhi.n	800df86 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800df80:	230d      	movs	r3, #13
 800df82:	617b      	str	r3, [r7, #20]
 800df84:	e04c      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	4a33      	ldr	r2, [pc, #204]	; (800e058 <USB_SetTurnaroundTime+0x128>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d906      	bls.n	800df9c <USB_SetTurnaroundTime+0x6c>
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	4a32      	ldr	r2, [pc, #200]	; (800e05c <USB_SetTurnaroundTime+0x12c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d802      	bhi.n	800df9c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800df96:	230c      	movs	r3, #12
 800df98:	617b      	str	r3, [r7, #20]
 800df9a:	e041      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	4a2f      	ldr	r2, [pc, #188]	; (800e05c <USB_SetTurnaroundTime+0x12c>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d906      	bls.n	800dfb2 <USB_SetTurnaroundTime+0x82>
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	4a2e      	ldr	r2, [pc, #184]	; (800e060 <USB_SetTurnaroundTime+0x130>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d802      	bhi.n	800dfb2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dfac:	230b      	movs	r3, #11
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	e036      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	4a2a      	ldr	r2, [pc, #168]	; (800e060 <USB_SetTurnaroundTime+0x130>)
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	d906      	bls.n	800dfc8 <USB_SetTurnaroundTime+0x98>
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	4a29      	ldr	r2, [pc, #164]	; (800e064 <USB_SetTurnaroundTime+0x134>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d802      	bhi.n	800dfc8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dfc2:	230a      	movs	r3, #10
 800dfc4:	617b      	str	r3, [r7, #20]
 800dfc6:	e02b      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	4a26      	ldr	r2, [pc, #152]	; (800e064 <USB_SetTurnaroundTime+0x134>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d906      	bls.n	800dfde <USB_SetTurnaroundTime+0xae>
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	4a25      	ldr	r2, [pc, #148]	; (800e068 <USB_SetTurnaroundTime+0x138>)
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	d802      	bhi.n	800dfde <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dfd8:	2309      	movs	r3, #9
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	e020      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	4a21      	ldr	r2, [pc, #132]	; (800e068 <USB_SetTurnaroundTime+0x138>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d906      	bls.n	800dff4 <USB_SetTurnaroundTime+0xc4>
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	4a20      	ldr	r2, [pc, #128]	; (800e06c <USB_SetTurnaroundTime+0x13c>)
 800dfea:	4293      	cmp	r3, r2
 800dfec:	d802      	bhi.n	800dff4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dfee:	2308      	movs	r3, #8
 800dff0:	617b      	str	r3, [r7, #20]
 800dff2:	e015      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	4a1d      	ldr	r2, [pc, #116]	; (800e06c <USB_SetTurnaroundTime+0x13c>)
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d906      	bls.n	800e00a <USB_SetTurnaroundTime+0xda>
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4a1c      	ldr	r2, [pc, #112]	; (800e070 <USB_SetTurnaroundTime+0x140>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d802      	bhi.n	800e00a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e004:	2307      	movs	r3, #7
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e00a      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e00a:	2306      	movs	r3, #6
 800e00c:	617b      	str	r3, [r7, #20]
 800e00e:	e007      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d102      	bne.n	800e01c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e016:	2309      	movs	r3, #9
 800e018:	617b      	str	r3, [r7, #20]
 800e01a:	e001      	b.n	800e020 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e01c:	2309      	movs	r3, #9
 800e01e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68da      	ldr	r2, [r3, #12]
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	029b      	lsls	r3, r3, #10
 800e034:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800e038:	431a      	orrs	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	371c      	adds	r7, #28
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	00d8acbf 	.word	0x00d8acbf
 800e050:	00e4e1bf 	.word	0x00e4e1bf
 800e054:	00f423ff 	.word	0x00f423ff
 800e058:	0106737f 	.word	0x0106737f
 800e05c:	011a499f 	.word	0x011a499f
 800e060:	01312cff 	.word	0x01312cff
 800e064:	014ca43f 	.word	0x014ca43f
 800e068:	016e35ff 	.word	0x016e35ff
 800e06c:	01a6ab1f 	.word	0x01a6ab1f
 800e070:	01e847ff 	.word	0x01e847ff

0800e074 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f043 0201 	orr.w	r2, r3, #1
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e096:	b480      	push	{r7}
 800e098:	b083      	sub	sp, #12
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689b      	ldr	r3, [r3, #8]
 800e0a2:	f023 0201 	bic.w	r2, r3, #1
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e0aa:	2300      	movs	r3, #0
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	2b01      	cmp	r3, #1
 800e0d4:	d106      	bne.n	800e0e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	60da      	str	r2, [r3, #12]
 800e0e2:	e00b      	b.n	800e0fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800e0e4:	78fb      	ldrb	r3, [r7, #3]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	60da      	str	r2, [r3, #12]
 800e0f6:	e001      	b.n	800e0fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800e0f8:	2301      	movs	r3, #1
 800e0fa:	e003      	b.n	800e104 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800e0fc:	2032      	movs	r0, #50	; 0x32
 800e0fe:	f7f3 fe9d 	bl	8001e3c <HAL_Delay>

  return HAL_OK;
 800e102:	2300      	movs	r3, #0
}
 800e104:	4618      	mov	r0, r3
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e10c:	b084      	sub	sp, #16
 800e10e:	b580      	push	{r7, lr}
 800e110:	b086      	sub	sp, #24
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e11a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e126:	2300      	movs	r3, #0
 800e128:	613b      	str	r3, [r7, #16]
 800e12a:	e009      	b.n	800e140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	3340      	adds	r3, #64	; 0x40
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	2200      	movs	r2, #0
 800e138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	3301      	adds	r3, #1
 800e13e:	613b      	str	r3, [r7, #16]
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	2b0e      	cmp	r3, #14
 800e144:	d9f2      	bls.n	800e12c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d11c      	bne.n	800e186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	68fa      	ldr	r2, [r7, #12]
 800e156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e15a:	f043 0302 	orr.w	r3, r3, #2
 800e15e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	601a      	str	r2, [r3, #0]
 800e184:	e005      	b.n	800e192 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e18a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e198:	461a      	mov	r2, r3
 800e19a:	2300      	movs	r3, #0
 800e19c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	680b      	ldr	r3, [r1, #0]
 800e1b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e1b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d10c      	bne.n	800e1d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d104      	bne.n	800e1c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e1be:	2100      	movs	r1, #0
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f949 	bl	800e458 <USB_SetDevSpeed>
 800e1c6:	e008      	b.n	800e1da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f944 	bl	800e458 <USB_SetDevSpeed>
 800e1d0:	e003      	b.n	800e1da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e1d2:	2103      	movs	r1, #3
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 f93f 	bl	800e458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e1da:	2110      	movs	r1, #16
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f8f3 	bl	800e3c8 <USB_FlushTxFifo>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d001      	beq.n	800e1ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f911 	bl	800e414 <USB_FlushRxFifo>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d001      	beq.n	800e1fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e202:	461a      	mov	r2, r3
 800e204:	2300      	movs	r3, #0
 800e206:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20e:	461a      	mov	r2, r3
 800e210:	2300      	movs	r3, #0
 800e212:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e21a:	461a      	mov	r2, r3
 800e21c:	2300      	movs	r3, #0
 800e21e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e220:	2300      	movs	r3, #0
 800e222:	613b      	str	r3, [r7, #16]
 800e224:	e043      	b.n	800e2ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	015a      	lsls	r2, r3, #5
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	4413      	add	r3, r2
 800e22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e23c:	d118      	bne.n	800e270 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d10a      	bne.n	800e25a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e250:	461a      	mov	r2, r3
 800e252:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	e013      	b.n	800e282 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	015a      	lsls	r2, r3, #5
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	4413      	add	r3, r2
 800e262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e266:	461a      	mov	r2, r3
 800e268:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	e008      	b.n	800e282 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	015a      	lsls	r2, r3, #5
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4413      	add	r3, r2
 800e278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e27c:	461a      	mov	r2, r3
 800e27e:	2300      	movs	r3, #0
 800e280:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	015a      	lsls	r2, r3, #5
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	4413      	add	r3, r2
 800e28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e28e:	461a      	mov	r2, r3
 800e290:	2300      	movs	r3, #0
 800e292:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	015a      	lsls	r2, r3, #5
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	4413      	add	r3, r2
 800e29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e2a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	613b      	str	r3, [r7, #16]
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	693a      	ldr	r2, [r7, #16]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d3b7      	bcc.n	800e226 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	e043      	b.n	800e344 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	015a      	lsls	r2, r3, #5
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2d2:	d118      	bne.n	800e306 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d10a      	bne.n	800e2f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	015a      	lsls	r2, r3, #5
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2e6:	461a      	mov	r2, r3
 800e2e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2ec:	6013      	str	r3, [r2, #0]
 800e2ee:	e013      	b.n	800e318 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e2f0:	693b      	ldr	r3, [r7, #16]
 800e2f2:	015a      	lsls	r2, r3, #5
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e2fc:	461a      	mov	r2, r3
 800e2fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e302:	6013      	str	r3, [r2, #0]
 800e304:	e008      	b.n	800e318 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	015a      	lsls	r2, r3, #5
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	4413      	add	r3, r2
 800e30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e312:	461a      	mov	r2, r3
 800e314:	2300      	movs	r3, #0
 800e316:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	015a      	lsls	r2, r3, #5
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	4413      	add	r3, r2
 800e320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e324:	461a      	mov	r2, r3
 800e326:	2300      	movs	r3, #0
 800e328:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e32a:	693b      	ldr	r3, [r7, #16]
 800e32c:	015a      	lsls	r2, r3, #5
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	4413      	add	r3, r2
 800e332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e336:	461a      	mov	r2, r3
 800e338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e33c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	3301      	adds	r3, #1
 800e342:	613b      	str	r3, [r7, #16]
 800e344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e346:	693a      	ldr	r2, [r7, #16]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d3b7      	bcc.n	800e2bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e352:	691b      	ldr	r3, [r3, #16]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e35a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e35e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2200      	movs	r2, #0
 800e364:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e36c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e370:	2b00      	cmp	r3, #0
 800e372:	d105      	bne.n	800e380 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	f043 0210 	orr.w	r2, r3, #16
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	699a      	ldr	r2, [r3, #24]
 800e384:	4b0e      	ldr	r3, [pc, #56]	; (800e3c0 <USB_DevInit+0x2b4>)
 800e386:	4313      	orrs	r3, r2
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e38c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d005      	beq.n	800e39e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	699b      	ldr	r3, [r3, #24]
 800e396:	f043 0208 	orr.w	r2, r3, #8
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d105      	bne.n	800e3b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	699a      	ldr	r2, [r3, #24]
 800e3a8:	4b06      	ldr	r3, [pc, #24]	; (800e3c4 <USB_DevInit+0x2b8>)
 800e3aa:	4313      	orrs	r3, r2
 800e3ac:	687a      	ldr	r2, [r7, #4]
 800e3ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e3bc:	b004      	add	sp, #16
 800e3be:	4770      	bx	lr
 800e3c0:	803c3800 	.word	0x803c3800
 800e3c4:	40000004 	.word	0x40000004

0800e3c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	019b      	lsls	r3, r3, #6
 800e3da:	f043 0220 	orr.w	r2, r3, #32
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	60fb      	str	r3, [r7, #12]
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	4a09      	ldr	r2, [pc, #36]	; (800e410 <USB_FlushTxFifo+0x48>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d901      	bls.n	800e3f4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e3f0:	2303      	movs	r3, #3
 800e3f2:	e006      	b.n	800e402 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	f003 0320 	and.w	r3, r3, #32
 800e3fc:	2b20      	cmp	r3, #32
 800e3fe:	d0f0      	beq.n	800e3e2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	00030d40 	.word	0x00030d40

0800e414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2210      	movs	r2, #16
 800e424:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3301      	adds	r3, #1
 800e42a:	60fb      	str	r3, [r7, #12]
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	4a09      	ldr	r2, [pc, #36]	; (800e454 <USB_FlushRxFifo+0x40>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d901      	bls.n	800e438 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e434:	2303      	movs	r3, #3
 800e436:	e006      	b.n	800e446 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	f003 0310 	and.w	r3, r3, #16
 800e440:	2b10      	cmp	r3, #16
 800e442:	d0f0      	beq.n	800e426 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e444:	2300      	movs	r3, #0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3714      	adds	r7, #20
 800e44a:	46bd      	mov	sp, r7
 800e44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e450:	4770      	bx	lr
 800e452:	bf00      	nop
 800e454:	00030d40 	.word	0x00030d40

0800e458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e458:	b480      	push	{r7}
 800e45a:	b085      	sub	sp, #20
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	460b      	mov	r3, r1
 800e462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	78fb      	ldrb	r3, [r7, #3]
 800e472:	68f9      	ldr	r1, [r7, #12]
 800e474:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e478:	4313      	orrs	r3, r2
 800e47a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3714      	adds	r7, #20
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b087      	sub	sp, #28
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e496:	693b      	ldr	r3, [r7, #16]
 800e498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f003 0306 	and.w	r3, r3, #6
 800e4a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d102      	bne.n	800e4b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	75fb      	strb	r3, [r7, #23]
 800e4ae:	e00a      	b.n	800e4c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d002      	beq.n	800e4bc <USB_GetDevSpeed+0x32>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b06      	cmp	r3, #6
 800e4ba:	d102      	bne.n	800e4c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e4bc:	2302      	movs	r3, #2
 800e4be:	75fb      	strb	r3, [r7, #23]
 800e4c0:	e001      	b.n	800e4c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e4c2:	230f      	movs	r3, #15
 800e4c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	371c      	adds	r7, #28
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	785b      	ldrb	r3, [r3, #1]
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d139      	bne.n	800e564 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e4f6:	69da      	ldr	r2, [r3, #28]
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	f003 030f 	and.w	r3, r3, #15
 800e500:	2101      	movs	r1, #1
 800e502:	fa01 f303 	lsl.w	r3, r1, r3
 800e506:	b29b      	uxth	r3, r3
 800e508:	68f9      	ldr	r1, [r7, #12]
 800e50a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e50e:	4313      	orrs	r3, r2
 800e510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	015a      	lsls	r2, r3, #5
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	4413      	add	r3, r2
 800e51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e524:	2b00      	cmp	r3, #0
 800e526:	d153      	bne.n	800e5d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	015a      	lsls	r2, r3, #5
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	4413      	add	r3, r2
 800e530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	78db      	ldrb	r3, [r3, #3]
 800e542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	059b      	lsls	r3, r3, #22
 800e54a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e54c:	431a      	orrs	r2, r3
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	0159      	lsls	r1, r3, #5
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	440b      	add	r3, r1
 800e556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e55a:	4619      	mov	r1, r3
 800e55c:	4b20      	ldr	r3, [pc, #128]	; (800e5e0 <USB_ActivateEndpoint+0x10c>)
 800e55e:	4313      	orrs	r3, r2
 800e560:	600b      	str	r3, [r1, #0]
 800e562:	e035      	b.n	800e5d0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e56a:	69da      	ldr	r2, [r3, #28]
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 030f 	and.w	r3, r3, #15
 800e574:	2101      	movs	r1, #1
 800e576:	fa01 f303 	lsl.w	r3, r1, r3
 800e57a:	041b      	lsls	r3, r3, #16
 800e57c:	68f9      	ldr	r1, [r7, #12]
 800e57e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e582:	4313      	orrs	r3, r2
 800e584:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	015a      	lsls	r2, r3, #5
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	4413      	add	r3, r2
 800e58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d119      	bne.n	800e5d0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	015a      	lsls	r2, r3, #5
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	4413      	add	r3, r2
 800e5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	78db      	ldrb	r3, [r3, #3]
 800e5b6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e5b8:	430b      	orrs	r3, r1
 800e5ba:	431a      	orrs	r2, r3
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	0159      	lsls	r1, r3, #5
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	440b      	add	r3, r1
 800e5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	4b05      	ldr	r3, [pc, #20]	; (800e5e0 <USB_ActivateEndpoint+0x10c>)
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3714      	adds	r7, #20
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	10008000 	.word	0x10008000

0800e5e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	781b      	ldrb	r3, [r3, #0]
 800e5f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	785b      	ldrb	r3, [r3, #1]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d161      	bne.n	800e6c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	015a      	lsls	r2, r3, #5
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	4413      	add	r3, r2
 800e608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e616:	d11f      	bne.n	800e658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	015a      	lsls	r2, r3, #5
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4413      	add	r3, r2
 800e620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	68ba      	ldr	r2, [r7, #8]
 800e628:	0151      	lsls	r1, r2, #5
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	440a      	add	r2, r1
 800e62e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e632:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	68ba      	ldr	r2, [r7, #8]
 800e648:	0151      	lsls	r1, r2, #5
 800e64a:	68fa      	ldr	r2, [r7, #12]
 800e64c:	440a      	add	r2, r1
 800e64e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e652:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e65e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	f003 030f 	and.w	r3, r3, #15
 800e668:	2101      	movs	r1, #1
 800e66a:	fa01 f303 	lsl.w	r3, r1, r3
 800e66e:	b29b      	uxth	r3, r3
 800e670:	43db      	mvns	r3, r3
 800e672:	68f9      	ldr	r1, [r7, #12]
 800e674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e678:	4013      	ands	r3, r2
 800e67a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e682:	69da      	ldr	r2, [r3, #28]
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f003 030f 	and.w	r3, r3, #15
 800e68c:	2101      	movs	r1, #1
 800e68e:	fa01 f303 	lsl.w	r3, r1, r3
 800e692:	b29b      	uxth	r3, r3
 800e694:	43db      	mvns	r3, r3
 800e696:	68f9      	ldr	r1, [r7, #12]
 800e698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e69c:	4013      	ands	r3, r2
 800e69e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	015a      	lsls	r2, r3, #5
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ac:	681a      	ldr	r2, [r3, #0]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	0159      	lsls	r1, r3, #5
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	440b      	add	r3, r1
 800e6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4b35      	ldr	r3, [pc, #212]	; (800e794 <USB_DeactivateEndpoint+0x1b0>)
 800e6be:	4013      	ands	r3, r2
 800e6c0:	600b      	str	r3, [r1, #0]
 800e6c2:	e060      	b.n	800e786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e6d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6da:	d11f      	bne.n	800e71c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	015a      	lsls	r2, r3, #5
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	0151      	lsls	r1, r2, #5
 800e6ee:	68fa      	ldr	r2, [r7, #12]
 800e6f0:	440a      	add	r2, r1
 800e6f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e6f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e6fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	015a      	lsls	r2, r3, #5
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	4413      	add	r3, r2
 800e704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68ba      	ldr	r2, [r7, #8]
 800e70c:	0151      	lsls	r1, r2, #5
 800e70e:	68fa      	ldr	r2, [r7, #12]
 800e710:	440a      	add	r2, r1
 800e712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e716:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e71a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 030f 	and.w	r3, r3, #15
 800e72c:	2101      	movs	r1, #1
 800e72e:	fa01 f303 	lsl.w	r3, r1, r3
 800e732:	041b      	lsls	r3, r3, #16
 800e734:	43db      	mvns	r3, r3
 800e736:	68f9      	ldr	r1, [r7, #12]
 800e738:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e73c:	4013      	ands	r3, r2
 800e73e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e746:	69da      	ldr	r2, [r3, #28]
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	f003 030f 	and.w	r3, r3, #15
 800e750:	2101      	movs	r1, #1
 800e752:	fa01 f303 	lsl.w	r3, r1, r3
 800e756:	041b      	lsls	r3, r3, #16
 800e758:	43db      	mvns	r3, r3
 800e75a:	68f9      	ldr	r1, [r7, #12]
 800e75c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e760:	4013      	ands	r3, r2
 800e762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	015a      	lsls	r2, r3, #5
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4413      	add	r3, r2
 800e76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e770:	681a      	ldr	r2, [r3, #0]
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	0159      	lsls	r1, r3, #5
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	440b      	add	r3, r1
 800e77a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e77e:	4619      	mov	r1, r3
 800e780:	4b05      	ldr	r3, [pc, #20]	; (800e798 <USB_DeactivateEndpoint+0x1b4>)
 800e782:	4013      	ands	r3, r2
 800e784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr
 800e794:	ec337800 	.word	0xec337800
 800e798:	eff37800 	.word	0xeff37800

0800e79c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b08a      	sub	sp, #40	; 0x28
 800e7a0:	af02      	add	r7, sp, #8
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	4613      	mov	r3, r2
 800e7a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	785b      	ldrb	r3, [r3, #1]
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	f040 8163 	bne.w	800ea84 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d132      	bne.n	800e82c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	015a      	lsls	r2, r3, #5
 800e7ca:	69fb      	ldr	r3, [r7, #28]
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7d2:	691a      	ldr	r2, [r3, #16]
 800e7d4:	69bb      	ldr	r3, [r7, #24]
 800e7d6:	0159      	lsls	r1, r3, #5
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	440b      	add	r3, r1
 800e7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4ba5      	ldr	r3, [pc, #660]	; (800ea78 <USB_EPStartXfer+0x2dc>)
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e7e8:	69bb      	ldr	r3, [r7, #24]
 800e7ea:	015a      	lsls	r2, r3, #5
 800e7ec:	69fb      	ldr	r3, [r7, #28]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7f4:	691b      	ldr	r3, [r3, #16]
 800e7f6:	69ba      	ldr	r2, [r7, #24]
 800e7f8:	0151      	lsls	r1, r2, #5
 800e7fa:	69fa      	ldr	r2, [r7, #28]
 800e7fc:	440a      	add	r2, r1
 800e7fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e806:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	015a      	lsls	r2, r3, #5
 800e80c:	69fb      	ldr	r3, [r7, #28]
 800e80e:	4413      	add	r3, r2
 800e810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e814:	691a      	ldr	r2, [r3, #16]
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	0159      	lsls	r1, r3, #5
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	440b      	add	r3, r1
 800e81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e822:	4619      	mov	r1, r3
 800e824:	4b95      	ldr	r3, [pc, #596]	; (800ea7c <USB_EPStartXfer+0x2e0>)
 800e826:	4013      	ands	r3, r2
 800e828:	610b      	str	r3, [r1, #16]
 800e82a:	e074      	b.n	800e916 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	015a      	lsls	r2, r3, #5
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	4413      	add	r3, r2
 800e834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e838:	691a      	ldr	r2, [r3, #16]
 800e83a:	69bb      	ldr	r3, [r7, #24]
 800e83c:	0159      	lsls	r1, r3, #5
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	440b      	add	r3, r1
 800e842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e846:	4619      	mov	r1, r3
 800e848:	4b8c      	ldr	r3, [pc, #560]	; (800ea7c <USB_EPStartXfer+0x2e0>)
 800e84a:	4013      	ands	r3, r2
 800e84c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e84e:	69bb      	ldr	r3, [r7, #24]
 800e850:	015a      	lsls	r2, r3, #5
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	4413      	add	r3, r2
 800e856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e85a:	691a      	ldr	r2, [r3, #16]
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	0159      	lsls	r1, r3, #5
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	440b      	add	r3, r1
 800e864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e868:	4619      	mov	r1, r3
 800e86a:	4b83      	ldr	r3, [pc, #524]	; (800ea78 <USB_EPStartXfer+0x2dc>)
 800e86c:	4013      	ands	r3, r2
 800e86e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e870:	69bb      	ldr	r3, [r7, #24]
 800e872:	015a      	lsls	r2, r3, #5
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	4413      	add	r3, r2
 800e878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e87c:	691a      	ldr	r2, [r3, #16]
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	6959      	ldr	r1, [r3, #20]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	689b      	ldr	r3, [r3, #8]
 800e886:	440b      	add	r3, r1
 800e888:	1e59      	subs	r1, r3, #1
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e892:	04d9      	lsls	r1, r3, #19
 800e894:	4b7a      	ldr	r3, [pc, #488]	; (800ea80 <USB_EPStartXfer+0x2e4>)
 800e896:	400b      	ands	r3, r1
 800e898:	69b9      	ldr	r1, [r7, #24]
 800e89a:	0148      	lsls	r0, r1, #5
 800e89c:	69f9      	ldr	r1, [r7, #28]
 800e89e:	4401      	add	r1, r0
 800e8a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	015a      	lsls	r2, r3, #5
 800e8ac:	69fb      	ldr	r3, [r7, #28]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8b4:	691a      	ldr	r2, [r3, #16]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	695b      	ldr	r3, [r3, #20]
 800e8ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e8be:	69b9      	ldr	r1, [r7, #24]
 800e8c0:	0148      	lsls	r0, r1, #5
 800e8c2:	69f9      	ldr	r1, [r7, #28]
 800e8c4:	4401      	add	r1, r0
 800e8c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e8ce:	68bb      	ldr	r3, [r7, #8]
 800e8d0:	78db      	ldrb	r3, [r3, #3]
 800e8d2:	2b01      	cmp	r3, #1
 800e8d4:	d11f      	bne.n	800e916 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	015a      	lsls	r2, r3, #5
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	4413      	add	r3, r2
 800e8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e8e2:	691b      	ldr	r3, [r3, #16]
 800e8e4:	69ba      	ldr	r2, [r7, #24]
 800e8e6:	0151      	lsls	r1, r2, #5
 800e8e8:	69fa      	ldr	r2, [r7, #28]
 800e8ea:	440a      	add	r2, r1
 800e8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e8f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e8f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	015a      	lsls	r2, r3, #5
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e902:	691b      	ldr	r3, [r3, #16]
 800e904:	69ba      	ldr	r2, [r7, #24]
 800e906:	0151      	lsls	r1, r2, #5
 800e908:	69fa      	ldr	r2, [r7, #28]
 800e90a:	440a      	add	r2, r1
 800e90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e914:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b01      	cmp	r3, #1
 800e91a:	d14b      	bne.n	800e9b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d009      	beq.n	800e938 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	015a      	lsls	r2, r3, #5
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	4413      	add	r3, r2
 800e92c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e930:	461a      	mov	r2, r3
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	691b      	ldr	r3, [r3, #16]
 800e936:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	78db      	ldrb	r3, [r3, #3]
 800e93c:	2b01      	cmp	r3, #1
 800e93e:	d128      	bne.n	800e992 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d110      	bne.n	800e972 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	015a      	lsls	r2, r3, #5
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4413      	add	r3, r2
 800e958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	69ba      	ldr	r2, [r7, #24]
 800e960:	0151      	lsls	r1, r2, #5
 800e962:	69fa      	ldr	r2, [r7, #28]
 800e964:	440a      	add	r2, r1
 800e966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e96a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e96e:	6013      	str	r3, [r2, #0]
 800e970:	e00f      	b.n	800e992 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e972:	69bb      	ldr	r3, [r7, #24]
 800e974:	015a      	lsls	r2, r3, #5
 800e976:	69fb      	ldr	r3, [r7, #28]
 800e978:	4413      	add	r3, r2
 800e97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	69ba      	ldr	r2, [r7, #24]
 800e982:	0151      	lsls	r1, r2, #5
 800e984:	69fa      	ldr	r2, [r7, #28]
 800e986:	440a      	add	r2, r1
 800e988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e98c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e990:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e992:	69bb      	ldr	r3, [r7, #24]
 800e994:	015a      	lsls	r2, r3, #5
 800e996:	69fb      	ldr	r3, [r7, #28]
 800e998:	4413      	add	r3, r2
 800e99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	69ba      	ldr	r2, [r7, #24]
 800e9a2:	0151      	lsls	r1, r2, #5
 800e9a4:	69fa      	ldr	r2, [r7, #28]
 800e9a6:	440a      	add	r2, r1
 800e9a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e133      	b.n	800ec1c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	69ba      	ldr	r2, [r7, #24]
 800e9c4:	0151      	lsls	r1, r2, #5
 800e9c6:	69fa      	ldr	r2, [r7, #28]
 800e9c8:	440a      	add	r2, r1
 800e9ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e9d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	78db      	ldrb	r3, [r3, #3]
 800e9d8:	2b01      	cmp	r3, #1
 800e9da:	d015      	beq.n	800ea08 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	695b      	ldr	r3, [r3, #20]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 811b 	beq.w	800ec1c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e9e6:	69fb      	ldr	r3, [r7, #28]
 800e9e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	f003 030f 	and.w	r3, r3, #15
 800e9f6:	2101      	movs	r1, #1
 800e9f8:	fa01 f303 	lsl.w	r3, r1, r3
 800e9fc:	69f9      	ldr	r1, [r7, #28]
 800e9fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea02:	4313      	orrs	r3, r2
 800ea04:	634b      	str	r3, [r1, #52]	; 0x34
 800ea06:	e109      	b.n	800ec1c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d110      	bne.n	800ea3a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ea18:	69bb      	ldr	r3, [r7, #24]
 800ea1a:	015a      	lsls	r2, r3, #5
 800ea1c:	69fb      	ldr	r3, [r7, #28]
 800ea1e:	4413      	add	r3, r2
 800ea20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	69ba      	ldr	r2, [r7, #24]
 800ea28:	0151      	lsls	r1, r2, #5
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	440a      	add	r2, r1
 800ea2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea36:	6013      	str	r3, [r2, #0]
 800ea38:	e00f      	b.n	800ea5a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	015a      	lsls	r2, r3, #5
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	4413      	add	r3, r2
 800ea42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	69ba      	ldr	r2, [r7, #24]
 800ea4a:	0151      	lsls	r1, r2, #5
 800ea4c:	69fa      	ldr	r2, [r7, #28]
 800ea4e:	440a      	add	r2, r1
 800ea50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea58:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	68d9      	ldr	r1, [r3, #12]
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	781a      	ldrb	r2, [r3, #0]
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	b298      	uxth	r0, r3
 800ea68:	79fb      	ldrb	r3, [r7, #7]
 800ea6a:	9300      	str	r3, [sp, #0]
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	68f8      	ldr	r0, [r7, #12]
 800ea70:	f000 fa38 	bl	800eee4 <USB_WritePacket>
 800ea74:	e0d2      	b.n	800ec1c <USB_EPStartXfer+0x480>
 800ea76:	bf00      	nop
 800ea78:	e007ffff 	.word	0xe007ffff
 800ea7c:	fff80000 	.word	0xfff80000
 800ea80:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	015a      	lsls	r2, r3, #5
 800ea88:	69fb      	ldr	r3, [r7, #28]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea90:	691a      	ldr	r2, [r3, #16]
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	0159      	lsls	r1, r3, #5
 800ea96:	69fb      	ldr	r3, [r7, #28]
 800ea98:	440b      	add	r3, r1
 800ea9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4b61      	ldr	r3, [pc, #388]	; (800ec28 <USB_EPStartXfer+0x48c>)
 800eaa2:	4013      	ands	r3, r2
 800eaa4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	015a      	lsls	r2, r3, #5
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	4413      	add	r3, r2
 800eaae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eab2:	691a      	ldr	r2, [r3, #16]
 800eab4:	69bb      	ldr	r3, [r7, #24]
 800eab6:	0159      	lsls	r1, r3, #5
 800eab8:	69fb      	ldr	r3, [r7, #28]
 800eaba:	440b      	add	r3, r1
 800eabc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eac0:	4619      	mov	r1, r3
 800eac2:	4b5a      	ldr	r3, [pc, #360]	; (800ec2c <USB_EPStartXfer+0x490>)
 800eac4:	4013      	ands	r3, r2
 800eac6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	695b      	ldr	r3, [r3, #20]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d123      	bne.n	800eb18 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	015a      	lsls	r2, r3, #5
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	4413      	add	r3, r2
 800ead8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eadc:	691a      	ldr	r2, [r3, #16]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eae6:	69b9      	ldr	r1, [r7, #24]
 800eae8:	0148      	lsls	r0, r1, #5
 800eaea:	69f9      	ldr	r1, [r7, #28]
 800eaec:	4401      	add	r1, r0
 800eaee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eaf2:	4313      	orrs	r3, r2
 800eaf4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	015a      	lsls	r2, r3, #5
 800eafa:	69fb      	ldr	r3, [r7, #28]
 800eafc:	4413      	add	r3, r2
 800eafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb02:	691b      	ldr	r3, [r3, #16]
 800eb04:	69ba      	ldr	r2, [r7, #24]
 800eb06:	0151      	lsls	r1, r2, #5
 800eb08:	69fa      	ldr	r2, [r7, #28]
 800eb0a:	440a      	add	r2, r1
 800eb0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb14:	6113      	str	r3, [r2, #16]
 800eb16:	e033      	b.n	800eb80 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	695a      	ldr	r2, [r3, #20]
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	689b      	ldr	r3, [r3, #8]
 800eb20:	4413      	add	r3, r2
 800eb22:	1e5a      	subs	r2, r3, #1
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb2c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	015a      	lsls	r2, r3, #5
 800eb32:	69fb      	ldr	r3, [r7, #28]
 800eb34:	4413      	add	r3, r2
 800eb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb3a:	691a      	ldr	r2, [r3, #16]
 800eb3c:	8afb      	ldrh	r3, [r7, #22]
 800eb3e:	04d9      	lsls	r1, r3, #19
 800eb40:	4b3b      	ldr	r3, [pc, #236]	; (800ec30 <USB_EPStartXfer+0x494>)
 800eb42:	400b      	ands	r3, r1
 800eb44:	69b9      	ldr	r1, [r7, #24]
 800eb46:	0148      	lsls	r0, r1, #5
 800eb48:	69f9      	ldr	r1, [r7, #28]
 800eb4a:	4401      	add	r1, r0
 800eb4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb50:	4313      	orrs	r3, r2
 800eb52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb60:	691a      	ldr	r2, [r3, #16]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	8af9      	ldrh	r1, [r7, #22]
 800eb68:	fb01 f303 	mul.w	r3, r1, r3
 800eb6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb70:	69b9      	ldr	r1, [r7, #24]
 800eb72:	0148      	lsls	r0, r1, #5
 800eb74:	69f9      	ldr	r1, [r7, #28]
 800eb76:	4401      	add	r1, r0
 800eb78:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	d10d      	bne.n	800eba2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d009      	beq.n	800eba2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	68d9      	ldr	r1, [r3, #12]
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb9e:	460a      	mov	r2, r1
 800eba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	78db      	ldrb	r3, [r3, #3]
 800eba6:	2b01      	cmp	r3, #1
 800eba8:	d128      	bne.n	800ebfc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d110      	bne.n	800ebdc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	69ba      	ldr	r2, [r7, #24]
 800ebca:	0151      	lsls	r1, r2, #5
 800ebcc:	69fa      	ldr	r2, [r7, #28]
 800ebce:	440a      	add	r2, r1
 800ebd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ebd8:	6013      	str	r3, [r2, #0]
 800ebda:	e00f      	b.n	800ebfc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	015a      	lsls	r2, r3, #5
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	69ba      	ldr	r2, [r7, #24]
 800ebec:	0151      	lsls	r1, r2, #5
 800ebee:	69fa      	ldr	r2, [r7, #28]
 800ebf0:	440a      	add	r2, r1
 800ebf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ebf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	015a      	lsls	r2, r3, #5
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	4413      	add	r3, r2
 800ec04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	69ba      	ldr	r2, [r7, #24]
 800ec0c:	0151      	lsls	r1, r2, #5
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	440a      	add	r2, r1
 800ec12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ec16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ec1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3720      	adds	r7, #32
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	fff80000 	.word	0xfff80000
 800ec2c:	e007ffff 	.word	0xe007ffff
 800ec30:	1ff80000 	.word	0x1ff80000

0800ec34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ec34:	b480      	push	{r7}
 800ec36:	b087      	sub	sp, #28
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	4613      	mov	r3, r2
 800ec40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	785b      	ldrb	r3, [r3, #1]
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	f040 80cd 	bne.w	800edf0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d132      	bne.n	800ecc4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	015a      	lsls	r2, r3, #5
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	4413      	add	r3, r2
 800ec66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6a:	691a      	ldr	r2, [r3, #16]
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	0159      	lsls	r1, r3, #5
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	440b      	add	r3, r1
 800ec74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec78:	4619      	mov	r1, r3
 800ec7a:	4b98      	ldr	r3, [pc, #608]	; (800eedc <USB_EP0StartXfer+0x2a8>)
 800ec7c:	4013      	ands	r3, r2
 800ec7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	015a      	lsls	r2, r3, #5
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	4413      	add	r3, r2
 800ec88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec8c:	691b      	ldr	r3, [r3, #16]
 800ec8e:	693a      	ldr	r2, [r7, #16]
 800ec90:	0151      	lsls	r1, r2, #5
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	440a      	add	r2, r1
 800ec96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	015a      	lsls	r2, r3, #5
 800eca4:	697b      	ldr	r3, [r7, #20]
 800eca6:	4413      	add	r3, r2
 800eca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	0159      	lsls	r1, r3, #5
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	440b      	add	r3, r1
 800ecb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecba:	4619      	mov	r1, r3
 800ecbc:	4b88      	ldr	r3, [pc, #544]	; (800eee0 <USB_EP0StartXfer+0x2ac>)
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	610b      	str	r3, [r1, #16]
 800ecc2:	e04e      	b.n	800ed62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ecc4:	693b      	ldr	r3, [r7, #16]
 800ecc6:	015a      	lsls	r2, r3, #5
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	4413      	add	r3, r2
 800eccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecd0:	691a      	ldr	r2, [r3, #16]
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	0159      	lsls	r1, r3, #5
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	440b      	add	r3, r1
 800ecda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecde:	4619      	mov	r1, r3
 800ece0:	4b7f      	ldr	r3, [pc, #508]	; (800eee0 <USB_EP0StartXfer+0x2ac>)
 800ece2:	4013      	ands	r3, r2
 800ece4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	015a      	lsls	r2, r3, #5
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	4413      	add	r3, r2
 800ecee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf2:	691a      	ldr	r2, [r3, #16]
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	0159      	lsls	r1, r3, #5
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	440b      	add	r3, r1
 800ecfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed00:	4619      	mov	r1, r3
 800ed02:	4b76      	ldr	r3, [pc, #472]	; (800eedc <USB_EP0StartXfer+0x2a8>)
 800ed04:	4013      	ands	r3, r2
 800ed06:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ed08:	68bb      	ldr	r3, [r7, #8]
 800ed0a:	695a      	ldr	r2, [r3, #20]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	689b      	ldr	r3, [r3, #8]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d903      	bls.n	800ed1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	015a      	lsls	r2, r3, #5
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	4413      	add	r3, r2
 800ed24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed28:	691b      	ldr	r3, [r3, #16]
 800ed2a:	693a      	ldr	r2, [r7, #16]
 800ed2c:	0151      	lsls	r1, r2, #5
 800ed2e:	697a      	ldr	r2, [r7, #20]
 800ed30:	440a      	add	r2, r1
 800ed32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ed3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	015a      	lsls	r2, r3, #5
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	4413      	add	r3, r2
 800ed44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed48:	691a      	ldr	r2, [r3, #16]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	695b      	ldr	r3, [r3, #20]
 800ed4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ed52:	6939      	ldr	r1, [r7, #16]
 800ed54:	0148      	lsls	r0, r1, #5
 800ed56:	6979      	ldr	r1, [r7, #20]
 800ed58:	4401      	add	r1, r0
 800ed5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ed62:	79fb      	ldrb	r3, [r7, #7]
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d11e      	bne.n	800eda6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	691b      	ldr	r3, [r3, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ed70:	693b      	ldr	r3, [r7, #16]
 800ed72:	015a      	lsls	r2, r3, #5
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	015a      	lsls	r2, r3, #5
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	0151      	lsls	r1, r2, #5
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	440a      	add	r2, r1
 800ed9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eda2:	6013      	str	r3, [r2, #0]
 800eda4:	e092      	b.n	800eecc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	015a      	lsls	r2, r3, #5
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	4413      	add	r3, r2
 800edae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	693a      	ldr	r2, [r7, #16]
 800edb6:	0151      	lsls	r1, r2, #5
 800edb8:	697a      	ldr	r2, [r7, #20]
 800edba:	440a      	add	r2, r1
 800edbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800edc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	695b      	ldr	r3, [r3, #20]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d07e      	beq.n	800eecc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	f003 030f 	and.w	r3, r3, #15
 800edde:	2101      	movs	r1, #1
 800ede0:	fa01 f303 	lsl.w	r3, r1, r3
 800ede4:	6979      	ldr	r1, [r7, #20]
 800ede6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800edea:	4313      	orrs	r3, r2
 800edec:	634b      	str	r3, [r1, #52]	; 0x34
 800edee:	e06d      	b.n	800eecc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edfc:	691a      	ldr	r2, [r3, #16]
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	0159      	lsls	r1, r3, #5
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	440b      	add	r3, r1
 800ee06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	4b34      	ldr	r3, [pc, #208]	; (800eee0 <USB_EP0StartXfer+0x2ac>)
 800ee0e:	4013      	ands	r3, r2
 800ee10:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	015a      	lsls	r2, r3, #5
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee1e:	691a      	ldr	r2, [r3, #16]
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	0159      	lsls	r1, r3, #5
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	440b      	add	r3, r1
 800ee28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4b2b      	ldr	r3, [pc, #172]	; (800eedc <USB_EP0StartXfer+0x2a8>)
 800ee30:	4013      	ands	r3, r2
 800ee32:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d003      	beq.n	800ee44 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	689a      	ldr	r2, [r3, #8]
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee44:	693b      	ldr	r3, [r7, #16]
 800ee46:	015a      	lsls	r2, r3, #5
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	693a      	ldr	r2, [r7, #16]
 800ee54:	0151      	lsls	r1, r2, #5
 800ee56:	697a      	ldr	r2, [r7, #20]
 800ee58:	440a      	add	r2, r1
 800ee5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	015a      	lsls	r2, r3, #5
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	4413      	add	r3, r2
 800ee6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee70:	691a      	ldr	r2, [r3, #16]
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	689b      	ldr	r3, [r3, #8]
 800ee76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ee7a:	6939      	ldr	r1, [r7, #16]
 800ee7c:	0148      	lsls	r0, r1, #5
 800ee7e:	6979      	ldr	r1, [r7, #20]
 800ee80:	4401      	add	r1, r0
 800ee82:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ee86:	4313      	orrs	r3, r2
 800ee88:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d10d      	bne.n	800eeac <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d009      	beq.n	800eeac <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	68d9      	ldr	r1, [r3, #12]
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eea8:	460a      	mov	r2, r1
 800eeaa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eeac:	693b      	ldr	r3, [r7, #16]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	693a      	ldr	r2, [r7, #16]
 800eebc:	0151      	lsls	r1, r2, #5
 800eebe:	697a      	ldr	r2, [r7, #20]
 800eec0:	440a      	add	r2, r1
 800eec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eec6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eeca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	371c      	adds	r7, #28
 800eed2:	46bd      	mov	sp, r7
 800eed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed8:	4770      	bx	lr
 800eeda:	bf00      	nop
 800eedc:	e007ffff 	.word	0xe007ffff
 800eee0:	fff80000 	.word	0xfff80000

0800eee4 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b089      	sub	sp, #36	; 0x24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	4611      	mov	r1, r2
 800eef0:	461a      	mov	r2, r3
 800eef2:	460b      	mov	r3, r1
 800eef4:	71fb      	strb	r3, [r7, #7]
 800eef6:	4613      	mov	r3, r2
 800eef8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800ef02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d11a      	bne.n	800ef40 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ef0a:	88bb      	ldrh	r3, [r7, #4]
 800ef0c:	3303      	adds	r3, #3
 800ef0e:	089b      	lsrs	r3, r3, #2
 800ef10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ef12:	2300      	movs	r3, #0
 800ef14:	61bb      	str	r3, [r7, #24]
 800ef16:	e00f      	b.n	800ef38 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ef18:	79fb      	ldrb	r3, [r7, #7]
 800ef1a:	031a      	lsls	r2, r3, #12
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	4413      	add	r3, r2
 800ef20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef24:	461a      	mov	r2, r3
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ef2c:	69fb      	ldr	r3, [r7, #28]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	3301      	adds	r3, #1
 800ef36:	61bb      	str	r3, [r7, #24]
 800ef38:	69ba      	ldr	r2, [r7, #24]
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d3eb      	bcc.n	800ef18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ef40:	2300      	movs	r3, #0
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3724      	adds	r7, #36	; 0x24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b089      	sub	sp, #36	; 0x24
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	60f8      	str	r0, [r7, #12]
 800ef56:	60b9      	str	r1, [r7, #8]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ef64:	88fb      	ldrh	r3, [r7, #6]
 800ef66:	3303      	adds	r3, #3
 800ef68:	089b      	lsrs	r3, r3, #2
 800ef6a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	61bb      	str	r3, [r7, #24]
 800ef70:	e00b      	b.n	800ef8a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	601a      	str	r2, [r3, #0]
    pDest++;
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	3304      	adds	r3, #4
 800ef82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	3301      	adds	r3, #1
 800ef88:	61bb      	str	r3, [r7, #24]
 800ef8a:	69ba      	ldr	r2, [r7, #24]
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d3ef      	bcc.n	800ef72 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ef92:	69fb      	ldr	r3, [r7, #28]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3724      	adds	r7, #36	; 0x24
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b085      	sub	sp, #20
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	781b      	ldrb	r3, [r3, #0]
 800efb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	785b      	ldrb	r3, [r3, #1]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d12c      	bne.n	800f016 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	015a      	lsls	r2, r3, #5
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4413      	add	r3, r2
 800efc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	db12      	blt.n	800eff4 <USB_EPSetStall+0x54>
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d00f      	beq.n	800eff4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	015a      	lsls	r2, r3, #5
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68ba      	ldr	r2, [r7, #8]
 800efe4:	0151      	lsls	r1, r2, #5
 800efe6:	68fa      	ldr	r2, [r7, #12]
 800efe8:	440a      	add	r2, r1
 800efea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800efee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800eff2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	015a      	lsls	r2, r3, #5
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4413      	add	r3, r2
 800effc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	68ba      	ldr	r2, [r7, #8]
 800f004:	0151      	lsls	r1, r2, #5
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	440a      	add	r2, r1
 800f00a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f00e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	e02b      	b.n	800f06e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	015a      	lsls	r2, r3, #5
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4413      	add	r3, r2
 800f01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	db12      	blt.n	800f04e <USB_EPSetStall+0xae>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00f      	beq.n	800f04e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	015a      	lsls	r2, r3, #5
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4413      	add	r3, r2
 800f036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	0151      	lsls	r1, r2, #5
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	440a      	add	r2, r1
 800f044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f048:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800f04c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	015a      	lsls	r2, r3, #5
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4413      	add	r3, r2
 800f056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	68ba      	ldr	r2, [r7, #8]
 800f05e:	0151      	lsls	r1, r2, #5
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	440a      	add	r2, r1
 800f064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f06c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	3714      	adds	r7, #20
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f07c:	b480      	push	{r7}
 800f07e:	b085      	sub	sp, #20
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f090:	683b      	ldr	r3, [r7, #0]
 800f092:	785b      	ldrb	r3, [r3, #1]
 800f094:	2b01      	cmp	r3, #1
 800f096:	d128      	bne.n	800f0ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	015a      	lsls	r2, r3, #5
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	4413      	add	r3, r2
 800f0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	0151      	lsls	r1, r2, #5
 800f0aa:	68fa      	ldr	r2, [r7, #12]
 800f0ac:	440a      	add	r2, r1
 800f0ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	78db      	ldrb	r3, [r3, #3]
 800f0bc:	2b03      	cmp	r3, #3
 800f0be:	d003      	beq.n	800f0c8 <USB_EPClearStall+0x4c>
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	78db      	ldrb	r3, [r3, #3]
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d138      	bne.n	800f13a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	015a      	lsls	r2, r3, #5
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	0151      	lsls	r1, r2, #5
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	440a      	add	r2, r1
 800f0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f0e6:	6013      	str	r3, [r2, #0]
 800f0e8:	e027      	b.n	800f13a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	015a      	lsls	r2, r3, #5
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	68ba      	ldr	r2, [r7, #8]
 800f0fa:	0151      	lsls	r1, r2, #5
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	440a      	add	r2, r1
 800f100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f104:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f108:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	78db      	ldrb	r3, [r3, #3]
 800f10e:	2b03      	cmp	r3, #3
 800f110:	d003      	beq.n	800f11a <USB_EPClearStall+0x9e>
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	78db      	ldrb	r3, [r3, #3]
 800f116:	2b02      	cmp	r3, #2
 800f118:	d10f      	bne.n	800f13a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	015a      	lsls	r2, r3, #5
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	4413      	add	r3, r2
 800f122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68ba      	ldr	r2, [r7, #8]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	68fa      	ldr	r2, [r7, #12]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f138:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f148:	b480      	push	{r7}
 800f14a:	b085      	sub	sp, #20
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	460b      	mov	r3, r1
 800f152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f166:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f16a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	78fb      	ldrb	r3, [r7, #3]
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800f17c:	68f9      	ldr	r1, [r7, #12]
 800f17e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f182:	4313      	orrs	r3, r2
 800f184:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3714      	adds	r7, #20
 800f18c:	46bd      	mov	sp, r7
 800f18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f192:	4770      	bx	lr

0800f194 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1ae:	f023 0302 	bic.w	r3, r3, #2
 800f1b2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f1b4:	2003      	movs	r0, #3
 800f1b6:	f7f2 fe41 	bl	8001e3c <HAL_Delay>

  return HAL_OK;
 800f1ba:	2300      	movs	r3, #0
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	68fa      	ldr	r2, [r7, #12]
 800f1da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f1de:	f043 0302 	orr.w	r3, r3, #2
 800f1e2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800f1e4:	2003      	movs	r0, #3
 800f1e6:	f7f2 fe29 	bl	8001e3c <HAL_Delay>

  return HAL_OK;
 800f1ea:	2300      	movs	r3, #0
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3710      	adds	r7, #16
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}

0800f1f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	699b      	ldr	r3, [r3, #24]
 800f206:	68fa      	ldr	r2, [r7, #12]
 800f208:	4013      	ands	r3, r2
 800f20a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f20c:	68fb      	ldr	r3, [r7, #12]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3714      	adds	r7, #20
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f21a:	b480      	push	{r7}
 800f21c:	b085      	sub	sp, #20
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f22c:	699b      	ldr	r3, [r3, #24]
 800f22e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f236:	69db      	ldr	r3, [r3, #28]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	4013      	ands	r3, r2
 800f23c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	0c1b      	lsrs	r3, r3, #16
}
 800f242:	4618      	mov	r0, r3
 800f244:	3714      	adds	r7, #20
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	68ba      	ldr	r2, [r7, #8]
 800f26e:	4013      	ands	r3, r2
 800f270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	b29b      	uxth	r3, r3
}
 800f276:	4618      	mov	r0, r3
 800f278:	3714      	adds	r7, #20
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr

0800f282 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f282:	b480      	push	{r7}
 800f284:	b085      	sub	sp, #20
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
 800f28a:	460b      	mov	r3, r1
 800f28c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f292:	78fb      	ldrb	r3, [r7, #3]
 800f294:	015a      	lsls	r2, r3, #5
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	4413      	add	r3, r2
 800f29a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2a8:	695b      	ldr	r3, [r3, #20]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	4013      	ands	r3, r2
 800f2ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f2b0:	68bb      	ldr	r3, [r7, #8]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr

0800f2be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f2be:	b480      	push	{r7}
 800f2c0:	b087      	sub	sp, #28
 800f2c2:	af00      	add	r7, sp, #0
 800f2c4:	6078      	str	r0, [r7, #4]
 800f2c6:	460b      	mov	r3, r1
 800f2c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f2e2:	78fb      	ldrb	r3, [r7, #3]
 800f2e4:	f003 030f 	and.w	r3, r3, #15
 800f2e8:	68fa      	ldr	r2, [r7, #12]
 800f2ea:	fa22 f303 	lsr.w	r3, r2, r3
 800f2ee:	01db      	lsls	r3, r3, #7
 800f2f0:	b2db      	uxtb	r3, r3
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f2f8:	78fb      	ldrb	r3, [r7, #3]
 800f2fa:	015a      	lsls	r2, r3, #5
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	4413      	add	r3, r2
 800f300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	693a      	ldr	r2, [r7, #16]
 800f308:	4013      	ands	r3, r2
 800f30a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f30c:	68bb      	ldr	r3, [r7, #8]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr

0800f31a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800f31a:	b480      	push	{r7}
 800f31c:	b083      	sub	sp, #12
 800f31e:	af00      	add	r7, sp, #0
 800f320:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	695b      	ldr	r3, [r3, #20]
 800f326:	f003 0301 	and.w	r3, r3, #1
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	370c      	adds	r7, #12
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr
	...

0800f338 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f34a:	681a      	ldr	r2, [r3, #0]
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f352:	4619      	mov	r1, r3
 800f354:	4b09      	ldr	r3, [pc, #36]	; (800f37c <USB_ActivateSetup+0x44>)
 800f356:	4013      	ands	r3, r2
 800f358:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f36c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f36e:	2300      	movs	r3, #0
}
 800f370:	4618      	mov	r0, r3
 800f372:	3714      	adds	r7, #20
 800f374:	46bd      	mov	sp, r7
 800f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37a:	4770      	bx	lr
 800f37c:	fffff800 	.word	0xfffff800

0800f380 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f380:	b480      	push	{r7}
 800f382:	b087      	sub	sp, #28
 800f384:	af00      	add	r7, sp, #0
 800f386:	60f8      	str	r0, [r7, #12]
 800f388:	460b      	mov	r3, r1
 800f38a:	607a      	str	r2, [r7, #4]
 800f38c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	333c      	adds	r3, #60	; 0x3c
 800f396:	3304      	adds	r3, #4
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	4a26      	ldr	r2, [pc, #152]	; (800f438 <USB_EP0_OutStart+0xb8>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d90a      	bls.n	800f3ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f3b4:	d101      	bne.n	800f3ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	e037      	b.n	800f42a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	697a      	ldr	r2, [r7, #20]
 800f3d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f3d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	697a      	ldr	r2, [r7, #20]
 800f3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3e8:	f043 0318 	orr.w	r3, r3, #24
 800f3ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f4:	691b      	ldr	r3, [r3, #16]
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f3fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f400:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f402:	7afb      	ldrb	r3, [r7, #11]
 800f404:	2b01      	cmp	r3, #1
 800f406:	d10f      	bne.n	800f428 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f40e:	461a      	mov	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f422:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f426:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	371c      	adds	r7, #28
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop
 800f438:	4f54300a 	.word	0x4f54300a

0800f43c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b085      	sub	sp, #20
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f444:	2300      	movs	r3, #0
 800f446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	3301      	adds	r3, #1
 800f44c:	60fb      	str	r3, [r7, #12]
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	4a13      	ldr	r2, [pc, #76]	; (800f4a0 <USB_CoreReset+0x64>)
 800f452:	4293      	cmp	r3, r2
 800f454:	d901      	bls.n	800f45a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e01b      	b.n	800f492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	daf2      	bge.n	800f448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f462:	2300      	movs	r3, #0
 800f464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	691b      	ldr	r3, [r3, #16]
 800f46a:	f043 0201 	orr.w	r2, r3, #1
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	3301      	adds	r3, #1
 800f476:	60fb      	str	r3, [r7, #12]
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4a09      	ldr	r2, [pc, #36]	; (800f4a0 <USB_CoreReset+0x64>)
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d901      	bls.n	800f484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f480:	2303      	movs	r3, #3
 800f482:	e006      	b.n	800f492 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	f003 0301 	and.w	r3, r3, #1
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d0f0      	beq.n	800f472 <USB_CoreReset+0x36>

  return HAL_OK;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	3714      	adds	r7, #20
 800f496:	46bd      	mov	sp, r7
 800f498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49c:	4770      	bx	lr
 800f49e:	bf00      	nop
 800f4a0:	00030d40 	.word	0x00030d40

0800f4a4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f4a8:	4904      	ldr	r1, [pc, #16]	; (800f4bc <MX_FATFS_Init+0x18>)
 800f4aa:	4805      	ldr	r0, [pc, #20]	; (800f4c0 <MX_FATFS_Init+0x1c>)
 800f4ac:	f003 fbd0 	bl	8012c50 <FATFS_LinkDriver>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	461a      	mov	r2, r3
 800f4b4:	4b03      	ldr	r3, [pc, #12]	; (800f4c4 <MX_FATFS_Init+0x20>)
 800f4b6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f4b8:	bf00      	nop
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	24011648 	.word	0x24011648
 800f4c0:	08016710 	.word	0x08016710
 800f4c4:	24011644 	.word	0x24011644

0800f4c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f4d2:	f000 f879 	bl	800f5c8 <BSP_SD_IsDetected>
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d001      	beq.n	800f4e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f4dc:	2302      	movs	r3, #2
 800f4de:	e012      	b.n	800f506 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 800f4e0:	480b      	ldr	r0, [pc, #44]	; (800f510 <BSP_SD_Init+0x48>)
 800f4e2:	f7fa f853 	bl	800958c <HAL_SD_Init>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f4ea:	79fb      	ldrb	r3, [r7, #7]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d109      	bne.n	800f504 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f4f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f4f4:	4806      	ldr	r0, [pc, #24]	; (800f510 <BSP_SD_Init+0x48>)
 800f4f6:	f7fa ff17 	bl	800a328 <HAL_SD_ConfigWideBusOperation>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f500:	2301      	movs	r3, #1
 800f502:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f504:	79fb      	ldrb	r3, [r7, #7]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	24004fbc 	.word	0x24004fbc

0800f514 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af02      	add	r7, sp, #8
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	607a      	str	r2, [r7, #4]
 800f520:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f522:	2300      	movs	r3, #0
 800f524:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	9300      	str	r3, [sp, #0]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	68f9      	ldr	r1, [r7, #12]
 800f530:	4806      	ldr	r0, [pc, #24]	; (800f54c <BSP_SD_ReadBlocks+0x38>)
 800f532:	f7fa f94f 	bl	80097d4 <HAL_SD_ReadBlocks>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f53c:	2301      	movs	r3, #1
 800f53e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f540:	7dfb      	ldrb	r3, [r7, #23]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3718      	adds	r7, #24
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	24004fbc 	.word	0x24004fbc

0800f550 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b088      	sub	sp, #32
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f55e:	2300      	movs	r3, #0
 800f560:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	68ba      	ldr	r2, [r7, #8]
 800f56a:	68f9      	ldr	r1, [r7, #12]
 800f56c:	4806      	ldr	r0, [pc, #24]	; (800f588 <BSP_SD_WriteBlocks+0x38>)
 800f56e:	f7fa fabb 	bl	8009ae8 <HAL_SD_WriteBlocks>
 800f572:	4603      	mov	r3, r0
 800f574:	2b00      	cmp	r3, #0
 800f576:	d001      	beq.n	800f57c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f578:	2301      	movs	r3, #1
 800f57a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f57c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3718      	adds	r7, #24
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	24004fbc 	.word	0x24004fbc

0800f58c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f590:	4805      	ldr	r0, [pc, #20]	; (800f5a8 <BSP_SD_GetCardState+0x1c>)
 800f592:	f7fa ff73 	bl	800a47c <HAL_SD_GetCardState>
 800f596:	4603      	mov	r3, r0
 800f598:	2b04      	cmp	r3, #4
 800f59a:	bf14      	ite	ne
 800f59c:	2301      	movne	r3, #1
 800f59e:	2300      	moveq	r3, #0
 800f5a0:	b2db      	uxtb	r3, r3
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	bd80      	pop	{r7, pc}
 800f5a6:	bf00      	nop
 800f5a8:	24004fbc 	.word	0x24004fbc

0800f5ac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b082      	sub	sp, #8
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 800f5b4:	6879      	ldr	r1, [r7, #4]
 800f5b6:	4803      	ldr	r0, [pc, #12]	; (800f5c4 <BSP_SD_GetCardInfo+0x18>)
 800f5b8:	f7fa fe8a 	bl	800a2d0 <HAL_SD_GetCardInfo>
}
 800f5bc:	bf00      	nop
 800f5be:	3708      	adds	r7, #8
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	24004fbc 	.word	0x24004fbc

0800f5c8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f5c8:	b580      	push	{r7, lr}
 800f5ca:	b082      	sub	sp, #8
 800f5cc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f5d2:	f000 f80b 	bl	800f5ec <BSP_PlatformIsDetected>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d101      	bne.n	800f5e0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f5e0:	79fb      	ldrb	r3, [r7, #7]
 800f5e2:	b2db      	uxtb	r3, r3
}
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3708      	adds	r7, #8
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}

0800f5ec <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f5f6:	2104      	movs	r1, #4
 800f5f8:	4806      	ldr	r0, [pc, #24]	; (800f614 <BSP_PlatformIsDetected+0x28>)
 800f5fa:	f7f5 faaf 	bl	8004b5c <HAL_GPIO_ReadPin>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d001      	beq.n	800f608 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f604:	2300      	movs	r3, #0
 800f606:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f608:	79fb      	ldrb	r3, [r7, #7]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	58020400 	.word	0x58020400

0800f618 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	4603      	mov	r3, r0
 800f620:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f622:	4b0b      	ldr	r3, [pc, #44]	; (800f650 <SD_CheckStatus+0x38>)
 800f624:	2201      	movs	r2, #1
 800f626:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f628:	f7ff ffb0 	bl	800f58c <BSP_SD_GetCardState>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d107      	bne.n	800f642 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f632:	4b07      	ldr	r3, [pc, #28]	; (800f650 <SD_CheckStatus+0x38>)
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	b2db      	uxtb	r3, r3
 800f638:	f023 0301 	bic.w	r3, r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	4b04      	ldr	r3, [pc, #16]	; (800f650 <SD_CheckStatus+0x38>)
 800f640:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f642:	4b03      	ldr	r3, [pc, #12]	; (800f650 <SD_CheckStatus+0x38>)
 800f644:	781b      	ldrb	r3, [r3, #0]
 800f646:	b2db      	uxtb	r3, r3
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	240000a1 	.word	0x240000a1

0800f654 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f654:	b580      	push	{r7, lr}
 800f656:	b082      	sub	sp, #8
 800f658:	af00      	add	r7, sp, #0
 800f65a:	4603      	mov	r3, r0
 800f65c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f65e:	4b0b      	ldr	r3, [pc, #44]	; (800f68c <SD_initialize+0x38>)
 800f660:	2201      	movs	r2, #1
 800f662:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f664:	f7ff ff30 	bl	800f4c8 <BSP_SD_Init>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d107      	bne.n	800f67e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f66e:	79fb      	ldrb	r3, [r7, #7]
 800f670:	4618      	mov	r0, r3
 800f672:	f7ff ffd1 	bl	800f618 <SD_CheckStatus>
 800f676:	4603      	mov	r3, r0
 800f678:	461a      	mov	r2, r3
 800f67a:	4b04      	ldr	r3, [pc, #16]	; (800f68c <SD_initialize+0x38>)
 800f67c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f67e:	4b03      	ldr	r3, [pc, #12]	; (800f68c <SD_initialize+0x38>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	b2db      	uxtb	r3, r3
}
 800f684:	4618      	mov	r0, r3
 800f686:	3708      	adds	r7, #8
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	240000a1 	.word	0x240000a1

0800f690 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b082      	sub	sp, #8
 800f694:	af00      	add	r7, sp, #0
 800f696:	4603      	mov	r3, r0
 800f698:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f69a:	79fb      	ldrb	r3, [r7, #7]
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7ff ffbb 	bl	800f618 <SD_CheckStatus>
 800f6a2:	4603      	mov	r3, r0
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3708      	adds	r7, #8
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b086      	sub	sp, #24
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60b9      	str	r1, [r7, #8]
 800f6b4:	607a      	str	r2, [r7, #4]
 800f6b6:	603b      	str	r3, [r7, #0]
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	683a      	ldr	r2, [r7, #0]
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	68b8      	ldr	r0, [r7, #8]
 800f6ca:	f7ff ff23 	bl	800f514 <BSP_SD_ReadBlocks>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d107      	bne.n	800f6e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f6d4:	bf00      	nop
 800f6d6:	f7ff ff59 	bl	800f58c <BSP_SD_GetCardState>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d1fa      	bne.n	800f6d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f6e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b086      	sub	sp, #24
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	603b      	str	r3, [r7, #0]
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f6fe:	2301      	movs	r3, #1
 800f700:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f702:	f04f 33ff 	mov.w	r3, #4294967295
 800f706:	683a      	ldr	r2, [r7, #0]
 800f708:	6879      	ldr	r1, [r7, #4]
 800f70a:	68b8      	ldr	r0, [r7, #8]
 800f70c:	f7ff ff20 	bl	800f550 <BSP_SD_WriteBlocks>
 800f710:	4603      	mov	r3, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d107      	bne.n	800f726 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f716:	bf00      	nop
 800f718:	f7ff ff38 	bl	800f58c <BSP_SD_GetCardState>
 800f71c:	4603      	mov	r3, r0
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d1fa      	bne.n	800f718 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f722:	2300      	movs	r3, #0
 800f724:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f726:	7dfb      	ldrb	r3, [r7, #23]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3718      	adds	r7, #24
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b08c      	sub	sp, #48	; 0x30
 800f734:	af00      	add	r7, sp, #0
 800f736:	4603      	mov	r3, r0
 800f738:	603a      	str	r2, [r7, #0]
 800f73a:	71fb      	strb	r3, [r7, #7]
 800f73c:	460b      	mov	r3, r1
 800f73e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f740:	2301      	movs	r3, #1
 800f742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f746:	4b25      	ldr	r3, [pc, #148]	; (800f7dc <SD_ioctl+0xac>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	b2db      	uxtb	r3, r3
 800f74c:	f003 0301 	and.w	r3, r3, #1
 800f750:	2b00      	cmp	r3, #0
 800f752:	d001      	beq.n	800f758 <SD_ioctl+0x28>
 800f754:	2303      	movs	r3, #3
 800f756:	e03c      	b.n	800f7d2 <SD_ioctl+0xa2>

  switch (cmd)
 800f758:	79bb      	ldrb	r3, [r7, #6]
 800f75a:	2b03      	cmp	r3, #3
 800f75c:	d834      	bhi.n	800f7c8 <SD_ioctl+0x98>
 800f75e:	a201      	add	r2, pc, #4	; (adr r2, 800f764 <SD_ioctl+0x34>)
 800f760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f764:	0800f775 	.word	0x0800f775
 800f768:	0800f77d 	.word	0x0800f77d
 800f76c:	0800f795 	.word	0x0800f795
 800f770:	0800f7af 	.word	0x0800f7af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f77a:	e028      	b.n	800f7ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f77c:	f107 0308 	add.w	r3, r7, #8
 800f780:	4618      	mov	r0, r3
 800f782:	f7ff ff13 	bl	800f5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f786:	6a3a      	ldr	r2, [r7, #32]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f78c:	2300      	movs	r3, #0
 800f78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f792:	e01c      	b.n	800f7ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f794:	f107 0308 	add.w	r3, r7, #8
 800f798:	4618      	mov	r0, r3
 800f79a:	f7ff ff07 	bl	800f5ac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	683b      	ldr	r3, [r7, #0]
 800f7a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f7ac:	e00f      	b.n	800f7ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f7ae:	f107 0308 	add.w	r3, r7, #8
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f7ff fefa 	bl	800f5ac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ba:	0a5a      	lsrs	r2, r3, #9
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f7c6:	e002      	b.n	800f7ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f7c8:	2304      	movs	r3, #4
 800f7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f7ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3730      	adds	r7, #48	; 0x30
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	240000a1 	.word	0x240000a1

0800f7e0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
 800f7e8:	460b      	mov	r3, r1
 800f7ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800f7ec:	f44f 701d 	mov.w	r0, #628	; 0x274
 800f7f0:	f006 fcca 	bl	8016188 <malloc>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d105      	bne.n	800f80a <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f806:	2302      	movs	r3, #2
 800f808:	e034      	b.n	800f874 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	7c1b      	ldrb	r3, [r3, #16]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d115      	bne.n	800f846 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f81a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f81e:	2202      	movs	r2, #2
 800f820:	2101      	movs	r1, #1
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f006 fb13 	bl	8015e4e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2201      	movs	r2, #1
 800f82c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800f830:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f834:	2202      	movs	r2, #2
 800f836:	2181      	movs	r1, #129	; 0x81
 800f838:	6878      	ldr	r0, [r7, #4]
 800f83a:	f006 fb08 	bl	8015e4e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2201      	movs	r2, #1
 800f842:	871a      	strh	r2, [r3, #56]	; 0x38
 800f844:	e012      	b.n	800f86c <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f846:	2340      	movs	r3, #64	; 0x40
 800f848:	2202      	movs	r2, #2
 800f84a:	2101      	movs	r1, #1
 800f84c:	6878      	ldr	r0, [r7, #4]
 800f84e:	f006 fafe 	bl	8015e4e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2201      	movs	r2, #1
 800f856:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800f85a:	2340      	movs	r3, #64	; 0x40
 800f85c:	2202      	movs	r2, #2
 800f85e:	2181      	movs	r1, #129	; 0x81
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f006 faf4 	bl	8015e4e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2201      	movs	r2, #1
 800f86a:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 f98e 	bl	800fb8e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800f872:	2300      	movs	r3, #0
}
 800f874:	4618      	mov	r0, r3
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	460b      	mov	r3, r1
 800f886:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800f888:	2101      	movs	r1, #1
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f006 fb05 	bl	8015e9a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800f898:	2181      	movs	r1, #129	; 0x81
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f006 fafd 	bl	8015e9a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f9c7 	bl	800fc3a <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d009      	beq.n	800f8ca <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f006 fc6b 	bl	8016198 <free>
    pdev->pClassData = NULL;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3708      	adds	r7, #8
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}

0800f8d4 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b086      	sub	sp, #24
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8e4:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d04d      	beq.n	800f996 <USBD_MSC_Setup+0xc2>
 800f8fa:	2b20      	cmp	r3, #32
 800f8fc:	f040 80c6 	bne.w	800fa8c <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	785b      	ldrb	r3, [r3, #1]
 800f904:	2bfe      	cmp	r3, #254	; 0xfe
 800f906:	d002      	beq.n	800f90e <USBD_MSC_Setup+0x3a>
 800f908:	2bff      	cmp	r3, #255	; 0xff
 800f90a:	d024      	beq.n	800f956 <USBD_MSC_Setup+0x82>
 800f90c:	e03b      	b.n	800f986 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	885b      	ldrh	r3, [r3, #2]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d118      	bne.n	800f948 <USBD_MSC_Setup+0x74>
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	88db      	ldrh	r3, [r3, #6]
 800f91a:	2b01      	cmp	r3, #1
 800f91c:	d114      	bne.n	800f948 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800f924:	2b00      	cmp	r3, #0
 800f926:	da0f      	bge.n	800f948 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f92e:	699b      	ldr	r3, [r3, #24]
 800f930:	4798      	blx	r3
 800f932:	4603      	mov	r3, r0
 800f934:	461a      	mov	r2, r3
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	2201      	movs	r2, #1
 800f93e:	4619      	mov	r1, r3
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f002 fc58 	bl	80121f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f946:	e025      	b.n	800f994 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800f948:	6839      	ldr	r1, [r7, #0]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f002 fbe2 	bl	8012114 <USBD_CtlError>
        ret = USBD_FAIL;
 800f950:	2303      	movs	r3, #3
 800f952:	75fb      	strb	r3, [r7, #23]
      break;
 800f954:	e01e      	b.n	800f994 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	885b      	ldrh	r3, [r3, #2]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d10c      	bne.n	800f978 <USBD_MSC_Setup+0xa4>
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	88db      	ldrh	r3, [r3, #6]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d108      	bne.n	800f978 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	db03      	blt.n	800f978 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 f940 	bl	800fbf6 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f976:	e00d      	b.n	800f994 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f002 fbca 	bl	8012114 <USBD_CtlError>
        ret = USBD_FAIL;
 800f980:	2303      	movs	r3, #3
 800f982:	75fb      	strb	r3, [r7, #23]
      break;
 800f984:	e006      	b.n	800f994 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800f986:	6839      	ldr	r1, [r7, #0]
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f002 fbc3 	bl	8012114 <USBD_CtlError>
      ret = USBD_FAIL;
 800f98e:	2303      	movs	r3, #3
 800f990:	75fb      	strb	r3, [r7, #23]
      break;
 800f992:	bf00      	nop
    }
    break;
 800f994:	e081      	b.n	800fa9a <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	785b      	ldrb	r3, [r3, #1]
 800f99a:	2b0b      	cmp	r3, #11
 800f99c:	d86d      	bhi.n	800fa7a <USBD_MSC_Setup+0x1a6>
 800f99e:	a201      	add	r2, pc, #4	; (adr r2, 800f9a4 <USBD_MSC_Setup+0xd0>)
 800f9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9a4:	0800f9d5 	.word	0x0800f9d5
 800f9a8:	0800fa4b 	.word	0x0800fa4b
 800f9ac:	0800fa7b 	.word	0x0800fa7b
 800f9b0:	0800fa7b 	.word	0x0800fa7b
 800f9b4:	0800fa7b 	.word	0x0800fa7b
 800f9b8:	0800fa7b 	.word	0x0800fa7b
 800f9bc:	0800fa7b 	.word	0x0800fa7b
 800f9c0:	0800fa7b 	.word	0x0800fa7b
 800f9c4:	0800fa7b 	.word	0x0800fa7b
 800f9c8:	0800fa7b 	.word	0x0800fa7b
 800f9cc:	0800f9fd 	.word	0x0800f9fd
 800f9d0:	0800fa25 	.word	0x0800fa25
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9da:	2b03      	cmp	r3, #3
 800f9dc:	d107      	bne.n	800f9ee <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f9de:	f107 030e 	add.w	r3, r7, #14
 800f9e2:	2202      	movs	r2, #2
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f002 fc05 	bl	80121f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800f9ec:	e04d      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800f9ee:	6839      	ldr	r1, [r7, #0]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f002 fb8f 	bl	8012114 <USBD_CtlError>
        ret = USBD_FAIL;
 800f9f6:	2303      	movs	r3, #3
 800f9f8:	75fb      	strb	r3, [r7, #23]
      break;
 800f9fa:	e046      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa02:	2b03      	cmp	r3, #3
 800fa04:	d107      	bne.n	800fa16 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800fa06:	693b      	ldr	r3, [r7, #16]
 800fa08:	3304      	adds	r3, #4
 800fa0a:	2201      	movs	r2, #1
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f002 fbf1 	bl	80121f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800fa14:	e039      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f002 fb7b 	bl	8012114 <USBD_CtlError>
        ret = USBD_FAIL;
 800fa1e:	2303      	movs	r3, #3
 800fa20:	75fb      	strb	r3, [r7, #23]
      break;
 800fa22:	e032      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa2a:	2b03      	cmp	r3, #3
 800fa2c:	d106      	bne.n	800fa3c <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	885b      	ldrh	r3, [r3, #2]
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	461a      	mov	r2, r3
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800fa3a:	e026      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800fa3c:	6839      	ldr	r1, [r7, #0]
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f002 fb68 	bl	8012114 <USBD_CtlError>
        ret = USBD_FAIL;
 800fa44:	2303      	movs	r3, #3
 800fa46:	75fb      	strb	r3, [r7, #23]
      break;
 800fa48:	e01f      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa50:	2b03      	cmp	r3, #3
 800fa52:	d119      	bne.n	800fa88 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	885b      	ldrh	r3, [r3, #2]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d115      	bne.n	800fa88 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	889b      	ldrh	r3, [r3, #4]
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	4619      	mov	r1, r3
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f006 fa37 	bl	8015ed8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	889b      	ldrh	r3, [r3, #4]
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	4619      	mov	r1, r3
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 fa5a 	bl	800ff2c <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800fa78:	e006      	b.n	800fa88 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800fa7a:	6839      	ldr	r1, [r7, #0]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f002 fb49 	bl	8012114 <USBD_CtlError>
      ret = USBD_FAIL;
 800fa82:	2303      	movs	r3, #3
 800fa84:	75fb      	strb	r3, [r7, #23]
      break;
 800fa86:	e000      	b.n	800fa8a <USBD_MSC_Setup+0x1b6>
      break;
 800fa88:	bf00      	nop
    }
    break;
 800fa8a:	e006      	b.n	800fa9a <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800fa8c:	6839      	ldr	r1, [r7, #0]
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f002 fb40 	bl	8012114 <USBD_CtlError>
    ret = USBD_FAIL;
 800fa94:	2303      	movs	r3, #3
 800fa96:	75fb      	strb	r3, [r7, #23]
    break;
 800fa98:	bf00      	nop
  }

  return (uint8_t)ret;
 800fa9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3718      	adds	r7, #24
 800faa0:	46bd      	mov	sp, r7
 800faa2:	bd80      	pop	{r7, pc}

0800faa4 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800faa4:	b580      	push	{r7, lr}
 800faa6:	b082      	sub	sp, #8
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	460b      	mov	r3, r1
 800faae:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800fab0:	78fb      	ldrb	r3, [r7, #3]
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f000 f8d1 	bl	800fc5c <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800faba:	2300      	movs	r3, #0
}
 800fabc:	4618      	mov	r0, r3
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}

0800fac4 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	460b      	mov	r3, r1
 800face:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800fad0:	78fb      	ldrb	r3, [r7, #3]
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f8f2 	bl	800fcbe <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800fada:	2300      	movs	r3, #0
}
 800fadc:	4618      	mov	r0, r3
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2220      	movs	r2, #32
 800faf0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800faf2:	4b03      	ldr	r3, [pc, #12]	; (800fb00 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr
 800fb00:	240000dc 	.word	0x240000dc

0800fb04 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2220      	movs	r2, #32
 800fb10:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800fb12:	4b03      	ldr	r3, [pc, #12]	; (800fb20 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	240000fc 	.word	0x240000fc

0800fb24 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fb24:	b480      	push	{r7}
 800fb26:	b083      	sub	sp, #12
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2220      	movs	r2, #32
 800fb30:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800fb32:	4b03      	ldr	r3, [pc, #12]	; (800fb40 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	370c      	adds	r7, #12
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3e:	4770      	bx	lr
 800fb40:	2400011c 	.word	0x2400011c

0800fb44 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	220a      	movs	r2, #10
 800fb50:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800fb52:	4b03      	ldr	r3, [pc, #12]	; (800fb60 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	370c      	adds	r7, #12
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	2400013c 	.word	0x2400013c

0800fb64 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800fb64:	b480      	push	{r7}
 800fb66:	b083      	sub	sp, #12
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d101      	bne.n	800fb78 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e004      	b.n	800fb82 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	683a      	ldr	r2, [r7, #0]
 800fb7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	370c      	adds	r7, #12
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr

0800fb8e <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b084      	sub	sp, #16
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fb9c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2200      	movs	r2, #0
 800fba2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2200      	movs	r2, #0
 800fba8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2200      	movs	r2, #0
 800fbae:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2000      	movs	r0, #0
 800fbcc:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800fbce:	2101      	movs	r1, #1
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f006 f981 	bl	8015ed8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800fbd6:	2181      	movs	r1, #129	; 0x81
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f006 f97d 	bl	8015ed8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800fbe4:	231f      	movs	r3, #31
 800fbe6:	2101      	movs	r1, #1
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f006 fa3e 	bl	801606a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc04:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	2200      	movs	r2, #0
 800fc0a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800fc12:	2181      	movs	r1, #129	; 0x81
 800fc14:	6878      	ldr	r0, [r7, #4]
 800fc16:	f006 f99d 	bl	8015f54 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800fc1a:	2101      	movs	r1, #1
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f006 f999 	bl	8015f54 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800fc28:	231f      	movs	r3, #31
 800fc2a:	2101      	movs	r1, #1
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f006 fa1c 	bl	801606a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fc32:	bf00      	nop
 800fc34:	3710      	adds	r7, #16
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b085      	sub	sp, #20
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc48:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	721a      	strb	r2, [r3, #8]
}
 800fc50:	bf00      	nop
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b084      	sub	sp, #16
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	460b      	mov	r3, r1
 800fc66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fc6e:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	7a1b      	ldrb	r3, [r3, #8]
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	d004      	beq.n	800fc82 <MSC_BOT_DataIn+0x26>
 800fc78:	2b02      	cmp	r3, #2
 800fc7a:	db19      	blt.n	800fcb0 <MSC_BOT_DataIn+0x54>
 800fc7c:	2b04      	cmp	r3, #4
 800fc7e:	dc17      	bgt.n	800fcb0 <MSC_BOT_DataIn+0x54>
 800fc80:	e011      	b.n	800fca6 <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800fc8e:	461a      	mov	r2, r3
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 f973 	bl	800ff7c <SCSI_ProcessCmd>
 800fc96:	4603      	mov	r3, r0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	da0b      	bge.n	800fcb4 <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fc9c:	2101      	movs	r1, #1
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f8ea 	bl	800fe78 <MSC_BOT_SendCSW>
    }
    break;
 800fca4:	e006      	b.n	800fcb4 <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fca6:	2100      	movs	r1, #0
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f8e5 	bl	800fe78 <MSC_BOT_SendCSW>
    break;
 800fcae:	e002      	b.n	800fcb6 <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800fcb0:	bf00      	nop
 800fcb2:	e000      	b.n	800fcb6 <MSC_BOT_DataIn+0x5a>
    break;
 800fcb4:	bf00      	nop
  }
}
 800fcb6:	bf00      	nop
 800fcb8:	3710      	adds	r7, #16
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b084      	sub	sp, #16
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	6078      	str	r0, [r7, #4]
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fcd0:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	7a1b      	ldrb	r3, [r3, #8]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <MSC_BOT_DataOut+0x22>
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d004      	beq.n	800fce8 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800fcde:	e015      	b.n	800fd0c <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f817 	bl	800fd14 <MSC_BOT_CBW_Decode>
      break;
 800fce6:	e011      	b.n	800fd0c <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 f940 	bl	800ff7c <SCSI_ProcessCmd>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	da03      	bge.n	800fd0a <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fd02:	2101      	movs	r1, #1
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f8b7 	bl	800fe78 <MSC_BOT_SendCSW>
      break;
 800fd0a:	bf00      	nop
  }
}
 800fd0c:	bf00      	nop
 800fd0e:	3710      	adds	r7, #16
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd22:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fd3c:	2101      	movs	r1, #1
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f006 f9b4 	bl	80160ac <USBD_LL_GetRxDataSize>
 800fd44:	4603      	mov	r3, r0
 800fd46:	2b1f      	cmp	r3, #31
 800fd48:	d114      	bne.n	800fd74 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800fd50:	4a32      	ldr	r2, [pc, #200]	; (800fe1c <MSC_BOT_CBW_Decode+0x108>)
 800fd52:	4293      	cmp	r3, r2
 800fd54:	d10e      	bne.n	800fd74 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d809      	bhi.n	800fd74 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d004      	beq.n	800fd74 <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800fd70:	2b10      	cmp	r3, #16
 800fd72:	d90e      	bls.n	800fd92 <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fd7a:	2320      	movs	r3, #32
 800fd7c:	2205      	movs	r2, #5
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	f000 fcc9 	bl	8010716 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2202      	movs	r2, #2
 800fd88:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800fd8a:	6878      	ldr	r0, [r7, #4]
 800fd8c:	f000 f8a0 	bl	800fed0 <MSC_BOT_Abort>
 800fd90:	e041      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800fd9e:	461a      	mov	r2, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f000 f8eb 	bl	800ff7c <SCSI_ProcessCmd>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	da0c      	bge.n	800fdc6 <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	7a1b      	ldrb	r3, [r3, #8]
 800fdb0:	2b05      	cmp	r3, #5
 800fdb2:	d104      	bne.n	800fdbe <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800fdb4:	2101      	movs	r1, #1
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f000 f85e 	bl	800fe78 <MSC_BOT_SendCSW>
 800fdbc:	e02b      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f886 	bl	800fed0 <MSC_BOT_Abort>
 800fdc4:	e027      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	7a1b      	ldrb	r3, [r3, #8]
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d022      	beq.n	800fe14 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800fdd2:	2b01      	cmp	r3, #1
 800fdd4:	d01e      	beq.n	800fe14 <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800fdda:	2b03      	cmp	r3, #3
 800fddc:	d01a      	beq.n	800fe14 <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d009      	beq.n	800fdfa <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f103 0110 	add.w	r1, r3, #16
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 f814 	bl	800fe20 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800fdf8:	e00d      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d104      	bne.n	800fe0c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800fe02:	2100      	movs	r1, #0
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f000 f837 	bl	800fe78 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800fe0a:	e004      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f85f 	bl	800fed0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800fe12:	e000      	b.n	800fe16 <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800fe14:	bf00      	nop
    }
  }
}
 800fe16:	3710      	adds	r7, #16
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	43425355 	.word	0x43425355

0800fe20 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b086      	sub	sp, #24
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe32:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	4293      	cmp	r3, r2
 800fe3e:	bf28      	it	cs
 800fe40:	4613      	movcs	r3, r2
 800fe42:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	1ad2      	subs	r2, r2, r3
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	2200      	movs	r2, #0
 800fe58:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2204      	movs	r2, #4
 800fe60:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	2181      	movs	r1, #129	; 0x81
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f006 f8dd 	bl	8016028 <USBD_LL_Transmit>
}
 800fe6e:	bf00      	nop
 800fe70:	3718      	adds	r7, #24
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
	...

0800fe78 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	460b      	mov	r3, r1
 800fe82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fe8a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	4a0f      	ldr	r2, [pc, #60]	; (800fecc <MSC_BOT_SendCSW+0x54>)
 800fe90:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	78fa      	ldrb	r2, [r7, #3]
 800fe98:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800fea8:	230d      	movs	r3, #13
 800feaa:	2181      	movs	r1, #129	; 0x81
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f006 f8bb 	bl	8016028 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800feb8:	231f      	movs	r3, #31
 800feba:	2101      	movs	r1, #1
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f006 f8d4 	bl	801606a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800fec2:	bf00      	nop
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	53425355 	.word	0x53425355

0800fed0 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b084      	sub	sp, #16
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fede:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d10c      	bne.n	800ff04 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d007      	beq.n	800ff04 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d103      	bne.n	800ff04 <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800fefc:	2101      	movs	r1, #1
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f006 f809 	bl	8015f16 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ff04:	2181      	movs	r1, #129	; 0x81
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f006 f805 	bl	8015f16 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	7a5b      	ldrb	r3, [r3, #9]
 800ff10:	2b02      	cmp	r3, #2
 800ff12:	d107      	bne.n	800ff24 <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ff14:	2181      	movs	r1, #129	; 0x81
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f005 fffd 	bl	8015f16 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	6878      	ldr	r0, [r7, #4]
 800ff20:	f005 fff9 	bl	8015f16 <USBD_LL_StallEP>
  }
}
 800ff24:	bf00      	nop
 800ff26:	3710      	adds	r7, #16
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	460b      	mov	r3, r1
 800ff36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff3e:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	7a5b      	ldrb	r3, [r3, #9]
 800ff44:	2b02      	cmp	r3, #2
 800ff46:	d108      	bne.n	800ff5a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800ff48:	2181      	movs	r1, #129	; 0x81
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f005 ffe3 	bl	8015f16 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800ff50:	2101      	movs	r1, #1
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f005 ffdf 	bl	8015f16 <USBD_LL_StallEP>
 800ff58:	e00d      	b.n	800ff76 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800ff5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	da08      	bge.n	800ff74 <MSC_BOT_CplClrFeature+0x48>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	7a5b      	ldrb	r3, [r3, #9]
 800ff66:	2b01      	cmp	r3, #1
 800ff68:	d004      	beq.n	800ff74 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ff6a:	2101      	movs	r1, #1
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7ff ff83 	bl	800fe78 <MSC_BOT_SendCSW>
 800ff72:	e000      	b.n	800ff76 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800ff74:	bf00      	nop
  }
}
 800ff76:	3710      	adds	r7, #16
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}

0800ff7c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	460b      	mov	r3, r1
 800ff86:	607a      	str	r2, [r7, #4]
 800ff88:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff90:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	2b25      	cmp	r3, #37	; 0x25
 800ff98:	d06e      	beq.n	8010078 <SCSI_ProcessCmd+0xfc>
 800ff9a:	2b25      	cmp	r3, #37	; 0x25
 800ff9c:	dc11      	bgt.n	800ffc2 <SCSI_ProcessCmd+0x46>
 800ff9e:	2b1a      	cmp	r3, #26
 800ffa0:	d04f      	beq.n	8010042 <SCSI_ProcessCmd+0xc6>
 800ffa2:	2b1a      	cmp	r3, #26
 800ffa4:	dc06      	bgt.n	800ffb4 <SCSI_ProcessCmd+0x38>
 800ffa6:	2b03      	cmp	r3, #3
 800ffa8:	d027      	beq.n	800fffa <SCSI_ProcessCmd+0x7e>
 800ffaa:	2b12      	cmp	r3, #18
 800ffac:	d02e      	beq.n	801000c <SCSI_ProcessCmd+0x90>
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d01a      	beq.n	800ffe8 <SCSI_ProcessCmd+0x6c>
 800ffb2:	e0a0      	b.n	80100f6 <SCSI_ProcessCmd+0x17a>
 800ffb4:	2b1e      	cmp	r3, #30
 800ffb6:	d03b      	beq.n	8010030 <SCSI_ProcessCmd+0xb4>
 800ffb8:	2b23      	cmp	r3, #35	; 0x23
 800ffba:	d054      	beq.n	8010066 <SCSI_ProcessCmd+0xea>
 800ffbc:	2b1b      	cmp	r3, #27
 800ffbe:	d02e      	beq.n	801001e <SCSI_ProcessCmd+0xa2>
 800ffc0:	e099      	b.n	80100f6 <SCSI_ProcessCmd+0x17a>
 800ffc2:	2b5a      	cmp	r3, #90	; 0x5a
 800ffc4:	d046      	beq.n	8010054 <SCSI_ProcessCmd+0xd8>
 800ffc6:	2b5a      	cmp	r3, #90	; 0x5a
 800ffc8:	dc07      	bgt.n	800ffda <SCSI_ProcessCmd+0x5e>
 800ffca:	2b2a      	cmp	r3, #42	; 0x2a
 800ffcc:	d078      	beq.n	80100c0 <SCSI_ProcessCmd+0x144>
 800ffce:	2b2f      	cmp	r3, #47	; 0x2f
 800ffd0:	f000 8088 	beq.w	80100e4 <SCSI_ProcessCmd+0x168>
 800ffd4:	2b28      	cmp	r3, #40	; 0x28
 800ffd6:	d061      	beq.n	801009c <SCSI_ProcessCmd+0x120>
 800ffd8:	e08d      	b.n	80100f6 <SCSI_ProcessCmd+0x17a>
 800ffda:	2ba8      	cmp	r3, #168	; 0xa8
 800ffdc:	d067      	beq.n	80100ae <SCSI_ProcessCmd+0x132>
 800ffde:	2baa      	cmp	r3, #170	; 0xaa
 800ffe0:	d077      	beq.n	80100d2 <SCSI_ProcessCmd+0x156>
 800ffe2:	2b9e      	cmp	r3, #158	; 0x9e
 800ffe4:	d051      	beq.n	801008a <SCSI_ProcessCmd+0x10e>
 800ffe6:	e086      	b.n	80100f6 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800ffe8:	7afb      	ldrb	r3, [r7, #11]
 800ffea:	687a      	ldr	r2, [r7, #4]
 800ffec:	4619      	mov	r1, r3
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f000 f893 	bl	801011a <SCSI_TestUnitReady>
 800fff4:	4603      	mov	r3, r0
 800fff6:	75fb      	strb	r3, [r7, #23]
    break;
 800fff8:	e089      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800fffa:	7afb      	ldrb	r3, [r7, #11]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	4619      	mov	r1, r3
 8010000:	68f8      	ldr	r0, [r7, #12]
 8010002:	f000 fb0f 	bl	8010624 <SCSI_RequestSense>
 8010006:	4603      	mov	r3, r0
 8010008:	75fb      	strb	r3, [r7, #23]
    break;
 801000a:	e080      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 801000c:	7afb      	ldrb	r3, [r7, #11]
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	4619      	mov	r1, r3
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f000 f8cc 	bl	80101b0 <SCSI_Inquiry>
 8010018:	4603      	mov	r3, r0
 801001a:	75fb      	strb	r3, [r7, #23]
    break;
 801001c:	e077      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801001e:	7afb      	ldrb	r3, [r7, #11]
 8010020:	687a      	ldr	r2, [r7, #4]
 8010022:	4619      	mov	r1, r3
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 fbb9 	bl	801079c <SCSI_StartStopUnit>
 801002a:	4603      	mov	r3, r0
 801002c:	75fb      	strb	r3, [r7, #23]
    break;
 801002e:	e06e      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8010030:	7afb      	ldrb	r3, [r7, #11]
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	4619      	mov	r1, r3
 8010036:	68f8      	ldr	r0, [r7, #12]
 8010038:	f000 fbfb 	bl	8010832 <SCSI_AllowPreventRemovable>
 801003c:	4603      	mov	r3, r0
 801003e:	75fb      	strb	r3, [r7, #23]
    break;
 8010040:	e065      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8010042:	7afb      	ldrb	r3, [r7, #11]
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4619      	mov	r1, r3
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 fa9f 	bl	801058c <SCSI_ModeSense6>
 801004e:	4603      	mov	r3, r0
 8010050:	75fb      	strb	r3, [r7, #23]
    break;
 8010052:	e05c      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010054:	7afb      	ldrb	r3, [r7, #11]
 8010056:	687a      	ldr	r2, [r7, #4]
 8010058:	4619      	mov	r1, r3
 801005a:	68f8      	ldr	r0, [r7, #12]
 801005c:	f000 fabc 	bl	80105d8 <SCSI_ModeSense10>
 8010060:	4603      	mov	r3, r0
 8010062:	75fb      	strb	r3, [r7, #23]
    break;
 8010064:	e053      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010066:	7afb      	ldrb	r3, [r7, #11]
 8010068:	687a      	ldr	r2, [r7, #4]
 801006a:	4619      	mov	r1, r3
 801006c:	68f8      	ldr	r0, [r7, #12]
 801006e:	f000 fa20 	bl	80104b2 <SCSI_ReadFormatCapacity>
 8010072:	4603      	mov	r3, r0
 8010074:	75fb      	strb	r3, [r7, #23]
    break;
 8010076:	e04a      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010078:	7afb      	ldrb	r3, [r7, #11]
 801007a:	687a      	ldr	r2, [r7, #4]
 801007c:	4619      	mov	r1, r3
 801007e:	68f8      	ldr	r0, [r7, #12]
 8010080:	f000 f904 	bl	801028c <SCSI_ReadCapacity10>
 8010084:	4603      	mov	r3, r0
 8010086:	75fb      	strb	r3, [r7, #23]
    break;
 8010088:	e041      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801008a:	7afb      	ldrb	r3, [r7, #11]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	4619      	mov	r1, r3
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f000 f96a 	bl	801036a <SCSI_ReadCapacity16>
 8010096:	4603      	mov	r3, r0
 8010098:	75fb      	strb	r3, [r7, #23]
    break;
 801009a:	e038      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 801009c:	7afb      	ldrb	r3, [r7, #11]
 801009e:	687a      	ldr	r2, [r7, #4]
 80100a0:	4619      	mov	r1, r3
 80100a2:	68f8      	ldr	r0, [r7, #12]
 80100a4:	f000 fbe8 	bl	8010878 <SCSI_Read10>
 80100a8:	4603      	mov	r3, r0
 80100aa:	75fb      	strb	r3, [r7, #23]
    break;
 80100ac:	e02f      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80100ae:	7afb      	ldrb	r3, [r7, #11]
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	4619      	mov	r1, r3
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f000 fc79 	bl	80109ac <SCSI_Read12>
 80100ba:	4603      	mov	r3, r0
 80100bc:	75fb      	strb	r3, [r7, #23]
    break;
 80100be:	e026      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 80100c0:	7afb      	ldrb	r3, [r7, #11]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	4619      	mov	r1, r3
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f000 fd15 	bl	8010af6 <SCSI_Write10>
 80100cc:	4603      	mov	r3, r0
 80100ce:	75fb      	strb	r3, [r7, #23]
    break;
 80100d0:	e01d      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 80100d2:	7afb      	ldrb	r3, [r7, #11]
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	4619      	mov	r1, r3
 80100d8:	68f8      	ldr	r0, [r7, #12]
 80100da:	f000 fdcb 	bl	8010c74 <SCSI_Write12>
 80100de:	4603      	mov	r3, r0
 80100e0:	75fb      	strb	r3, [r7, #23]
    break;
 80100e2:	e014      	b.n	801010e <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 80100e4:	7afb      	ldrb	r3, [r7, #11]
 80100e6:	687a      	ldr	r2, [r7, #4]
 80100e8:	4619      	mov	r1, r3
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f000 fe91 	bl	8010e12 <SCSI_Verify10>
 80100f0:	4603      	mov	r3, r0
 80100f2:	75fb      	strb	r3, [r7, #23]
    break;
 80100f4:	e00b      	b.n	801010e <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80100f6:	7af9      	ldrb	r1, [r7, #11]
 80100f8:	2320      	movs	r3, #32
 80100fa:	2205      	movs	r2, #5
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f000 fb0a 	bl	8010716 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	2202      	movs	r2, #2
 8010106:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8010108:	23ff      	movs	r3, #255	; 0xff
 801010a:	75fb      	strb	r3, [r7, #23]
    break;
 801010c:	bf00      	nop
  }

  return ret;
 801010e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3718      	adds	r7, #24
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b086      	sub	sp, #24
 801011e:	af00      	add	r7, sp, #0
 8010120:	60f8      	str	r0, [r7, #12]
 8010122:	460b      	mov	r3, r1
 8010124:	607a      	str	r2, [r7, #4]
 8010126:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801012e:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00a      	beq.n	8010150 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010140:	2320      	movs	r3, #32
 8010142:	2205      	movs	r2, #5
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f000 fae6 	bl	8010716 <SCSI_SenseCode>

    return -1;
 801014a:	f04f 33ff 	mov.w	r3, #4294967295
 801014e:	e02a      	b.n	80101a6 <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8010156:	2b02      	cmp	r3, #2
 8010158:	d10b      	bne.n	8010172 <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801015a:	7af9      	ldrb	r1, [r7, #11]
 801015c:	233a      	movs	r3, #58	; 0x3a
 801015e:	2202      	movs	r2, #2
 8010160:	68f8      	ldr	r0, [r7, #12]
 8010162:	f000 fad8 	bl	8010716 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	2205      	movs	r2, #5
 801016a:	721a      	strb	r2, [r3, #8]
    return -1;
 801016c:	f04f 33ff 	mov.w	r3, #4294967295
 8010170:	e019      	b.n	80101a6 <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	7afa      	ldrb	r2, [r7, #11]
 801017c:	4610      	mov	r0, r2
 801017e:	4798      	blx	r3
 8010180:	4603      	mov	r3, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00b      	beq.n	801019e <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010186:	7af9      	ldrb	r1, [r7, #11]
 8010188:	233a      	movs	r3, #58	; 0x3a
 801018a:	2202      	movs	r2, #2
 801018c:	68f8      	ldr	r0, [r7, #12]
 801018e:	f000 fac2 	bl	8010716 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2205      	movs	r2, #5
 8010196:	721a      	strb	r2, [r3, #8]

    return -1;
 8010198:	f04f 33ff 	mov.w	r3, #4294967295
 801019c:	e003      	b.n	80101a6 <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2200      	movs	r2, #0
 80101a2:	60da      	str	r2, [r3, #12]

  return 0;
 80101a4:	2300      	movs	r3, #0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
	...

080101b0 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b088      	sub	sp, #32
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	460b      	mov	r3, r1
 80101ba:	607a      	str	r2, [r7, #4]
 80101bc:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101c4:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10a      	bne.n	80101e6 <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80101d0:	69bb      	ldr	r3, [r7, #24]
 80101d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80101d6:	2320      	movs	r3, #32
 80101d8:	2205      	movs	r2, #5
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 fa9b 	bl	8010716 <SCSI_SenseCode>
    return -1;
 80101e0:	f04f 33ff 	mov.w	r3, #4294967295
 80101e4:	e04a      	b.n	801027c <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	3301      	adds	r3, #1
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	f003 0301 	and.w	r3, r3, #1
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d020      	beq.n	8010236 <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	3302      	adds	r3, #2
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d105      	bne.n	801020a <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80101fe:	2206      	movs	r2, #6
 8010200:	4920      	ldr	r1, [pc, #128]	; (8010284 <SCSI_Inquiry+0xd4>)
 8010202:	69b8      	ldr	r0, [r7, #24]
 8010204:	f000 ff50 	bl	80110a8 <SCSI_UpdateBotData>
 8010208:	e037      	b.n	801027a <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	3302      	adds	r3, #2
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	2b80      	cmp	r3, #128	; 0x80
 8010212:	d105      	bne.n	8010220 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8010214:	2208      	movs	r2, #8
 8010216:	491c      	ldr	r1, [pc, #112]	; (8010288 <SCSI_Inquiry+0xd8>)
 8010218:	69b8      	ldr	r0, [r7, #24]
 801021a:	f000 ff45 	bl	80110a8 <SCSI_UpdateBotData>
 801021e:	e02c      	b.n	801027a <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8010220:	69bb      	ldr	r3, [r7, #24]
 8010222:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010226:	2324      	movs	r3, #36	; 0x24
 8010228:	2205      	movs	r2, #5
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f000 fa73 	bl	8010716 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8010230:	f04f 33ff 	mov.w	r3, #4294967295
 8010234:	e022      	b.n	801027c <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801023c:	69d9      	ldr	r1, [r3, #28]
 801023e:	7afa      	ldrb	r2, [r7, #11]
 8010240:	4613      	mov	r3, r2
 8010242:	00db      	lsls	r3, r3, #3
 8010244:	4413      	add	r3, r2
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	440b      	add	r3, r1
 801024a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	3304      	adds	r3, #4
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	b29b      	uxth	r3, r3
 8010254:	3305      	adds	r3, #5
 8010256:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	3304      	adds	r3, #4
 801025c:	781b      	ldrb	r3, [r3, #0]
 801025e:	b29b      	uxth	r3, r3
 8010260:	8bfa      	ldrh	r2, [r7, #30]
 8010262:	429a      	cmp	r2, r3
 8010264:	d303      	bcc.n	801026e <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	3304      	adds	r3, #4
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801026e:	8bfb      	ldrh	r3, [r7, #30]
 8010270:	461a      	mov	r2, r3
 8010272:	6979      	ldr	r1, [r7, #20]
 8010274:	69b8      	ldr	r0, [r7, #24]
 8010276:	f000 ff17 	bl	80110a8 <SCSI_UpdateBotData>
  }

  return 0;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3720      	adds	r7, #32
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	24000148 	.word	0x24000148
 8010288:	24000150 	.word	0x24000150

0801028c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801028c:	b580      	push	{r7, lr}
 801028e:	b086      	sub	sp, #24
 8010290:	af00      	add	r7, sp, #0
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	460b      	mov	r3, r1
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80102a0:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80102b6:	7af8      	ldrb	r0, [r7, #11]
 80102b8:	4798      	blx	r3
 80102ba:	4603      	mov	r3, r0
 80102bc:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80102be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d104      	bne.n	80102d0 <SCSI_ReadCapacity10+0x44>
 80102c6:	697b      	ldr	r3, [r7, #20]
 80102c8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d108      	bne.n	80102e2 <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80102d0:	7af9      	ldrb	r1, [r7, #11]
 80102d2:	233a      	movs	r3, #58	; 0x3a
 80102d4:	2202      	movs	r2, #2
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f000 fa1d 	bl	8010716 <SCSI_SenseCode>
    return -1;
 80102dc:	f04f 33ff 	mov.w	r3, #4294967295
 80102e0:	e03f      	b.n	8010362 <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80102e8:	3b01      	subs	r3, #1
 80102ea:	0e1b      	lsrs	r3, r3, #24
 80102ec:	b2da      	uxtb	r2, r3
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80102f8:	3b01      	subs	r3, #1
 80102fa:	0c1b      	lsrs	r3, r3, #16
 80102fc:	b2da      	uxtb	r2, r3
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010308:	3b01      	subs	r3, #1
 801030a:	0a1b      	lsrs	r3, r3, #8
 801030c:	b2da      	uxtb	r2, r3
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010318:	b2db      	uxtb	r3, r3
 801031a:	3b01      	subs	r3, #1
 801031c:	b2da      	uxtb	r2, r3
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010328:	161b      	asrs	r3, r3, #24
 801032a:	b2da      	uxtb	r2, r3
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010336:	141b      	asrs	r3, r3, #16
 8010338:	b2da      	uxtb	r2, r3
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010344:	0a1b      	lsrs	r3, r3, #8
 8010346:	b29b      	uxth	r3, r3
 8010348:	b2da      	uxtb	r2, r3
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010354:	b2da      	uxtb	r2, r3
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	2208      	movs	r2, #8
 801035e:	60da      	str	r2, [r3, #12]

  return 0;
 8010360:	2300      	movs	r3, #0

}
 8010362:	4618      	mov	r0, r3
 8010364:	3718      	adds	r7, #24
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}

0801036a <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801036a:	b580      	push	{r7, lr}
 801036c:	b088      	sub	sp, #32
 801036e:	af00      	add	r7, sp, #0
 8010370:	60f8      	str	r0, [r7, #12]
 8010372:	460b      	mov	r3, r1
 8010374:	607a      	str	r2, [r7, #4]
 8010376:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801037e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	69ba      	ldr	r2, [r7, #24]
 801038a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801038e:	69ba      	ldr	r2, [r7, #24]
 8010390:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8010394:	7af8      	ldrb	r0, [r7, #11]
 8010396:	4798      	blx	r3
 8010398:	4603      	mov	r3, r0
 801039a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801039c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d104      	bne.n	80103ae <SCSI_ReadCapacity16+0x44>
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80103aa:	2b02      	cmp	r3, #2
 80103ac:	d108      	bne.n	80103c0 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80103ae:	7af9      	ldrb	r1, [r7, #11]
 80103b0:	233a      	movs	r3, #58	; 0x3a
 80103b2:	2202      	movs	r2, #2
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f000 f9ae 	bl	8010716 <SCSI_SenseCode>
    return -1;
 80103ba:	f04f 33ff 	mov.w	r3, #4294967295
 80103be:	e074      	b.n	80104aa <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	330a      	adds	r3, #10
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	330b      	adds	r3, #11
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103d0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	330c      	adds	r3, #12
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80103da:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	320d      	adds	r2, #13
 80103e0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80103e2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80103e4:	69bb      	ldr	r3, [r7, #24]
 80103e6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80103e8:	2300      	movs	r3, #0
 80103ea:	77fb      	strb	r3, [r7, #31]
 80103ec:	e007      	b.n	80103fe <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 80103ee:	7ffb      	ldrb	r3, [r7, #31]
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	4413      	add	r3, r2
 80103f4:	2200      	movs	r2, #0
 80103f6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80103f8:	7ffb      	ldrb	r3, [r7, #31]
 80103fa:	3301      	adds	r3, #1
 80103fc:	77fb      	strb	r3, [r7, #31]
 80103fe:	7ffa      	ldrb	r2, [r7, #31]
 8010400:	69bb      	ldr	r3, [r7, #24]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	429a      	cmp	r2, r3
 8010406:	d3f2      	bcc.n	80103ee <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801040e:	3b01      	subs	r3, #1
 8010410:	0e1b      	lsrs	r3, r3, #24
 8010412:	b2da      	uxtb	r2, r3
 8010414:	69bb      	ldr	r3, [r7, #24]
 8010416:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801041e:	3b01      	subs	r3, #1
 8010420:	0c1b      	lsrs	r3, r3, #16
 8010422:	b2da      	uxtb	r2, r3
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8010428:	69bb      	ldr	r3, [r7, #24]
 801042a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801042e:	3b01      	subs	r3, #1
 8010430:	0a1b      	lsrs	r3, r3, #8
 8010432:	b2da      	uxtb	r2, r3
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8010438:	69bb      	ldr	r3, [r7, #24]
 801043a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801043e:	b2db      	uxtb	r3, r3
 8010440:	3b01      	subs	r3, #1
 8010442:	b2da      	uxtb	r2, r3
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8010448:	69bb      	ldr	r3, [r7, #24]
 801044a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801044e:	161b      	asrs	r3, r3, #24
 8010450:	b2da      	uxtb	r2, r3
 8010452:	69bb      	ldr	r3, [r7, #24]
 8010454:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801045c:	141b      	asrs	r3, r3, #16
 801045e:	b2da      	uxtb	r2, r3
 8010460:	69bb      	ldr	r3, [r7, #24]
 8010462:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801046a:	0a1b      	lsrs	r3, r3, #8
 801046c:	b29b      	uxth	r3, r3
 801046e:	b2da      	uxtb	r2, r3
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801047a:	b2da      	uxtb	r2, r3
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	330a      	adds	r3, #10
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	330b      	adds	r3, #11
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8010490:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	330c      	adds	r3, #12
 8010496:	781b      	ldrb	r3, [r3, #0]
 8010498:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801049a:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	320d      	adds	r2, #13
 80104a0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80104a2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	60da      	str	r2, [r3, #12]

  return 0;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3720      	adds	r7, #32
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b088      	sub	sp, #32
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	60f8      	str	r0, [r7, #12]
 80104ba:	460b      	mov	r3, r1
 80104bc:	607a      	str	r2, [r7, #4]
 80104be:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80104c6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80104ce:	685b      	ldr	r3, [r3, #4]
 80104d0:	f107 0214 	add.w	r2, r7, #20
 80104d4:	f107 0110 	add.w	r1, r7, #16
 80104d8:	7af8      	ldrb	r0, [r7, #11]
 80104da:	4798      	blx	r3
 80104dc:	4603      	mov	r3, r0
 80104de:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80104e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d104      	bne.n	80104f2 <SCSI_ReadFormatCapacity+0x40>
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80104ee:	2b02      	cmp	r3, #2
 80104f0:	d108      	bne.n	8010504 <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80104f2:	7af9      	ldrb	r1, [r7, #11]
 80104f4:	233a      	movs	r3, #58	; 0x3a
 80104f6:	2202      	movs	r2, #2
 80104f8:	68f8      	ldr	r0, [r7, #12]
 80104fa:	f000 f90c 	bl	8010716 <SCSI_SenseCode>
    return -1;
 80104fe:	f04f 33ff 	mov.w	r3, #4294967295
 8010502:	e03e      	b.n	8010582 <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 8010504:	2300      	movs	r3, #0
 8010506:	83fb      	strh	r3, [r7, #30]
 8010508:	e007      	b.n	801051a <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 801050a:	8bfb      	ldrh	r3, [r7, #30]
 801050c:	69ba      	ldr	r2, [r7, #24]
 801050e:	4413      	add	r3, r2
 8010510:	2200      	movs	r2, #0
 8010512:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8010514:	8bfb      	ldrh	r3, [r7, #30]
 8010516:	3301      	adds	r3, #1
 8010518:	83fb      	strh	r3, [r7, #30]
 801051a:	8bfb      	ldrh	r3, [r7, #30]
 801051c:	2b0b      	cmp	r3, #11
 801051e:	d9f4      	bls.n	801050a <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	2208      	movs	r2, #8
 8010524:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	3b01      	subs	r3, #1
 801052a:	0e1b      	lsrs	r3, r3, #24
 801052c:	b2da      	uxtb	r2, r3
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	3b01      	subs	r3, #1
 8010536:	0c1b      	lsrs	r3, r3, #16
 8010538:	b2da      	uxtb	r2, r3
 801053a:	69bb      	ldr	r3, [r7, #24]
 801053c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	3b01      	subs	r3, #1
 8010542:	0a1b      	lsrs	r3, r3, #8
 8010544:	b2da      	uxtb	r2, r3
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	b2db      	uxtb	r3, r3
 801054e:	3b01      	subs	r3, #1
 8010550:	b2da      	uxtb	r2, r3
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	2202      	movs	r2, #2
 801055a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801055c:	8abb      	ldrh	r3, [r7, #20]
 801055e:	141b      	asrs	r3, r3, #16
 8010560:	b2da      	uxtb	r2, r3
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8010566:	8abb      	ldrh	r3, [r7, #20]
 8010568:	0a1b      	lsrs	r3, r3, #8
 801056a:	b29b      	uxth	r3, r3
 801056c:	b2da      	uxtb	r2, r3
 801056e:	69bb      	ldr	r3, [r7, #24]
 8010570:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8010572:	8abb      	ldrh	r3, [r7, #20]
 8010574:	b2da      	uxtb	r2, r3
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801057a:	69bb      	ldr	r3, [r7, #24]
 801057c:	220c      	movs	r2, #12
 801057e:	60da      	str	r2, [r3, #12]

  return 0;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b086      	sub	sp, #24
 8010590:	af00      	add	r7, sp, #0
 8010592:	60f8      	str	r0, [r7, #12]
 8010594:	460b      	mov	r3, r1
 8010596:	607a      	str	r2, [r7, #4]
 8010598:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105a0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80105a2:	2317      	movs	r3, #23
 80105a4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	3304      	adds	r3, #4
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	8afa      	ldrh	r2, [r7, #22]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d303      	bcc.n	80105bc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	3304      	adds	r3, #4
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80105bc:	8afb      	ldrh	r3, [r7, #22]
 80105be:	461a      	mov	r2, r3
 80105c0:	4904      	ldr	r1, [pc, #16]	; (80105d4 <SCSI_ModeSense6+0x48>)
 80105c2:	6938      	ldr	r0, [r7, #16]
 80105c4:	f000 fd70 	bl	80110a8 <SCSI_UpdateBotData>

  return 0;
 80105c8:	2300      	movs	r3, #0
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3718      	adds	r7, #24
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	24000158 	.word	0x24000158

080105d8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b086      	sub	sp, #24
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	460b      	mov	r3, r1
 80105e2:	607a      	str	r2, [r7, #4]
 80105e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80105ec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80105ee:	231b      	movs	r3, #27
 80105f0:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	3308      	adds	r3, #8
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	b29b      	uxth	r3, r3
 80105fa:	8afa      	ldrh	r2, [r7, #22]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d303      	bcc.n	8010608 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3308      	adds	r3, #8
 8010604:	781b      	ldrb	r3, [r3, #0]
 8010606:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8010608:	8afb      	ldrh	r3, [r7, #22]
 801060a:	461a      	mov	r2, r3
 801060c:	4904      	ldr	r1, [pc, #16]	; (8010620 <SCSI_ModeSense10+0x48>)
 801060e:	6938      	ldr	r0, [r7, #16]
 8010610:	f000 fd4a 	bl	80110a8 <SCSI_UpdateBotData>

  return 0;
 8010614:	2300      	movs	r3, #0
}
 8010616:	4618      	mov	r0, r3
 8010618:	3718      	adds	r7, #24
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	24000170 	.word	0x24000170

08010624 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	460b      	mov	r3, r1
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010638:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010640:	2b00      	cmp	r3, #0
 8010642:	d10a      	bne.n	801065a <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801064a:	2320      	movs	r3, #32
 801064c:	2205      	movs	r2, #5
 801064e:	68f8      	ldr	r0, [r7, #12]
 8010650:	f000 f861 	bl	8010716 <SCSI_SenseCode>
    return -1;
 8010654:	f04f 33ff 	mov.w	r3, #4294967295
 8010658:	e059      	b.n	801070e <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801065a:	2300      	movs	r3, #0
 801065c:	75fb      	strb	r3, [r7, #23]
 801065e:	e007      	b.n	8010670 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 8010660:	7dfb      	ldrb	r3, [r7, #23]
 8010662:	693a      	ldr	r2, [r7, #16]
 8010664:	4413      	add	r3, r2
 8010666:	2200      	movs	r2, #0
 8010668:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801066a:	7dfb      	ldrb	r3, [r7, #23]
 801066c:	3301      	adds	r3, #1
 801066e:	75fb      	strb	r3, [r7, #23]
 8010670:	7dfb      	ldrb	r3, [r7, #23]
 8010672:	2b11      	cmp	r3, #17
 8010674:	d9f4      	bls.n	8010660 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	2270      	movs	r2, #112	; 0x70
 801067a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	220c      	movs	r2, #12
 8010680:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8010682:	693b      	ldr	r3, [r7, #16]
 8010684:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8010688:	693b      	ldr	r3, [r7, #16]
 801068a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801068e:	429a      	cmp	r2, r3
 8010690:	d02e      	beq.n	80106f0 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8010698:	461a      	mov	r2, r3
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	3248      	adds	r2, #72	; 0x48
 801069e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80106a2:	693b      	ldr	r3, [r7, #16]
 80106a4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80106ac:	693a      	ldr	r2, [r7, #16]
 80106ae:	3348      	adds	r3, #72	; 0x48
 80106b0:	00db      	lsls	r3, r3, #3
 80106b2:	4413      	add	r3, r2
 80106b4:	791a      	ldrb	r2, [r3, #4]
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80106c0:	693a      	ldr	r2, [r7, #16]
 80106c2:	3348      	adds	r3, #72	; 0x48
 80106c4:	00db      	lsls	r3, r3, #3
 80106c6:	4413      	add	r3, r2
 80106c8:	795a      	ldrb	r2, [r3, #5]
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80106ce:	693b      	ldr	r3, [r7, #16]
 80106d0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80106d4:	3301      	adds	r3, #1
 80106d6:	b2da      	uxtb	r2, r3
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80106e4:	2b04      	cmp	r3, #4
 80106e6:	d103      	bne.n	80106f0 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	2200      	movs	r2, #0
 80106ec:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	2212      	movs	r2, #18
 80106f4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	3304      	adds	r3, #4
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	2b12      	cmp	r3, #18
 80106fe:	d805      	bhi.n	801070c <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	3304      	adds	r3, #4
 8010704:	781b      	ldrb	r3, [r3, #0]
 8010706:	461a      	mov	r2, r3
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 801070c:	2300      	movs	r3, #0
}
 801070e:	4618      	mov	r0, r3
 8010710:	3718      	adds	r7, #24
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}

08010716 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8010716:	b480      	push	{r7}
 8010718:	b085      	sub	sp, #20
 801071a:	af00      	add	r7, sp, #0
 801071c:	6078      	str	r0, [r7, #4]
 801071e:	4608      	mov	r0, r1
 8010720:	4611      	mov	r1, r2
 8010722:	461a      	mov	r2, r3
 8010724:	4603      	mov	r3, r0
 8010726:	70fb      	strb	r3, [r7, #3]
 8010728:	460b      	mov	r3, r1
 801072a:	70bb      	strb	r3, [r7, #2]
 801072c:	4613      	mov	r3, r2
 801072e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010736:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801073e:	461a      	mov	r2, r3
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	3248      	adds	r2, #72	; 0x48
 8010744:	78b9      	ldrb	r1, [r7, #2]
 8010746:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8010750:	68fa      	ldr	r2, [r7, #12]
 8010752:	3348      	adds	r3, #72	; 0x48
 8010754:	00db      	lsls	r3, r3, #3
 8010756:	4413      	add	r3, r2
 8010758:	787a      	ldrb	r2, [r7, #1]
 801075a:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	3348      	adds	r3, #72	; 0x48
 8010766:	00db      	lsls	r3, r3, #3
 8010768:	4413      	add	r3, r2
 801076a:	2200      	movs	r2, #0
 801076c:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8010774:	3301      	adds	r3, #1
 8010776:	b2da      	uxtb	r2, r3
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8010784:	2b04      	cmp	r3, #4
 8010786:	d103      	bne.n	8010790 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2200      	movs	r2, #0
 801078c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8010790:	bf00      	nop
 8010792:	3714      	adds	r7, #20
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b086      	sub	sp, #24
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	460b      	mov	r3, r1
 80107a6:	607a      	str	r2, [r7, #4]
 80107a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80107b0:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80107b8:	2b01      	cmp	r3, #1
 80107ba:	d10f      	bne.n	80107dc <SCSI_StartStopUnit+0x40>
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	3304      	adds	r3, #4
 80107c0:	781b      	ldrb	r3, [r3, #0]
 80107c2:	f003 0303 	and.w	r3, r3, #3
 80107c6:	2b02      	cmp	r3, #2
 80107c8:	d108      	bne.n	80107dc <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80107ca:	7af9      	ldrb	r1, [r7, #11]
 80107cc:	2324      	movs	r3, #36	; 0x24
 80107ce:	2205      	movs	r2, #5
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f7ff ffa0 	bl	8010716 <SCSI_SenseCode>

    return -1;
 80107d6:	f04f 33ff 	mov.w	r3, #4294967295
 80107da:	e026      	b.n	801082a <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	3304      	adds	r3, #4
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	f003 0303 	and.w	r3, r3, #3
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d104      	bne.n	80107f4 <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80107ea:	697b      	ldr	r3, [r7, #20]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80107f2:	e016      	b.n	8010822 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	3304      	adds	r3, #4
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	f003 0303 	and.w	r3, r3, #3
 80107fe:	2b02      	cmp	r3, #2
 8010800:	d104      	bne.n	801080c <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	2202      	movs	r2, #2
 8010806:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801080a:	e00a      	b.n	8010822 <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	3304      	adds	r3, #4
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	2b03      	cmp	r3, #3
 8010818:	d103      	bne.n	8010822 <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801081a:	697b      	ldr	r3, [r7, #20]
 801081c:	2200      	movs	r2, #0
 801081e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	2200      	movs	r2, #0
 8010826:	60da      	str	r2, [r3, #12]

  return 0;
 8010828:	2300      	movs	r3, #0
}
 801082a:	4618      	mov	r0, r3
 801082c:	3718      	adds	r7, #24
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010832:	b480      	push	{r7}
 8010834:	b087      	sub	sp, #28
 8010836:	af00      	add	r7, sp, #0
 8010838:	60f8      	str	r0, [r7, #12]
 801083a:	460b      	mov	r3, r1
 801083c:	607a      	str	r2, [r7, #4]
 801083e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010846:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	3304      	adds	r3, #4
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d104      	bne.n	801085c <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	2200      	movs	r2, #0
 8010856:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801085a:	e003      	b.n	8010864 <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	2201      	movs	r2, #1
 8010860:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	2200      	movs	r2, #0
 8010868:	60da      	str	r2, [r3, #12]

  return 0;
 801086a:	2300      	movs	r3, #0
}
 801086c:	4618      	mov	r0, r3
 801086e:	371c      	adds	r7, #28
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b086      	sub	sp, #24
 801087c:	af00      	add	r7, sp, #0
 801087e:	60f8      	str	r0, [r7, #12]
 8010880:	460b      	mov	r3, r1
 8010882:	607a      	str	r2, [r7, #4]
 8010884:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801088c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	7a1b      	ldrb	r3, [r3, #8]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d17c      	bne.n	8010990 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801089c:	b25b      	sxtb	r3, r3
 801089e:	2b00      	cmp	r3, #0
 80108a0:	db0a      	blt.n	80108b8 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80108a8:	2320      	movs	r3, #32
 80108aa:	2205      	movs	r2, #5
 80108ac:	68f8      	ldr	r0, [r7, #12]
 80108ae:	f7ff ff32 	bl	8010716 <SCSI_SenseCode>
      return -1;
 80108b2:	f04f 33ff 	mov.w	r3, #4294967295
 80108b6:	e075      	b.n	80109a4 <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80108be:	2b02      	cmp	r3, #2
 80108c0:	d108      	bne.n	80108d4 <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80108c2:	7af9      	ldrb	r1, [r7, #11]
 80108c4:	233a      	movs	r3, #58	; 0x3a
 80108c6:	2202      	movs	r2, #2
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7ff ff24 	bl	8010716 <SCSI_SenseCode>

      return -1;
 80108ce:	f04f 33ff 	mov.w	r3, #4294967295
 80108d2:	e067      	b.n	80109a4 <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80108da:	689b      	ldr	r3, [r3, #8]
 80108dc:	7afa      	ldrb	r2, [r7, #11]
 80108de:	4610      	mov	r0, r2
 80108e0:	4798      	blx	r3
 80108e2:	4603      	mov	r3, r0
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d008      	beq.n	80108fa <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80108e8:	7af9      	ldrb	r1, [r7, #11]
 80108ea:	233a      	movs	r3, #58	; 0x3a
 80108ec:	2202      	movs	r2, #2
 80108ee:	68f8      	ldr	r0, [r7, #12]
 80108f0:	f7ff ff11 	bl	8010716 <SCSI_SenseCode>
      return -1;
 80108f4:	f04f 33ff 	mov.w	r3, #4294967295
 80108f8:	e054      	b.n	80109a4 <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	3302      	adds	r3, #2
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	3303      	adds	r3, #3
 8010906:	781b      	ldrb	r3, [r3, #0]
 8010908:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801090a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	3304      	adds	r3, #4
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010914:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010916:	687a      	ldr	r2, [r7, #4]
 8010918:	3205      	adds	r2, #5
 801091a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801091c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	3307      	adds	r3, #7
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	021b      	lsls	r3, r3, #8
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	3208      	adds	r2, #8
 8010930:	7812      	ldrb	r2, [r2, #0]
 8010932:	431a      	orrs	r2, r3
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010946:	7af9      	ldrb	r1, [r7, #11]
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f000 fa95 	bl	8010e78 <SCSI_CheckAddressRange>
 801094e:	4603      	mov	r3, r0
 8010950:	2b00      	cmp	r3, #0
 8010952:	da02      	bge.n	801095a <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010954:	f04f 33ff 	mov.w	r3, #4294967295
 8010958:	e024      	b.n	80109a4 <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010966:	6979      	ldr	r1, [r7, #20]
 8010968:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801096c:	fb01 f303 	mul.w	r3, r1, r3
 8010970:	429a      	cmp	r2, r3
 8010972:	d00a      	beq.n	801098a <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801097a:	2320      	movs	r3, #32
 801097c:	2205      	movs	r2, #5
 801097e:	68f8      	ldr	r0, [r7, #12]
 8010980:	f7ff fec9 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010984:	f04f 33ff 	mov.w	r3, #4294967295
 8010988:	e00c      	b.n	80109a4 <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	2202      	movs	r2, #2
 801098e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010996:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010998:	7afb      	ldrb	r3, [r7, #11]
 801099a:	4619      	mov	r1, r3
 801099c:	68f8      	ldr	r0, [r7, #12]
 801099e:	f000 fa8d 	bl	8010ebc <SCSI_ProcessRead>
 80109a2:	4603      	mov	r3, r0
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3718      	adds	r7, #24
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b086      	sub	sp, #24
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	460b      	mov	r3, r1
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109c0:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	7a1b      	ldrb	r3, [r3, #8]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f040 8087 	bne.w	8010ada <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80109d2:	b25b      	sxtb	r3, r3
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	db0a      	blt.n	80109ee <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80109de:	2320      	movs	r3, #32
 80109e0:	2205      	movs	r2, #5
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	f7ff fe97 	bl	8010716 <SCSI_SenseCode>
      return -1;
 80109e8:	f04f 33ff 	mov.w	r3, #4294967295
 80109ec:	e07f      	b.n	8010aee <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80109f4:	2b02      	cmp	r3, #2
 80109f6:	d108      	bne.n	8010a0a <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80109f8:	7af9      	ldrb	r1, [r7, #11]
 80109fa:	233a      	movs	r3, #58	; 0x3a
 80109fc:	2202      	movs	r2, #2
 80109fe:	68f8      	ldr	r0, [r7, #12]
 8010a00:	f7ff fe89 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010a04:	f04f 33ff 	mov.w	r3, #4294967295
 8010a08:	e071      	b.n	8010aee <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	7afa      	ldrb	r2, [r7, #11]
 8010a14:	4610      	mov	r0, r2
 8010a16:	4798      	blx	r3
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d008      	beq.n	8010a30 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010a1e:	7af9      	ldrb	r1, [r7, #11]
 8010a20:	233a      	movs	r3, #58	; 0x3a
 8010a22:	2202      	movs	r2, #2
 8010a24:	68f8      	ldr	r0, [r7, #12]
 8010a26:	f7ff fe76 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a2e:	e05e      	b.n	8010aee <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	3302      	adds	r3, #2
 8010a34:	781b      	ldrb	r3, [r3, #0]
 8010a36:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	3303      	adds	r3, #3
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010a40:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	3304      	adds	r3, #4
 8010a46:	781b      	ldrb	r3, [r3, #0]
 8010a48:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010a4a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010a4c:	687a      	ldr	r2, [r7, #4]
 8010a4e:	3205      	adds	r2, #5
 8010a50:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8010a52:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	3306      	adds	r3, #6
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	3307      	adds	r3, #7
 8010a66:	781b      	ldrb	r3, [r3, #0]
 8010a68:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010a6a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	3308      	adds	r3, #8
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010a74:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010a76:	687a      	ldr	r2, [r7, #4]
 8010a78:	3209      	adds	r2, #9
 8010a7a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010a7c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010a7e:	697b      	ldr	r3, [r7, #20]
 8010a80:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010a90:	7af9      	ldrb	r1, [r7, #11]
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f000 f9f0 	bl	8010e78 <SCSI_CheckAddressRange>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da02      	bge.n	8010aa4 <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa2:	e024      	b.n	8010aee <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010ab0:	6979      	ldr	r1, [r7, #20]
 8010ab2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8010ab6:	fb01 f303 	mul.w	r3, r1, r3
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d00a      	beq.n	8010ad4 <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010abe:	697b      	ldr	r3, [r7, #20]
 8010ac0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010ac4:	2320      	movs	r3, #32
 8010ac6:	2205      	movs	r2, #5
 8010ac8:	68f8      	ldr	r0, [r7, #12]
 8010aca:	f7ff fe24 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010ace:	f04f 33ff 	mov.w	r3, #4294967295
 8010ad2:	e00c      	b.n	8010aee <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ae0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8010ae2:	7afb      	ldrb	r3, [r7, #11]
 8010ae4:	4619      	mov	r1, r3
 8010ae6:	68f8      	ldr	r0, [r7, #12]
 8010ae8:	f000 f9e8 	bl	8010ebc <SCSI_ProcessRead>
 8010aec:	4603      	mov	r3, r0
}
 8010aee:	4618      	mov	r0, r3
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}

08010af6 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010af6:	b580      	push	{r7, lr}
 8010af8:	b086      	sub	sp, #24
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	60f8      	str	r0, [r7, #12]
 8010afe:	460b      	mov	r3, r1
 8010b00:	607a      	str	r2, [r7, #4]
 8010b02:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b0a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	7a1b      	ldrb	r3, [r3, #8]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f040 80a5 	bne.w	8010c60 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d10a      	bne.n	8010b36 <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010b26:	2320      	movs	r3, #32
 8010b28:	2205      	movs	r2, #5
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f7ff fdf3 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010b30:	f04f 33ff 	mov.w	r3, #4294967295
 8010b34:	e09a      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010b3c:	b25b      	sxtb	r3, r3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	da0a      	bge.n	8010b58 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010b48:	2320      	movs	r3, #32
 8010b4a:	2205      	movs	r2, #5
 8010b4c:	68f8      	ldr	r0, [r7, #12]
 8010b4e:	f7ff fde2 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010b52:	f04f 33ff 	mov.w	r3, #4294967295
 8010b56:	e089      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	7afa      	ldrb	r2, [r7, #11]
 8010b62:	4610      	mov	r0, r2
 8010b64:	4798      	blx	r3
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d008      	beq.n	8010b7e <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010b6c:	7af9      	ldrb	r1, [r7, #11]
 8010b6e:	233a      	movs	r3, #58	; 0x3a
 8010b70:	2202      	movs	r2, #2
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f7ff fdcf 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010b78:	f04f 33ff 	mov.w	r3, #4294967295
 8010b7c:	e076      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	7afa      	ldrb	r2, [r7, #11]
 8010b88:	4610      	mov	r0, r2
 8010b8a:	4798      	blx	r3
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d008      	beq.n	8010ba4 <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010b92:	7af9      	ldrb	r1, [r7, #11]
 8010b94:	2327      	movs	r3, #39	; 0x27
 8010b96:	2202      	movs	r2, #2
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f7ff fdbc 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010ba2:	e063      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	3302      	adds	r3, #2
 8010ba8:	781b      	ldrb	r3, [r3, #0]
 8010baa:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	3303      	adds	r3, #3
 8010bb0:	781b      	ldrb	r3, [r3, #0]
 8010bb2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010bb4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3304      	adds	r3, #4
 8010bba:	781b      	ldrb	r3, [r3, #0]
 8010bbc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010bbe:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010bc0:	687a      	ldr	r2, [r7, #4]
 8010bc2:	3205      	adds	r2, #5
 8010bc4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010bc6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	3307      	adds	r3, #7
 8010bd2:	781b      	ldrb	r3, [r3, #0]
 8010bd4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	3208      	adds	r2, #8
 8010bda:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010bf0:	7af9      	ldrb	r1, [r7, #11]
 8010bf2:	68f8      	ldr	r0, [r7, #12]
 8010bf4:	f000 f940 	bl	8010e78 <SCSI_CheckAddressRange>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	da02      	bge.n	8010c04 <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8010c02:	e033      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8010c10:	fb02 f303 	mul.w	r3, r2, r3
 8010c14:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c1c:	693a      	ldr	r2, [r7, #16]
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d00a      	beq.n	8010c38 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010c28:	2320      	movs	r3, #32
 8010c2a:	2205      	movs	r2, #5
 8010c2c:	68f8      	ldr	r0, [r7, #12]
 8010c2e:	f7ff fd72 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010c32:	f04f 33ff 	mov.w	r3, #4294967295
 8010c36:	e019      	b.n	8010c6c <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c3e:	bf28      	it	cs
 8010c40:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010c44:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	2201      	movs	r2, #1
 8010c4a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	f103 0210 	add.w	r2, r3, #16
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	2101      	movs	r1, #1
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f005 fa07 	bl	801606a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	e005      	b.n	8010c6c <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8010c60:	7afb      	ldrb	r3, [r7, #11]
 8010c62:	4619      	mov	r1, r3
 8010c64:	68f8      	ldr	r0, [r7, #12]
 8010c66:	f000 f99c 	bl	8010fa2 <SCSI_ProcessWrite>
 8010c6a:	4603      	mov	r3, r0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b086      	sub	sp, #24
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	60f8      	str	r0, [r7, #12]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	607a      	str	r2, [r7, #4]
 8010c80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c88:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	7a1b      	ldrb	r3, [r3, #8]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	f040 80b5 	bne.w	8010dfe <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10a      	bne.n	8010cb4 <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010ca4:	2320      	movs	r3, #32
 8010ca6:	2205      	movs	r2, #5
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f7ff fd34 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010cae:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb2:	e0aa      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010cba:	b25b      	sxtb	r3, r3
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	da0a      	bge.n	8010cd6 <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010cc0:	697b      	ldr	r3, [r7, #20]
 8010cc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010cc6:	2320      	movs	r3, #32
 8010cc8:	2205      	movs	r2, #5
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f7ff fd23 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8010cd4:	e099      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010cdc:	689b      	ldr	r3, [r3, #8]
 8010cde:	7afa      	ldrb	r2, [r7, #11]
 8010ce0:	4610      	mov	r0, r2
 8010ce2:	4798      	blx	r3
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00b      	beq.n	8010d02 <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010cea:	7af9      	ldrb	r1, [r7, #11]
 8010cec:	233a      	movs	r3, #58	; 0x3a
 8010cee:	2202      	movs	r2, #2
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f7ff fd10 	bl	8010716 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010cf6:	697b      	ldr	r3, [r7, #20]
 8010cf8:	2205      	movs	r2, #5
 8010cfa:	721a      	strb	r2, [r3, #8]
      return -1;
 8010cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8010d00:	e083      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	7afa      	ldrb	r2, [r7, #11]
 8010d0c:	4610      	mov	r0, r2
 8010d0e:	4798      	blx	r3
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00b      	beq.n	8010d2e <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8010d16:	7af9      	ldrb	r1, [r7, #11]
 8010d18:	2327      	movs	r3, #39	; 0x27
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff fcfa 	bl	8010716 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	2205      	movs	r2, #5
 8010d26:	721a      	strb	r2, [r3, #8]
      return -1;
 8010d28:	f04f 33ff 	mov.w	r3, #4294967295
 8010d2c:	e06d      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	3302      	adds	r3, #2
 8010d32:	781b      	ldrb	r3, [r3, #0]
 8010d34:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	3303      	adds	r3, #3
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010d3e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	3304      	adds	r3, #4
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8010d48:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	3205      	adds	r2, #5
 8010d4e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8010d50:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	3306      	adds	r3, #6
 8010d5c:	781b      	ldrb	r3, [r3, #0]
 8010d5e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	3307      	adds	r3, #7
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010d68:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	3308      	adds	r3, #8
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8010d72:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	3209      	adds	r2, #9
 8010d78:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8010d7a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010d8e:	7af9      	ldrb	r1, [r7, #11]
 8010d90:	68f8      	ldr	r0, [r7, #12]
 8010d92:	f000 f871 	bl	8010e78 <SCSI_CheckAddressRange>
 8010d96:	4603      	mov	r3, r0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	da02      	bge.n	8010da2 <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8010d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8010da0:	e033      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010da8:	697a      	ldr	r2, [r7, #20]
 8010daa:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8010dae:	fb02 f303 	mul.w	r3, r2, r3
 8010db2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8010db4:	697b      	ldr	r3, [r7, #20]
 8010db6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010dba:	693a      	ldr	r2, [r7, #16]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d00a      	beq.n	8010dd6 <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010dc0:	697b      	ldr	r3, [r7, #20]
 8010dc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010dc6:	2320      	movs	r3, #32
 8010dc8:	2205      	movs	r2, #5
 8010dca:	68f8      	ldr	r0, [r7, #12]
 8010dcc:	f7ff fca3 	bl	8010716 <SCSI_SenseCode>
      return -1;
 8010dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8010dd4:	e019      	b.n	8010e0a <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ddc:	bf28      	it	cs
 8010dde:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010de2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	2201      	movs	r2, #1
 8010de8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f103 0210 	add.w	r2, r3, #16
 8010df0:	693b      	ldr	r3, [r7, #16]
 8010df2:	2101      	movs	r1, #1
 8010df4:	68f8      	ldr	r0, [r7, #12]
 8010df6:	f005 f938 	bl	801606a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	e005      	b.n	8010e0a <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8010dfe:	7afb      	ldrb	r3, [r7, #11]
 8010e00:	4619      	mov	r1, r3
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f000 f8cd 	bl	8010fa2 <SCSI_ProcessWrite>
 8010e08:	4603      	mov	r3, r0
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	3718      	adds	r7, #24
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}

08010e12 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b086      	sub	sp, #24
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	60f8      	str	r0, [r7, #12]
 8010e1a:	460b      	mov	r3, r1
 8010e1c:	607a      	str	r2, [r7, #4]
 8010e1e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e26:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	f003 0302 	and.w	r3, r3, #2
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d008      	beq.n	8010e48 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8010e36:	7af9      	ldrb	r1, [r7, #11]
 8010e38:	2324      	movs	r3, #36	; 0x24
 8010e3a:	2205      	movs	r2, #5
 8010e3c:	68f8      	ldr	r0, [r7, #12]
 8010e3e:	f7ff fc6a 	bl	8010716 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8010e42:	f04f 33ff 	mov.w	r3, #4294967295
 8010e46:	e013      	b.n	8010e70 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010e54:	7af9      	ldrb	r1, [r7, #11]
 8010e56:	68f8      	ldr	r0, [r7, #12]
 8010e58:	f000 f80e 	bl	8010e78 <SCSI_CheckAddressRange>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	da02      	bge.n	8010e68 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295
 8010e66:	e003      	b.n	8010e70 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 8010e68:	697b      	ldr	r3, [r7, #20]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	60da      	str	r2, [r3, #12]

  return 0;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3718      	adds	r7, #24
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b086      	sub	sp, #24
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	607a      	str	r2, [r7, #4]
 8010e82:	603b      	str	r3, [r7, #0]
 8010e84:	460b      	mov	r3, r1
 8010e86:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010e8e:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	441a      	add	r2, r3
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d908      	bls.n	8010eb2 <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8010ea0:	7af9      	ldrb	r1, [r7, #11]
 8010ea2:	2321      	movs	r3, #33	; 0x21
 8010ea4:	2205      	movs	r2, #5
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff fc35 	bl	8010716 <SCSI_SenseCode>
    return -1;
 8010eac:	f04f 33ff 	mov.w	r3, #4294967295
 8010eb0:	e000      	b.n	8010eb4 <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3718      	adds	r7, #24
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010ebc:	b590      	push	{r4, r7, lr}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	460b      	mov	r3, r1
 8010ec6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ece:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010ed6:	68fa      	ldr	r2, [r7, #12]
 8010ed8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8010edc:	fb02 f303 	mul.w	r3, r2, r3
 8010ee0:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ee8:	bf28      	it	cs
 8010eea:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010eee:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ef6:	691c      	ldr	r4, [r3, #16]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	f103 0110 	add.w	r1, r3, #16
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	78f8      	ldrb	r0, [r7, #3]
 8010f16:	47a0      	blx	r4
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	da08      	bge.n	8010f30 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8010f1e:	78f9      	ldrb	r1, [r7, #3]
 8010f20:	2311      	movs	r3, #17
 8010f22:	2204      	movs	r2, #4
 8010f24:	6878      	ldr	r0, [r7, #4]
 8010f26:	f7ff fbf6 	bl	8010716 <SCSI_SenseCode>
    return -1;
 8010f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8010f2e:	e034      	b.n	8010f9a <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	f103 0210 	add.w	r2, r3, #16
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	2181      	movs	r1, #129	; 0x81
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f005 f874 	bl	8016028 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010f4c:	4619      	mov	r1, r3
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f54:	441a      	add	r2, r3
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010f68:	4619      	mov	r1, r3
 8010f6a:	68bb      	ldr	r3, [r7, #8]
 8010f6c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010f70:	1ad2      	subs	r2, r2, r3
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	1ad2      	subs	r2, r2, r3
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d102      	bne.n	8010f98 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2203      	movs	r2, #3
 8010f96:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8010f98:	2300      	movs	r3, #0
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd90      	pop	{r4, r7, pc}

08010fa2 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8010fa2:	b590      	push	{r4, r7, lr}
 8010fa4:	b085      	sub	sp, #20
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
 8010faa:	460b      	mov	r3, r1
 8010fac:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fb4:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8010fc2:	fb02 f303 	mul.w	r3, r2, r3
 8010fc6:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fce:	bf28      	it	cs
 8010fd0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8010fd4:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010fdc:	695c      	ldr	r4, [r3, #20]
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	f103 0110 	add.w	r1, r3, #16
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8010ff8:	b29b      	uxth	r3, r3
 8010ffa:	78f8      	ldrb	r0, [r7, #3]
 8010ffc:	47a0      	blx	r4
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	da08      	bge.n	8011016 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011004:	78f9      	ldrb	r1, [r7, #3]
 8011006:	2303      	movs	r3, #3
 8011008:	2204      	movs	r2, #4
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7ff fb83 	bl	8010716 <SCSI_SenseCode>
    return -1;
 8011010:	f04f 33ff 	mov.w	r3, #4294967295
 8011014:	e044      	b.n	80110a0 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011022:	4619      	mov	r1, r3
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	fbb3 f3f1 	udiv	r3, r3, r1
 801102a:	441a      	add	r2, r3
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801103e:	4619      	mov	r1, r3
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	fbb3 f3f1 	udiv	r3, r3, r1
 8011046:	1ad2      	subs	r2, r2, r3
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	1ad2      	subs	r2, r2, r3
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011064:	2b00      	cmp	r3, #0
 8011066:	d104      	bne.n	8011072 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011068:	2100      	movs	r1, #0
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f7fe ff04 	bl	800fe78 <MSC_BOT_SendCSW>
 8011070:	e015      	b.n	801109e <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011078:	68fa      	ldr	r2, [r7, #12]
 801107a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801107e:	fb02 f303 	mul.w	r3, r2, r3
 8011082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011086:	bf28      	it	cs
 8011088:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801108c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	f103 0210 	add.w	r2, r3, #16
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	2101      	movs	r1, #1
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f004 ffe6 	bl	801606a <USBD_LL_PrepareReceive>
  }

  return 0;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	bd90      	pop	{r4, r7, pc}

080110a8 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80110a8:	b480      	push	{r7}
 80110aa:	b087      	sub	sp, #28
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	4613      	mov	r3, r2
 80110b4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80110b6:	88fb      	ldrh	r3, [r7, #6]
 80110b8:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80110ba:	8afa      	ldrh	r2, [r7, #22]
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80110c0:	e00b      	b.n	80110da <SCSI_UpdateBotData+0x32>
  {
    len--;
 80110c2:	8afb      	ldrh	r3, [r7, #22]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80110c8:	8afb      	ldrh	r3, [r7, #22]
 80110ca:	68ba      	ldr	r2, [r7, #8]
 80110cc:	441a      	add	r2, r3
 80110ce:	8afb      	ldrh	r3, [r7, #22]
 80110d0:	7811      	ldrb	r1, [r2, #0]
 80110d2:	68fa      	ldr	r2, [r7, #12]
 80110d4:	4413      	add	r3, r2
 80110d6:	460a      	mov	r2, r1
 80110d8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80110da:	8afb      	ldrh	r3, [r7, #22]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d1f0      	bne.n	80110c2 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80110e0:	2300      	movs	r3, #0
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	371c      	adds	r7, #28
 80110e6:	46bd      	mov	sp, r7
 80110e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ec:	4770      	bx	lr

080110ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b086      	sub	sp, #24
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	60f8      	str	r0, [r7, #12]
 80110f6:	60b9      	str	r1, [r7, #8]
 80110f8:	4613      	mov	r3, r2
 80110fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011102:	2303      	movs	r3, #3
 8011104:	e025      	b.n	8011152 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801110c:	2b00      	cmp	r3, #0
 801110e:	d003      	beq.n	8011118 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2200      	movs	r2, #0
 8011114:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801111e:	2b00      	cmp	r3, #0
 8011120:	d003      	beq.n	801112a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2200      	movs	r2, #0
 8011126:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d003      	beq.n	8011138 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2201      	movs	r2, #1
 801113c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	79fa      	ldrb	r2, [r7, #7]
 8011144:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011146:	68f8      	ldr	r0, [r7, #12]
 8011148:	f004 fe16 	bl	8015d78 <USBD_LL_Init>
 801114c:	4603      	mov	r3, r0
 801114e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011150:	7dfb      	ldrb	r3, [r7, #23]
}
 8011152:	4618      	mov	r0, r3
 8011154:	3718      	adds	r7, #24
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b084      	sub	sp, #16
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011164:	2300      	movs	r3, #0
 8011166:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d101      	bne.n	8011172 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801116e:	2303      	movs	r3, #3
 8011170:	e010      	b.n	8011194 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011182:	f107 020e 	add.w	r2, r7, #14
 8011186:	4610      	mov	r0, r2
 8011188:	4798      	blx	r3
 801118a:	4602      	mov	r2, r0
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011192:	2300      	movs	r3, #0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3710      	adds	r7, #16
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f004 fe37 	bl	8015e18 <USBD_LL_Start>
 80111aa:	4603      	mov	r3, r0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b083      	sub	sp, #12
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	4618      	mov	r0, r3
 80111c0:	370c      	adds	r7, #12
 80111c2:	46bd      	mov	sp, r7
 80111c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c8:	4770      	bx	lr

080111ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111ca:	b580      	push	{r7, lr}
 80111cc:	b084      	sub	sp, #16
 80111ce:	af00      	add	r7, sp, #0
 80111d0:	6078      	str	r0, [r7, #4]
 80111d2:	460b      	mov	r3, r1
 80111d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80111d6:	2303      	movs	r3, #3
 80111d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d009      	beq.n	80111f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	78fa      	ldrb	r2, [r7, #3]
 80111ee:	4611      	mov	r1, r2
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	4798      	blx	r3
 80111f4:	4603      	mov	r3, r0
 80111f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80111f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	460b      	mov	r3, r1
 801120c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011214:	2b00      	cmp	r3, #0
 8011216:	d007      	beq.n	8011228 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	78fa      	ldrb	r2, [r7, #3]
 8011222:	4611      	mov	r1, r2
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	4798      	blx	r3
  }

  return USBD_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3708      	adds	r7, #8
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}

08011232 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
 801123a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011242:	6839      	ldr	r1, [r7, #0]
 8011244:	4618      	mov	r0, r3
 8011246:	f000 ff2b 	bl	80120a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	2201      	movs	r2, #1
 801124e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011258:	461a      	mov	r2, r3
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011266:	f003 031f 	and.w	r3, r3, #31
 801126a:	2b01      	cmp	r3, #1
 801126c:	d00e      	beq.n	801128c <USBD_LL_SetupStage+0x5a>
 801126e:	2b01      	cmp	r3, #1
 8011270:	d302      	bcc.n	8011278 <USBD_LL_SetupStage+0x46>
 8011272:	2b02      	cmp	r3, #2
 8011274:	d014      	beq.n	80112a0 <USBD_LL_SetupStage+0x6e>
 8011276:	e01d      	b.n	80112b4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801127e:	4619      	mov	r1, r3
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f000 fa17 	bl	80116b4 <USBD_StdDevReq>
 8011286:	4603      	mov	r3, r0
 8011288:	73fb      	strb	r3, [r7, #15]
      break;
 801128a:	e020      	b.n	80112ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011292:	4619      	mov	r1, r3
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fa7b 	bl	8011790 <USBD_StdItfReq>
 801129a:	4603      	mov	r3, r0
 801129c:	73fb      	strb	r3, [r7, #15]
      break;
 801129e:	e016      	b.n	80112ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80112a6:	4619      	mov	r1, r3
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f000 fab7 	bl	801181c <USBD_StdEPReq>
 80112ae:	4603      	mov	r3, r0
 80112b0:	73fb      	strb	r3, [r7, #15]
      break;
 80112b2:	e00c      	b.n	80112ce <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80112ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80112be:	b2db      	uxtb	r3, r3
 80112c0:	4619      	mov	r1, r3
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f004 fe27 	bl	8015f16 <USBD_LL_StallEP>
 80112c8:	4603      	mov	r3, r0
 80112ca:	73fb      	strb	r3, [r7, #15]
      break;
 80112cc:	bf00      	nop
  }

  return ret;
 80112ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3710      	adds	r7, #16
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b086      	sub	sp, #24
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60f8      	str	r0, [r7, #12]
 80112e0:	460b      	mov	r3, r1
 80112e2:	607a      	str	r2, [r7, #4]
 80112e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80112e6:	7afb      	ldrb	r3, [r7, #11]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d137      	bne.n	801135c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80112f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80112fa:	2b03      	cmp	r3, #3
 80112fc:	d14a      	bne.n	8011394 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	689a      	ldr	r2, [r3, #8]
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	68db      	ldr	r3, [r3, #12]
 8011306:	429a      	cmp	r2, r3
 8011308:	d913      	bls.n	8011332 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801130a:	693b      	ldr	r3, [r7, #16]
 801130c:	689a      	ldr	r2, [r3, #8]
 801130e:	693b      	ldr	r3, [r7, #16]
 8011310:	68db      	ldr	r3, [r3, #12]
 8011312:	1ad2      	subs	r2, r2, r3
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	68da      	ldr	r2, [r3, #12]
 801131c:	693b      	ldr	r3, [r7, #16]
 801131e:	689b      	ldr	r3, [r3, #8]
 8011320:	4293      	cmp	r3, r2
 8011322:	bf28      	it	cs
 8011324:	4613      	movcs	r3, r2
 8011326:	461a      	mov	r2, r3
 8011328:	6879      	ldr	r1, [r7, #4]
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	f000 ff8f 	bl	801224e <USBD_CtlContinueRx>
 8011330:	e030      	b.n	8011394 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011338:	691b      	ldr	r3, [r3, #16]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00a      	beq.n	8011354 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011344:	2b03      	cmp	r3, #3
 8011346:	d105      	bne.n	8011354 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801134e:	691b      	ldr	r3, [r3, #16]
 8011350:	68f8      	ldr	r0, [r7, #12]
 8011352:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f000 ff8b 	bl	8012270 <USBD_CtlSendStatus>
 801135a:	e01b      	b.n	8011394 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011362:	699b      	ldr	r3, [r3, #24]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d013      	beq.n	8011390 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801136e:	2b03      	cmp	r3, #3
 8011370:	d10e      	bne.n	8011390 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011378:	699b      	ldr	r3, [r3, #24]
 801137a:	7afa      	ldrb	r2, [r7, #11]
 801137c:	4611      	mov	r1, r2
 801137e:	68f8      	ldr	r0, [r7, #12]
 8011380:	4798      	blx	r3
 8011382:	4603      	mov	r3, r0
 8011384:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011386:	7dfb      	ldrb	r3, [r7, #23]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d003      	beq.n	8011394 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801138c:	7dfb      	ldrb	r3, [r7, #23]
 801138e:	e002      	b.n	8011396 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011390:	2303      	movs	r3, #3
 8011392:	e000      	b.n	8011396 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011394:	2300      	movs	r3, #0
}
 8011396:	4618      	mov	r0, r3
 8011398:	3718      	adds	r7, #24
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801139e:	b580      	push	{r7, lr}
 80113a0:	b086      	sub	sp, #24
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	60f8      	str	r0, [r7, #12]
 80113a6:	460b      	mov	r3, r1
 80113a8:	607a      	str	r2, [r7, #4]
 80113aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80113ac:	7afb      	ldrb	r3, [r7, #11]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d16a      	bne.n	8011488 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	3314      	adds	r3, #20
 80113b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80113be:	2b02      	cmp	r3, #2
 80113c0:	d155      	bne.n	801146e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	689a      	ldr	r2, [r3, #8]
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d914      	bls.n	80113f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	689a      	ldr	r2, [r3, #8]
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	68db      	ldr	r3, [r3, #12]
 80113d6:	1ad2      	subs	r2, r2, r3
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	689b      	ldr	r3, [r3, #8]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6879      	ldr	r1, [r7, #4]
 80113e4:	68f8      	ldr	r0, [r7, #12]
 80113e6:	f000 ff21 	bl	801222c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80113ea:	2300      	movs	r3, #0
 80113ec:	2200      	movs	r2, #0
 80113ee:	2100      	movs	r1, #0
 80113f0:	68f8      	ldr	r0, [r7, #12]
 80113f2:	f004 fe3a 	bl	801606a <USBD_LL_PrepareReceive>
 80113f6:	e03a      	b.n	801146e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	68da      	ldr	r2, [r3, #12]
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	689b      	ldr	r3, [r3, #8]
 8011400:	429a      	cmp	r2, r3
 8011402:	d11c      	bne.n	801143e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	685a      	ldr	r2, [r3, #4]
 8011408:	693b      	ldr	r3, [r7, #16]
 801140a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801140c:	429a      	cmp	r2, r3
 801140e:	d316      	bcc.n	801143e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801141a:	429a      	cmp	r2, r3
 801141c:	d20f      	bcs.n	801143e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801141e:	2200      	movs	r2, #0
 8011420:	2100      	movs	r1, #0
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f000 ff02 	bl	801222c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2200      	movs	r2, #0
 801142c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011430:	2300      	movs	r3, #0
 8011432:	2200      	movs	r2, #0
 8011434:	2100      	movs	r1, #0
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f004 fe17 	bl	801606a <USBD_LL_PrepareReceive>
 801143c:	e017      	b.n	801146e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011444:	68db      	ldr	r3, [r3, #12]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d00a      	beq.n	8011460 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011450:	2b03      	cmp	r3, #3
 8011452:	d105      	bne.n	8011460 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801145a:	68db      	ldr	r3, [r3, #12]
 801145c:	68f8      	ldr	r0, [r7, #12]
 801145e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011460:	2180      	movs	r1, #128	; 0x80
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f004 fd57 	bl	8015f16 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f000 ff14 	bl	8012296 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011474:	2b01      	cmp	r3, #1
 8011476:	d123      	bne.n	80114c0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011478:	68f8      	ldr	r0, [r7, #12]
 801147a:	f7ff fe9b 	bl	80111b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2200      	movs	r2, #0
 8011482:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011486:	e01b      	b.n	80114c0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801148e:	695b      	ldr	r3, [r3, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d013      	beq.n	80114bc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801149a:	2b03      	cmp	r3, #3
 801149c:	d10e      	bne.n	80114bc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114a4:	695b      	ldr	r3, [r3, #20]
 80114a6:	7afa      	ldrb	r2, [r7, #11]
 80114a8:	4611      	mov	r1, r2
 80114aa:	68f8      	ldr	r0, [r7, #12]
 80114ac:	4798      	blx	r3
 80114ae:	4603      	mov	r3, r0
 80114b0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d003      	beq.n	80114c0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80114b8:	7dfb      	ldrb	r3, [r7, #23]
 80114ba:	e002      	b.n	80114c2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80114bc:	2303      	movs	r3, #3
 80114be:	e000      	b.n	80114c2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80114c0:	2300      	movs	r3, #0
}
 80114c2:	4618      	mov	r0, r3
 80114c4:	3718      	adds	r7, #24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}

080114ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80114ca:	b580      	push	{r7, lr}
 80114cc:	b082      	sub	sp, #8
 80114ce:	af00      	add	r7, sp, #0
 80114d0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2201      	movs	r2, #1
 80114d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2200      	movs	r2, #0
 80114de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2200      	movs	r2, #0
 80114e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d009      	beq.n	801150e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011500:	685b      	ldr	r3, [r3, #4]
 8011502:	687a      	ldr	r2, [r7, #4]
 8011504:	6852      	ldr	r2, [r2, #4]
 8011506:	b2d2      	uxtb	r2, r2
 8011508:	4611      	mov	r1, r2
 801150a:	6878      	ldr	r0, [r7, #4]
 801150c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801150e:	2340      	movs	r3, #64	; 0x40
 8011510:	2200      	movs	r2, #0
 8011512:	2100      	movs	r1, #0
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f004 fc9a 	bl	8015e4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2201      	movs	r2, #1
 801151e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2240      	movs	r2, #64	; 0x40
 8011526:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801152a:	2340      	movs	r3, #64	; 0x40
 801152c:	2200      	movs	r2, #0
 801152e:	2180      	movs	r1, #128	; 0x80
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f004 fc8c 	bl	8015e4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2201      	movs	r2, #1
 801153a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2240      	movs	r2, #64	; 0x40
 8011540:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011542:	2300      	movs	r3, #0
}
 8011544:	4618      	mov	r0, r3
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	460b      	mov	r3, r1
 8011556:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	78fa      	ldrb	r2, [r7, #3]
 801155c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801155e:	2300      	movs	r3, #0
}
 8011560:	4618      	mov	r0, r3
 8011562:	370c      	adds	r7, #12
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801156c:	b480      	push	{r7}
 801156e:	b083      	sub	sp, #12
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2204      	movs	r2, #4
 8011584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011588:	2300      	movs	r3, #0
}
 801158a:	4618      	mov	r0, r3
 801158c:	370c      	adds	r7, #12
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr

08011596 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011596:	b480      	push	{r7}
 8011598:	b083      	sub	sp, #12
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115a4:	2b04      	cmp	r3, #4
 80115a6:	d105      	bne.n	80115b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80115b4:	2300      	movs	r3, #0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	370c      	adds	r7, #12
 80115ba:	46bd      	mov	sp, r7
 80115bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c0:	4770      	bx	lr

080115c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80115c2:	b580      	push	{r7, lr}
 80115c4:	b082      	sub	sp, #8
 80115c6:	af00      	add	r7, sp, #0
 80115c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d0:	2b03      	cmp	r3, #3
 80115d2:	d10b      	bne.n	80115ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115da:	69db      	ldr	r3, [r3, #28]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d005      	beq.n	80115ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115e6:	69db      	ldr	r3, [r3, #28]
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3708      	adds	r7, #8
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80115f6:	b480      	push	{r7}
 80115f8:	b083      	sub	sp, #12
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
 80115fe:	460b      	mov	r3, r1
 8011600:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011602:	2300      	movs	r3, #0
}
 8011604:	4618      	mov	r0, r3
 8011606:	370c      	adds	r7, #12
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr

08011610 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011610:	b480      	push	{r7}
 8011612:	b083      	sub	sp, #12
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	460b      	mov	r3, r1
 801161a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801161c:	2300      	movs	r3, #0
}
 801161e:	4618      	mov	r0, r3
 8011620:	370c      	adds	r7, #12
 8011622:	46bd      	mov	sp, r7
 8011624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011628:	4770      	bx	lr

0801162a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801162a:	b480      	push	{r7}
 801162c:	b083      	sub	sp, #12
 801162e:	af00      	add	r7, sp, #0
 8011630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	370c      	adds	r7, #12
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr

08011640 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b082      	sub	sp, #8
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2201      	movs	r2, #1
 801164c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011656:	2b00      	cmp	r3, #0
 8011658:	d009      	beq.n	801166e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	6852      	ldr	r2, [r2, #4]
 8011666:	b2d2      	uxtb	r2, r2
 8011668:	4611      	mov	r1, r2
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	4798      	blx	r3
  }

  return USBD_OK;
 801166e:	2300      	movs	r3, #0
}
 8011670:	4618      	mov	r0, r3
 8011672:	3708      	adds	r7, #8
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011678:	b480      	push	{r7}
 801167a:	b087      	sub	sp, #28
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801168a:	697b      	ldr	r3, [r7, #20]
 801168c:	3301      	adds	r3, #1
 801168e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	781b      	ldrb	r3, [r3, #0]
 8011694:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011696:	8a3b      	ldrh	r3, [r7, #16]
 8011698:	021b      	lsls	r3, r3, #8
 801169a:	b21a      	sxth	r2, r3
 801169c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80116a0:	4313      	orrs	r3, r2
 80116a2:	b21b      	sxth	r3, r3
 80116a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80116a6:	89fb      	ldrh	r3, [r7, #14]
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	371c      	adds	r7, #28
 80116ac:	46bd      	mov	sp, r7
 80116ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b2:	4770      	bx	lr

080116b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b084      	sub	sp, #16
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80116be:	2300      	movs	r3, #0
 80116c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	781b      	ldrb	r3, [r3, #0]
 80116c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80116ca:	2b20      	cmp	r3, #32
 80116cc:	d004      	beq.n	80116d8 <USBD_StdDevReq+0x24>
 80116ce:	2b40      	cmp	r3, #64	; 0x40
 80116d0:	d002      	beq.n	80116d8 <USBD_StdDevReq+0x24>
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00a      	beq.n	80116ec <USBD_StdDevReq+0x38>
 80116d6:	e050      	b.n	801177a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116de:	689b      	ldr	r3, [r3, #8]
 80116e0:	6839      	ldr	r1, [r7, #0]
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	4798      	blx	r3
 80116e6:	4603      	mov	r3, r0
 80116e8:	73fb      	strb	r3, [r7, #15]
    break;
 80116ea:	e04b      	b.n	8011784 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	785b      	ldrb	r3, [r3, #1]
 80116f0:	2b09      	cmp	r3, #9
 80116f2:	d83c      	bhi.n	801176e <USBD_StdDevReq+0xba>
 80116f4:	a201      	add	r2, pc, #4	; (adr r2, 80116fc <USBD_StdDevReq+0x48>)
 80116f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116fa:	bf00      	nop
 80116fc:	08011751 	.word	0x08011751
 8011700:	08011765 	.word	0x08011765
 8011704:	0801176f 	.word	0x0801176f
 8011708:	0801175b 	.word	0x0801175b
 801170c:	0801176f 	.word	0x0801176f
 8011710:	0801172f 	.word	0x0801172f
 8011714:	08011725 	.word	0x08011725
 8011718:	0801176f 	.word	0x0801176f
 801171c:	08011747 	.word	0x08011747
 8011720:	08011739 	.word	0x08011739
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011724:	6839      	ldr	r1, [r7, #0]
 8011726:	6878      	ldr	r0, [r7, #4]
 8011728:	f000 f9ce 	bl	8011ac8 <USBD_GetDescriptor>
      break;
 801172c:	e024      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 fb33 	bl	8011d9c <USBD_SetAddress>
      break;
 8011736:	e01f      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011738:	6839      	ldr	r1, [r7, #0]
 801173a:	6878      	ldr	r0, [r7, #4]
 801173c:	f000 fb70 	bl	8011e20 <USBD_SetConfig>
 8011740:	4603      	mov	r3, r0
 8011742:	73fb      	strb	r3, [r7, #15]
      break;
 8011744:	e018      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011746:	6839      	ldr	r1, [r7, #0]
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f000 fc0d 	bl	8011f68 <USBD_GetConfig>
      break;
 801174e:	e013      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011750:	6839      	ldr	r1, [r7, #0]
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f000 fc3c 	bl	8011fd0 <USBD_GetStatus>
      break;
 8011758:	e00e      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801175a:	6839      	ldr	r1, [r7, #0]
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f000 fc6a 	bl	8012036 <USBD_SetFeature>
      break;
 8011762:	e009      	b.n	8011778 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011764:	6839      	ldr	r1, [r7, #0]
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f000 fc79 	bl	801205e <USBD_ClrFeature>
      break;
 801176c:	e004      	b.n	8011778 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 fccf 	bl	8012114 <USBD_CtlError>
      break;
 8011776:	bf00      	nop
    }
    break;
 8011778:	e004      	b.n	8011784 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801177a:	6839      	ldr	r1, [r7, #0]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fcc9 	bl	8012114 <USBD_CtlError>
    break;
 8011782:	bf00      	nop
  }

  return ret;
 8011784:	7bfb      	ldrb	r3, [r7, #15]
}
 8011786:	4618      	mov	r0, r3
 8011788:	3710      	adds	r7, #16
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop

08011790 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b084      	sub	sp, #16
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801179a:	2300      	movs	r3, #0
 801179c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80117a6:	2b20      	cmp	r3, #32
 80117a8:	d003      	beq.n	80117b2 <USBD_StdItfReq+0x22>
 80117aa:	2b40      	cmp	r3, #64	; 0x40
 80117ac:	d001      	beq.n	80117b2 <USBD_StdItfReq+0x22>
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d12a      	bne.n	8011808 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117b8:	3b01      	subs	r3, #1
 80117ba:	2b02      	cmp	r3, #2
 80117bc:	d81d      	bhi.n	80117fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	889b      	ldrh	r3, [r3, #4]
 80117c2:	b2db      	uxtb	r3, r3
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d813      	bhi.n	80117f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80117ce:	689b      	ldr	r3, [r3, #8]
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	4798      	blx	r3
 80117d6:	4603      	mov	r3, r0
 80117d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	88db      	ldrh	r3, [r3, #6]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d110      	bne.n	8011804 <USBD_StdItfReq+0x74>
 80117e2:	7bfb      	ldrb	r3, [r7, #15]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d10d      	bne.n	8011804 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80117e8:	6878      	ldr	r0, [r7, #4]
 80117ea:	f000 fd41 	bl	8012270 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80117ee:	e009      	b.n	8011804 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80117f0:	6839      	ldr	r1, [r7, #0]
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f000 fc8e 	bl	8012114 <USBD_CtlError>
      break;
 80117f8:	e004      	b.n	8011804 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80117fa:	6839      	ldr	r1, [r7, #0]
 80117fc:	6878      	ldr	r0, [r7, #4]
 80117fe:	f000 fc89 	bl	8012114 <USBD_CtlError>
      break;
 8011802:	e000      	b.n	8011806 <USBD_StdItfReq+0x76>
      break;
 8011804:	bf00      	nop
    }
    break;
 8011806:	e004      	b.n	8011812 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8011808:	6839      	ldr	r1, [r7, #0]
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f000 fc82 	bl	8012114 <USBD_CtlError>
    break;
 8011810:	bf00      	nop
  }

  return ret;
 8011812:	7bfb      	ldrb	r3, [r7, #15]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011826:	2300      	movs	r3, #0
 8011828:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	889b      	ldrh	r3, [r3, #4]
 801182e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011838:	2b20      	cmp	r3, #32
 801183a:	d004      	beq.n	8011846 <USBD_StdEPReq+0x2a>
 801183c:	2b40      	cmp	r3, #64	; 0x40
 801183e:	d002      	beq.n	8011846 <USBD_StdEPReq+0x2a>
 8011840:	2b00      	cmp	r3, #0
 8011842:	d00a      	beq.n	801185a <USBD_StdEPReq+0x3e>
 8011844:	e135      	b.n	8011ab2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801184c:	689b      	ldr	r3, [r3, #8]
 801184e:	6839      	ldr	r1, [r7, #0]
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	4798      	blx	r3
 8011854:	4603      	mov	r3, r0
 8011856:	73fb      	strb	r3, [r7, #15]
    break;
 8011858:	e130      	b.n	8011abc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	785b      	ldrb	r3, [r3, #1]
 801185e:	2b01      	cmp	r3, #1
 8011860:	d03e      	beq.n	80118e0 <USBD_StdEPReq+0xc4>
 8011862:	2b03      	cmp	r3, #3
 8011864:	d002      	beq.n	801186c <USBD_StdEPReq+0x50>
 8011866:	2b00      	cmp	r3, #0
 8011868:	d077      	beq.n	801195a <USBD_StdEPReq+0x13e>
 801186a:	e11c      	b.n	8011aa6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011872:	2b02      	cmp	r3, #2
 8011874:	d002      	beq.n	801187c <USBD_StdEPReq+0x60>
 8011876:	2b03      	cmp	r3, #3
 8011878:	d015      	beq.n	80118a6 <USBD_StdEPReq+0x8a>
 801187a:	e02b      	b.n	80118d4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801187c:	7bbb      	ldrb	r3, [r7, #14]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d00c      	beq.n	801189c <USBD_StdEPReq+0x80>
 8011882:	7bbb      	ldrb	r3, [r7, #14]
 8011884:	2b80      	cmp	r3, #128	; 0x80
 8011886:	d009      	beq.n	801189c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8011888:	7bbb      	ldrb	r3, [r7, #14]
 801188a:	4619      	mov	r1, r3
 801188c:	6878      	ldr	r0, [r7, #4]
 801188e:	f004 fb42 	bl	8015f16 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011892:	2180      	movs	r1, #128	; 0x80
 8011894:	6878      	ldr	r0, [r7, #4]
 8011896:	f004 fb3e 	bl	8015f16 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801189a:	e020      	b.n	80118de <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 801189c:	6839      	ldr	r1, [r7, #0]
 801189e:	6878      	ldr	r0, [r7, #4]
 80118a0:	f000 fc38 	bl	8012114 <USBD_CtlError>
        break;
 80118a4:	e01b      	b.n	80118de <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	885b      	ldrh	r3, [r3, #2]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10e      	bne.n	80118cc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80118ae:	7bbb      	ldrb	r3, [r7, #14]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d00b      	beq.n	80118cc <USBD_StdEPReq+0xb0>
 80118b4:	7bbb      	ldrb	r3, [r7, #14]
 80118b6:	2b80      	cmp	r3, #128	; 0x80
 80118b8:	d008      	beq.n	80118cc <USBD_StdEPReq+0xb0>
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	88db      	ldrh	r3, [r3, #6]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d104      	bne.n	80118cc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80118c2:	7bbb      	ldrb	r3, [r7, #14]
 80118c4:	4619      	mov	r1, r3
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f004 fb25 	bl	8015f16 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f000 fccf 	bl	8012270 <USBD_CtlSendStatus>

        break;
 80118d2:	e004      	b.n	80118de <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80118d4:	6839      	ldr	r1, [r7, #0]
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fc1c 	bl	8012114 <USBD_CtlError>
        break;
 80118dc:	bf00      	nop
      }
      break;
 80118de:	e0e7      	b.n	8011ab0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118e6:	2b02      	cmp	r3, #2
 80118e8:	d002      	beq.n	80118f0 <USBD_StdEPReq+0xd4>
 80118ea:	2b03      	cmp	r3, #3
 80118ec:	d015      	beq.n	801191a <USBD_StdEPReq+0xfe>
 80118ee:	e02d      	b.n	801194c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80118f0:	7bbb      	ldrb	r3, [r7, #14]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d00c      	beq.n	8011910 <USBD_StdEPReq+0xf4>
 80118f6:	7bbb      	ldrb	r3, [r7, #14]
 80118f8:	2b80      	cmp	r3, #128	; 0x80
 80118fa:	d009      	beq.n	8011910 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80118fc:	7bbb      	ldrb	r3, [r7, #14]
 80118fe:	4619      	mov	r1, r3
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f004 fb08 	bl	8015f16 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011906:	2180      	movs	r1, #128	; 0x80
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f004 fb04 	bl	8015f16 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801190e:	e023      	b.n	8011958 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8011910:	6839      	ldr	r1, [r7, #0]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 fbfe 	bl	8012114 <USBD_CtlError>
        break;
 8011918:	e01e      	b.n	8011958 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	885b      	ldrh	r3, [r3, #2]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d119      	bne.n	8011956 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8011922:	7bbb      	ldrb	r3, [r7, #14]
 8011924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011928:	2b00      	cmp	r3, #0
 801192a:	d004      	beq.n	8011936 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801192c:	7bbb      	ldrb	r3, [r7, #14]
 801192e:	4619      	mov	r1, r3
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f004 fb0f 	bl	8015f54 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	f000 fc9a 	bl	8012270 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	4798      	blx	r3
        }
        break;
 801194a:	e004      	b.n	8011956 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 801194c:	6839      	ldr	r1, [r7, #0]
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fbe0 	bl	8012114 <USBD_CtlError>
        break;
 8011954:	e000      	b.n	8011958 <USBD_StdEPReq+0x13c>
        break;
 8011956:	bf00      	nop
      }
      break;
 8011958:	e0aa      	b.n	8011ab0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011960:	2b02      	cmp	r3, #2
 8011962:	d002      	beq.n	801196a <USBD_StdEPReq+0x14e>
 8011964:	2b03      	cmp	r3, #3
 8011966:	d032      	beq.n	80119ce <USBD_StdEPReq+0x1b2>
 8011968:	e097      	b.n	8011a9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801196a:	7bbb      	ldrb	r3, [r7, #14]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d007      	beq.n	8011980 <USBD_StdEPReq+0x164>
 8011970:	7bbb      	ldrb	r3, [r7, #14]
 8011972:	2b80      	cmp	r3, #128	; 0x80
 8011974:	d004      	beq.n	8011980 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8011976:	6839      	ldr	r1, [r7, #0]
 8011978:	6878      	ldr	r0, [r7, #4]
 801197a:	f000 fbcb 	bl	8012114 <USBD_CtlError>
          break;
 801197e:	e091      	b.n	8011aa4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011984:	2b00      	cmp	r3, #0
 8011986:	da0b      	bge.n	80119a0 <USBD_StdEPReq+0x184>
 8011988:	7bbb      	ldrb	r3, [r7, #14]
 801198a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801198e:	4613      	mov	r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	3310      	adds	r3, #16
 8011998:	687a      	ldr	r2, [r7, #4]
 801199a:	4413      	add	r3, r2
 801199c:	3304      	adds	r3, #4
 801199e:	e00b      	b.n	80119b8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80119a0:	7bbb      	ldrb	r3, [r7, #14]
 80119a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80119a6:	4613      	mov	r3, r2
 80119a8:	009b      	lsls	r3, r3, #2
 80119aa:	4413      	add	r3, r2
 80119ac:	009b      	lsls	r3, r3, #2
 80119ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80119b2:	687a      	ldr	r2, [r7, #4]
 80119b4:	4413      	add	r3, r2
 80119b6:	3304      	adds	r3, #4
 80119b8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	2200      	movs	r2, #0
 80119be:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	2202      	movs	r2, #2
 80119c4:	4619      	mov	r1, r3
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f000 fc15 	bl	80121f6 <USBD_CtlSendData>
        break;
 80119cc:	e06a      	b.n	8011aa4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80119ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	da11      	bge.n	80119fa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80119d6:	7bbb      	ldrb	r3, [r7, #14]
 80119d8:	f003 020f 	and.w	r2, r3, #15
 80119dc:	6879      	ldr	r1, [r7, #4]
 80119de:	4613      	mov	r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4413      	add	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	440b      	add	r3, r1
 80119e8:	3324      	adds	r3, #36	; 0x24
 80119ea:	881b      	ldrh	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d117      	bne.n	8011a20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80119f0:	6839      	ldr	r1, [r7, #0]
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f000 fb8e 	bl	8012114 <USBD_CtlError>
            break;
 80119f8:	e054      	b.n	8011aa4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80119fa:	7bbb      	ldrb	r3, [r7, #14]
 80119fc:	f003 020f 	and.w	r2, r3, #15
 8011a00:	6879      	ldr	r1, [r7, #4]
 8011a02:	4613      	mov	r3, r2
 8011a04:	009b      	lsls	r3, r3, #2
 8011a06:	4413      	add	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	440b      	add	r3, r1
 8011a0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011a10:	881b      	ldrh	r3, [r3, #0]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d104      	bne.n	8011a20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8011a16:	6839      	ldr	r1, [r7, #0]
 8011a18:	6878      	ldr	r0, [r7, #4]
 8011a1a:	f000 fb7b 	bl	8012114 <USBD_CtlError>
            break;
 8011a1e:	e041      	b.n	8011aa4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	da0b      	bge.n	8011a40 <USBD_StdEPReq+0x224>
 8011a28:	7bbb      	ldrb	r3, [r7, #14]
 8011a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a2e:	4613      	mov	r3, r2
 8011a30:	009b      	lsls	r3, r3, #2
 8011a32:	4413      	add	r3, r2
 8011a34:	009b      	lsls	r3, r3, #2
 8011a36:	3310      	adds	r3, #16
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	4413      	add	r3, r2
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	e00b      	b.n	8011a58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8011a40:	7bbb      	ldrb	r3, [r7, #14]
 8011a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011a46:	4613      	mov	r3, r2
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4413      	add	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	4413      	add	r3, r2
 8011a56:	3304      	adds	r3, #4
 8011a58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011a5a:	7bbb      	ldrb	r3, [r7, #14]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d002      	beq.n	8011a66 <USBD_StdEPReq+0x24a>
 8011a60:	7bbb      	ldrb	r3, [r7, #14]
 8011a62:	2b80      	cmp	r3, #128	; 0x80
 8011a64:	d103      	bne.n	8011a6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	601a      	str	r2, [r3, #0]
 8011a6c:	e00e      	b.n	8011a8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011a6e:	7bbb      	ldrb	r3, [r7, #14]
 8011a70:	4619      	mov	r1, r3
 8011a72:	6878      	ldr	r0, [r7, #4]
 8011a74:	f004 fa8d 	bl	8015f92 <USBD_LL_IsStallEP>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d003      	beq.n	8011a86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	2201      	movs	r2, #1
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	e002      	b.n	8011a8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	2202      	movs	r2, #2
 8011a90:	4619      	mov	r1, r3
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f000 fbaf 	bl	80121f6 <USBD_CtlSendData>
          break;
 8011a98:	e004      	b.n	8011aa4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8011a9a:	6839      	ldr	r1, [r7, #0]
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 fb39 	bl	8012114 <USBD_CtlError>
        break;
 8011aa2:	bf00      	nop
      }
      break;
 8011aa4:	e004      	b.n	8011ab0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8011aa6:	6839      	ldr	r1, [r7, #0]
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f000 fb33 	bl	8012114 <USBD_CtlError>
      break;
 8011aae:	bf00      	nop
    }
    break;
 8011ab0:	e004      	b.n	8011abc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8011ab2:	6839      	ldr	r1, [r7, #0]
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f000 fb2d 	bl	8012114 <USBD_CtlError>
    break;
 8011aba:	bf00      	nop
  }

  return ret;
 8011abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}
	...

08011ac8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b084      	sub	sp, #16
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ada:	2300      	movs	r3, #0
 8011adc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	885b      	ldrh	r3, [r3, #2]
 8011ae2:	0a1b      	lsrs	r3, r3, #8
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	3b01      	subs	r3, #1
 8011ae8:	2b06      	cmp	r3, #6
 8011aea:	f200 8128 	bhi.w	8011d3e <USBD_GetDescriptor+0x276>
 8011aee:	a201      	add	r2, pc, #4	; (adr r2, 8011af4 <USBD_GetDescriptor+0x2c>)
 8011af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011af4:	08011b11 	.word	0x08011b11
 8011af8:	08011b29 	.word	0x08011b29
 8011afc:	08011b69 	.word	0x08011b69
 8011b00:	08011d3f 	.word	0x08011d3f
 8011b04:	08011d3f 	.word	0x08011d3f
 8011b08:	08011cdf 	.word	0x08011cdf
 8011b0c:	08011d0b 	.word	0x08011d0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	687a      	ldr	r2, [r7, #4]
 8011b1a:	7c12      	ldrb	r2, [r2, #16]
 8011b1c:	f107 0108 	add.w	r1, r7, #8
 8011b20:	4610      	mov	r0, r2
 8011b22:	4798      	blx	r3
 8011b24:	60f8      	str	r0, [r7, #12]
    break;
 8011b26:	e112      	b.n	8011d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	7c1b      	ldrb	r3, [r3, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d10d      	bne.n	8011b4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b38:	f107 0208 	add.w	r2, r7, #8
 8011b3c:	4610      	mov	r0, r2
 8011b3e:	4798      	blx	r3
 8011b40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	3301      	adds	r3, #1
 8011b46:	2202      	movs	r2, #2
 8011b48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8011b4a:	e100      	b.n	8011d4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b54:	f107 0208 	add.w	r2, r7, #8
 8011b58:	4610      	mov	r0, r2
 8011b5a:	4798      	blx	r3
 8011b5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	3301      	adds	r3, #1
 8011b62:	2202      	movs	r2, #2
 8011b64:	701a      	strb	r2, [r3, #0]
    break;
 8011b66:	e0f2      	b.n	8011d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	885b      	ldrh	r3, [r3, #2]
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	2b05      	cmp	r3, #5
 8011b70:	f200 80ac 	bhi.w	8011ccc <USBD_GetDescriptor+0x204>
 8011b74:	a201      	add	r2, pc, #4	; (adr r2, 8011b7c <USBD_GetDescriptor+0xb4>)
 8011b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b7a:	bf00      	nop
 8011b7c:	08011b95 	.word	0x08011b95
 8011b80:	08011bc9 	.word	0x08011bc9
 8011b84:	08011bfd 	.word	0x08011bfd
 8011b88:	08011c31 	.word	0x08011c31
 8011b8c:	08011c65 	.word	0x08011c65
 8011b90:	08011c99 	.word	0x08011c99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d00b      	beq.n	8011bb8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	7c12      	ldrb	r2, [r2, #16]
 8011bac:	f107 0108 	add.w	r1, r7, #8
 8011bb0:	4610      	mov	r0, r2
 8011bb2:	4798      	blx	r3
 8011bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bb6:	e091      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011bb8:	6839      	ldr	r1, [r7, #0]
 8011bba:	6878      	ldr	r0, [r7, #4]
 8011bbc:	f000 faaa 	bl	8012114 <USBD_CtlError>
        err++;
 8011bc0:	7afb      	ldrb	r3, [r7, #11]
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8011bc6:	e089      	b.n	8011cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bce:	689b      	ldr	r3, [r3, #8]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d00b      	beq.n	8011bec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011bda:	689b      	ldr	r3, [r3, #8]
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	7c12      	ldrb	r2, [r2, #16]
 8011be0:	f107 0108 	add.w	r1, r7, #8
 8011be4:	4610      	mov	r0, r2
 8011be6:	4798      	blx	r3
 8011be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011bea:	e077      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f000 fa90 	bl	8012114 <USBD_CtlError>
        err++;
 8011bf4:	7afb      	ldrb	r3, [r7, #11]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8011bfa:	e06f      	b.n	8011cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d00b      	beq.n	8011c20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	7c12      	ldrb	r2, [r2, #16]
 8011c14:	f107 0108 	add.w	r1, r7, #8
 8011c18:	4610      	mov	r0, r2
 8011c1a:	4798      	blx	r3
 8011c1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c1e:	e05d      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c20:	6839      	ldr	r1, [r7, #0]
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f000 fa76 	bl	8012114 <USBD_CtlError>
        err++;
 8011c28:	7afb      	ldrb	r3, [r7, #11]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	72fb      	strb	r3, [r7, #11]
      break;
 8011c2e:	e055      	b.n	8011cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c36:	691b      	ldr	r3, [r3, #16]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d00b      	beq.n	8011c54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c42:	691b      	ldr	r3, [r3, #16]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	7c12      	ldrb	r2, [r2, #16]
 8011c48:	f107 0108 	add.w	r1, r7, #8
 8011c4c:	4610      	mov	r0, r2
 8011c4e:	4798      	blx	r3
 8011c50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c52:	e043      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c54:	6839      	ldr	r1, [r7, #0]
 8011c56:	6878      	ldr	r0, [r7, #4]
 8011c58:	f000 fa5c 	bl	8012114 <USBD_CtlError>
        err++;
 8011c5c:	7afb      	ldrb	r3, [r7, #11]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	72fb      	strb	r3, [r7, #11]
      break;
 8011c62:	e03b      	b.n	8011cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c6a:	695b      	ldr	r3, [r3, #20]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d00b      	beq.n	8011c88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	687a      	ldr	r2, [r7, #4]
 8011c7a:	7c12      	ldrb	r2, [r2, #16]
 8011c7c:	f107 0108 	add.w	r1, r7, #8
 8011c80:	4610      	mov	r0, r2
 8011c82:	4798      	blx	r3
 8011c84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011c86:	e029      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011c88:	6839      	ldr	r1, [r7, #0]
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 fa42 	bl	8012114 <USBD_CtlError>
        err++;
 8011c90:	7afb      	ldrb	r3, [r7, #11]
 8011c92:	3301      	adds	r3, #1
 8011c94:	72fb      	strb	r3, [r7, #11]
      break;
 8011c96:	e021      	b.n	8011cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011c9e:	699b      	ldr	r3, [r3, #24]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00b      	beq.n	8011cbc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011caa:	699b      	ldr	r3, [r3, #24]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	7c12      	ldrb	r2, [r2, #16]
 8011cb0:	f107 0108 	add.w	r1, r7, #8
 8011cb4:	4610      	mov	r0, r2
 8011cb6:	4798      	blx	r3
 8011cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011cba:	e00f      	b.n	8011cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8011cbc:	6839      	ldr	r1, [r7, #0]
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f000 fa28 	bl	8012114 <USBD_CtlError>
        err++;
 8011cc4:	7afb      	ldrb	r3, [r7, #11]
 8011cc6:	3301      	adds	r3, #1
 8011cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8011cca:	e007      	b.n	8011cdc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8011ccc:	6839      	ldr	r1, [r7, #0]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f000 fa20 	bl	8012114 <USBD_CtlError>
      err++;
 8011cd4:	7afb      	ldrb	r3, [r7, #11]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8011cda:	bf00      	nop
    }
    break;
 8011cdc:	e037      	b.n	8011d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	7c1b      	ldrb	r3, [r3, #16]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d109      	bne.n	8011cfa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cee:	f107 0208 	add.w	r2, r7, #8
 8011cf2:	4610      	mov	r0, r2
 8011cf4:	4798      	blx	r3
 8011cf6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011cf8:	e029      	b.n	8011d4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011cfa:	6839      	ldr	r1, [r7, #0]
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 fa09 	bl	8012114 <USBD_CtlError>
      err++;
 8011d02:	7afb      	ldrb	r3, [r7, #11]
 8011d04:	3301      	adds	r3, #1
 8011d06:	72fb      	strb	r3, [r7, #11]
    break;
 8011d08:	e021      	b.n	8011d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	7c1b      	ldrb	r3, [r3, #16]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d10d      	bne.n	8011d2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1a:	f107 0208 	add.w	r2, r7, #8
 8011d1e:	4610      	mov	r0, r2
 8011d20:	4798      	blx	r3
 8011d22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	3301      	adds	r3, #1
 8011d28:	2207      	movs	r2, #7
 8011d2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8011d2c:	e00f      	b.n	8011d4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8011d2e:	6839      	ldr	r1, [r7, #0]
 8011d30:	6878      	ldr	r0, [r7, #4]
 8011d32:	f000 f9ef 	bl	8012114 <USBD_CtlError>
      err++;
 8011d36:	7afb      	ldrb	r3, [r7, #11]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	72fb      	strb	r3, [r7, #11]
    break;
 8011d3c:	e007      	b.n	8011d4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8011d3e:	6839      	ldr	r1, [r7, #0]
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f000 f9e7 	bl	8012114 <USBD_CtlError>
    err++;
 8011d46:	7afb      	ldrb	r3, [r7, #11]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	72fb      	strb	r3, [r7, #11]
    break;
 8011d4c:	bf00      	nop
  }

  if (err != 0U)
 8011d4e:	7afb      	ldrb	r3, [r7, #11]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d11e      	bne.n	8011d92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	88db      	ldrh	r3, [r3, #6]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d016      	beq.n	8011d8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8011d5c:	893b      	ldrh	r3, [r7, #8]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00e      	beq.n	8011d80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	88da      	ldrh	r2, [r3, #6]
 8011d66:	893b      	ldrh	r3, [r7, #8]
 8011d68:	4293      	cmp	r3, r2
 8011d6a:	bf28      	it	cs
 8011d6c:	4613      	movcs	r3, r2
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8011d72:	893b      	ldrh	r3, [r7, #8]
 8011d74:	461a      	mov	r2, r3
 8011d76:	68f9      	ldr	r1, [r7, #12]
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f000 fa3c 	bl	80121f6 <USBD_CtlSendData>
 8011d7e:	e009      	b.n	8011d94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8011d80:	6839      	ldr	r1, [r7, #0]
 8011d82:	6878      	ldr	r0, [r7, #4]
 8011d84:	f000 f9c6 	bl	8012114 <USBD_CtlError>
 8011d88:	e004      	b.n	8011d94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 fa70 	bl	8012270 <USBD_CtlSendStatus>
 8011d90:	e000      	b.n	8011d94 <USBD_GetDescriptor+0x2cc>
    return;
 8011d92:	bf00      	nop
    }
  }
}
 8011d94:	3710      	adds	r7, #16
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop

08011d9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b084      	sub	sp, #16
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	889b      	ldrh	r3, [r3, #4]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d130      	bne.n	8011e10 <USBD_SetAddress+0x74>
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	88db      	ldrh	r3, [r3, #6]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d12c      	bne.n	8011e10 <USBD_SetAddress+0x74>
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	885b      	ldrh	r3, [r3, #2]
 8011dba:	2b7f      	cmp	r3, #127	; 0x7f
 8011dbc:	d828      	bhi.n	8011e10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	885b      	ldrh	r3, [r3, #2]
 8011dc2:	b2db      	uxtb	r3, r3
 8011dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d104      	bne.n	8011dde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8011dd4:	6839      	ldr	r1, [r7, #0]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 f99c 	bl	8012114 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ddc:	e01c      	b.n	8011e18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	7bfa      	ldrb	r2, [r7, #15]
 8011de2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011de6:	7bfb      	ldrb	r3, [r7, #15]
 8011de8:	4619      	mov	r1, r3
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f004 f8fd 	bl	8015fea <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f000 fa3d 	bl	8012270 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011df6:	7bfb      	ldrb	r3, [r7, #15]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d004      	beq.n	8011e06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2202      	movs	r2, #2
 8011e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e04:	e008      	b.n	8011e18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	2201      	movs	r2, #1
 8011e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e0e:	e003      	b.n	8011e18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f000 f97e 	bl	8012114 <USBD_CtlError>
  }
}
 8011e18:	bf00      	nop
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e20:	b580      	push	{r7, lr}
 8011e22:	b084      	sub	sp, #16
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	885b      	ldrh	r3, [r3, #2]
 8011e32:	b2da      	uxtb	r2, r3
 8011e34:	4b4b      	ldr	r3, [pc, #300]	; (8011f64 <USBD_SetConfig+0x144>)
 8011e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011e38:	4b4a      	ldr	r3, [pc, #296]	; (8011f64 <USBD_SetConfig+0x144>)
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d905      	bls.n	8011e4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011e40:	6839      	ldr	r1, [r7, #0]
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f000 f966 	bl	8012114 <USBD_CtlError>
    return USBD_FAIL;
 8011e48:	2303      	movs	r3, #3
 8011e4a:	e087      	b.n	8011f5c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d002      	beq.n	8011e5c <USBD_SetConfig+0x3c>
 8011e56:	2b03      	cmp	r3, #3
 8011e58:	d025      	beq.n	8011ea6 <USBD_SetConfig+0x86>
 8011e5a:	e071      	b.n	8011f40 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8011e5c:	4b41      	ldr	r3, [pc, #260]	; (8011f64 <USBD_SetConfig+0x144>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d01c      	beq.n	8011e9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8011e64:	4b3f      	ldr	r3, [pc, #252]	; (8011f64 <USBD_SetConfig+0x144>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	461a      	mov	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011e6e:	4b3d      	ldr	r3, [pc, #244]	; (8011f64 <USBD_SetConfig+0x144>)
 8011e70:	781b      	ldrb	r3, [r3, #0]
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff f9a8 	bl	80111ca <USBD_SetClassConfig>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8011e7e:	7bfb      	ldrb	r3, [r7, #15]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d004      	beq.n	8011e8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f000 f944 	bl	8012114 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011e8c:	e065      	b.n	8011f5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f000 f9ee 	bl	8012270 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2203      	movs	r2, #3
 8011e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011e9c:	e05d      	b.n	8011f5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 f9e6 	bl	8012270 <USBD_CtlSendStatus>
    break;
 8011ea4:	e059      	b.n	8011f5a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8011ea6:	4b2f      	ldr	r3, [pc, #188]	; (8011f64 <USBD_SetConfig+0x144>)
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d112      	bne.n	8011ed4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	2202      	movs	r2, #2
 8011eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8011eb6:	4b2b      	ldr	r3, [pc, #172]	; (8011f64 <USBD_SetConfig+0x144>)
 8011eb8:	781b      	ldrb	r3, [r3, #0]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011ec0:	4b28      	ldr	r3, [pc, #160]	; (8011f64 <USBD_SetConfig+0x144>)
 8011ec2:	781b      	ldrb	r3, [r3, #0]
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f7ff f99b 	bl	8011202 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 f9cf 	bl	8012270 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8011ed2:	e042      	b.n	8011f5a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8011ed4:	4b23      	ldr	r3, [pc, #140]	; (8011f64 <USBD_SetConfig+0x144>)
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	461a      	mov	r2, r3
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	685b      	ldr	r3, [r3, #4]
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d02a      	beq.n	8011f38 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685b      	ldr	r3, [r3, #4]
 8011ee6:	b2db      	uxtb	r3, r3
 8011ee8:	4619      	mov	r1, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f7ff f989 	bl	8011202 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011ef0:	4b1c      	ldr	r3, [pc, #112]	; (8011f64 <USBD_SetConfig+0x144>)
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011efa:	4b1a      	ldr	r3, [pc, #104]	; (8011f64 <USBD_SetConfig+0x144>)
 8011efc:	781b      	ldrb	r3, [r3, #0]
 8011efe:	4619      	mov	r1, r3
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f7ff f962 	bl	80111ca <USBD_SetClassConfig>
 8011f06:	4603      	mov	r3, r0
 8011f08:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011f0a:	7bfb      	ldrb	r3, [r7, #15]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d00f      	beq.n	8011f30 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011f10:	6839      	ldr	r1, [r7, #0]
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f000 f8fe 	bl	8012114 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	685b      	ldr	r3, [r3, #4]
 8011f1c:	b2db      	uxtb	r3, r3
 8011f1e:	4619      	mov	r1, r3
 8011f20:	6878      	ldr	r0, [r7, #4]
 8011f22:	f7ff f96e 	bl	8011202 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	2202      	movs	r2, #2
 8011f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011f2e:	e014      	b.n	8011f5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 f99d 	bl	8012270 <USBD_CtlSendStatus>
    break;
 8011f36:	e010      	b.n	8011f5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011f38:	6878      	ldr	r0, [r7, #4]
 8011f3a:	f000 f999 	bl	8012270 <USBD_CtlSendStatus>
    break;
 8011f3e:	e00c      	b.n	8011f5a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f8e6 	bl	8012114 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011f48:	4b06      	ldr	r3, [pc, #24]	; (8011f64 <USBD_SetConfig+0x144>)
 8011f4a:	781b      	ldrb	r3, [r3, #0]
 8011f4c:	4619      	mov	r1, r3
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff f957 	bl	8011202 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8011f54:	2303      	movs	r3, #3
 8011f56:	73fb      	strb	r3, [r7, #15]
    break;
 8011f58:	bf00      	nop
  }

  return ret;
 8011f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	24000670 	.word	0x24000670

08011f68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f68:	b580      	push	{r7, lr}
 8011f6a:	b082      	sub	sp, #8
 8011f6c:	af00      	add	r7, sp, #0
 8011f6e:	6078      	str	r0, [r7, #4]
 8011f70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	88db      	ldrh	r3, [r3, #6]
 8011f76:	2b01      	cmp	r3, #1
 8011f78:	d004      	beq.n	8011f84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011f7a:	6839      	ldr	r1, [r7, #0]
 8011f7c:	6878      	ldr	r0, [r7, #4]
 8011f7e:	f000 f8c9 	bl	8012114 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8011f82:	e021      	b.n	8011fc8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f8a:	2b01      	cmp	r3, #1
 8011f8c:	db17      	blt.n	8011fbe <USBD_GetConfig+0x56>
 8011f8e:	2b02      	cmp	r3, #2
 8011f90:	dd02      	ble.n	8011f98 <USBD_GetConfig+0x30>
 8011f92:	2b03      	cmp	r3, #3
 8011f94:	d00b      	beq.n	8011fae <USBD_GetConfig+0x46>
 8011f96:	e012      	b.n	8011fbe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2200      	movs	r2, #0
 8011f9c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	3308      	adds	r3, #8
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f000 f925 	bl	80121f6 <USBD_CtlSendData>
      break;
 8011fac:	e00c      	b.n	8011fc8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	6878      	ldr	r0, [r7, #4]
 8011fb8:	f000 f91d 	bl	80121f6 <USBD_CtlSendData>
      break;
 8011fbc:	e004      	b.n	8011fc8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011fbe:	6839      	ldr	r1, [r7, #0]
 8011fc0:	6878      	ldr	r0, [r7, #4]
 8011fc2:	f000 f8a7 	bl	8012114 <USBD_CtlError>
      break;
 8011fc6:	bf00      	nop
}
 8011fc8:	bf00      	nop
 8011fca:	3708      	adds	r7, #8
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd80      	pop	{r7, pc}

08011fd0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b082      	sub	sp, #8
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fe0:	3b01      	subs	r3, #1
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d81e      	bhi.n	8012024 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	88db      	ldrh	r3, [r3, #6]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d004      	beq.n	8011ff8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011fee:	6839      	ldr	r1, [r7, #0]
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f000 f88f 	bl	8012114 <USBD_CtlError>
      break;
 8011ff6:	e01a      	b.n	801202e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012004:	2b00      	cmp	r3, #0
 8012006:	d005      	beq.n	8012014 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	f043 0202 	orr.w	r2, r3, #2
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	330c      	adds	r3, #12
 8012018:	2202      	movs	r2, #2
 801201a:	4619      	mov	r1, r3
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f000 f8ea 	bl	80121f6 <USBD_CtlSendData>
    break;
 8012022:	e004      	b.n	801202e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 f874 	bl	8012114 <USBD_CtlError>
    break;
 801202c:	bf00      	nop
  }
}
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	885b      	ldrh	r3, [r3, #2]
 8012044:	2b01      	cmp	r3, #1
 8012046:	d106      	bne.n	8012056 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2201      	movs	r2, #1
 801204c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012050:	6878      	ldr	r0, [r7, #4]
 8012052:	f000 f90d 	bl	8012270 <USBD_CtlSendStatus>
  }
}
 8012056:	bf00      	nop
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}

0801205e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801205e:	b580      	push	{r7, lr}
 8012060:	b082      	sub	sp, #8
 8012062:	af00      	add	r7, sp, #0
 8012064:	6078      	str	r0, [r7, #4]
 8012066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801206e:	3b01      	subs	r3, #1
 8012070:	2b02      	cmp	r3, #2
 8012072:	d80b      	bhi.n	801208c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012074:	683b      	ldr	r3, [r7, #0]
 8012076:	885b      	ldrh	r3, [r3, #2]
 8012078:	2b01      	cmp	r3, #1
 801207a:	d10c      	bne.n	8012096 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f8f3 	bl	8012270 <USBD_CtlSendStatus>
      }
      break;
 801208a:	e004      	b.n	8012096 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801208c:	6839      	ldr	r1, [r7, #0]
 801208e:	6878      	ldr	r0, [r7, #4]
 8012090:	f000 f840 	bl	8012114 <USBD_CtlError>
      break;
 8012094:	e000      	b.n	8012098 <USBD_ClrFeature+0x3a>
      break;
 8012096:	bf00      	nop
  }
}
 8012098:	bf00      	nop
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}

080120a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b084      	sub	sp, #16
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
 80120a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	781a      	ldrb	r2, [r3, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3301      	adds	r3, #1
 80120ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	781a      	ldrb	r2, [r3, #0]
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	3301      	adds	r3, #1
 80120c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80120ca:	68f8      	ldr	r0, [r7, #12]
 80120cc:	f7ff fad4 	bl	8011678 <SWAPBYTE>
 80120d0:	4603      	mov	r3, r0
 80120d2:	461a      	mov	r2, r3
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	3301      	adds	r3, #1
 80120dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	3301      	adds	r3, #1
 80120e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80120e4:	68f8      	ldr	r0, [r7, #12]
 80120e6:	f7ff fac7 	bl	8011678 <SWAPBYTE>
 80120ea:	4603      	mov	r3, r0
 80120ec:	461a      	mov	r2, r3
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	3301      	adds	r3, #1
 80120f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	3301      	adds	r3, #1
 80120fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80120fe:	68f8      	ldr	r0, [r7, #12]
 8012100:	f7ff faba 	bl	8011678 <SWAPBYTE>
 8012104:	4603      	mov	r3, r0
 8012106:	461a      	mov	r2, r3
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	80da      	strh	r2, [r3, #6]
}
 801210c:	bf00      	nop
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bd80      	pop	{r7, pc}

08012114 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012114:	b580      	push	{r7, lr}
 8012116:	b082      	sub	sp, #8
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801211e:	2180      	movs	r1, #128	; 0x80
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f003 fef8 	bl	8015f16 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012126:	2100      	movs	r1, #0
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f003 fef4 	bl	8015f16 <USBD_LL_StallEP>
}
 801212e:	bf00      	nop
 8012130:	3708      	adds	r7, #8
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}

08012136 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b086      	sub	sp, #24
 801213a:	af00      	add	r7, sp, #0
 801213c:	60f8      	str	r0, [r7, #12]
 801213e:	60b9      	str	r1, [r7, #8]
 8012140:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012142:	2300      	movs	r3, #0
 8012144:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d036      	beq.n	80121ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012150:	6938      	ldr	r0, [r7, #16]
 8012152:	f000 f836 	bl	80121c2 <USBD_GetLen>
 8012156:	4603      	mov	r3, r0
 8012158:	3301      	adds	r3, #1
 801215a:	b29b      	uxth	r3, r3
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	b29a      	uxth	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012164:	7dfb      	ldrb	r3, [r7, #23]
 8012166:	68ba      	ldr	r2, [r7, #8]
 8012168:	4413      	add	r3, r2
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	7812      	ldrb	r2, [r2, #0]
 801216e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012170:	7dfb      	ldrb	r3, [r7, #23]
 8012172:	3301      	adds	r3, #1
 8012174:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012176:	7dfb      	ldrb	r3, [r7, #23]
 8012178:	68ba      	ldr	r2, [r7, #8]
 801217a:	4413      	add	r3, r2
 801217c:	2203      	movs	r2, #3
 801217e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012180:	7dfb      	ldrb	r3, [r7, #23]
 8012182:	3301      	adds	r3, #1
 8012184:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012186:	e013      	b.n	80121b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012188:	7dfb      	ldrb	r3, [r7, #23]
 801218a:	68ba      	ldr	r2, [r7, #8]
 801218c:	4413      	add	r3, r2
 801218e:	693a      	ldr	r2, [r7, #16]
 8012190:	7812      	ldrb	r2, [r2, #0]
 8012192:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	3301      	adds	r3, #1
 8012198:	613b      	str	r3, [r7, #16]
    idx++;
 801219a:	7dfb      	ldrb	r3, [r7, #23]
 801219c:	3301      	adds	r3, #1
 801219e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
 80121a2:	68ba      	ldr	r2, [r7, #8]
 80121a4:	4413      	add	r3, r2
 80121a6:	2200      	movs	r2, #0
 80121a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80121aa:	7dfb      	ldrb	r3, [r7, #23]
 80121ac:	3301      	adds	r3, #1
 80121ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d1e7      	bne.n	8012188 <USBD_GetString+0x52>
 80121b8:	e000      	b.n	80121bc <USBD_GetString+0x86>
    return;
 80121ba:	bf00      	nop
  }
}
 80121bc:	3718      	adds	r7, #24
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80121c2:	b480      	push	{r7}
 80121c4:	b085      	sub	sp, #20
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80121ca:	2300      	movs	r3, #0
 80121cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80121d2:	e005      	b.n	80121e0 <USBD_GetLen+0x1e>
  {
    len++;
 80121d4:	7bfb      	ldrb	r3, [r7, #15]
 80121d6:	3301      	adds	r3, #1
 80121d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	3301      	adds	r3, #1
 80121de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	781b      	ldrb	r3, [r3, #0]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d1f5      	bne.n	80121d4 <USBD_GetLen+0x12>
  }

  return len;
 80121e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ea:	4618      	mov	r0, r3
 80121ec:	3714      	adds	r7, #20
 80121ee:	46bd      	mov	sp, r7
 80121f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f4:	4770      	bx	lr

080121f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80121f6:	b580      	push	{r7, lr}
 80121f8:	b084      	sub	sp, #16
 80121fa:	af00      	add	r7, sp, #0
 80121fc:	60f8      	str	r0, [r7, #12]
 80121fe:	60b9      	str	r1, [r7, #8]
 8012200:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2202      	movs	r2, #2
 8012206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	2100      	movs	r1, #0
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f003 ff03 	bl	8016028 <USBD_LL_Transmit>

  return USBD_OK;
 8012222:	2300      	movs	r3, #0
}
 8012224:	4618      	mov	r0, r3
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}

0801222c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b084      	sub	sp, #16
 8012230:	af00      	add	r7, sp, #0
 8012232:	60f8      	str	r0, [r7, #12]
 8012234:	60b9      	str	r1, [r7, #8]
 8012236:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	68ba      	ldr	r2, [r7, #8]
 801223c:	2100      	movs	r1, #0
 801223e:	68f8      	ldr	r0, [r7, #12]
 8012240:	f003 fef2 	bl	8016028 <USBD_LL_Transmit>

  return USBD_OK;
 8012244:	2300      	movs	r3, #0
}
 8012246:	4618      	mov	r0, r3
 8012248:	3710      	adds	r7, #16
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}

0801224e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801224e:	b580      	push	{r7, lr}
 8012250:	b084      	sub	sp, #16
 8012252:	af00      	add	r7, sp, #0
 8012254:	60f8      	str	r0, [r7, #12]
 8012256:	60b9      	str	r1, [r7, #8]
 8012258:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	68ba      	ldr	r2, [r7, #8]
 801225e:	2100      	movs	r1, #0
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f003 ff02 	bl	801606a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012266:	2300      	movs	r3, #0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}

08012270 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012270:	b580      	push	{r7, lr}
 8012272:	b082      	sub	sp, #8
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2204      	movs	r2, #4
 801227c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012280:	2300      	movs	r3, #0
 8012282:	2200      	movs	r2, #0
 8012284:	2100      	movs	r1, #0
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f003 fece 	bl	8016028 <USBD_LL_Transmit>

  return USBD_OK;
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	3708      	adds	r7, #8
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}

08012296 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012296:	b580      	push	{r7, lr}
 8012298:	b082      	sub	sp, #8
 801229a:	af00      	add	r7, sp, #0
 801229c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	2205      	movs	r2, #5
 80122a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80122a6:	2300      	movs	r3, #0
 80122a8:	2200      	movs	r2, #0
 80122aa:	2100      	movs	r1, #0
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f003 fedc 	bl	801606a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80122b2:	2300      	movs	r3, #0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3708      	adds	r7, #8
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	4603      	mov	r3, r0
 80122c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80122c6:	79fb      	ldrb	r3, [r7, #7]
 80122c8:	4a08      	ldr	r2, [pc, #32]	; (80122ec <disk_status+0x30>)
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	4413      	add	r3, r2
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	79fa      	ldrb	r2, [r7, #7]
 80122d4:	4905      	ldr	r1, [pc, #20]	; (80122ec <disk_status+0x30>)
 80122d6:	440a      	add	r2, r1
 80122d8:	7a12      	ldrb	r2, [r2, #8]
 80122da:	4610      	mov	r0, r2
 80122dc:	4798      	blx	r3
 80122de:	4603      	mov	r3, r0
 80122e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80122e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	2400069c 	.word	0x2400069c

080122f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80122f0:	b580      	push	{r7, lr}
 80122f2:	b084      	sub	sp, #16
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	4603      	mov	r3, r0
 80122f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80122fa:	2300      	movs	r3, #0
 80122fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80122fe:	79fb      	ldrb	r3, [r7, #7]
 8012300:	4a0d      	ldr	r2, [pc, #52]	; (8012338 <disk_initialize+0x48>)
 8012302:	5cd3      	ldrb	r3, [r2, r3]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d111      	bne.n	801232c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012308:	79fb      	ldrb	r3, [r7, #7]
 801230a:	4a0b      	ldr	r2, [pc, #44]	; (8012338 <disk_initialize+0x48>)
 801230c:	2101      	movs	r1, #1
 801230e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012310:	79fb      	ldrb	r3, [r7, #7]
 8012312:	4a09      	ldr	r2, [pc, #36]	; (8012338 <disk_initialize+0x48>)
 8012314:	009b      	lsls	r3, r3, #2
 8012316:	4413      	add	r3, r2
 8012318:	685b      	ldr	r3, [r3, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	79fa      	ldrb	r2, [r7, #7]
 801231e:	4906      	ldr	r1, [pc, #24]	; (8012338 <disk_initialize+0x48>)
 8012320:	440a      	add	r2, r1
 8012322:	7a12      	ldrb	r2, [r2, #8]
 8012324:	4610      	mov	r0, r2
 8012326:	4798      	blx	r3
 8012328:	4603      	mov	r3, r0
 801232a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801232c:	7bfb      	ldrb	r3, [r7, #15]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	2400069c 	.word	0x2400069c

0801233c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801233c:	b590      	push	{r4, r7, lr}
 801233e:	b087      	sub	sp, #28
 8012340:	af00      	add	r7, sp, #0
 8012342:	60b9      	str	r1, [r7, #8]
 8012344:	607a      	str	r2, [r7, #4]
 8012346:	603b      	str	r3, [r7, #0]
 8012348:	4603      	mov	r3, r0
 801234a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801234c:	7bfb      	ldrb	r3, [r7, #15]
 801234e:	4a0a      	ldr	r2, [pc, #40]	; (8012378 <disk_read+0x3c>)
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	4413      	add	r3, r2
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	689c      	ldr	r4, [r3, #8]
 8012358:	7bfb      	ldrb	r3, [r7, #15]
 801235a:	4a07      	ldr	r2, [pc, #28]	; (8012378 <disk_read+0x3c>)
 801235c:	4413      	add	r3, r2
 801235e:	7a18      	ldrb	r0, [r3, #8]
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	687a      	ldr	r2, [r7, #4]
 8012364:	68b9      	ldr	r1, [r7, #8]
 8012366:	47a0      	blx	r4
 8012368:	4603      	mov	r3, r0
 801236a:	75fb      	strb	r3, [r7, #23]
  return res;
 801236c:	7dfb      	ldrb	r3, [r7, #23]
}
 801236e:	4618      	mov	r0, r3
 8012370:	371c      	adds	r7, #28
 8012372:	46bd      	mov	sp, r7
 8012374:	bd90      	pop	{r4, r7, pc}
 8012376:	bf00      	nop
 8012378:	2400069c 	.word	0x2400069c

0801237c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801237c:	b590      	push	{r4, r7, lr}
 801237e:	b087      	sub	sp, #28
 8012380:	af00      	add	r7, sp, #0
 8012382:	60b9      	str	r1, [r7, #8]
 8012384:	607a      	str	r2, [r7, #4]
 8012386:	603b      	str	r3, [r7, #0]
 8012388:	4603      	mov	r3, r0
 801238a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801238c:	7bfb      	ldrb	r3, [r7, #15]
 801238e:	4a0a      	ldr	r2, [pc, #40]	; (80123b8 <disk_write+0x3c>)
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	4413      	add	r3, r2
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	68dc      	ldr	r4, [r3, #12]
 8012398:	7bfb      	ldrb	r3, [r7, #15]
 801239a:	4a07      	ldr	r2, [pc, #28]	; (80123b8 <disk_write+0x3c>)
 801239c:	4413      	add	r3, r2
 801239e:	7a18      	ldrb	r0, [r3, #8]
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	68b9      	ldr	r1, [r7, #8]
 80123a6:	47a0      	blx	r4
 80123a8:	4603      	mov	r3, r0
 80123aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80123ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	371c      	adds	r7, #28
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd90      	pop	{r4, r7, pc}
 80123b6:	bf00      	nop
 80123b8:	2400069c 	.word	0x2400069c

080123bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3301      	adds	r3, #1
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80123cc:	89fb      	ldrh	r3, [r7, #14]
 80123ce:	021b      	lsls	r3, r3, #8
 80123d0:	b21a      	sxth	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	b21b      	sxth	r3, r3
 80123d8:	4313      	orrs	r3, r2
 80123da:	b21b      	sxth	r3, r3
 80123dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80123de:	89fb      	ldrh	r3, [r7, #14]
}
 80123e0:	4618      	mov	r0, r3
 80123e2:	3714      	adds	r7, #20
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80123ec:	b480      	push	{r7}
 80123ee:	b085      	sub	sp, #20
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	3303      	adds	r3, #3
 80123f8:	781b      	ldrb	r3, [r3, #0]
 80123fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	021b      	lsls	r3, r3, #8
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	3202      	adds	r2, #2
 8012404:	7812      	ldrb	r2, [r2, #0]
 8012406:	4313      	orrs	r3, r2
 8012408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	021b      	lsls	r3, r3, #8
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	3201      	adds	r2, #1
 8012412:	7812      	ldrb	r2, [r2, #0]
 8012414:	4313      	orrs	r3, r2
 8012416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	021b      	lsls	r3, r3, #8
 801241c:	687a      	ldr	r2, [r7, #4]
 801241e:	7812      	ldrb	r2, [r2, #0]
 8012420:	4313      	orrs	r3, r2
 8012422:	60fb      	str	r3, [r7, #12]
	return rv;
 8012424:	68fb      	ldr	r3, [r7, #12]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3714      	adds	r7, #20
 801242a:	46bd      	mov	sp, r7
 801242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012430:	4770      	bx	lr
	...

08012434 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8012434:	b480      	push	{r7}
 8012436:	b085      	sub	sp, #20
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801243c:	2300      	movs	r3, #0
 801243e:	60fb      	str	r3, [r7, #12]
 8012440:	e010      	b.n	8012464 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012442:	4a0d      	ldr	r2, [pc, #52]	; (8012478 <clear_lock+0x44>)
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	011b      	lsls	r3, r3, #4
 8012448:	4413      	add	r3, r2
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	429a      	cmp	r2, r3
 8012450:	d105      	bne.n	801245e <clear_lock+0x2a>
 8012452:	4a09      	ldr	r2, [pc, #36]	; (8012478 <clear_lock+0x44>)
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	011b      	lsls	r3, r3, #4
 8012458:	4413      	add	r3, r2
 801245a:	2200      	movs	r2, #0
 801245c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	3301      	adds	r3, #1
 8012462:	60fb      	str	r3, [r7, #12]
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2b01      	cmp	r3, #1
 8012468:	d9eb      	bls.n	8012442 <clear_lock+0xe>
	}
}
 801246a:	bf00      	nop
 801246c:	3714      	adds	r7, #20
 801246e:	46bd      	mov	sp, r7
 8012470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012474:	4770      	bx	lr
 8012476:	bf00      	nop
 8012478:	2400067c 	.word	0x2400067c

0801247c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801247c:	b580      	push	{r7, lr}
 801247e:	b086      	sub	sp, #24
 8012480:	af00      	add	r7, sp, #0
 8012482:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012484:	2300      	movs	r3, #0
 8012486:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	78db      	ldrb	r3, [r3, #3]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d034      	beq.n	80124fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012494:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	7858      	ldrb	r0, [r3, #1]
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124a0:	2301      	movs	r3, #1
 80124a2:	697a      	ldr	r2, [r7, #20]
 80124a4:	f7ff ff6a 	bl	801237c <disk_write>
 80124a8:	4603      	mov	r3, r0
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d002      	beq.n	80124b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80124ae:	2301      	movs	r3, #1
 80124b0:	73fb      	strb	r3, [r7, #15]
 80124b2:	e022      	b.n	80124fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	697a      	ldr	r2, [r7, #20]
 80124c0:	1ad2      	subs	r2, r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d217      	bcs.n	80124fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	789b      	ldrb	r3, [r3, #2]
 80124ce:	613b      	str	r3, [r7, #16]
 80124d0:	e010      	b.n	80124f4 <sync_window+0x78>
					wsect += fs->fsize;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	699b      	ldr	r3, [r3, #24]
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	4413      	add	r3, r2
 80124da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	7858      	ldrb	r0, [r3, #1]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124e6:	2301      	movs	r3, #1
 80124e8:	697a      	ldr	r2, [r7, #20]
 80124ea:	f7ff ff47 	bl	801237c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	3b01      	subs	r3, #1
 80124f2:	613b      	str	r3, [r7, #16]
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d8eb      	bhi.n	80124d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80124fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3718      	adds	r7, #24
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}

08012504 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801250e:	2300      	movs	r3, #0
 8012510:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012516:	683a      	ldr	r2, [r7, #0]
 8012518:	429a      	cmp	r2, r3
 801251a:	d01b      	beq.n	8012554 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff ffad 	bl	801247c <sync_window>
 8012522:	4603      	mov	r3, r0
 8012524:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8012526:	7bfb      	ldrb	r3, [r7, #15]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d113      	bne.n	8012554 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	7858      	ldrb	r0, [r3, #1]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012536:	2301      	movs	r3, #1
 8012538:	683a      	ldr	r2, [r7, #0]
 801253a:	f7ff feff 	bl	801233c <disk_read>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d004      	beq.n	801254e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8012544:	f04f 33ff 	mov.w	r3, #4294967295
 8012548:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801254a:	2301      	movs	r3, #1
 801254c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	683a      	ldr	r2, [r7, #0]
 8012552:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8012554:	7bfb      	ldrb	r3, [r7, #15]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3710      	adds	r7, #16
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801255e:	b480      	push	{r7}
 8012560:	b087      	sub	sp, #28
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012566:	f04f 33ff 	mov.w	r3, #4294967295
 801256a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d031      	beq.n	80125d8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	617b      	str	r3, [r7, #20]
 801257a:	e002      	b.n	8012582 <get_ldnumber+0x24>
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	3301      	adds	r3, #1
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b20      	cmp	r3, #32
 8012588:	d903      	bls.n	8012592 <get_ldnumber+0x34>
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	781b      	ldrb	r3, [r3, #0]
 801258e:	2b3a      	cmp	r3, #58	; 0x3a
 8012590:	d1f4      	bne.n	801257c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b3a      	cmp	r3, #58	; 0x3a
 8012598:	d11c      	bne.n	80125d4 <get_ldnumber+0x76>
			tp = *path;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	1c5a      	adds	r2, r3, #1
 80125a4:	60fa      	str	r2, [r7, #12]
 80125a6:	781b      	ldrb	r3, [r3, #0]
 80125a8:	3b30      	subs	r3, #48	; 0x30
 80125aa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	2b09      	cmp	r3, #9
 80125b0:	d80e      	bhi.n	80125d0 <get_ldnumber+0x72>
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	697b      	ldr	r3, [r7, #20]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d10a      	bne.n	80125d0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d107      	bne.n	80125d0 <get_ldnumber+0x72>
					vol = (int)i;
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	3301      	adds	r3, #1
 80125c8:	617b      	str	r3, [r7, #20]
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	697a      	ldr	r2, [r7, #20]
 80125ce:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	e002      	b.n	80125da <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80125d4:	2300      	movs	r3, #0
 80125d6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125d8:	693b      	ldr	r3, [r7, #16]
}
 80125da:	4618      	mov	r0, r3
 80125dc:	371c      	adds	r7, #28
 80125de:	46bd      	mov	sp, r7
 80125e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e4:	4770      	bx	lr
	...

080125e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
 80125f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	70da      	strb	r2, [r3, #3]
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f04f 32ff 	mov.w	r2, #4294967295
 80125fe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff ff7e 	bl	8012504 <move_window>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d001      	beq.n	8012612 <check_fs+0x2a>
 801260e:	2304      	movs	r3, #4
 8012610:	e038      	b.n	8012684 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	3330      	adds	r3, #48	; 0x30
 8012616:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801261a:	4618      	mov	r0, r3
 801261c:	f7ff fece 	bl	80123bc <ld_word>
 8012620:	4603      	mov	r3, r0
 8012622:	461a      	mov	r2, r3
 8012624:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012628:	429a      	cmp	r2, r3
 801262a:	d001      	beq.n	8012630 <check_fs+0x48>
 801262c:	2303      	movs	r3, #3
 801262e:	e029      	b.n	8012684 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012636:	2be9      	cmp	r3, #233	; 0xe9
 8012638:	d009      	beq.n	801264e <check_fs+0x66>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012640:	2beb      	cmp	r3, #235	; 0xeb
 8012642:	d11e      	bne.n	8012682 <check_fs+0x9a>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801264a:	2b90      	cmp	r3, #144	; 0x90
 801264c:	d119      	bne.n	8012682 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	3330      	adds	r3, #48	; 0x30
 8012652:	3336      	adds	r3, #54	; 0x36
 8012654:	4618      	mov	r0, r3
 8012656:	f7ff fec9 	bl	80123ec <ld_dword>
 801265a:	4603      	mov	r3, r0
 801265c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012660:	4a0a      	ldr	r2, [pc, #40]	; (801268c <check_fs+0xa4>)
 8012662:	4293      	cmp	r3, r2
 8012664:	d101      	bne.n	801266a <check_fs+0x82>
 8012666:	2300      	movs	r3, #0
 8012668:	e00c      	b.n	8012684 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	3330      	adds	r3, #48	; 0x30
 801266e:	3352      	adds	r3, #82	; 0x52
 8012670:	4618      	mov	r0, r3
 8012672:	f7ff febb 	bl	80123ec <ld_dword>
 8012676:	4602      	mov	r2, r0
 8012678:	4b05      	ldr	r3, [pc, #20]	; (8012690 <check_fs+0xa8>)
 801267a:	429a      	cmp	r2, r3
 801267c:	d101      	bne.n	8012682 <check_fs+0x9a>
 801267e:	2300      	movs	r3, #0
 8012680:	e000      	b.n	8012684 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012682:	2302      	movs	r3, #2
}
 8012684:	4618      	mov	r0, r3
 8012686:	3708      	adds	r7, #8
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	00544146 	.word	0x00544146
 8012690:	33544146 	.word	0x33544146

08012694 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b096      	sub	sp, #88	; 0x58
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	60b9      	str	r1, [r7, #8]
 801269e:	4613      	mov	r3, r2
 80126a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	2200      	movs	r2, #0
 80126a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7ff ff58 	bl	801255e <get_ldnumber>
 80126ae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80126b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	da01      	bge.n	80126ba <find_volume+0x26>
 80126b6:	230b      	movs	r3, #11
 80126b8:	e22e      	b.n	8012b18 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80126ba:	4aa8      	ldr	r2, [pc, #672]	; (801295c <find_volume+0x2c8>)
 80126bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d101      	bne.n	80126ce <find_volume+0x3a>
 80126ca:	230c      	movs	r3, #12
 80126cc:	e224      	b.n	8012b18 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80126d4:	79fb      	ldrb	r3, [r7, #7]
 80126d6:	f023 0301 	bic.w	r3, r3, #1
 80126da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d01a      	beq.n	801271a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126e6:	785b      	ldrb	r3, [r3, #1]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7ff fde7 	bl	80122bc <disk_status>
 80126ee:	4603      	mov	r3, r0
 80126f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80126f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80126f8:	f003 0301 	and.w	r3, r3, #1
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10c      	bne.n	801271a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012700:	79fb      	ldrb	r3, [r7, #7]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d007      	beq.n	8012716 <find_volume+0x82>
 8012706:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801270a:	f003 0304 	and.w	r3, r3, #4
 801270e:	2b00      	cmp	r3, #0
 8012710:	d001      	beq.n	8012716 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012712:	230a      	movs	r3, #10
 8012714:	e200      	b.n	8012b18 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8012716:	2300      	movs	r3, #0
 8012718:	e1fe      	b.n	8012b18 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801271a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271c:	2200      	movs	r2, #0
 801271e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012722:	b2da      	uxtb	r2, r3
 8012724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012726:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272a:	785b      	ldrb	r3, [r3, #1]
 801272c:	4618      	mov	r0, r3
 801272e:	f7ff fddf 	bl	80122f0 <disk_initialize>
 8012732:	4603      	mov	r3, r0
 8012734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012738:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801273c:	f003 0301 	and.w	r3, r3, #1
 8012740:	2b00      	cmp	r3, #0
 8012742:	d001      	beq.n	8012748 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012744:	2303      	movs	r3, #3
 8012746:	e1e7      	b.n	8012b18 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012748:	79fb      	ldrb	r3, [r7, #7]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d007      	beq.n	801275e <find_volume+0xca>
 801274e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012752:	f003 0304 	and.w	r3, r3, #4
 8012756:	2b00      	cmp	r3, #0
 8012758:	d001      	beq.n	801275e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801275a:	230a      	movs	r3, #10
 801275c:	e1dc      	b.n	8012b18 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801275e:	2300      	movs	r3, #0
 8012760:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012762:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012766:	f7ff ff3f 	bl	80125e8 <check_fs>
 801276a:	4603      	mov	r3, r0
 801276c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012774:	2b02      	cmp	r3, #2
 8012776:	d14b      	bne.n	8012810 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012778:	2300      	movs	r3, #0
 801277a:	643b      	str	r3, [r7, #64]	; 0x40
 801277c:	e01f      	b.n	80127be <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801277e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012780:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012786:	011b      	lsls	r3, r3, #4
 8012788:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801278c:	4413      	add	r3, r2
 801278e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	3304      	adds	r3, #4
 8012794:	781b      	ldrb	r3, [r3, #0]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d006      	beq.n	80127a8 <find_volume+0x114>
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	3308      	adds	r3, #8
 801279e:	4618      	mov	r0, r3
 80127a0:	f7ff fe24 	bl	80123ec <ld_dword>
 80127a4:	4602      	mov	r2, r0
 80127a6:	e000      	b.n	80127aa <find_volume+0x116>
 80127a8:	2200      	movs	r2, #0
 80127aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ac:	009b      	lsls	r3, r3, #2
 80127ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80127b2:	440b      	add	r3, r1
 80127b4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ba:	3301      	adds	r3, #1
 80127bc:	643b      	str	r3, [r7, #64]	; 0x40
 80127be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127c0:	2b03      	cmp	r3, #3
 80127c2:	d9dc      	bls.n	801277e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80127c4:	2300      	movs	r3, #0
 80127c6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80127c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d002      	beq.n	80127d4 <find_volume+0x140>
 80127ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127d0:	3b01      	subs	r3, #1
 80127d2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80127d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80127dc:	4413      	add	r3, r2
 80127de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80127e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80127e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d005      	beq.n	80127f6 <find_volume+0x162>
 80127ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127ee:	f7ff fefb 	bl	80125e8 <check_fs>
 80127f2:	4603      	mov	r3, r0
 80127f4:	e000      	b.n	80127f8 <find_volume+0x164>
 80127f6:	2303      	movs	r3, #3
 80127f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80127fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012800:	2b01      	cmp	r3, #1
 8012802:	d905      	bls.n	8012810 <find_volume+0x17c>
 8012804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012806:	3301      	adds	r3, #1
 8012808:	643b      	str	r3, [r7, #64]	; 0x40
 801280a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801280c:	2b03      	cmp	r3, #3
 801280e:	d9e1      	bls.n	80127d4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012810:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012814:	2b04      	cmp	r3, #4
 8012816:	d101      	bne.n	801281c <find_volume+0x188>
 8012818:	2301      	movs	r3, #1
 801281a:	e17d      	b.n	8012b18 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801281c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012820:	2b01      	cmp	r3, #1
 8012822:	d901      	bls.n	8012828 <find_volume+0x194>
 8012824:	230d      	movs	r3, #13
 8012826:	e177      	b.n	8012b18 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801282a:	3330      	adds	r3, #48	; 0x30
 801282c:	330b      	adds	r3, #11
 801282e:	4618      	mov	r0, r3
 8012830:	f7ff fdc4 	bl	80123bc <ld_word>
 8012834:	4603      	mov	r3, r0
 8012836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801283a:	d001      	beq.n	8012840 <find_volume+0x1ac>
 801283c:	230d      	movs	r3, #13
 801283e:	e16b      	b.n	8012b18 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012842:	3330      	adds	r3, #48	; 0x30
 8012844:	3316      	adds	r3, #22
 8012846:	4618      	mov	r0, r3
 8012848:	f7ff fdb8 	bl	80123bc <ld_word>
 801284c:	4603      	mov	r3, r0
 801284e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012852:	2b00      	cmp	r3, #0
 8012854:	d106      	bne.n	8012864 <find_volume+0x1d0>
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	3330      	adds	r3, #48	; 0x30
 801285a:	3324      	adds	r3, #36	; 0x24
 801285c:	4618      	mov	r0, r3
 801285e:	f7ff fdc5 	bl	80123ec <ld_dword>
 8012862:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012868:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801286c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8012870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012872:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012876:	789b      	ldrb	r3, [r3, #2]
 8012878:	2b01      	cmp	r3, #1
 801287a:	d005      	beq.n	8012888 <find_volume+0x1f4>
 801287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287e:	789b      	ldrb	r3, [r3, #2]
 8012880:	2b02      	cmp	r3, #2
 8012882:	d001      	beq.n	8012888 <find_volume+0x1f4>
 8012884:	230d      	movs	r3, #13
 8012886:	e147      	b.n	8012b18 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288a:	789b      	ldrb	r3, [r3, #2]
 801288c:	461a      	mov	r2, r3
 801288e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012890:	fb02 f303 	mul.w	r3, r2, r3
 8012894:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801289c:	b29a      	uxth	r2, r3
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80128a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a4:	895b      	ldrh	r3, [r3, #10]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d008      	beq.n	80128bc <find_volume+0x228>
 80128aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ac:	895b      	ldrh	r3, [r3, #10]
 80128ae:	461a      	mov	r2, r3
 80128b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b2:	895b      	ldrh	r3, [r3, #10]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	4013      	ands	r3, r2
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d001      	beq.n	80128c0 <find_volume+0x22c>
 80128bc:	230d      	movs	r3, #13
 80128be:	e12b      	b.n	8012b18 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80128c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c2:	3330      	adds	r3, #48	; 0x30
 80128c4:	3311      	adds	r3, #17
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff fd78 	bl	80123bc <ld_word>
 80128cc:	4603      	mov	r3, r0
 80128ce:	461a      	mov	r2, r3
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80128d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d6:	891b      	ldrh	r3, [r3, #8]
 80128d8:	f003 030f 	and.w	r3, r3, #15
 80128dc:	b29b      	uxth	r3, r3
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d001      	beq.n	80128e6 <find_volume+0x252>
 80128e2:	230d      	movs	r3, #13
 80128e4:	e118      	b.n	8012b18 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80128e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e8:	3330      	adds	r3, #48	; 0x30
 80128ea:	3313      	adds	r3, #19
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7ff fd65 	bl	80123bc <ld_word>
 80128f2:	4603      	mov	r3, r0
 80128f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80128f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d106      	bne.n	801290a <find_volume+0x276>
 80128fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fe:	3330      	adds	r3, #48	; 0x30
 8012900:	3320      	adds	r3, #32
 8012902:	4618      	mov	r0, r3
 8012904:	f7ff fd72 	bl	80123ec <ld_dword>
 8012908:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290c:	3330      	adds	r3, #48	; 0x30
 801290e:	330e      	adds	r3, #14
 8012910:	4618      	mov	r0, r3
 8012912:	f7ff fd53 	bl	80123bc <ld_word>
 8012916:	4603      	mov	r3, r0
 8012918:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801291a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801291c:	2b00      	cmp	r3, #0
 801291e:	d101      	bne.n	8012924 <find_volume+0x290>
 8012920:	230d      	movs	r3, #13
 8012922:	e0f9      	b.n	8012b18 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012924:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012928:	4413      	add	r3, r2
 801292a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801292c:	8912      	ldrh	r2, [r2, #8]
 801292e:	0912      	lsrs	r2, r2, #4
 8012930:	b292      	uxth	r2, r2
 8012932:	4413      	add	r3, r2
 8012934:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012936:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801293a:	429a      	cmp	r2, r3
 801293c:	d201      	bcs.n	8012942 <find_volume+0x2ae>
 801293e:	230d      	movs	r3, #13
 8012940:	e0ea      	b.n	8012b18 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012942:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012946:	1ad3      	subs	r3, r2, r3
 8012948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801294a:	8952      	ldrh	r2, [r2, #10]
 801294c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012950:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	2b00      	cmp	r3, #0
 8012956:	d103      	bne.n	8012960 <find_volume+0x2cc>
 8012958:	230d      	movs	r3, #13
 801295a:	e0dd      	b.n	8012b18 <find_volume+0x484>
 801295c:	24000674 	.word	0x24000674
		fmt = FS_FAT32;
 8012960:	2303      	movs	r3, #3
 8012962:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012968:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801296c:	4293      	cmp	r3, r2
 801296e:	d802      	bhi.n	8012976 <find_volume+0x2e2>
 8012970:	2302      	movs	r3, #2
 8012972:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012978:	f640 72f5 	movw	r2, #4085	; 0xff5
 801297c:	4293      	cmp	r3, r2
 801297e:	d802      	bhi.n	8012986 <find_volume+0x2f2>
 8012980:	2301      	movs	r3, #1
 8012982:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012988:	1c9a      	adds	r2, r3, #2
 801298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012992:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012994:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012998:	441a      	add	r2, r3
 801299a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 801299e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a2:	441a      	add	r2, r3
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80129a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80129ac:	2b03      	cmp	r3, #3
 80129ae:	d11e      	bne.n	80129ee <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80129b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b2:	3330      	adds	r3, #48	; 0x30
 80129b4:	332a      	adds	r3, #42	; 0x2a
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7ff fd00 	bl	80123bc <ld_word>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d001      	beq.n	80129c6 <find_volume+0x332>
 80129c2:	230d      	movs	r3, #13
 80129c4:	e0a8      	b.n	8012b18 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	891b      	ldrh	r3, [r3, #8]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d001      	beq.n	80129d2 <find_volume+0x33e>
 80129ce:	230d      	movs	r3, #13
 80129d0:	e0a2      	b.n	8012b18 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80129d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d4:	3330      	adds	r3, #48	; 0x30
 80129d6:	332c      	adds	r3, #44	; 0x2c
 80129d8:	4618      	mov	r0, r3
 80129da:	f7ff fd07 	bl	80123ec <ld_dword>
 80129de:	4602      	mov	r2, r0
 80129e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80129e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129e6:	695b      	ldr	r3, [r3, #20]
 80129e8:	009b      	lsls	r3, r3, #2
 80129ea:	647b      	str	r3, [r7, #68]	; 0x44
 80129ec:	e01f      	b.n	8012a2e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80129ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f0:	891b      	ldrh	r3, [r3, #8]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d101      	bne.n	80129fa <find_volume+0x366>
 80129f6:	230d      	movs	r3, #13
 80129f8:	e08e      	b.n	8012b18 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80129fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fc:	6a1a      	ldr	r2, [r3, #32]
 80129fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a00:	441a      	add	r2, r3
 8012a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a04:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a0a:	2b02      	cmp	r3, #2
 8012a0c:	d103      	bne.n	8012a16 <find_volume+0x382>
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	695b      	ldr	r3, [r3, #20]
 8012a12:	005b      	lsls	r3, r3, #1
 8012a14:	e00a      	b.n	8012a2c <find_volume+0x398>
 8012a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a18:	695a      	ldr	r2, [r3, #20]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	005b      	lsls	r3, r3, #1
 8012a1e:	4413      	add	r3, r2
 8012a20:	085a      	lsrs	r2, r3, #1
 8012a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a24:	695b      	ldr	r3, [r3, #20]
 8012a26:	f003 0301 	and.w	r3, r3, #1
 8012a2a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a2c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a30:	699a      	ldr	r2, [r3, #24]
 8012a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a34:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8012a38:	0a5b      	lsrs	r3, r3, #9
 8012a3a:	429a      	cmp	r2, r3
 8012a3c:	d201      	bcs.n	8012a42 <find_volume+0x3ae>
 8012a3e:	230d      	movs	r3, #13
 8012a40:	e06a      	b.n	8012b18 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	f04f 32ff 	mov.w	r2, #4294967295
 8012a48:	611a      	str	r2, [r3, #16]
 8012a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a4c:	691a      	ldr	r2, [r3, #16]
 8012a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a50:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a54:	2280      	movs	r2, #128	; 0x80
 8012a56:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012a58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a5c:	2b03      	cmp	r3, #3
 8012a5e:	d149      	bne.n	8012af4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	3330      	adds	r3, #48	; 0x30
 8012a64:	3330      	adds	r3, #48	; 0x30
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7ff fca8 	bl	80123bc <ld_word>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d140      	bne.n	8012af4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a74:	3301      	adds	r3, #1
 8012a76:	4619      	mov	r1, r3
 8012a78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a7a:	f7ff fd43 	bl	8012504 <move_window>
 8012a7e:	4603      	mov	r3, r0
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d137      	bne.n	8012af4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8012a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a86:	2200      	movs	r2, #0
 8012a88:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8c:	3330      	adds	r3, #48	; 0x30
 8012a8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012a92:	4618      	mov	r0, r3
 8012a94:	f7ff fc92 	bl	80123bc <ld_word>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	d127      	bne.n	8012af4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa6:	3330      	adds	r3, #48	; 0x30
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7ff fc9f 	bl	80123ec <ld_dword>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	4b1b      	ldr	r3, [pc, #108]	; (8012b20 <find_volume+0x48c>)
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d11e      	bne.n	8012af4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab8:	3330      	adds	r3, #48	; 0x30
 8012aba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7ff fc94 	bl	80123ec <ld_dword>
 8012ac4:	4602      	mov	r2, r0
 8012ac6:	4b17      	ldr	r3, [pc, #92]	; (8012b24 <find_volume+0x490>)
 8012ac8:	429a      	cmp	r2, r3
 8012aca:	d113      	bne.n	8012af4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ace:	3330      	adds	r3, #48	; 0x30
 8012ad0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7ff fc89 	bl	80123ec <ld_dword>
 8012ada:	4602      	mov	r2, r0
 8012adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ade:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae2:	3330      	adds	r3, #48	; 0x30
 8012ae4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012ae8:	4618      	mov	r0, r3
 8012aea:	f7ff fc7f 	bl	80123ec <ld_dword>
 8012aee:	4602      	mov	r2, r0
 8012af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012af6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012afa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012afc:	4b0a      	ldr	r3, [pc, #40]	; (8012b28 <find_volume+0x494>)
 8012afe:	881b      	ldrh	r3, [r3, #0]
 8012b00:	3301      	adds	r3, #1
 8012b02:	b29a      	uxth	r2, r3
 8012b04:	4b08      	ldr	r3, [pc, #32]	; (8012b28 <find_volume+0x494>)
 8012b06:	801a      	strh	r2, [r3, #0]
 8012b08:	4b07      	ldr	r3, [pc, #28]	; (8012b28 <find_volume+0x494>)
 8012b0a:	881a      	ldrh	r2, [r3, #0]
 8012b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b10:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b12:	f7ff fc8f 	bl	8012434 <clear_lock>
#endif
	return FR_OK;
 8012b16:	2300      	movs	r3, #0
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	3758      	adds	r7, #88	; 0x58
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	41615252 	.word	0x41615252
 8012b24:	61417272 	.word	0x61417272
 8012b28:	24000678 	.word	0x24000678

08012b2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b088      	sub	sp, #32
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	4613      	mov	r3, r2
 8012b38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012b3e:	f107 0310 	add.w	r3, r7, #16
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7ff fd0b 	bl	801255e <get_ldnumber>
 8012b48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012b4a:	69fb      	ldr	r3, [r7, #28]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	da01      	bge.n	8012b54 <f_mount+0x28>
 8012b50:	230b      	movs	r3, #11
 8012b52:	e02b      	b.n	8012bac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012b54:	4a17      	ldr	r2, [pc, #92]	; (8012bb4 <f_mount+0x88>)
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012b5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012b5e:	69bb      	ldr	r3, [r7, #24]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d005      	beq.n	8012b70 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012b64:	69b8      	ldr	r0, [r7, #24]
 8012b66:	f7ff fc65 	bl	8012434 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d002      	beq.n	8012b7c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	490d      	ldr	r1, [pc, #52]	; (8012bb4 <f_mount+0x88>)
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d002      	beq.n	8012b92 <f_mount+0x66>
 8012b8c:	79fb      	ldrb	r3, [r7, #7]
 8012b8e:	2b01      	cmp	r3, #1
 8012b90:	d001      	beq.n	8012b96 <f_mount+0x6a>
 8012b92:	2300      	movs	r3, #0
 8012b94:	e00a      	b.n	8012bac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012b96:	f107 010c 	add.w	r1, r7, #12
 8012b9a:	f107 0308 	add.w	r3, r7, #8
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7ff fd77 	bl	8012694 <find_volume>
 8012ba6:	4603      	mov	r3, r0
 8012ba8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bac:	4618      	mov	r0, r3
 8012bae:	3720      	adds	r7, #32
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	24000674 	.word	0x24000674

08012bb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b087      	sub	sp, #28
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	4613      	mov	r3, r2
 8012bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012bce:	4b1f      	ldr	r3, [pc, #124]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012bd0:	7a5b      	ldrb	r3, [r3, #9]
 8012bd2:	b2db      	uxtb	r3, r3
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d131      	bne.n	8012c3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012bd8:	4b1c      	ldr	r3, [pc, #112]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012bda:	7a5b      	ldrb	r3, [r3, #9]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	461a      	mov	r2, r3
 8012be0:	4b1a      	ldr	r3, [pc, #104]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012be2:	2100      	movs	r1, #0
 8012be4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012be6:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012be8:	7a5b      	ldrb	r3, [r3, #9]
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	4a17      	ldr	r2, [pc, #92]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012bee:	009b      	lsls	r3, r3, #2
 8012bf0:	4413      	add	r3, r2
 8012bf2:	68fa      	ldr	r2, [r7, #12]
 8012bf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012bf6:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012bf8:	7a5b      	ldrb	r3, [r3, #9]
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	4b13      	ldr	r3, [pc, #76]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012c00:	4413      	add	r3, r2
 8012c02:	79fa      	ldrb	r2, [r7, #7]
 8012c04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c06:	4b11      	ldr	r3, [pc, #68]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012c08:	7a5b      	ldrb	r3, [r3, #9]
 8012c0a:	b2db      	uxtb	r3, r3
 8012c0c:	1c5a      	adds	r2, r3, #1
 8012c0e:	b2d1      	uxtb	r1, r2
 8012c10:	4a0e      	ldr	r2, [pc, #56]	; (8012c4c <FATFS_LinkDriverEx+0x94>)
 8012c12:	7251      	strb	r1, [r2, #9]
 8012c14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c16:	7dbb      	ldrb	r3, [r7, #22]
 8012c18:	3330      	adds	r3, #48	; 0x30
 8012c1a:	b2da      	uxtb	r2, r3
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c20:	68bb      	ldr	r3, [r7, #8]
 8012c22:	3301      	adds	r3, #1
 8012c24:	223a      	movs	r2, #58	; 0x3a
 8012c26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	3302      	adds	r3, #2
 8012c2c:	222f      	movs	r2, #47	; 0x2f
 8012c2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	3303      	adds	r3, #3
 8012c34:	2200      	movs	r2, #0
 8012c36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	371c      	adds	r7, #28
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr
 8012c4a:	bf00      	nop
 8012c4c:	2400069c 	.word	0x2400069c

08012c50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b082      	sub	sp, #8
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
 8012c58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	6839      	ldr	r1, [r7, #0]
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f7ff ffaa 	bl	8012bb8 <FATFS_LinkDriverEx>
 8012c64:	4603      	mov	r3, r0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3708      	adds	r7, #8
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012c6e:	b480      	push	{r7}
 8012c70:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8012c72:	bf00      	nop
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c82:	f3ef 8305 	mrs	r3, IPSR
 8012c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d10f      	bne.n	8012cae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8012c92:	607b      	str	r3, [r7, #4]
  return(result);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d105      	bne.n	8012ca6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8012c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d007      	beq.n	8012cb6 <osKernelInitialize+0x3a>
 8012ca6:	4b0e      	ldr	r3, [pc, #56]	; (8012ce0 <osKernelInitialize+0x64>)
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b02      	cmp	r3, #2
 8012cac:	d103      	bne.n	8012cb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8012cae:	f06f 0305 	mvn.w	r3, #5
 8012cb2:	60fb      	str	r3, [r7, #12]
 8012cb4:	e00c      	b.n	8012cd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012cb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ce0 <osKernelInitialize+0x64>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d105      	bne.n	8012cca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012cbe:	4b08      	ldr	r3, [pc, #32]	; (8012ce0 <osKernelInitialize+0x64>)
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	60fb      	str	r3, [r7, #12]
 8012cc8:	e002      	b.n	8012cd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8012cca:	f04f 33ff 	mov.w	r3, #4294967295
 8012cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012cd0:	68fb      	ldr	r3, [r7, #12]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3714      	adds	r7, #20
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	240006a8 	.word	0x240006a8

08012ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b084      	sub	sp, #16
 8012ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cea:	f3ef 8305 	mrs	r3, IPSR
 8012cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8012cf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d10f      	bne.n	8012d16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8012cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d105      	bne.n	8012d0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d02:	f3ef 8311 	mrs	r3, BASEPRI
 8012d06:	603b      	str	r3, [r7, #0]
  return(result);
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d007      	beq.n	8012d1e <osKernelStart+0x3a>
 8012d0e:	4b0f      	ldr	r3, [pc, #60]	; (8012d4c <osKernelStart+0x68>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2b02      	cmp	r3, #2
 8012d14:	d103      	bne.n	8012d1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8012d16:	f06f 0305 	mvn.w	r3, #5
 8012d1a:	60fb      	str	r3, [r7, #12]
 8012d1c:	e010      	b.n	8012d40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012d1e:	4b0b      	ldr	r3, [pc, #44]	; (8012d4c <osKernelStart+0x68>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d109      	bne.n	8012d3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012d26:	f7ff ffa2 	bl	8012c6e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012d2a:	4b08      	ldr	r3, [pc, #32]	; (8012d4c <osKernelStart+0x68>)
 8012d2c:	2202      	movs	r2, #2
 8012d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012d30:	f001 f870 	bl	8013e14 <vTaskStartScheduler>
      stat = osOK;
 8012d34:	2300      	movs	r3, #0
 8012d36:	60fb      	str	r3, [r7, #12]
 8012d38:	e002      	b.n	8012d40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8012d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8012d40:	68fb      	ldr	r3, [r7, #12]
}
 8012d42:	4618      	mov	r0, r3
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
 8012d4a:	bf00      	nop
 8012d4c:	240006a8 	.word	0x240006a8

08012d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b090      	sub	sp, #64	; 0x40
 8012d54:	af04      	add	r7, sp, #16
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d60:	f3ef 8305 	mrs	r3, IPSR
 8012d64:	61fb      	str	r3, [r7, #28]
  return(result);
 8012d66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f040 808f 	bne.w	8012e8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8012d72:	61bb      	str	r3, [r7, #24]
  return(result);
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d105      	bne.n	8012d86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8012d7e:	617b      	str	r3, [r7, #20]
  return(result);
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d003      	beq.n	8012d8e <osThreadNew+0x3e>
 8012d86:	4b44      	ldr	r3, [pc, #272]	; (8012e98 <osThreadNew+0x148>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d07e      	beq.n	8012e8c <osThreadNew+0x13c>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d07b      	beq.n	8012e8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8012d94:	2380      	movs	r3, #128	; 0x80
 8012d96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8012d98:	2318      	movs	r3, #24
 8012d9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8012da0:	f04f 33ff 	mov.w	r3, #4294967295
 8012da4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d045      	beq.n	8012e38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <osThreadNew+0x6a>
        name = attr->name;
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	699b      	ldr	r3, [r3, #24]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d002      	beq.n	8012dc8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	699b      	ldr	r3, [r3, #24]
 8012dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d008      	beq.n	8012de0 <osThreadNew+0x90>
 8012dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dd0:	2b38      	cmp	r3, #56	; 0x38
 8012dd2:	d805      	bhi.n	8012de0 <osThreadNew+0x90>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	f003 0301 	and.w	r3, r3, #1
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d001      	beq.n	8012de4 <osThreadNew+0x94>
        return (NULL);
 8012de0:	2300      	movs	r3, #0
 8012de2:	e054      	b.n	8012e8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	695b      	ldr	r3, [r3, #20]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d003      	beq.n	8012df4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	695b      	ldr	r3, [r3, #20]
 8012df0:	089b      	lsrs	r3, r3, #2
 8012df2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	689b      	ldr	r3, [r3, #8]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d00e      	beq.n	8012e1a <osThreadNew+0xca>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	2b5b      	cmp	r3, #91	; 0x5b
 8012e02:	d90a      	bls.n	8012e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d006      	beq.n	8012e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	695b      	ldr	r3, [r3, #20]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d002      	beq.n	8012e1a <osThreadNew+0xca>
        mem = 1;
 8012e14:	2301      	movs	r3, #1
 8012e16:	623b      	str	r3, [r7, #32]
 8012e18:	e010      	b.n	8012e3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	689b      	ldr	r3, [r3, #8]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d10c      	bne.n	8012e3c <osThreadNew+0xec>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d108      	bne.n	8012e3c <osThreadNew+0xec>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	691b      	ldr	r3, [r3, #16]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d104      	bne.n	8012e3c <osThreadNew+0xec>
          mem = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	623b      	str	r3, [r7, #32]
 8012e36:	e001      	b.n	8012e3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8012e3c:	6a3b      	ldr	r3, [r7, #32]
 8012e3e:	2b01      	cmp	r3, #1
 8012e40:	d110      	bne.n	8012e64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8012e46:	687a      	ldr	r2, [r7, #4]
 8012e48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012e4a:	9202      	str	r2, [sp, #8]
 8012e4c:	9301      	str	r3, [sp, #4]
 8012e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e50:	9300      	str	r3, [sp, #0]
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e58:	68f8      	ldr	r0, [r7, #12]
 8012e5a:	f000 fe09 	bl	8013a70 <xTaskCreateStatic>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	613b      	str	r3, [r7, #16]
 8012e62:	e013      	b.n	8012e8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8012e64:	6a3b      	ldr	r3, [r7, #32]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d110      	bne.n	8012e8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	f107 0310 	add.w	r3, r7, #16
 8012e72:	9301      	str	r3, [sp, #4]
 8012e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	68bb      	ldr	r3, [r7, #8]
 8012e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e7c:	68f8      	ldr	r0, [r7, #12]
 8012e7e:	f000 fe51 	bl	8013b24 <xTaskCreate>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b01      	cmp	r3, #1
 8012e86:	d001      	beq.n	8012e8c <osThreadNew+0x13c>
          hTask = NULL;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012e8c:	693b      	ldr	r3, [r7, #16]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3730      	adds	r7, #48	; 0x30
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	240006a8 	.word	0x240006a8

08012e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b086      	sub	sp, #24
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ea4:	f3ef 8305 	mrs	r3, IPSR
 8012ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8012eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10f      	bne.n	8012ed0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8012eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d105      	bne.n	8012ec8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8012ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8012ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d007      	beq.n	8012ed8 <osDelay+0x3c>
 8012ec8:	4b0a      	ldr	r3, [pc, #40]	; (8012ef4 <osDelay+0x58>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b02      	cmp	r3, #2
 8012ece:	d103      	bne.n	8012ed8 <osDelay+0x3c>
    stat = osErrorISR;
 8012ed0:	f06f 0305 	mvn.w	r3, #5
 8012ed4:	617b      	str	r3, [r7, #20]
 8012ed6:	e007      	b.n	8012ee8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d002      	beq.n	8012ee8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f000 ff62 	bl	8013dac <vTaskDelay>
    }
  }

  return (stat);
 8012ee8:	697b      	ldr	r3, [r7, #20]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3718      	adds	r7, #24
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	240006a8 	.word	0x240006a8

08012ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012ef8:	b480      	push	{r7}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	60f8      	str	r0, [r7, #12]
 8012f00:	60b9      	str	r1, [r7, #8]
 8012f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	4a07      	ldr	r2, [pc, #28]	; (8012f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8012f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	4a06      	ldr	r2, [pc, #24]	; (8012f28 <vApplicationGetIdleTaskMemory+0x30>)
 8012f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2280      	movs	r2, #128	; 0x80
 8012f14:	601a      	str	r2, [r3, #0]
}
 8012f16:	bf00      	nop
 8012f18:	3714      	adds	r7, #20
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f20:	4770      	bx	lr
 8012f22:	bf00      	nop
 8012f24:	240006ac 	.word	0x240006ac
 8012f28:	24000708 	.word	0x24000708

08012f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012f2c:	b480      	push	{r7}
 8012f2e:	b085      	sub	sp, #20
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	60f8      	str	r0, [r7, #12]
 8012f34:	60b9      	str	r1, [r7, #8]
 8012f36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	4a07      	ldr	r2, [pc, #28]	; (8012f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8012f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	4a06      	ldr	r2, [pc, #24]	; (8012f5c <vApplicationGetTimerTaskMemory+0x30>)
 8012f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012f4a:	601a      	str	r2, [r3, #0]
}
 8012f4c:	bf00      	nop
 8012f4e:	3714      	adds	r7, #20
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr
 8012f58:	24000908 	.word	0x24000908
 8012f5c:	24000964 	.word	0x24000964

08012f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012f60:	b480      	push	{r7}
 8012f62:	b083      	sub	sp, #12
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f103 0208 	add.w	r2, r3, #8
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f04f 32ff 	mov.w	r2, #4294967295
 8012f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f103 0208 	add.w	r2, r3, #8
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f103 0208 	add.w	r2, r3, #8
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	2200      	movs	r2, #0
 8012f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012f94:	bf00      	nop
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2200      	movs	r2, #0
 8012fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012fae:	bf00      	nop
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	68fa      	ldr	r2, [r7, #12]
 8012fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	689a      	ldr	r2, [r3, #8]
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	683a      	ldr	r2, [r7, #0]
 8012fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	683a      	ldr	r2, [r7, #0]
 8012fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	687a      	ldr	r2, [r7, #4]
 8012fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	1c5a      	adds	r2, r3, #1
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	601a      	str	r2, [r3, #0]
}
 8012ff6:	bf00      	nop
 8012ff8:	3714      	adds	r7, #20
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr

08013002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013002:	b480      	push	{r7}
 8013004:	b085      	sub	sp, #20
 8013006:	af00      	add	r7, sp, #0
 8013008:	6078      	str	r0, [r7, #4]
 801300a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013012:	68bb      	ldr	r3, [r7, #8]
 8013014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013018:	d103      	bne.n	8013022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	691b      	ldr	r3, [r3, #16]
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	e00c      	b.n	801303c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	3308      	adds	r3, #8
 8013026:	60fb      	str	r3, [r7, #12]
 8013028:	e002      	b.n	8013030 <vListInsert+0x2e>
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	60fb      	str	r3, [r7, #12]
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	68ba      	ldr	r2, [r7, #8]
 8013038:	429a      	cmp	r2, r3
 801303a:	d2f6      	bcs.n	801302a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	685a      	ldr	r2, [r3, #4]
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013044:	683b      	ldr	r3, [r7, #0]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	683a      	ldr	r2, [r7, #0]
 801304a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801304c:	683b      	ldr	r3, [r7, #0]
 801304e:	68fa      	ldr	r2, [r7, #12]
 8013050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	683a      	ldr	r2, [r7, #0]
 8013056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	687a      	ldr	r2, [r7, #4]
 801305c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	1c5a      	adds	r2, r3, #1
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	601a      	str	r2, [r3, #0]
}
 8013068:	bf00      	nop
 801306a:	3714      	adds	r7, #20
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr

08013074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013074:	b480      	push	{r7}
 8013076:	b085      	sub	sp, #20
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	685b      	ldr	r3, [r3, #4]
 8013086:	687a      	ldr	r2, [r7, #4]
 8013088:	6892      	ldr	r2, [r2, #8]
 801308a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	689b      	ldr	r3, [r3, #8]
 8013090:	687a      	ldr	r2, [r7, #4]
 8013092:	6852      	ldr	r2, [r2, #4]
 8013094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	685b      	ldr	r3, [r3, #4]
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	429a      	cmp	r2, r3
 801309e:	d103      	bne.n	80130a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	689a      	ldr	r2, [r3, #8]
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	1e5a      	subs	r2, r3, #1
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	681b      	ldr	r3, [r3, #0]
}
 80130bc:	4618      	mov	r0, r3
 80130be:	3714      	adds	r7, #20
 80130c0:	46bd      	mov	sp, r7
 80130c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c6:	4770      	bx	lr

080130c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d109      	bne.n	80130f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80130dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e0:	f383 8811 	msr	BASEPRI, r3
 80130e4:	f3bf 8f6f 	isb	sy
 80130e8:	f3bf 8f4f 	dsb	sy
 80130ec:	60bb      	str	r3, [r7, #8]
 80130ee:	e7fe      	b.n	80130ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80130f0:	f002 f814 	bl	801511c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013100:	fb01 f303 	mul.w	r3, r1, r3
 8013104:	441a      	add	r2, r3
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	2200      	movs	r2, #0
 801310e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681a      	ldr	r2, [r3, #0]
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013120:	3b01      	subs	r3, #1
 8013122:	68f9      	ldr	r1, [r7, #12]
 8013124:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013126:	fb01 f303 	mul.w	r3, r1, r3
 801312a:	441a      	add	r2, r3
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	22ff      	movs	r2, #255	; 0xff
 8013134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	22ff      	movs	r2, #255	; 0xff
 801313c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d114      	bne.n	8013170 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	691b      	ldr	r3, [r3, #16]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d01a      	beq.n	8013184 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	3310      	adds	r3, #16
 8013152:	4618      	mov	r0, r3
 8013154:	f001 f8de 	bl	8014314 <xTaskRemoveFromEventList>
 8013158:	4603      	mov	r3, r0
 801315a:	2b00      	cmp	r3, #0
 801315c:	d012      	beq.n	8013184 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801315e:	4b0d      	ldr	r3, [pc, #52]	; (8013194 <xQueueGenericReset+0xcc>)
 8013160:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013164:	601a      	str	r2, [r3, #0]
 8013166:	f3bf 8f4f 	dsb	sy
 801316a:	f3bf 8f6f 	isb	sy
 801316e:	e009      	b.n	8013184 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	3310      	adds	r3, #16
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff fef3 	bl	8012f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3324      	adds	r3, #36	; 0x24
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff feee 	bl	8012f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013184:	f001 fff8 	bl	8015178 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013188:	2301      	movs	r3, #1
}
 801318a:	4618      	mov	r0, r3
 801318c:	3710      	adds	r7, #16
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
 8013192:	bf00      	nop
 8013194:	e000ed04 	.word	0xe000ed04

08013198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013198:	b580      	push	{r7, lr}
 801319a:	b08e      	sub	sp, #56	; 0x38
 801319c:	af02      	add	r7, sp, #8
 801319e:	60f8      	str	r0, [r7, #12]
 80131a0:	60b9      	str	r1, [r7, #8]
 80131a2:	607a      	str	r2, [r7, #4]
 80131a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d109      	bne.n	80131c0 <xQueueGenericCreateStatic+0x28>
 80131ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b0:	f383 8811 	msr	BASEPRI, r3
 80131b4:	f3bf 8f6f 	isb	sy
 80131b8:	f3bf 8f4f 	dsb	sy
 80131bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80131be:	e7fe      	b.n	80131be <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d109      	bne.n	80131da <xQueueGenericCreateStatic+0x42>
 80131c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ca:	f383 8811 	msr	BASEPRI, r3
 80131ce:	f3bf 8f6f 	isb	sy
 80131d2:	f3bf 8f4f 	dsb	sy
 80131d6:	627b      	str	r3, [r7, #36]	; 0x24
 80131d8:	e7fe      	b.n	80131d8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d002      	beq.n	80131e6 <xQueueGenericCreateStatic+0x4e>
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <xQueueGenericCreateStatic+0x52>
 80131e6:	2301      	movs	r3, #1
 80131e8:	e000      	b.n	80131ec <xQueueGenericCreateStatic+0x54>
 80131ea:	2300      	movs	r3, #0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d109      	bne.n	8013204 <xQueueGenericCreateStatic+0x6c>
 80131f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	623b      	str	r3, [r7, #32]
 8013202:	e7fe      	b.n	8013202 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d102      	bne.n	8013210 <xQueueGenericCreateStatic+0x78>
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d101      	bne.n	8013214 <xQueueGenericCreateStatic+0x7c>
 8013210:	2301      	movs	r3, #1
 8013212:	e000      	b.n	8013216 <xQueueGenericCreateStatic+0x7e>
 8013214:	2300      	movs	r3, #0
 8013216:	2b00      	cmp	r3, #0
 8013218:	d109      	bne.n	801322e <xQueueGenericCreateStatic+0x96>
 801321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801321e:	f383 8811 	msr	BASEPRI, r3
 8013222:	f3bf 8f6f 	isb	sy
 8013226:	f3bf 8f4f 	dsb	sy
 801322a:	61fb      	str	r3, [r7, #28]
 801322c:	e7fe      	b.n	801322c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801322e:	2350      	movs	r3, #80	; 0x50
 8013230:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2b50      	cmp	r3, #80	; 0x50
 8013236:	d009      	beq.n	801324c <xQueueGenericCreateStatic+0xb4>
 8013238:	f04f 0350 	mov.w	r3, #80	; 0x50
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	61bb      	str	r3, [r7, #24]
 801324a:	e7fe      	b.n	801324a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801324c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	2b00      	cmp	r3, #0
 8013256:	d00d      	beq.n	8013274 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325a:	2201      	movs	r2, #1
 801325c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013260:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	9300      	str	r3, [sp, #0]
 8013268:	4613      	mov	r3, r2
 801326a:	687a      	ldr	r2, [r7, #4]
 801326c:	68b9      	ldr	r1, [r7, #8]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f000 f805 	bl	801327e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013276:	4618      	mov	r0, r3
 8013278:	3730      	adds	r7, #48	; 0x30
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}

0801327e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b084      	sub	sp, #16
 8013282:	af00      	add	r7, sp, #0
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	60b9      	str	r1, [r7, #8]
 8013288:	607a      	str	r2, [r7, #4]
 801328a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d103      	bne.n	801329a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013292:	69bb      	ldr	r3, [r7, #24]
 8013294:	69ba      	ldr	r2, [r7, #24]
 8013296:	601a      	str	r2, [r3, #0]
 8013298:	e002      	b.n	80132a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	687a      	ldr	r2, [r7, #4]
 801329e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80132a0:	69bb      	ldr	r3, [r7, #24]
 80132a2:	68fa      	ldr	r2, [r7, #12]
 80132a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	68ba      	ldr	r2, [r7, #8]
 80132aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80132ac:	2101      	movs	r1, #1
 80132ae:	69b8      	ldr	r0, [r7, #24]
 80132b0:	f7ff ff0a 	bl	80130c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	78fa      	ldrb	r2, [r7, #3]
 80132b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80132bc:	bf00      	nop
 80132be:	3710      	adds	r7, #16
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08e      	sub	sp, #56	; 0x38
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80132d2:	2300      	movs	r3, #0
 80132d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80132da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d109      	bne.n	80132f4 <xQueueGenericSend+0x30>
 80132e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132e4:	f383 8811 	msr	BASEPRI, r3
 80132e8:	f3bf 8f6f 	isb	sy
 80132ec:	f3bf 8f4f 	dsb	sy
 80132f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80132f2:	e7fe      	b.n	80132f2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d103      	bne.n	8013302 <xQueueGenericSend+0x3e>
 80132fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d101      	bne.n	8013306 <xQueueGenericSend+0x42>
 8013302:	2301      	movs	r3, #1
 8013304:	e000      	b.n	8013308 <xQueueGenericSend+0x44>
 8013306:	2300      	movs	r3, #0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d109      	bne.n	8013320 <xQueueGenericSend+0x5c>
 801330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013310:	f383 8811 	msr	BASEPRI, r3
 8013314:	f3bf 8f6f 	isb	sy
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	627b      	str	r3, [r7, #36]	; 0x24
 801331e:	e7fe      	b.n	801331e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	2b02      	cmp	r3, #2
 8013324:	d103      	bne.n	801332e <xQueueGenericSend+0x6a>
 8013326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801332a:	2b01      	cmp	r3, #1
 801332c:	d101      	bne.n	8013332 <xQueueGenericSend+0x6e>
 801332e:	2301      	movs	r3, #1
 8013330:	e000      	b.n	8013334 <xQueueGenericSend+0x70>
 8013332:	2300      	movs	r3, #0
 8013334:	2b00      	cmp	r3, #0
 8013336:	d109      	bne.n	801334c <xQueueGenericSend+0x88>
 8013338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333c:	f383 8811 	msr	BASEPRI, r3
 8013340:	f3bf 8f6f 	isb	sy
 8013344:	f3bf 8f4f 	dsb	sy
 8013348:	623b      	str	r3, [r7, #32]
 801334a:	e7fe      	b.n	801334a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801334c:	f001 f998 	bl	8014680 <xTaskGetSchedulerState>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d102      	bne.n	801335c <xQueueGenericSend+0x98>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d101      	bne.n	8013360 <xQueueGenericSend+0x9c>
 801335c:	2301      	movs	r3, #1
 801335e:	e000      	b.n	8013362 <xQueueGenericSend+0x9e>
 8013360:	2300      	movs	r3, #0
 8013362:	2b00      	cmp	r3, #0
 8013364:	d109      	bne.n	801337a <xQueueGenericSend+0xb6>
 8013366:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336a:	f383 8811 	msr	BASEPRI, r3
 801336e:	f3bf 8f6f 	isb	sy
 8013372:	f3bf 8f4f 	dsb	sy
 8013376:	61fb      	str	r3, [r7, #28]
 8013378:	e7fe      	b.n	8013378 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801337a:	f001 fecf 	bl	801511c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013386:	429a      	cmp	r2, r3
 8013388:	d302      	bcc.n	8013390 <xQueueGenericSend+0xcc>
 801338a:	683b      	ldr	r3, [r7, #0]
 801338c:	2b02      	cmp	r3, #2
 801338e:	d129      	bne.n	80133e4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013390:	683a      	ldr	r2, [r7, #0]
 8013392:	68b9      	ldr	r1, [r7, #8]
 8013394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013396:	f000 f9ff 	bl	8013798 <prvCopyDataToQueue>
 801339a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d010      	beq.n	80133c6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80133a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a6:	3324      	adds	r3, #36	; 0x24
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 ffb3 	bl	8014314 <xTaskRemoveFromEventList>
 80133ae:	4603      	mov	r3, r0
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d013      	beq.n	80133dc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80133b4:	4b3f      	ldr	r3, [pc, #252]	; (80134b4 <xQueueGenericSend+0x1f0>)
 80133b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133ba:	601a      	str	r2, [r3, #0]
 80133bc:	f3bf 8f4f 	dsb	sy
 80133c0:	f3bf 8f6f 	isb	sy
 80133c4:	e00a      	b.n	80133dc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80133c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d007      	beq.n	80133dc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80133cc:	4b39      	ldr	r3, [pc, #228]	; (80134b4 <xQueueGenericSend+0x1f0>)
 80133ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133d2:	601a      	str	r2, [r3, #0]
 80133d4:	f3bf 8f4f 	dsb	sy
 80133d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80133dc:	f001 fecc 	bl	8015178 <vPortExitCritical>
				return pdPASS;
 80133e0:	2301      	movs	r3, #1
 80133e2:	e063      	b.n	80134ac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d103      	bne.n	80133f2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80133ea:	f001 fec5 	bl	8015178 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e05c      	b.n	80134ac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80133f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d106      	bne.n	8013406 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80133f8:	f107 0314 	add.w	r3, r7, #20
 80133fc:	4618      	mov	r0, r3
 80133fe:	f000 ffeb 	bl	80143d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013402:	2301      	movs	r3, #1
 8013404:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013406:	f001 feb7 	bl	8015178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801340a:	f000 fd67 	bl	8013edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801340e:	f001 fe85 	bl	801511c <vPortEnterCritical>
 8013412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013418:	b25b      	sxtb	r3, r3
 801341a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801341e:	d103      	bne.n	8013428 <xQueueGenericSend+0x164>
 8013420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013422:	2200      	movs	r2, #0
 8013424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801342e:	b25b      	sxtb	r3, r3
 8013430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013434:	d103      	bne.n	801343e <xQueueGenericSend+0x17a>
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	2200      	movs	r2, #0
 801343a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801343e:	f001 fe9b 	bl	8015178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013442:	1d3a      	adds	r2, r7, #4
 8013444:	f107 0314 	add.w	r3, r7, #20
 8013448:	4611      	mov	r1, r2
 801344a:	4618      	mov	r0, r3
 801344c:	f000 ffda 	bl	8014404 <xTaskCheckForTimeOut>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d124      	bne.n	80134a0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013458:	f000 fa96 	bl	8013988 <prvIsQueueFull>
 801345c:	4603      	mov	r3, r0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d018      	beq.n	8013494 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	3310      	adds	r3, #16
 8013466:	687a      	ldr	r2, [r7, #4]
 8013468:	4611      	mov	r1, r2
 801346a:	4618      	mov	r0, r3
 801346c:	f000 ff04 	bl	8014278 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013472:	f000 fa21 	bl	80138b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013476:	f000 fd3f 	bl	8013ef8 <xTaskResumeAll>
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	f47f af7c 	bne.w	801337a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8013482:	4b0c      	ldr	r3, [pc, #48]	; (80134b4 <xQueueGenericSend+0x1f0>)
 8013484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013488:	601a      	str	r2, [r3, #0]
 801348a:	f3bf 8f4f 	dsb	sy
 801348e:	f3bf 8f6f 	isb	sy
 8013492:	e772      	b.n	801337a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013496:	f000 fa0f 	bl	80138b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801349a:	f000 fd2d 	bl	8013ef8 <xTaskResumeAll>
 801349e:	e76c      	b.n	801337a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80134a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a2:	f000 fa09 	bl	80138b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80134a6:	f000 fd27 	bl	8013ef8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80134aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3738      	adds	r7, #56	; 0x38
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	e000ed04 	.word	0xe000ed04

080134b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b08e      	sub	sp, #56	; 0x38
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d109      	bne.n	80134e4 <xQueueGenericSendFromISR+0x2c>
 80134d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d4:	f383 8811 	msr	BASEPRI, r3
 80134d8:	f3bf 8f6f 	isb	sy
 80134dc:	f3bf 8f4f 	dsb	sy
 80134e0:	627b      	str	r3, [r7, #36]	; 0x24
 80134e2:	e7fe      	b.n	80134e2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80134e4:	68bb      	ldr	r3, [r7, #8]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d103      	bne.n	80134f2 <xQueueGenericSendFromISR+0x3a>
 80134ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d101      	bne.n	80134f6 <xQueueGenericSendFromISR+0x3e>
 80134f2:	2301      	movs	r3, #1
 80134f4:	e000      	b.n	80134f8 <xQueueGenericSendFromISR+0x40>
 80134f6:	2300      	movs	r3, #0
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d109      	bne.n	8013510 <xQueueGenericSendFromISR+0x58>
 80134fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013500:	f383 8811 	msr	BASEPRI, r3
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	f3bf 8f4f 	dsb	sy
 801350c:	623b      	str	r3, [r7, #32]
 801350e:	e7fe      	b.n	801350e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	2b02      	cmp	r3, #2
 8013514:	d103      	bne.n	801351e <xQueueGenericSendFromISR+0x66>
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801351a:	2b01      	cmp	r3, #1
 801351c:	d101      	bne.n	8013522 <xQueueGenericSendFromISR+0x6a>
 801351e:	2301      	movs	r3, #1
 8013520:	e000      	b.n	8013524 <xQueueGenericSendFromISR+0x6c>
 8013522:	2300      	movs	r3, #0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d109      	bne.n	801353c <xQueueGenericSendFromISR+0x84>
 8013528:	f04f 0350 	mov.w	r3, #80	; 0x50
 801352c:	f383 8811 	msr	BASEPRI, r3
 8013530:	f3bf 8f6f 	isb	sy
 8013534:	f3bf 8f4f 	dsb	sy
 8013538:	61fb      	str	r3, [r7, #28]
 801353a:	e7fe      	b.n	801353a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801353c:	f001 feca 	bl	80152d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013540:	f3ef 8211 	mrs	r2, BASEPRI
 8013544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013548:	f383 8811 	msr	BASEPRI, r3
 801354c:	f3bf 8f6f 	isb	sy
 8013550:	f3bf 8f4f 	dsb	sy
 8013554:	61ba      	str	r2, [r7, #24]
 8013556:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013558:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801355a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801355e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013564:	429a      	cmp	r2, r3
 8013566:	d302      	bcc.n	801356e <xQueueGenericSendFromISR+0xb6>
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	2b02      	cmp	r3, #2
 801356c:	d12c      	bne.n	80135c8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013578:	683a      	ldr	r2, [r7, #0]
 801357a:	68b9      	ldr	r1, [r7, #8]
 801357c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801357e:	f000 f90b 	bl	8013798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013582:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013586:	f1b3 3fff 	cmp.w	r3, #4294967295
 801358a:	d112      	bne.n	80135b2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013590:	2b00      	cmp	r3, #0
 8013592:	d016      	beq.n	80135c2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013596:	3324      	adds	r3, #36	; 0x24
 8013598:	4618      	mov	r0, r3
 801359a:	f000 febb 	bl	8014314 <xTaskRemoveFromEventList>
 801359e:	4603      	mov	r3, r0
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d00e      	beq.n	80135c2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00b      	beq.n	80135c2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	2201      	movs	r2, #1
 80135ae:	601a      	str	r2, [r3, #0]
 80135b0:	e007      	b.n	80135c2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80135b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80135b6:	3301      	adds	r3, #1
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	b25a      	sxtb	r2, r3
 80135bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80135c2:	2301      	movs	r3, #1
 80135c4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80135c6:	e001      	b.n	80135cc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80135c8:	2300      	movs	r3, #0
 80135ca:	637b      	str	r3, [r7, #52]	; 0x34
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80135d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80135d8:	4618      	mov	r0, r3
 80135da:	3738      	adds	r7, #56	; 0x38
 80135dc:	46bd      	mov	sp, r7
 80135de:	bd80      	pop	{r7, pc}

080135e0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b08c      	sub	sp, #48	; 0x30
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	60f8      	str	r0, [r7, #12]
 80135e8:	60b9      	str	r1, [r7, #8]
 80135ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80135ec:	2300      	movs	r3, #0
 80135ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80135f0:	68fb      	ldr	r3, [r7, #12]
 80135f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80135f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d109      	bne.n	801360e <xQueueReceive+0x2e>
	__asm volatile
 80135fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fe:	f383 8811 	msr	BASEPRI, r3
 8013602:	f3bf 8f6f 	isb	sy
 8013606:	f3bf 8f4f 	dsb	sy
 801360a:	623b      	str	r3, [r7, #32]
 801360c:	e7fe      	b.n	801360c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	2b00      	cmp	r3, #0
 8013612:	d103      	bne.n	801361c <xQueueReceive+0x3c>
 8013614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013618:	2b00      	cmp	r3, #0
 801361a:	d101      	bne.n	8013620 <xQueueReceive+0x40>
 801361c:	2301      	movs	r3, #1
 801361e:	e000      	b.n	8013622 <xQueueReceive+0x42>
 8013620:	2300      	movs	r3, #0
 8013622:	2b00      	cmp	r3, #0
 8013624:	d109      	bne.n	801363a <xQueueReceive+0x5a>
 8013626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362a:	f383 8811 	msr	BASEPRI, r3
 801362e:	f3bf 8f6f 	isb	sy
 8013632:	f3bf 8f4f 	dsb	sy
 8013636:	61fb      	str	r3, [r7, #28]
 8013638:	e7fe      	b.n	8013638 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801363a:	f001 f821 	bl	8014680 <xTaskGetSchedulerState>
 801363e:	4603      	mov	r3, r0
 8013640:	2b00      	cmp	r3, #0
 8013642:	d102      	bne.n	801364a <xQueueReceive+0x6a>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d101      	bne.n	801364e <xQueueReceive+0x6e>
 801364a:	2301      	movs	r3, #1
 801364c:	e000      	b.n	8013650 <xQueueReceive+0x70>
 801364e:	2300      	movs	r3, #0
 8013650:	2b00      	cmp	r3, #0
 8013652:	d109      	bne.n	8013668 <xQueueReceive+0x88>
 8013654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013658:	f383 8811 	msr	BASEPRI, r3
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f3bf 8f4f 	dsb	sy
 8013664:	61bb      	str	r3, [r7, #24]
 8013666:	e7fe      	b.n	8013666 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013668:	f001 fd58 	bl	801511c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013670:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013674:	2b00      	cmp	r3, #0
 8013676:	d01f      	beq.n	80136b8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013678:	68b9      	ldr	r1, [r7, #8]
 801367a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801367c:	f000 f8f6 	bl	801386c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013682:	1e5a      	subs	r2, r3, #1
 8013684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013686:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	691b      	ldr	r3, [r3, #16]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d00f      	beq.n	80136b0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013692:	3310      	adds	r3, #16
 8013694:	4618      	mov	r0, r3
 8013696:	f000 fe3d 	bl	8014314 <xTaskRemoveFromEventList>
 801369a:	4603      	mov	r3, r0
 801369c:	2b00      	cmp	r3, #0
 801369e:	d007      	beq.n	80136b0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80136a0:	4b3c      	ldr	r3, [pc, #240]	; (8013794 <xQueueReceive+0x1b4>)
 80136a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136a6:	601a      	str	r2, [r3, #0]
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80136b0:	f001 fd62 	bl	8015178 <vPortExitCritical>
				return pdPASS;
 80136b4:	2301      	movs	r3, #1
 80136b6:	e069      	b.n	801378c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d103      	bne.n	80136c6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80136be:	f001 fd5b 	bl	8015178 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80136c2:	2300      	movs	r3, #0
 80136c4:	e062      	b.n	801378c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80136c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d106      	bne.n	80136da <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80136cc:	f107 0310 	add.w	r3, r7, #16
 80136d0:	4618      	mov	r0, r3
 80136d2:	f000 fe81 	bl	80143d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80136d6:	2301      	movs	r3, #1
 80136d8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80136da:	f001 fd4d 	bl	8015178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80136de:	f000 fbfd 	bl	8013edc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80136e2:	f001 fd1b 	bl	801511c <vPortEnterCritical>
 80136e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80136ec:	b25b      	sxtb	r3, r3
 80136ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136f2:	d103      	bne.n	80136fc <xQueueReceive+0x11c>
 80136f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f6:	2200      	movs	r2, #0
 80136f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80136fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013702:	b25b      	sxtb	r3, r3
 8013704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013708:	d103      	bne.n	8013712 <xQueueReceive+0x132>
 801370a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370c:	2200      	movs	r2, #0
 801370e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013712:	f001 fd31 	bl	8015178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013716:	1d3a      	adds	r2, r7, #4
 8013718:	f107 0310 	add.w	r3, r7, #16
 801371c:	4611      	mov	r1, r2
 801371e:	4618      	mov	r0, r3
 8013720:	f000 fe70 	bl	8014404 <xTaskCheckForTimeOut>
 8013724:	4603      	mov	r3, r0
 8013726:	2b00      	cmp	r3, #0
 8013728:	d123      	bne.n	8013772 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801372a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801372c:	f000 f916 	bl	801395c <prvIsQueueEmpty>
 8013730:	4603      	mov	r3, r0
 8013732:	2b00      	cmp	r3, #0
 8013734:	d017      	beq.n	8013766 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013738:	3324      	adds	r3, #36	; 0x24
 801373a:	687a      	ldr	r2, [r7, #4]
 801373c:	4611      	mov	r1, r2
 801373e:	4618      	mov	r0, r3
 8013740:	f000 fd9a 	bl	8014278 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013746:	f000 f8b7 	bl	80138b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801374a:	f000 fbd5 	bl	8013ef8 <xTaskResumeAll>
 801374e:	4603      	mov	r3, r0
 8013750:	2b00      	cmp	r3, #0
 8013752:	d189      	bne.n	8013668 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8013754:	4b0f      	ldr	r3, [pc, #60]	; (8013794 <xQueueReceive+0x1b4>)
 8013756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801375a:	601a      	str	r2, [r3, #0]
 801375c:	f3bf 8f4f 	dsb	sy
 8013760:	f3bf 8f6f 	isb	sy
 8013764:	e780      	b.n	8013668 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013766:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013768:	f000 f8a6 	bl	80138b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801376c:	f000 fbc4 	bl	8013ef8 <xTaskResumeAll>
 8013770:	e77a      	b.n	8013668 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013772:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013774:	f000 f8a0 	bl	80138b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013778:	f000 fbbe 	bl	8013ef8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801377c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801377e:	f000 f8ed 	bl	801395c <prvIsQueueEmpty>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	f43f af6f 	beq.w	8013668 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801378a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801378c:	4618      	mov	r0, r3
 801378e:	3730      	adds	r7, #48	; 0x30
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}
 8013794:	e000ed04 	.word	0xe000ed04

08013798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b086      	sub	sp, #24
 801379c:	af00      	add	r7, sp, #0
 801379e:	60f8      	str	r0, [r7, #12]
 80137a0:	60b9      	str	r1, [r7, #8]
 80137a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80137a4:	2300      	movs	r3, #0
 80137a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d10d      	bne.n	80137d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d14d      	bne.n	801385a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	689b      	ldr	r3, [r3, #8]
 80137c2:	4618      	mov	r0, r3
 80137c4:	f000 ff7a 	bl	80146bc <xTaskPriorityDisinherit>
 80137c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2200      	movs	r2, #0
 80137ce:	609a      	str	r2, [r3, #8]
 80137d0:	e043      	b.n	801385a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d119      	bne.n	801380c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6858      	ldr	r0, [r3, #4]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137e0:	461a      	mov	r2, r3
 80137e2:	68b9      	ldr	r1, [r7, #8]
 80137e4:	f002 fce0 	bl	80161a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	685a      	ldr	r2, [r3, #4]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137f0:	441a      	add	r2, r3
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	685a      	ldr	r2, [r3, #4]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	689b      	ldr	r3, [r3, #8]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d32b      	bcc.n	801385a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	681a      	ldr	r2, [r3, #0]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	605a      	str	r2, [r3, #4]
 801380a:	e026      	b.n	801385a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	68d8      	ldr	r0, [r3, #12]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013814:	461a      	mov	r2, r3
 8013816:	68b9      	ldr	r1, [r7, #8]
 8013818:	f002 fcc6 	bl	80161a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	68da      	ldr	r2, [r3, #12]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013824:	425b      	negs	r3, r3
 8013826:	441a      	add	r2, r3
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	68da      	ldr	r2, [r3, #12]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	429a      	cmp	r2, r3
 8013836:	d207      	bcs.n	8013848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	689a      	ldr	r2, [r3, #8]
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013840:	425b      	negs	r3, r3
 8013842:	441a      	add	r2, r3
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	2b02      	cmp	r3, #2
 801384c:	d105      	bne.n	801385a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801384e:	693b      	ldr	r3, [r7, #16]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d002      	beq.n	801385a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	3b01      	subs	r3, #1
 8013858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	1c5a      	adds	r2, r3, #1
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013862:	697b      	ldr	r3, [r7, #20]
}
 8013864:	4618      	mov	r0, r3
 8013866:	3718      	adds	r7, #24
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}

0801386c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801387a:	2b00      	cmp	r3, #0
 801387c:	d018      	beq.n	80138b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	68da      	ldr	r2, [r3, #12]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013886:	441a      	add	r2, r3
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	68da      	ldr	r2, [r3, #12]
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	689b      	ldr	r3, [r3, #8]
 8013894:	429a      	cmp	r2, r3
 8013896:	d303      	bcc.n	80138a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681a      	ldr	r2, [r3, #0]
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	68d9      	ldr	r1, [r3, #12]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138a8:	461a      	mov	r2, r3
 80138aa:	6838      	ldr	r0, [r7, #0]
 80138ac:	f002 fc7c 	bl	80161a8 <memcpy>
	}
}
 80138b0:	bf00      	nop
 80138b2:	3708      	adds	r7, #8
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80138c0:	f001 fc2c 	bl	801511c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80138ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138cc:	e011      	b.n	80138f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d012      	beq.n	80138fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	3324      	adds	r3, #36	; 0x24
 80138da:	4618      	mov	r0, r3
 80138dc:	f000 fd1a 	bl	8014314 <xTaskRemoveFromEventList>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d001      	beq.n	80138ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80138e6:	f000 fded 	bl	80144c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138ea:	7bfb      	ldrb	r3, [r7, #15]
 80138ec:	3b01      	subs	r3, #1
 80138ee:	b2db      	uxtb	r3, r3
 80138f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	dce9      	bgt.n	80138ce <prvUnlockQueue+0x16>
 80138fa:	e000      	b.n	80138fe <prvUnlockQueue+0x46>
					break;
 80138fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	22ff      	movs	r2, #255	; 0xff
 8013902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013906:	f001 fc37 	bl	8015178 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801390a:	f001 fc07 	bl	801511c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013916:	e011      	b.n	801393c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	691b      	ldr	r3, [r3, #16]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d012      	beq.n	8013946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	3310      	adds	r3, #16
 8013924:	4618      	mov	r0, r3
 8013926:	f000 fcf5 	bl	8014314 <xTaskRemoveFromEventList>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d001      	beq.n	8013934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013930:	f000 fdc8 	bl	80144c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013934:	7bbb      	ldrb	r3, [r7, #14]
 8013936:	3b01      	subs	r3, #1
 8013938:	b2db      	uxtb	r3, r3
 801393a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801393c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013940:	2b00      	cmp	r3, #0
 8013942:	dce9      	bgt.n	8013918 <prvUnlockQueue+0x60>
 8013944:	e000      	b.n	8013948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	22ff      	movs	r2, #255	; 0xff
 801394c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013950:	f001 fc12 	bl	8015178 <vPortExitCritical>
}
 8013954:	bf00      	nop
 8013956:	3710      	adds	r7, #16
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}

0801395c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b084      	sub	sp, #16
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013964:	f001 fbda 	bl	801511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801396c:	2b00      	cmp	r3, #0
 801396e:	d102      	bne.n	8013976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013970:	2301      	movs	r3, #1
 8013972:	60fb      	str	r3, [r7, #12]
 8013974:	e001      	b.n	801397a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013976:	2300      	movs	r3, #0
 8013978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801397a:	f001 fbfd 	bl	8015178 <vPortExitCritical>

	return xReturn;
 801397e:	68fb      	ldr	r3, [r7, #12]
}
 8013980:	4618      	mov	r0, r3
 8013982:	3710      	adds	r7, #16
 8013984:	46bd      	mov	sp, r7
 8013986:	bd80      	pop	{r7, pc}

08013988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b084      	sub	sp, #16
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013990:	f001 fbc4 	bl	801511c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801399c:	429a      	cmp	r2, r3
 801399e:	d102      	bne.n	80139a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80139a0:	2301      	movs	r3, #1
 80139a2:	60fb      	str	r3, [r7, #12]
 80139a4:	e001      	b.n	80139aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80139a6:	2300      	movs	r3, #0
 80139a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80139aa:	f001 fbe5 	bl	8015178 <vPortExitCritical>

	return xReturn;
 80139ae:	68fb      	ldr	r3, [r7, #12]
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	3710      	adds	r7, #16
 80139b4:	46bd      	mov	sp, r7
 80139b6:	bd80      	pop	{r7, pc}

080139b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
 80139c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139c2:	2300      	movs	r3, #0
 80139c4:	60fb      	str	r3, [r7, #12]
 80139c6:	e014      	b.n	80139f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80139c8:	4a0e      	ldr	r2, [pc, #56]	; (8013a04 <vQueueAddToRegistry+0x4c>)
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d10b      	bne.n	80139ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80139d4:	490b      	ldr	r1, [pc, #44]	; (8013a04 <vQueueAddToRegistry+0x4c>)
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	683a      	ldr	r2, [r7, #0]
 80139da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80139de:	4a09      	ldr	r2, [pc, #36]	; (8013a04 <vQueueAddToRegistry+0x4c>)
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	00db      	lsls	r3, r3, #3
 80139e4:	4413      	add	r3, r2
 80139e6:	687a      	ldr	r2, [r7, #4]
 80139e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80139ea:	e005      	b.n	80139f8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	3301      	adds	r3, #1
 80139f0:	60fb      	str	r3, [r7, #12]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b07      	cmp	r3, #7
 80139f6:	d9e7      	bls.n	80139c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80139f8:	bf00      	nop
 80139fa:	3714      	adds	r7, #20
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr
 8013a04:	24011aac 	.word	0x24011aac

08013a08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013a08:	b580      	push	{r7, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	60b9      	str	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013a18:	f001 fb80 	bl	801511c <vPortEnterCritical>
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a22:	b25b      	sxtb	r3, r3
 8013a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a28:	d103      	bne.n	8013a32 <vQueueWaitForMessageRestricted+0x2a>
 8013a2a:	697b      	ldr	r3, [r7, #20]
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a38:	b25b      	sxtb	r3, r3
 8013a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a3e:	d103      	bne.n	8013a48 <vQueueWaitForMessageRestricted+0x40>
 8013a40:	697b      	ldr	r3, [r7, #20]
 8013a42:	2200      	movs	r2, #0
 8013a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a48:	f001 fb96 	bl	8015178 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d106      	bne.n	8013a62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	3324      	adds	r3, #36	; 0x24
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	68b9      	ldr	r1, [r7, #8]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f000 fc2f 	bl	80142c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013a62:	6978      	ldr	r0, [r7, #20]
 8013a64:	f7ff ff28 	bl	80138b8 <prvUnlockQueue>
	}
 8013a68:	bf00      	nop
 8013a6a:	3718      	adds	r7, #24
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	bd80      	pop	{r7, pc}

08013a70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b08e      	sub	sp, #56	; 0x38
 8013a74:	af04      	add	r7, sp, #16
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	607a      	str	r2, [r7, #4]
 8013a7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d109      	bne.n	8013a98 <xTaskCreateStatic+0x28>
 8013a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a88:	f383 8811 	msr	BASEPRI, r3
 8013a8c:	f3bf 8f6f 	isb	sy
 8013a90:	f3bf 8f4f 	dsb	sy
 8013a94:	623b      	str	r3, [r7, #32]
 8013a96:	e7fe      	b.n	8013a96 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8013a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d109      	bne.n	8013ab2 <xTaskCreateStatic+0x42>
 8013a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa2:	f383 8811 	msr	BASEPRI, r3
 8013aa6:	f3bf 8f6f 	isb	sy
 8013aaa:	f3bf 8f4f 	dsb	sy
 8013aae:	61fb      	str	r3, [r7, #28]
 8013ab0:	e7fe      	b.n	8013ab0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013ab2:	235c      	movs	r3, #92	; 0x5c
 8013ab4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013ab6:	693b      	ldr	r3, [r7, #16]
 8013ab8:	2b5c      	cmp	r3, #92	; 0x5c
 8013aba:	d009      	beq.n	8013ad0 <xTaskCreateStatic+0x60>
 8013abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac0:	f383 8811 	msr	BASEPRI, r3
 8013ac4:	f3bf 8f6f 	isb	sy
 8013ac8:	f3bf 8f4f 	dsb	sy
 8013acc:	61bb      	str	r3, [r7, #24]
 8013ace:	e7fe      	b.n	8013ace <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013ad0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d01e      	beq.n	8013b16 <xTaskCreateStatic+0xa6>
 8013ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d01b      	beq.n	8013b16 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ae6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aea:	2202      	movs	r2, #2
 8013aec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013af0:	2300      	movs	r3, #0
 8013af2:	9303      	str	r3, [sp, #12]
 8013af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af6:	9302      	str	r3, [sp, #8]
 8013af8:	f107 0314 	add.w	r3, r7, #20
 8013afc:	9301      	str	r3, [sp, #4]
 8013afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b00:	9300      	str	r3, [sp, #0]
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	68b9      	ldr	r1, [r7, #8]
 8013b08:	68f8      	ldr	r0, [r7, #12]
 8013b0a:	f000 f850 	bl	8013bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b10:	f000 f8dc 	bl	8013ccc <prvAddNewTaskToReadyList>
 8013b14:	e001      	b.n	8013b1a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013b1a:	697b      	ldr	r3, [r7, #20]
	}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3728      	adds	r7, #40	; 0x28
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}

08013b24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b08c      	sub	sp, #48	; 0x30
 8013b28:	af04      	add	r7, sp, #16
 8013b2a:	60f8      	str	r0, [r7, #12]
 8013b2c:	60b9      	str	r1, [r7, #8]
 8013b2e:	603b      	str	r3, [r7, #0]
 8013b30:	4613      	mov	r3, r2
 8013b32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013b34:	88fb      	ldrh	r3, [r7, #6]
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	4618      	mov	r0, r3
 8013b3a:	f001 fc09 	bl	8015350 <pvPortMalloc>
 8013b3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00e      	beq.n	8013b64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013b46:	205c      	movs	r0, #92	; 0x5c
 8013b48:	f001 fc02 	bl	8015350 <pvPortMalloc>
 8013b4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013b4e:	69fb      	ldr	r3, [r7, #28]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d003      	beq.n	8013b5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	697a      	ldr	r2, [r7, #20]
 8013b58:	631a      	str	r2, [r3, #48]	; 0x30
 8013b5a:	e005      	b.n	8013b68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013b5c:	6978      	ldr	r0, [r7, #20]
 8013b5e:	f001 fcb9 	bl	80154d4 <vPortFree>
 8013b62:	e001      	b.n	8013b68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013b64:	2300      	movs	r3, #0
 8013b66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d017      	beq.n	8013b9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	2200      	movs	r2, #0
 8013b72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013b76:	88fa      	ldrh	r2, [r7, #6]
 8013b78:	2300      	movs	r3, #0
 8013b7a:	9303      	str	r3, [sp, #12]
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	9302      	str	r3, [sp, #8]
 8013b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b82:	9301      	str	r3, [sp, #4]
 8013b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b86:	9300      	str	r3, [sp, #0]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	68b9      	ldr	r1, [r7, #8]
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f000 f80e 	bl	8013bae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b92:	69f8      	ldr	r0, [r7, #28]
 8013b94:	f000 f89a 	bl	8013ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013b98:	2301      	movs	r3, #1
 8013b9a:	61bb      	str	r3, [r7, #24]
 8013b9c:	e002      	b.n	8013ba4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013ba4:	69bb      	ldr	r3, [r7, #24]
	}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3720      	adds	r7, #32
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}

08013bae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013bae:	b580      	push	{r7, lr}
 8013bb0:	b088      	sub	sp, #32
 8013bb2:	af00      	add	r7, sp, #0
 8013bb4:	60f8      	str	r0, [r7, #12]
 8013bb6:	60b9      	str	r1, [r7, #8]
 8013bb8:	607a      	str	r2, [r7, #4]
 8013bba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	461a      	mov	r2, r3
 8013bc6:	21a5      	movs	r1, #165	; 0xa5
 8013bc8:	f002 fb12 	bl	80161f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bd0:	6879      	ldr	r1, [r7, #4]
 8013bd2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013bd6:	440b      	add	r3, r1
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	4413      	add	r3, r2
 8013bdc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013bde:	69bb      	ldr	r3, [r7, #24]
 8013be0:	f023 0307 	bic.w	r3, r3, #7
 8013be4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013be6:	69bb      	ldr	r3, [r7, #24]
 8013be8:	f003 0307 	and.w	r3, r3, #7
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d009      	beq.n	8013c04 <prvInitialiseNewTask+0x56>
 8013bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	617b      	str	r3, [r7, #20]
 8013c02:	e7fe      	b.n	8013c02 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d01f      	beq.n	8013c4a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	61fb      	str	r3, [r7, #28]
 8013c0e:	e012      	b.n	8013c36 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013c10:	68ba      	ldr	r2, [r7, #8]
 8013c12:	69fb      	ldr	r3, [r7, #28]
 8013c14:	4413      	add	r3, r2
 8013c16:	7819      	ldrb	r1, [r3, #0]
 8013c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c1a:	69fb      	ldr	r3, [r7, #28]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	3334      	adds	r3, #52	; 0x34
 8013c20:	460a      	mov	r2, r1
 8013c22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	4413      	add	r3, r2
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d006      	beq.n	8013c3e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013c30:	69fb      	ldr	r3, [r7, #28]
 8013c32:	3301      	adds	r3, #1
 8013c34:	61fb      	str	r3, [r7, #28]
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	2b0f      	cmp	r3, #15
 8013c3a:	d9e9      	bls.n	8013c10 <prvInitialiseNewTask+0x62>
 8013c3c:	e000      	b.n	8013c40 <prvInitialiseNewTask+0x92>
			{
				break;
 8013c3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	2200      	movs	r2, #0
 8013c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013c48:	e003      	b.n	8013c52 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c54:	2b37      	cmp	r3, #55	; 0x37
 8013c56:	d901      	bls.n	8013c5c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013c58:	2337      	movs	r3, #55	; 0x37
 8013c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013c66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c70:	3304      	adds	r3, #4
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7ff f994 	bl	8012fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7a:	3318      	adds	r3, #24
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff f98f 	bl	8012fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	68f9      	ldr	r1, [r7, #12]
 8013caa:	69b8      	ldr	r0, [r7, #24]
 8013cac:	f001 f90c 	bl	8014ec8 <pxPortInitialiseStack>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d002      	beq.n	8013cc2 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013cc2:	bf00      	nop
 8013cc4:	3720      	adds	r7, #32
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bd80      	pop	{r7, pc}
	...

08013ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b082      	sub	sp, #8
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013cd4:	f001 fa22 	bl	801511c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013cd8:	4b2d      	ldr	r3, [pc, #180]	; (8013d90 <prvAddNewTaskToReadyList+0xc4>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	4a2c      	ldr	r2, [pc, #176]	; (8013d90 <prvAddNewTaskToReadyList+0xc4>)
 8013ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ce2:	4b2c      	ldr	r3, [pc, #176]	; (8013d94 <prvAddNewTaskToReadyList+0xc8>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d109      	bne.n	8013cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013cea:	4a2a      	ldr	r2, [pc, #168]	; (8013d94 <prvAddNewTaskToReadyList+0xc8>)
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013cf0:	4b27      	ldr	r3, [pc, #156]	; (8013d90 <prvAddNewTaskToReadyList+0xc4>)
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b01      	cmp	r3, #1
 8013cf6:	d110      	bne.n	8013d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013cf8:	f000 fc08 	bl	801450c <prvInitialiseTaskLists>
 8013cfc:	e00d      	b.n	8013d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013cfe:	4b26      	ldr	r3, [pc, #152]	; (8013d98 <prvAddNewTaskToReadyList+0xcc>)
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d109      	bne.n	8013d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013d06:	4b23      	ldr	r3, [pc, #140]	; (8013d94 <prvAddNewTaskToReadyList+0xc8>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d802      	bhi.n	8013d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013d14:	4a1f      	ldr	r2, [pc, #124]	; (8013d94 <prvAddNewTaskToReadyList+0xc8>)
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013d1a:	4b20      	ldr	r3, [pc, #128]	; (8013d9c <prvAddNewTaskToReadyList+0xd0>)
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	3301      	adds	r3, #1
 8013d20:	4a1e      	ldr	r2, [pc, #120]	; (8013d9c <prvAddNewTaskToReadyList+0xd0>)
 8013d22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013d24:	4b1d      	ldr	r3, [pc, #116]	; (8013d9c <prvAddNewTaskToReadyList+0xd0>)
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d30:	4b1b      	ldr	r3, [pc, #108]	; (8013da0 <prvAddNewTaskToReadyList+0xd4>)
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	429a      	cmp	r2, r3
 8013d36:	d903      	bls.n	8013d40 <prvAddNewTaskToReadyList+0x74>
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d3c:	4a18      	ldr	r2, [pc, #96]	; (8013da0 <prvAddNewTaskToReadyList+0xd4>)
 8013d3e:	6013      	str	r3, [r2, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d44:	4613      	mov	r3, r2
 8013d46:	009b      	lsls	r3, r3, #2
 8013d48:	4413      	add	r3, r2
 8013d4a:	009b      	lsls	r3, r3, #2
 8013d4c:	4a15      	ldr	r2, [pc, #84]	; (8013da4 <prvAddNewTaskToReadyList+0xd8>)
 8013d4e:	441a      	add	r2, r3
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	3304      	adds	r3, #4
 8013d54:	4619      	mov	r1, r3
 8013d56:	4610      	mov	r0, r2
 8013d58:	f7ff f92f 	bl	8012fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013d5c:	f001 fa0c 	bl	8015178 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013d60:	4b0d      	ldr	r3, [pc, #52]	; (8013d98 <prvAddNewTaskToReadyList+0xcc>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d00e      	beq.n	8013d86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d68:	4b0a      	ldr	r3, [pc, #40]	; (8013d94 <prvAddNewTaskToReadyList+0xc8>)
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d72:	429a      	cmp	r2, r3
 8013d74:	d207      	bcs.n	8013d86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013d76:	4b0c      	ldr	r3, [pc, #48]	; (8013da8 <prvAddNewTaskToReadyList+0xdc>)
 8013d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d7c:	601a      	str	r2, [r3, #0]
 8013d7e:	f3bf 8f4f 	dsb	sy
 8013d82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d86:	bf00      	nop
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	24001238 	.word	0x24001238
 8013d94:	24000d64 	.word	0x24000d64
 8013d98:	24001244 	.word	0x24001244
 8013d9c:	24001254 	.word	0x24001254
 8013da0:	24001240 	.word	0x24001240
 8013da4:	24000d68 	.word	0x24000d68
 8013da8:	e000ed04 	.word	0xe000ed04

08013dac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013db4:	2300      	movs	r3, #0
 8013db6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d016      	beq.n	8013dec <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013dbe:	4b13      	ldr	r3, [pc, #76]	; (8013e0c <vTaskDelay+0x60>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d009      	beq.n	8013dda <vTaskDelay+0x2e>
 8013dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dca:	f383 8811 	msr	BASEPRI, r3
 8013dce:	f3bf 8f6f 	isb	sy
 8013dd2:	f3bf 8f4f 	dsb	sy
 8013dd6:	60bb      	str	r3, [r7, #8]
 8013dd8:	e7fe      	b.n	8013dd8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8013dda:	f000 f87f 	bl	8013edc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013dde:	2100      	movs	r1, #0
 8013de0:	6878      	ldr	r0, [r7, #4]
 8013de2:	f000 fcd7 	bl	8014794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013de6:	f000 f887 	bl	8013ef8 <xTaskResumeAll>
 8013dea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d107      	bne.n	8013e02 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8013df2:	4b07      	ldr	r3, [pc, #28]	; (8013e10 <vTaskDelay+0x64>)
 8013df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013df8:	601a      	str	r2, [r3, #0]
 8013dfa:	f3bf 8f4f 	dsb	sy
 8013dfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013e02:	bf00      	nop
 8013e04:	3710      	adds	r7, #16
 8013e06:	46bd      	mov	sp, r7
 8013e08:	bd80      	pop	{r7, pc}
 8013e0a:	bf00      	nop
 8013e0c:	24001260 	.word	0x24001260
 8013e10:	e000ed04 	.word	0xe000ed04

08013e14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b08a      	sub	sp, #40	; 0x28
 8013e18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013e22:	463a      	mov	r2, r7
 8013e24:	1d39      	adds	r1, r7, #4
 8013e26:	f107 0308 	add.w	r3, r7, #8
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7ff f864 	bl	8012ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e30:	6839      	ldr	r1, [r7, #0]
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	68ba      	ldr	r2, [r7, #8]
 8013e36:	9202      	str	r2, [sp, #8]
 8013e38:	9301      	str	r3, [sp, #4]
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	9300      	str	r3, [sp, #0]
 8013e3e:	2300      	movs	r3, #0
 8013e40:	460a      	mov	r2, r1
 8013e42:	4920      	ldr	r1, [pc, #128]	; (8013ec4 <vTaskStartScheduler+0xb0>)
 8013e44:	4820      	ldr	r0, [pc, #128]	; (8013ec8 <vTaskStartScheduler+0xb4>)
 8013e46:	f7ff fe13 	bl	8013a70 <xTaskCreateStatic>
 8013e4a:	4602      	mov	r2, r0
 8013e4c:	4b1f      	ldr	r3, [pc, #124]	; (8013ecc <vTaskStartScheduler+0xb8>)
 8013e4e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e50:	4b1e      	ldr	r3, [pc, #120]	; (8013ecc <vTaskStartScheduler+0xb8>)
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d002      	beq.n	8013e5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e58:	2301      	movs	r3, #1
 8013e5a:	617b      	str	r3, [r7, #20]
 8013e5c:	e001      	b.n	8013e62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d102      	bne.n	8013e6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013e68:	f000 fce8 	bl	801483c <xTimerCreateTimerTask>
 8013e6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	2b01      	cmp	r3, #1
 8013e72:	d115      	bne.n	8013ea0 <vTaskStartScheduler+0x8c>
 8013e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e78:	f383 8811 	msr	BASEPRI, r3
 8013e7c:	f3bf 8f6f 	isb	sy
 8013e80:	f3bf 8f4f 	dsb	sy
 8013e84:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e86:	4b12      	ldr	r3, [pc, #72]	; (8013ed0 <vTaskStartScheduler+0xbc>)
 8013e88:	f04f 32ff 	mov.w	r2, #4294967295
 8013e8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e8e:	4b11      	ldr	r3, [pc, #68]	; (8013ed4 <vTaskStartScheduler+0xc0>)
 8013e90:	2201      	movs	r2, #1
 8013e92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e94:	4b10      	ldr	r3, [pc, #64]	; (8013ed8 <vTaskStartScheduler+0xc4>)
 8013e96:	2200      	movs	r2, #0
 8013e98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e9a:	f001 f8a1 	bl	8014fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e9e:	e00d      	b.n	8013ebc <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ea0:	697b      	ldr	r3, [r7, #20]
 8013ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ea6:	d109      	bne.n	8013ebc <vTaskStartScheduler+0xa8>
 8013ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013eac:	f383 8811 	msr	BASEPRI, r3
 8013eb0:	f3bf 8f6f 	isb	sy
 8013eb4:	f3bf 8f4f 	dsb	sy
 8013eb8:	60fb      	str	r3, [r7, #12]
 8013eba:	e7fe      	b.n	8013eba <vTaskStartScheduler+0xa6>
}
 8013ebc:	bf00      	nop
 8013ebe:	3718      	adds	r7, #24
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	08016618 	.word	0x08016618
 8013ec8:	080144dd 	.word	0x080144dd
 8013ecc:	2400125c 	.word	0x2400125c
 8013ed0:	24001258 	.word	0x24001258
 8013ed4:	24001244 	.word	0x24001244
 8013ed8:	2400123c 	.word	0x2400123c

08013edc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013edc:	b480      	push	{r7}
 8013ede:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ee0:	4b04      	ldr	r3, [pc, #16]	; (8013ef4 <vTaskSuspendAll+0x18>)
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	4a03      	ldr	r2, [pc, #12]	; (8013ef4 <vTaskSuspendAll+0x18>)
 8013ee8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013eea:	bf00      	nop
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr
 8013ef4:	24001260 	.word	0x24001260

08013ef8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013efe:	2300      	movs	r3, #0
 8013f00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013f02:	2300      	movs	r3, #0
 8013f04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013f06:	4b41      	ldr	r3, [pc, #260]	; (801400c <xTaskResumeAll+0x114>)
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d109      	bne.n	8013f22 <xTaskResumeAll+0x2a>
 8013f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f12:	f383 8811 	msr	BASEPRI, r3
 8013f16:	f3bf 8f6f 	isb	sy
 8013f1a:	f3bf 8f4f 	dsb	sy
 8013f1e:	603b      	str	r3, [r7, #0]
 8013f20:	e7fe      	b.n	8013f20 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f22:	f001 f8fb 	bl	801511c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f26:	4b39      	ldr	r3, [pc, #228]	; (801400c <xTaskResumeAll+0x114>)
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	3b01      	subs	r3, #1
 8013f2c:	4a37      	ldr	r2, [pc, #220]	; (801400c <xTaskResumeAll+0x114>)
 8013f2e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f30:	4b36      	ldr	r3, [pc, #216]	; (801400c <xTaskResumeAll+0x114>)
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d162      	bne.n	8013ffe <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f38:	4b35      	ldr	r3, [pc, #212]	; (8014010 <xTaskResumeAll+0x118>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d05e      	beq.n	8013ffe <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f40:	e02f      	b.n	8013fa2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f42:	4b34      	ldr	r3, [pc, #208]	; (8014014 <xTaskResumeAll+0x11c>)
 8013f44:	68db      	ldr	r3, [r3, #12]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	3318      	adds	r3, #24
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7ff f890 	bl	8013074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	3304      	adds	r3, #4
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7ff f88b 	bl	8013074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f62:	4b2d      	ldr	r3, [pc, #180]	; (8014018 <xTaskResumeAll+0x120>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d903      	bls.n	8013f72 <xTaskResumeAll+0x7a>
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f6e:	4a2a      	ldr	r2, [pc, #168]	; (8014018 <xTaskResumeAll+0x120>)
 8013f70:	6013      	str	r3, [r2, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f76:	4613      	mov	r3, r2
 8013f78:	009b      	lsls	r3, r3, #2
 8013f7a:	4413      	add	r3, r2
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	4a27      	ldr	r2, [pc, #156]	; (801401c <xTaskResumeAll+0x124>)
 8013f80:	441a      	add	r2, r3
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	3304      	adds	r3, #4
 8013f86:	4619      	mov	r1, r3
 8013f88:	4610      	mov	r0, r2
 8013f8a:	f7ff f816 	bl	8012fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f92:	4b23      	ldr	r3, [pc, #140]	; (8014020 <xTaskResumeAll+0x128>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d302      	bcc.n	8013fa2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8013f9c:	4b21      	ldr	r3, [pc, #132]	; (8014024 <xTaskResumeAll+0x12c>)
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013fa2:	4b1c      	ldr	r3, [pc, #112]	; (8014014 <xTaskResumeAll+0x11c>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d1cb      	bne.n	8013f42 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d001      	beq.n	8013fb4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013fb0:	f000 fb46 	bl	8014640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013fb4:	4b1c      	ldr	r3, [pc, #112]	; (8014028 <xTaskResumeAll+0x130>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d010      	beq.n	8013fe2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013fc0:	f000 f846 	bl	8014050 <xTaskIncrementTick>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d002      	beq.n	8013fd0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8013fca:	4b16      	ldr	r3, [pc, #88]	; (8014024 <xTaskResumeAll+0x12c>)
 8013fcc:	2201      	movs	r2, #1
 8013fce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d1f1      	bne.n	8013fc0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8013fdc:	4b12      	ldr	r3, [pc, #72]	; (8014028 <xTaskResumeAll+0x130>)
 8013fde:	2200      	movs	r2, #0
 8013fe0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fe2:	4b10      	ldr	r3, [pc, #64]	; (8014024 <xTaskResumeAll+0x12c>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d009      	beq.n	8013ffe <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fea:	2301      	movs	r3, #1
 8013fec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fee:	4b0f      	ldr	r3, [pc, #60]	; (801402c <xTaskResumeAll+0x134>)
 8013ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ff4:	601a      	str	r2, [r3, #0]
 8013ff6:	f3bf 8f4f 	dsb	sy
 8013ffa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013ffe:	f001 f8bb 	bl	8015178 <vPortExitCritical>

	return xAlreadyYielded;
 8014002:	68bb      	ldr	r3, [r7, #8]
}
 8014004:	4618      	mov	r0, r3
 8014006:	3710      	adds	r7, #16
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}
 801400c:	24001260 	.word	0x24001260
 8014010:	24001238 	.word	0x24001238
 8014014:	240011f8 	.word	0x240011f8
 8014018:	24001240 	.word	0x24001240
 801401c:	24000d68 	.word	0x24000d68
 8014020:	24000d64 	.word	0x24000d64
 8014024:	2400124c 	.word	0x2400124c
 8014028:	24001248 	.word	0x24001248
 801402c:	e000ed04 	.word	0xe000ed04

08014030 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014036:	4b05      	ldr	r3, [pc, #20]	; (801404c <xTaskGetTickCount+0x1c>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801403c:	687b      	ldr	r3, [r7, #4]
}
 801403e:	4618      	mov	r0, r3
 8014040:	370c      	adds	r7, #12
 8014042:	46bd      	mov	sp, r7
 8014044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014048:	4770      	bx	lr
 801404a:	bf00      	nop
 801404c:	2400123c 	.word	0x2400123c

08014050 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b086      	sub	sp, #24
 8014054:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014056:	2300      	movs	r3, #0
 8014058:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801405a:	4b4e      	ldr	r3, [pc, #312]	; (8014194 <xTaskIncrementTick+0x144>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	2b00      	cmp	r3, #0
 8014060:	f040 8088 	bne.w	8014174 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014064:	4b4c      	ldr	r3, [pc, #304]	; (8014198 <xTaskIncrementTick+0x148>)
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	3301      	adds	r3, #1
 801406a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801406c:	4a4a      	ldr	r2, [pc, #296]	; (8014198 <xTaskIncrementTick+0x148>)
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014072:	693b      	ldr	r3, [r7, #16]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d11f      	bne.n	80140b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8014078:	4b48      	ldr	r3, [pc, #288]	; (801419c <xTaskIncrementTick+0x14c>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d009      	beq.n	8014096 <xTaskIncrementTick+0x46>
 8014082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014086:	f383 8811 	msr	BASEPRI, r3
 801408a:	f3bf 8f6f 	isb	sy
 801408e:	f3bf 8f4f 	dsb	sy
 8014092:	603b      	str	r3, [r7, #0]
 8014094:	e7fe      	b.n	8014094 <xTaskIncrementTick+0x44>
 8014096:	4b41      	ldr	r3, [pc, #260]	; (801419c <xTaskIncrementTick+0x14c>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	60fb      	str	r3, [r7, #12]
 801409c:	4b40      	ldr	r3, [pc, #256]	; (80141a0 <xTaskIncrementTick+0x150>)
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	4a3e      	ldr	r2, [pc, #248]	; (801419c <xTaskIncrementTick+0x14c>)
 80140a2:	6013      	str	r3, [r2, #0]
 80140a4:	4a3e      	ldr	r2, [pc, #248]	; (80141a0 <xTaskIncrementTick+0x150>)
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	6013      	str	r3, [r2, #0]
 80140aa:	4b3e      	ldr	r3, [pc, #248]	; (80141a4 <xTaskIncrementTick+0x154>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	3301      	adds	r3, #1
 80140b0:	4a3c      	ldr	r2, [pc, #240]	; (80141a4 <xTaskIncrementTick+0x154>)
 80140b2:	6013      	str	r3, [r2, #0]
 80140b4:	f000 fac4 	bl	8014640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80140b8:	4b3b      	ldr	r3, [pc, #236]	; (80141a8 <xTaskIncrementTick+0x158>)
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	693a      	ldr	r2, [r7, #16]
 80140be:	429a      	cmp	r2, r3
 80140c0:	d349      	bcc.n	8014156 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140c2:	4b36      	ldr	r3, [pc, #216]	; (801419c <xTaskIncrementTick+0x14c>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d104      	bne.n	80140d6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140cc:	4b36      	ldr	r3, [pc, #216]	; (80141a8 <xTaskIncrementTick+0x158>)
 80140ce:	f04f 32ff 	mov.w	r2, #4294967295
 80140d2:	601a      	str	r2, [r3, #0]
					break;
 80140d4:	e03f      	b.n	8014156 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140d6:	4b31      	ldr	r3, [pc, #196]	; (801419c <xTaskIncrementTick+0x14c>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	68db      	ldr	r3, [r3, #12]
 80140de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140e6:	693a      	ldr	r2, [r7, #16]
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	429a      	cmp	r2, r3
 80140ec:	d203      	bcs.n	80140f6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140ee:	4a2e      	ldr	r2, [pc, #184]	; (80141a8 <xTaskIncrementTick+0x158>)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140f4:	e02f      	b.n	8014156 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140f6:	68bb      	ldr	r3, [r7, #8]
 80140f8:	3304      	adds	r3, #4
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7fe ffba 	bl	8013074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014104:	2b00      	cmp	r3, #0
 8014106:	d004      	beq.n	8014112 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	3318      	adds	r3, #24
 801410c:	4618      	mov	r0, r3
 801410e:	f7fe ffb1 	bl	8013074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014116:	4b25      	ldr	r3, [pc, #148]	; (80141ac <xTaskIncrementTick+0x15c>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	429a      	cmp	r2, r3
 801411c:	d903      	bls.n	8014126 <xTaskIncrementTick+0xd6>
 801411e:	68bb      	ldr	r3, [r7, #8]
 8014120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014122:	4a22      	ldr	r2, [pc, #136]	; (80141ac <xTaskIncrementTick+0x15c>)
 8014124:	6013      	str	r3, [r2, #0]
 8014126:	68bb      	ldr	r3, [r7, #8]
 8014128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801412a:	4613      	mov	r3, r2
 801412c:	009b      	lsls	r3, r3, #2
 801412e:	4413      	add	r3, r2
 8014130:	009b      	lsls	r3, r3, #2
 8014132:	4a1f      	ldr	r2, [pc, #124]	; (80141b0 <xTaskIncrementTick+0x160>)
 8014134:	441a      	add	r2, r3
 8014136:	68bb      	ldr	r3, [r7, #8]
 8014138:	3304      	adds	r3, #4
 801413a:	4619      	mov	r1, r3
 801413c:	4610      	mov	r0, r2
 801413e:	f7fe ff3c 	bl	8012fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014146:	4b1b      	ldr	r3, [pc, #108]	; (80141b4 <xTaskIncrementTick+0x164>)
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414c:	429a      	cmp	r2, r3
 801414e:	d3b8      	bcc.n	80140c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8014150:	2301      	movs	r3, #1
 8014152:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014154:	e7b5      	b.n	80140c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014156:	4b17      	ldr	r3, [pc, #92]	; (80141b4 <xTaskIncrementTick+0x164>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801415c:	4914      	ldr	r1, [pc, #80]	; (80141b0 <xTaskIncrementTick+0x160>)
 801415e:	4613      	mov	r3, r2
 8014160:	009b      	lsls	r3, r3, #2
 8014162:	4413      	add	r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	440b      	add	r3, r1
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2b01      	cmp	r3, #1
 801416c:	d907      	bls.n	801417e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801416e:	2301      	movs	r3, #1
 8014170:	617b      	str	r3, [r7, #20]
 8014172:	e004      	b.n	801417e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8014174:	4b10      	ldr	r3, [pc, #64]	; (80141b8 <xTaskIncrementTick+0x168>)
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	3301      	adds	r3, #1
 801417a:	4a0f      	ldr	r2, [pc, #60]	; (80141b8 <xTaskIncrementTick+0x168>)
 801417c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801417e:	4b0f      	ldr	r3, [pc, #60]	; (80141bc <xTaskIncrementTick+0x16c>)
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d001      	beq.n	801418a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8014186:	2301      	movs	r3, #1
 8014188:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801418a:	697b      	ldr	r3, [r7, #20]
}
 801418c:	4618      	mov	r0, r3
 801418e:	3718      	adds	r7, #24
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}
 8014194:	24001260 	.word	0x24001260
 8014198:	2400123c 	.word	0x2400123c
 801419c:	240011f0 	.word	0x240011f0
 80141a0:	240011f4 	.word	0x240011f4
 80141a4:	24001250 	.word	0x24001250
 80141a8:	24001258 	.word	0x24001258
 80141ac:	24001240 	.word	0x24001240
 80141b0:	24000d68 	.word	0x24000d68
 80141b4:	24000d64 	.word	0x24000d64
 80141b8:	24001248 	.word	0x24001248
 80141bc:	2400124c 	.word	0x2400124c

080141c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80141c0:	b480      	push	{r7}
 80141c2:	b085      	sub	sp, #20
 80141c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80141c6:	4b27      	ldr	r3, [pc, #156]	; (8014264 <vTaskSwitchContext+0xa4>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d003      	beq.n	80141d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141ce:	4b26      	ldr	r3, [pc, #152]	; (8014268 <vTaskSwitchContext+0xa8>)
 80141d0:	2201      	movs	r2, #1
 80141d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141d4:	e040      	b.n	8014258 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80141d6:	4b24      	ldr	r3, [pc, #144]	; (8014268 <vTaskSwitchContext+0xa8>)
 80141d8:	2200      	movs	r2, #0
 80141da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141dc:	4b23      	ldr	r3, [pc, #140]	; (801426c <vTaskSwitchContext+0xac>)
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	60fb      	str	r3, [r7, #12]
 80141e2:	e00f      	b.n	8014204 <vTaskSwitchContext+0x44>
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d109      	bne.n	80141fe <vTaskSwitchContext+0x3e>
 80141ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ee:	f383 8811 	msr	BASEPRI, r3
 80141f2:	f3bf 8f6f 	isb	sy
 80141f6:	f3bf 8f4f 	dsb	sy
 80141fa:	607b      	str	r3, [r7, #4]
 80141fc:	e7fe      	b.n	80141fc <vTaskSwitchContext+0x3c>
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	3b01      	subs	r3, #1
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	491a      	ldr	r1, [pc, #104]	; (8014270 <vTaskSwitchContext+0xb0>)
 8014206:	68fa      	ldr	r2, [r7, #12]
 8014208:	4613      	mov	r3, r2
 801420a:	009b      	lsls	r3, r3, #2
 801420c:	4413      	add	r3, r2
 801420e:	009b      	lsls	r3, r3, #2
 8014210:	440b      	add	r3, r1
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	d0e5      	beq.n	80141e4 <vTaskSwitchContext+0x24>
 8014218:	68fa      	ldr	r2, [r7, #12]
 801421a:	4613      	mov	r3, r2
 801421c:	009b      	lsls	r3, r3, #2
 801421e:	4413      	add	r3, r2
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	4a13      	ldr	r2, [pc, #76]	; (8014270 <vTaskSwitchContext+0xb0>)
 8014224:	4413      	add	r3, r2
 8014226:	60bb      	str	r3, [r7, #8]
 8014228:	68bb      	ldr	r3, [r7, #8]
 801422a:	685b      	ldr	r3, [r3, #4]
 801422c:	685a      	ldr	r2, [r3, #4]
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	605a      	str	r2, [r3, #4]
 8014232:	68bb      	ldr	r3, [r7, #8]
 8014234:	685a      	ldr	r2, [r3, #4]
 8014236:	68bb      	ldr	r3, [r7, #8]
 8014238:	3308      	adds	r3, #8
 801423a:	429a      	cmp	r2, r3
 801423c:	d104      	bne.n	8014248 <vTaskSwitchContext+0x88>
 801423e:	68bb      	ldr	r3, [r7, #8]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	685a      	ldr	r2, [r3, #4]
 8014244:	68bb      	ldr	r3, [r7, #8]
 8014246:	605a      	str	r2, [r3, #4]
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	68db      	ldr	r3, [r3, #12]
 801424e:	4a09      	ldr	r2, [pc, #36]	; (8014274 <vTaskSwitchContext+0xb4>)
 8014250:	6013      	str	r3, [r2, #0]
 8014252:	4a06      	ldr	r2, [pc, #24]	; (801426c <vTaskSwitchContext+0xac>)
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6013      	str	r3, [r2, #0]
}
 8014258:	bf00      	nop
 801425a:	3714      	adds	r7, #20
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr
 8014264:	24001260 	.word	0x24001260
 8014268:	2400124c 	.word	0x2400124c
 801426c:	24001240 	.word	0x24001240
 8014270:	24000d68 	.word	0x24000d68
 8014274:	24000d64 	.word	0x24000d64

08014278 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d109      	bne.n	801429c <vTaskPlaceOnEventList+0x24>
 8014288:	f04f 0350 	mov.w	r3, #80	; 0x50
 801428c:	f383 8811 	msr	BASEPRI, r3
 8014290:	f3bf 8f6f 	isb	sy
 8014294:	f3bf 8f4f 	dsb	sy
 8014298:	60fb      	str	r3, [r7, #12]
 801429a:	e7fe      	b.n	801429a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801429c:	4b07      	ldr	r3, [pc, #28]	; (80142bc <vTaskPlaceOnEventList+0x44>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3318      	adds	r3, #24
 80142a2:	4619      	mov	r1, r3
 80142a4:	6878      	ldr	r0, [r7, #4]
 80142a6:	f7fe feac 	bl	8013002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80142aa:	2101      	movs	r1, #1
 80142ac:	6838      	ldr	r0, [r7, #0]
 80142ae:	f000 fa71 	bl	8014794 <prvAddCurrentTaskToDelayedList>
}
 80142b2:	bf00      	nop
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	24000d64 	.word	0x24000d64

080142c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60f8      	str	r0, [r7, #12]
 80142c8:	60b9      	str	r1, [r7, #8]
 80142ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d109      	bne.n	80142e6 <vTaskPlaceOnEventListRestricted+0x26>
 80142d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142d6:	f383 8811 	msr	BASEPRI, r3
 80142da:	f3bf 8f6f 	isb	sy
 80142de:	f3bf 8f4f 	dsb	sy
 80142e2:	617b      	str	r3, [r7, #20]
 80142e4:	e7fe      	b.n	80142e4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142e6:	4b0a      	ldr	r3, [pc, #40]	; (8014310 <vTaskPlaceOnEventListRestricted+0x50>)
 80142e8:	681b      	ldr	r3, [r3, #0]
 80142ea:	3318      	adds	r3, #24
 80142ec:	4619      	mov	r1, r3
 80142ee:	68f8      	ldr	r0, [r7, #12]
 80142f0:	f7fe fe63 	bl	8012fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d002      	beq.n	8014300 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80142fa:	f04f 33ff 	mov.w	r3, #4294967295
 80142fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014300:	6879      	ldr	r1, [r7, #4]
 8014302:	68b8      	ldr	r0, [r7, #8]
 8014304:	f000 fa46 	bl	8014794 <prvAddCurrentTaskToDelayedList>
	}
 8014308:	bf00      	nop
 801430a:	3718      	adds	r7, #24
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	24000d64 	.word	0x24000d64

08014314 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b086      	sub	sp, #24
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	68db      	ldr	r3, [r3, #12]
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014324:	693b      	ldr	r3, [r7, #16]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d109      	bne.n	801433e <xTaskRemoveFromEventList+0x2a>
 801432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801432e:	f383 8811 	msr	BASEPRI, r3
 8014332:	f3bf 8f6f 	isb	sy
 8014336:	f3bf 8f4f 	dsb	sy
 801433a:	60fb      	str	r3, [r7, #12]
 801433c:	e7fe      	b.n	801433c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	3318      	adds	r3, #24
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe fe96 	bl	8013074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014348:	4b1d      	ldr	r3, [pc, #116]	; (80143c0 <xTaskRemoveFromEventList+0xac>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d11d      	bne.n	801438c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	3304      	adds	r3, #4
 8014354:	4618      	mov	r0, r3
 8014356:	f7fe fe8d 	bl	8013074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801435e:	4b19      	ldr	r3, [pc, #100]	; (80143c4 <xTaskRemoveFromEventList+0xb0>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	429a      	cmp	r2, r3
 8014364:	d903      	bls.n	801436e <xTaskRemoveFromEventList+0x5a>
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801436a:	4a16      	ldr	r2, [pc, #88]	; (80143c4 <xTaskRemoveFromEventList+0xb0>)
 801436c:	6013      	str	r3, [r2, #0]
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014372:	4613      	mov	r3, r2
 8014374:	009b      	lsls	r3, r3, #2
 8014376:	4413      	add	r3, r2
 8014378:	009b      	lsls	r3, r3, #2
 801437a:	4a13      	ldr	r2, [pc, #76]	; (80143c8 <xTaskRemoveFromEventList+0xb4>)
 801437c:	441a      	add	r2, r3
 801437e:	693b      	ldr	r3, [r7, #16]
 8014380:	3304      	adds	r3, #4
 8014382:	4619      	mov	r1, r3
 8014384:	4610      	mov	r0, r2
 8014386:	f7fe fe18 	bl	8012fba <vListInsertEnd>
 801438a:	e005      	b.n	8014398 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	3318      	adds	r3, #24
 8014390:	4619      	mov	r1, r3
 8014392:	480e      	ldr	r0, [pc, #56]	; (80143cc <xTaskRemoveFromEventList+0xb8>)
 8014394:	f7fe fe11 	bl	8012fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801439c:	4b0c      	ldr	r3, [pc, #48]	; (80143d0 <xTaskRemoveFromEventList+0xbc>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143a2:	429a      	cmp	r2, r3
 80143a4:	d905      	bls.n	80143b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80143a6:	2301      	movs	r3, #1
 80143a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80143aa:	4b0a      	ldr	r3, [pc, #40]	; (80143d4 <xTaskRemoveFromEventList+0xc0>)
 80143ac:	2201      	movs	r2, #1
 80143ae:	601a      	str	r2, [r3, #0]
 80143b0:	e001      	b.n	80143b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80143b2:	2300      	movs	r3, #0
 80143b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80143b6:	697b      	ldr	r3, [r7, #20]
}
 80143b8:	4618      	mov	r0, r3
 80143ba:	3718      	adds	r7, #24
 80143bc:	46bd      	mov	sp, r7
 80143be:	bd80      	pop	{r7, pc}
 80143c0:	24001260 	.word	0x24001260
 80143c4:	24001240 	.word	0x24001240
 80143c8:	24000d68 	.word	0x24000d68
 80143cc:	240011f8 	.word	0x240011f8
 80143d0:	24000d64 	.word	0x24000d64
 80143d4:	2400124c 	.word	0x2400124c

080143d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80143e0:	4b06      	ldr	r3, [pc, #24]	; (80143fc <vTaskInternalSetTimeOutState+0x24>)
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80143e8:	4b05      	ldr	r3, [pc, #20]	; (8014400 <vTaskInternalSetTimeOutState+0x28>)
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	605a      	str	r2, [r3, #4]
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr
 80143fc:	24001250 	.word	0x24001250
 8014400:	2400123c 	.word	0x2400123c

08014404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b088      	sub	sp, #32
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
 801440c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d109      	bne.n	8014428 <xTaskCheckForTimeOut+0x24>
 8014414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014418:	f383 8811 	msr	BASEPRI, r3
 801441c:	f3bf 8f6f 	isb	sy
 8014420:	f3bf 8f4f 	dsb	sy
 8014424:	613b      	str	r3, [r7, #16]
 8014426:	e7fe      	b.n	8014426 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d109      	bne.n	8014442 <xTaskCheckForTimeOut+0x3e>
 801442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014432:	f383 8811 	msr	BASEPRI, r3
 8014436:	f3bf 8f6f 	isb	sy
 801443a:	f3bf 8f4f 	dsb	sy
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	e7fe      	b.n	8014440 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8014442:	f000 fe6b 	bl	801511c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014446:	4b1d      	ldr	r3, [pc, #116]	; (80144bc <xTaskCheckForTimeOut+0xb8>)
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	69ba      	ldr	r2, [r7, #24]
 8014452:	1ad3      	subs	r3, r2, r3
 8014454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801445e:	d102      	bne.n	8014466 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014460:	2300      	movs	r3, #0
 8014462:	61fb      	str	r3, [r7, #28]
 8014464:	e023      	b.n	80144ae <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681a      	ldr	r2, [r3, #0]
 801446a:	4b15      	ldr	r3, [pc, #84]	; (80144c0 <xTaskCheckForTimeOut+0xbc>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	429a      	cmp	r2, r3
 8014470:	d007      	beq.n	8014482 <xTaskCheckForTimeOut+0x7e>
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	69ba      	ldr	r2, [r7, #24]
 8014478:	429a      	cmp	r2, r3
 801447a:	d302      	bcc.n	8014482 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801447c:	2301      	movs	r3, #1
 801447e:	61fb      	str	r3, [r7, #28]
 8014480:	e015      	b.n	80144ae <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	697a      	ldr	r2, [r7, #20]
 8014488:	429a      	cmp	r2, r3
 801448a:	d20b      	bcs.n	80144a4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	681a      	ldr	r2, [r3, #0]
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	1ad2      	subs	r2, r2, r3
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014498:	6878      	ldr	r0, [r7, #4]
 801449a:	f7ff ff9d 	bl	80143d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801449e:	2300      	movs	r3, #0
 80144a0:	61fb      	str	r3, [r7, #28]
 80144a2:	e004      	b.n	80144ae <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	2200      	movs	r2, #0
 80144a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80144aa:	2301      	movs	r3, #1
 80144ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80144ae:	f000 fe63 	bl	8015178 <vPortExitCritical>

	return xReturn;
 80144b2:	69fb      	ldr	r3, [r7, #28]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3720      	adds	r7, #32
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}
 80144bc:	2400123c 	.word	0x2400123c
 80144c0:	24001250 	.word	0x24001250

080144c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80144c4:	b480      	push	{r7}
 80144c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80144c8:	4b03      	ldr	r3, [pc, #12]	; (80144d8 <vTaskMissedYield+0x14>)
 80144ca:	2201      	movs	r2, #1
 80144cc:	601a      	str	r2, [r3, #0]
}
 80144ce:	bf00      	nop
 80144d0:	46bd      	mov	sp, r7
 80144d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d6:	4770      	bx	lr
 80144d8:	2400124c 	.word	0x2400124c

080144dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144e4:	f000 f852 	bl	801458c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144e8:	4b06      	ldr	r3, [pc, #24]	; (8014504 <prvIdleTask+0x28>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	d9f9      	bls.n	80144e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144f0:	4b05      	ldr	r3, [pc, #20]	; (8014508 <prvIdleTask+0x2c>)
 80144f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144f6:	601a      	str	r2, [r3, #0]
 80144f8:	f3bf 8f4f 	dsb	sy
 80144fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014500:	e7f0      	b.n	80144e4 <prvIdleTask+0x8>
 8014502:	bf00      	nop
 8014504:	24000d68 	.word	0x24000d68
 8014508:	e000ed04 	.word	0xe000ed04

0801450c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b082      	sub	sp, #8
 8014510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014512:	2300      	movs	r3, #0
 8014514:	607b      	str	r3, [r7, #4]
 8014516:	e00c      	b.n	8014532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014518:	687a      	ldr	r2, [r7, #4]
 801451a:	4613      	mov	r3, r2
 801451c:	009b      	lsls	r3, r3, #2
 801451e:	4413      	add	r3, r2
 8014520:	009b      	lsls	r3, r3, #2
 8014522:	4a12      	ldr	r2, [pc, #72]	; (801456c <prvInitialiseTaskLists+0x60>)
 8014524:	4413      	add	r3, r2
 8014526:	4618      	mov	r0, r3
 8014528:	f7fe fd1a 	bl	8012f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	3301      	adds	r3, #1
 8014530:	607b      	str	r3, [r7, #4]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2b37      	cmp	r3, #55	; 0x37
 8014536:	d9ef      	bls.n	8014518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014538:	480d      	ldr	r0, [pc, #52]	; (8014570 <prvInitialiseTaskLists+0x64>)
 801453a:	f7fe fd11 	bl	8012f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801453e:	480d      	ldr	r0, [pc, #52]	; (8014574 <prvInitialiseTaskLists+0x68>)
 8014540:	f7fe fd0e 	bl	8012f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014544:	480c      	ldr	r0, [pc, #48]	; (8014578 <prvInitialiseTaskLists+0x6c>)
 8014546:	f7fe fd0b 	bl	8012f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801454a:	480c      	ldr	r0, [pc, #48]	; (801457c <prvInitialiseTaskLists+0x70>)
 801454c:	f7fe fd08 	bl	8012f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014550:	480b      	ldr	r0, [pc, #44]	; (8014580 <prvInitialiseTaskLists+0x74>)
 8014552:	f7fe fd05 	bl	8012f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014556:	4b0b      	ldr	r3, [pc, #44]	; (8014584 <prvInitialiseTaskLists+0x78>)
 8014558:	4a05      	ldr	r2, [pc, #20]	; (8014570 <prvInitialiseTaskLists+0x64>)
 801455a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801455c:	4b0a      	ldr	r3, [pc, #40]	; (8014588 <prvInitialiseTaskLists+0x7c>)
 801455e:	4a05      	ldr	r2, [pc, #20]	; (8014574 <prvInitialiseTaskLists+0x68>)
 8014560:	601a      	str	r2, [r3, #0]
}
 8014562:	bf00      	nop
 8014564:	3708      	adds	r7, #8
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	24000d68 	.word	0x24000d68
 8014570:	240011c8 	.word	0x240011c8
 8014574:	240011dc 	.word	0x240011dc
 8014578:	240011f8 	.word	0x240011f8
 801457c:	2400120c 	.word	0x2400120c
 8014580:	24001224 	.word	0x24001224
 8014584:	240011f0 	.word	0x240011f0
 8014588:	240011f4 	.word	0x240011f4

0801458c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014592:	e019      	b.n	80145c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014594:	f000 fdc2 	bl	801511c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014598:	4b0f      	ldr	r3, [pc, #60]	; (80145d8 <prvCheckTasksWaitingTermination+0x4c>)
 801459a:	68db      	ldr	r3, [r3, #12]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	3304      	adds	r3, #4
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fe fd65 	bl	8013074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80145aa:	4b0c      	ldr	r3, [pc, #48]	; (80145dc <prvCheckTasksWaitingTermination+0x50>)
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	3b01      	subs	r3, #1
 80145b0:	4a0a      	ldr	r2, [pc, #40]	; (80145dc <prvCheckTasksWaitingTermination+0x50>)
 80145b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80145b4:	4b0a      	ldr	r3, [pc, #40]	; (80145e0 <prvCheckTasksWaitingTermination+0x54>)
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	3b01      	subs	r3, #1
 80145ba:	4a09      	ldr	r2, [pc, #36]	; (80145e0 <prvCheckTasksWaitingTermination+0x54>)
 80145bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80145be:	f000 fddb 	bl	8015178 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f000 f80e 	bl	80145e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145c8:	4b05      	ldr	r3, [pc, #20]	; (80145e0 <prvCheckTasksWaitingTermination+0x54>)
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d1e1      	bne.n	8014594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80145d0:	bf00      	nop
 80145d2:	3708      	adds	r7, #8
 80145d4:	46bd      	mov	sp, r7
 80145d6:	bd80      	pop	{r7, pc}
 80145d8:	2400120c 	.word	0x2400120c
 80145dc:	24001238 	.word	0x24001238
 80145e0:	24001220 	.word	0x24001220

080145e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b084      	sub	sp, #16
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d108      	bne.n	8014608 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145fa:	4618      	mov	r0, r3
 80145fc:	f000 ff6a 	bl	80154d4 <vPortFree>
				vPortFree( pxTCB );
 8014600:	6878      	ldr	r0, [r7, #4]
 8014602:	f000 ff67 	bl	80154d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014606:	e017      	b.n	8014638 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801460e:	2b01      	cmp	r3, #1
 8014610:	d103      	bne.n	801461a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 ff5e 	bl	80154d4 <vPortFree>
	}
 8014618:	e00e      	b.n	8014638 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014620:	2b02      	cmp	r3, #2
 8014622:	d009      	beq.n	8014638 <prvDeleteTCB+0x54>
 8014624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014628:	f383 8811 	msr	BASEPRI, r3
 801462c:	f3bf 8f6f 	isb	sy
 8014630:	f3bf 8f4f 	dsb	sy
 8014634:	60fb      	str	r3, [r7, #12]
 8014636:	e7fe      	b.n	8014636 <prvDeleteTCB+0x52>
	}
 8014638:	bf00      	nop
 801463a:	3710      	adds	r7, #16
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014640:	b480      	push	{r7}
 8014642:	b083      	sub	sp, #12
 8014644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014646:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <prvResetNextTaskUnblockTime+0x38>)
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d104      	bne.n	801465a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014650:	4b0a      	ldr	r3, [pc, #40]	; (801467c <prvResetNextTaskUnblockTime+0x3c>)
 8014652:	f04f 32ff 	mov.w	r2, #4294967295
 8014656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014658:	e008      	b.n	801466c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801465a:	4b07      	ldr	r3, [pc, #28]	; (8014678 <prvResetNextTaskUnblockTime+0x38>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	68db      	ldr	r3, [r3, #12]
 8014662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	685b      	ldr	r3, [r3, #4]
 8014668:	4a04      	ldr	r2, [pc, #16]	; (801467c <prvResetNextTaskUnblockTime+0x3c>)
 801466a:	6013      	str	r3, [r2, #0]
}
 801466c:	bf00      	nop
 801466e:	370c      	adds	r7, #12
 8014670:	46bd      	mov	sp, r7
 8014672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014676:	4770      	bx	lr
 8014678:	240011f0 	.word	0x240011f0
 801467c:	24001258 	.word	0x24001258

08014680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014680:	b480      	push	{r7}
 8014682:	b083      	sub	sp, #12
 8014684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014686:	4b0b      	ldr	r3, [pc, #44]	; (80146b4 <xTaskGetSchedulerState+0x34>)
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d102      	bne.n	8014694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801468e:	2301      	movs	r3, #1
 8014690:	607b      	str	r3, [r7, #4]
 8014692:	e008      	b.n	80146a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014694:	4b08      	ldr	r3, [pc, #32]	; (80146b8 <xTaskGetSchedulerState+0x38>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d102      	bne.n	80146a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801469c:	2302      	movs	r3, #2
 801469e:	607b      	str	r3, [r7, #4]
 80146a0:	e001      	b.n	80146a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80146a2:	2300      	movs	r3, #0
 80146a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80146a6:	687b      	ldr	r3, [r7, #4]
	}
 80146a8:	4618      	mov	r0, r3
 80146aa:	370c      	adds	r7, #12
 80146ac:	46bd      	mov	sp, r7
 80146ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b2:	4770      	bx	lr
 80146b4:	24001244 	.word	0x24001244
 80146b8:	24001260 	.word	0x24001260

080146bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b086      	sub	sp, #24
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80146c8:	2300      	movs	r3, #0
 80146ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d054      	beq.n	801477c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80146d2:	4b2d      	ldr	r3, [pc, #180]	; (8014788 <xTaskPriorityDisinherit+0xcc>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	693a      	ldr	r2, [r7, #16]
 80146d8:	429a      	cmp	r2, r3
 80146da:	d009      	beq.n	80146f0 <xTaskPriorityDisinherit+0x34>
 80146dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146e0:	f383 8811 	msr	BASEPRI, r3
 80146e4:	f3bf 8f6f 	isb	sy
 80146e8:	f3bf 8f4f 	dsb	sy
 80146ec:	60fb      	str	r3, [r7, #12]
 80146ee:	e7fe      	b.n	80146ee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80146f0:	693b      	ldr	r3, [r7, #16]
 80146f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d109      	bne.n	801470c <xTaskPriorityDisinherit+0x50>
 80146f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fc:	f383 8811 	msr	BASEPRI, r3
 8014700:	f3bf 8f6f 	isb	sy
 8014704:	f3bf 8f4f 	dsb	sy
 8014708:	60bb      	str	r3, [r7, #8]
 801470a:	e7fe      	b.n	801470a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014710:	1e5a      	subs	r2, r3, #1
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014716:	693b      	ldr	r3, [r7, #16]
 8014718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801471e:	429a      	cmp	r2, r3
 8014720:	d02c      	beq.n	801477c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014726:	2b00      	cmp	r3, #0
 8014728:	d128      	bne.n	801477c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801472a:	693b      	ldr	r3, [r7, #16]
 801472c:	3304      	adds	r3, #4
 801472e:	4618      	mov	r0, r3
 8014730:	f7fe fca0 	bl	8013074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014738:	693b      	ldr	r3, [r7, #16]
 801473a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801473c:	693b      	ldr	r3, [r7, #16]
 801473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014740:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801474c:	4b0f      	ldr	r3, [pc, #60]	; (801478c <xTaskPriorityDisinherit+0xd0>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	429a      	cmp	r2, r3
 8014752:	d903      	bls.n	801475c <xTaskPriorityDisinherit+0xa0>
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014758:	4a0c      	ldr	r2, [pc, #48]	; (801478c <xTaskPriorityDisinherit+0xd0>)
 801475a:	6013      	str	r3, [r2, #0]
 801475c:	693b      	ldr	r3, [r7, #16]
 801475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014760:	4613      	mov	r3, r2
 8014762:	009b      	lsls	r3, r3, #2
 8014764:	4413      	add	r3, r2
 8014766:	009b      	lsls	r3, r3, #2
 8014768:	4a09      	ldr	r2, [pc, #36]	; (8014790 <xTaskPriorityDisinherit+0xd4>)
 801476a:	441a      	add	r2, r3
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	3304      	adds	r3, #4
 8014770:	4619      	mov	r1, r3
 8014772:	4610      	mov	r0, r2
 8014774:	f7fe fc21 	bl	8012fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014778:	2301      	movs	r3, #1
 801477a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801477c:	697b      	ldr	r3, [r7, #20]
	}
 801477e:	4618      	mov	r0, r3
 8014780:	3718      	adds	r7, #24
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	24000d64 	.word	0x24000d64
 801478c:	24001240 	.word	0x24001240
 8014790:	24000d68 	.word	0x24000d68

08014794 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	b084      	sub	sp, #16
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801479e:	4b21      	ldr	r3, [pc, #132]	; (8014824 <prvAddCurrentTaskToDelayedList+0x90>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80147a4:	4b20      	ldr	r3, [pc, #128]	; (8014828 <prvAddCurrentTaskToDelayedList+0x94>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	3304      	adds	r3, #4
 80147aa:	4618      	mov	r0, r3
 80147ac:	f7fe fc62 	bl	8013074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147b6:	d10a      	bne.n	80147ce <prvAddCurrentTaskToDelayedList+0x3a>
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d007      	beq.n	80147ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147be:	4b1a      	ldr	r3, [pc, #104]	; (8014828 <prvAddCurrentTaskToDelayedList+0x94>)
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	3304      	adds	r3, #4
 80147c4:	4619      	mov	r1, r3
 80147c6:	4819      	ldr	r0, [pc, #100]	; (801482c <prvAddCurrentTaskToDelayedList+0x98>)
 80147c8:	f7fe fbf7 	bl	8012fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80147cc:	e026      	b.n	801481c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	4413      	add	r3, r2
 80147d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80147d6:	4b14      	ldr	r3, [pc, #80]	; (8014828 <prvAddCurrentTaskToDelayedList+0x94>)
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	68ba      	ldr	r2, [r7, #8]
 80147dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	429a      	cmp	r2, r3
 80147e4:	d209      	bcs.n	80147fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147e6:	4b12      	ldr	r3, [pc, #72]	; (8014830 <prvAddCurrentTaskToDelayedList+0x9c>)
 80147e8:	681a      	ldr	r2, [r3, #0]
 80147ea:	4b0f      	ldr	r3, [pc, #60]	; (8014828 <prvAddCurrentTaskToDelayedList+0x94>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	3304      	adds	r3, #4
 80147f0:	4619      	mov	r1, r3
 80147f2:	4610      	mov	r0, r2
 80147f4:	f7fe fc05 	bl	8013002 <vListInsert>
}
 80147f8:	e010      	b.n	801481c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80147fa:	4b0e      	ldr	r3, [pc, #56]	; (8014834 <prvAddCurrentTaskToDelayedList+0xa0>)
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	4b0a      	ldr	r3, [pc, #40]	; (8014828 <prvAddCurrentTaskToDelayedList+0x94>)
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	3304      	adds	r3, #4
 8014804:	4619      	mov	r1, r3
 8014806:	4610      	mov	r0, r2
 8014808:	f7fe fbfb 	bl	8013002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801480c:	4b0a      	ldr	r3, [pc, #40]	; (8014838 <prvAddCurrentTaskToDelayedList+0xa4>)
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	68ba      	ldr	r2, [r7, #8]
 8014812:	429a      	cmp	r2, r3
 8014814:	d202      	bcs.n	801481c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014816:	4a08      	ldr	r2, [pc, #32]	; (8014838 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	6013      	str	r3, [r2, #0]
}
 801481c:	bf00      	nop
 801481e:	3710      	adds	r7, #16
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	2400123c 	.word	0x2400123c
 8014828:	24000d64 	.word	0x24000d64
 801482c:	24001224 	.word	0x24001224
 8014830:	240011f4 	.word	0x240011f4
 8014834:	240011f0 	.word	0x240011f0
 8014838:	24001258 	.word	0x24001258

0801483c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b08a      	sub	sp, #40	; 0x28
 8014840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014842:	2300      	movs	r3, #0
 8014844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014846:	f000 faff 	bl	8014e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801484a:	4b1c      	ldr	r3, [pc, #112]	; (80148bc <xTimerCreateTimerTask+0x80>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d021      	beq.n	8014896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014852:	2300      	movs	r3, #0
 8014854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014856:	2300      	movs	r3, #0
 8014858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801485a:	1d3a      	adds	r2, r7, #4
 801485c:	f107 0108 	add.w	r1, r7, #8
 8014860:	f107 030c 	add.w	r3, r7, #12
 8014864:	4618      	mov	r0, r3
 8014866:	f7fe fb61 	bl	8012f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801486a:	6879      	ldr	r1, [r7, #4]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	9202      	str	r2, [sp, #8]
 8014872:	9301      	str	r3, [sp, #4]
 8014874:	2302      	movs	r3, #2
 8014876:	9300      	str	r3, [sp, #0]
 8014878:	2300      	movs	r3, #0
 801487a:	460a      	mov	r2, r1
 801487c:	4910      	ldr	r1, [pc, #64]	; (80148c0 <xTimerCreateTimerTask+0x84>)
 801487e:	4811      	ldr	r0, [pc, #68]	; (80148c4 <xTimerCreateTimerTask+0x88>)
 8014880:	f7ff f8f6 	bl	8013a70 <xTaskCreateStatic>
 8014884:	4602      	mov	r2, r0
 8014886:	4b10      	ldr	r3, [pc, #64]	; (80148c8 <xTimerCreateTimerTask+0x8c>)
 8014888:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801488a:	4b0f      	ldr	r3, [pc, #60]	; (80148c8 <xTimerCreateTimerTask+0x8c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d001      	beq.n	8014896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014892:	2301      	movs	r3, #1
 8014894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d109      	bne.n	80148b0 <xTimerCreateTimerTask+0x74>
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	f383 8811 	msr	BASEPRI, r3
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	613b      	str	r3, [r7, #16]
 80148ae:	e7fe      	b.n	80148ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80148b0:	697b      	ldr	r3, [r7, #20]
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3718      	adds	r7, #24
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	24001294 	.word	0x24001294
 80148c0:	08016620 	.word	0x08016620
 80148c4:	080149fd 	.word	0x080149fd
 80148c8:	24001298 	.word	0x24001298

080148cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b08a      	sub	sp, #40	; 0x28
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80148da:	2300      	movs	r3, #0
 80148dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d109      	bne.n	80148f8 <xTimerGenericCommand+0x2c>
 80148e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148e8:	f383 8811 	msr	BASEPRI, r3
 80148ec:	f3bf 8f6f 	isb	sy
 80148f0:	f3bf 8f4f 	dsb	sy
 80148f4:	623b      	str	r3, [r7, #32]
 80148f6:	e7fe      	b.n	80148f6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80148f8:	4b19      	ldr	r3, [pc, #100]	; (8014960 <xTimerGenericCommand+0x94>)
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d02a      	beq.n	8014956 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801490c:	68bb      	ldr	r3, [r7, #8]
 801490e:	2b05      	cmp	r3, #5
 8014910:	dc18      	bgt.n	8014944 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014912:	f7ff feb5 	bl	8014680 <xTaskGetSchedulerState>
 8014916:	4603      	mov	r3, r0
 8014918:	2b02      	cmp	r3, #2
 801491a:	d109      	bne.n	8014930 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801491c:	4b10      	ldr	r3, [pc, #64]	; (8014960 <xTimerGenericCommand+0x94>)
 801491e:	6818      	ldr	r0, [r3, #0]
 8014920:	f107 0110 	add.w	r1, r7, #16
 8014924:	2300      	movs	r3, #0
 8014926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014928:	f7fe fccc 	bl	80132c4 <xQueueGenericSend>
 801492c:	6278      	str	r0, [r7, #36]	; 0x24
 801492e:	e012      	b.n	8014956 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014930:	4b0b      	ldr	r3, [pc, #44]	; (8014960 <xTimerGenericCommand+0x94>)
 8014932:	6818      	ldr	r0, [r3, #0]
 8014934:	f107 0110 	add.w	r1, r7, #16
 8014938:	2300      	movs	r3, #0
 801493a:	2200      	movs	r2, #0
 801493c:	f7fe fcc2 	bl	80132c4 <xQueueGenericSend>
 8014940:	6278      	str	r0, [r7, #36]	; 0x24
 8014942:	e008      	b.n	8014956 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014944:	4b06      	ldr	r3, [pc, #24]	; (8014960 <xTimerGenericCommand+0x94>)
 8014946:	6818      	ldr	r0, [r3, #0]
 8014948:	f107 0110 	add.w	r1, r7, #16
 801494c:	2300      	movs	r3, #0
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	f7fe fdb2 	bl	80134b8 <xQueueGenericSendFromISR>
 8014954:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014958:	4618      	mov	r0, r3
 801495a:	3728      	adds	r7, #40	; 0x28
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	24001294 	.word	0x24001294

08014964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014964:	b580      	push	{r7, lr}
 8014966:	b088      	sub	sp, #32
 8014968:	af02      	add	r7, sp, #8
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801496e:	4b22      	ldr	r3, [pc, #136]	; (80149f8 <prvProcessExpiredTimer+0x94>)
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	3304      	adds	r3, #4
 801497c:	4618      	mov	r0, r3
 801497e:	f7fe fb79 	bl	8013074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b00      	cmp	r3, #0
 801498e:	d021      	beq.n	80149d4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014990:	697b      	ldr	r3, [r7, #20]
 8014992:	699a      	ldr	r2, [r3, #24]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	18d1      	adds	r1, r2, r3
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	683a      	ldr	r2, [r7, #0]
 801499c:	6978      	ldr	r0, [r7, #20]
 801499e:	f000 f8d1 	bl	8014b44 <prvInsertTimerInActiveList>
 80149a2:	4603      	mov	r3, r0
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d01e      	beq.n	80149e6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80149a8:	2300      	movs	r3, #0
 80149aa:	9300      	str	r3, [sp, #0]
 80149ac:	2300      	movs	r3, #0
 80149ae:	687a      	ldr	r2, [r7, #4]
 80149b0:	2100      	movs	r1, #0
 80149b2:	6978      	ldr	r0, [r7, #20]
 80149b4:	f7ff ff8a 	bl	80148cc <xTimerGenericCommand>
 80149b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80149ba:	693b      	ldr	r3, [r7, #16]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d112      	bne.n	80149e6 <prvProcessExpiredTimer+0x82>
 80149c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c4:	f383 8811 	msr	BASEPRI, r3
 80149c8:	f3bf 8f6f 	isb	sy
 80149cc:	f3bf 8f4f 	dsb	sy
 80149d0:	60fb      	str	r3, [r7, #12]
 80149d2:	e7fe      	b.n	80149d2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80149da:	f023 0301 	bic.w	r3, r3, #1
 80149de:	b2da      	uxtb	r2, r3
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	6a1b      	ldr	r3, [r3, #32]
 80149ea:	6978      	ldr	r0, [r7, #20]
 80149ec:	4798      	blx	r3
}
 80149ee:	bf00      	nop
 80149f0:	3718      	adds	r7, #24
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	2400128c 	.word	0x2400128c

080149fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b084      	sub	sp, #16
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014a04:	f107 0308 	add.w	r3, r7, #8
 8014a08:	4618      	mov	r0, r3
 8014a0a:	f000 f857 	bl	8014abc <prvGetNextExpireTime>
 8014a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	4619      	mov	r1, r3
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f000 f803 	bl	8014a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014a1a:	f000 f8d5 	bl	8014bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014a1e:	e7f1      	b.n	8014a04 <prvTimerTask+0x8>

08014a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014a2a:	f7ff fa57 	bl	8013edc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014a2e:	f107 0308 	add.w	r3, r7, #8
 8014a32:	4618      	mov	r0, r3
 8014a34:	f000 f866 	bl	8014b04 <prvSampleTimeNow>
 8014a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d130      	bne.n	8014aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10a      	bne.n	8014a5c <prvProcessTimerOrBlockTask+0x3c>
 8014a46:	687a      	ldr	r2, [r7, #4]
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d806      	bhi.n	8014a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014a4e:	f7ff fa53 	bl	8013ef8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014a52:	68f9      	ldr	r1, [r7, #12]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f7ff ff85 	bl	8014964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014a5a:	e024      	b.n	8014aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d008      	beq.n	8014a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014a62:	4b13      	ldr	r3, [pc, #76]	; (8014ab0 <prvProcessTimerOrBlockTask+0x90>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d101      	bne.n	8014a70 <prvProcessTimerOrBlockTask+0x50>
 8014a6c:	2301      	movs	r3, #1
 8014a6e:	e000      	b.n	8014a72 <prvProcessTimerOrBlockTask+0x52>
 8014a70:	2300      	movs	r3, #0
 8014a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014a74:	4b0f      	ldr	r3, [pc, #60]	; (8014ab4 <prvProcessTimerOrBlockTask+0x94>)
 8014a76:	6818      	ldr	r0, [r3, #0]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	683a      	ldr	r2, [r7, #0]
 8014a80:	4619      	mov	r1, r3
 8014a82:	f7fe ffc1 	bl	8013a08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014a86:	f7ff fa37 	bl	8013ef8 <xTaskResumeAll>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d10a      	bne.n	8014aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014a90:	4b09      	ldr	r3, [pc, #36]	; (8014ab8 <prvProcessTimerOrBlockTask+0x98>)
 8014a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a96:	601a      	str	r2, [r3, #0]
 8014a98:	f3bf 8f4f 	dsb	sy
 8014a9c:	f3bf 8f6f 	isb	sy
}
 8014aa0:	e001      	b.n	8014aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014aa2:	f7ff fa29 	bl	8013ef8 <xTaskResumeAll>
}
 8014aa6:	bf00      	nop
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	24001290 	.word	0x24001290
 8014ab4:	24001294 	.word	0x24001294
 8014ab8:	e000ed04 	.word	0xe000ed04

08014abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014abc:	b480      	push	{r7}
 8014abe:	b085      	sub	sp, #20
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014ac4:	4b0e      	ldr	r3, [pc, #56]	; (8014b00 <prvGetNextExpireTime+0x44>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <prvGetNextExpireTime+0x16>
 8014ace:	2201      	movs	r2, #1
 8014ad0:	e000      	b.n	8014ad4 <prvGetNextExpireTime+0x18>
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d105      	bne.n	8014aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014ae0:	4b07      	ldr	r3, [pc, #28]	; (8014b00 <prvGetNextExpireTime+0x44>)
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	68db      	ldr	r3, [r3, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	60fb      	str	r3, [r7, #12]
 8014aea:	e001      	b.n	8014af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014aec:	2300      	movs	r3, #0
 8014aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014af0:	68fb      	ldr	r3, [r7, #12]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3714      	adds	r7, #20
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr
 8014afe:	bf00      	nop
 8014b00:	2400128c 	.word	0x2400128c

08014b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014b0c:	f7ff fa90 	bl	8014030 <xTaskGetTickCount>
 8014b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014b12:	4b0b      	ldr	r3, [pc, #44]	; (8014b40 <prvSampleTimeNow+0x3c>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	68fa      	ldr	r2, [r7, #12]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d205      	bcs.n	8014b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014b1c:	f000 f930 	bl	8014d80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2201      	movs	r2, #1
 8014b24:	601a      	str	r2, [r3, #0]
 8014b26:	e002      	b.n	8014b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014b2e:	4a04      	ldr	r2, [pc, #16]	; (8014b40 <prvSampleTimeNow+0x3c>)
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014b34:	68fb      	ldr	r3, [r7, #12]
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3710      	adds	r7, #16
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	2400129c 	.word	0x2400129c

08014b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014b44:	b580      	push	{r7, lr}
 8014b46:	b086      	sub	sp, #24
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	60b9      	str	r1, [r7, #8]
 8014b4e:	607a      	str	r2, [r7, #4]
 8014b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014b52:	2300      	movs	r3, #0
 8014b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	68ba      	ldr	r2, [r7, #8]
 8014b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	68fa      	ldr	r2, [r7, #12]
 8014b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014b62:	68ba      	ldr	r2, [r7, #8]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d812      	bhi.n	8014b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b6a:	687a      	ldr	r2, [r7, #4]
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	1ad2      	subs	r2, r2, r3
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	429a      	cmp	r2, r3
 8014b76:	d302      	bcc.n	8014b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014b78:	2301      	movs	r3, #1
 8014b7a:	617b      	str	r3, [r7, #20]
 8014b7c:	e01b      	b.n	8014bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014b7e:	4b10      	ldr	r3, [pc, #64]	; (8014bc0 <prvInsertTimerInActiveList+0x7c>)
 8014b80:	681a      	ldr	r2, [r3, #0]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	3304      	adds	r3, #4
 8014b86:	4619      	mov	r1, r3
 8014b88:	4610      	mov	r0, r2
 8014b8a:	f7fe fa3a 	bl	8013002 <vListInsert>
 8014b8e:	e012      	b.n	8014bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014b90:	687a      	ldr	r2, [r7, #4]
 8014b92:	683b      	ldr	r3, [r7, #0]
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d206      	bcs.n	8014ba6 <prvInsertTimerInActiveList+0x62>
 8014b98:	68ba      	ldr	r2, [r7, #8]
 8014b9a:	683b      	ldr	r3, [r7, #0]
 8014b9c:	429a      	cmp	r2, r3
 8014b9e:	d302      	bcc.n	8014ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	617b      	str	r3, [r7, #20]
 8014ba4:	e007      	b.n	8014bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014ba6:	4b07      	ldr	r3, [pc, #28]	; (8014bc4 <prvInsertTimerInActiveList+0x80>)
 8014ba8:	681a      	ldr	r2, [r3, #0]
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	3304      	adds	r3, #4
 8014bae:	4619      	mov	r1, r3
 8014bb0:	4610      	mov	r0, r2
 8014bb2:	f7fe fa26 	bl	8013002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014bb6:	697b      	ldr	r3, [r7, #20]
}
 8014bb8:	4618      	mov	r0, r3
 8014bba:	3718      	adds	r7, #24
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	24001290 	.word	0x24001290
 8014bc4:	2400128c 	.word	0x2400128c

08014bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b08e      	sub	sp, #56	; 0x38
 8014bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014bce:	e0c6      	b.n	8014d5e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	da17      	bge.n	8014c06 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014bd6:	1d3b      	adds	r3, r7, #4
 8014bd8:	3304      	adds	r3, #4
 8014bda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d109      	bne.n	8014bf6 <prvProcessReceivedCommands+0x2e>
 8014be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014be6:	f383 8811 	msr	BASEPRI, r3
 8014bea:	f3bf 8f6f 	isb	sy
 8014bee:	f3bf 8f4f 	dsb	sy
 8014bf2:	61fb      	str	r3, [r7, #28]
 8014bf4:	e7fe      	b.n	8014bf4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bf8:	681b      	ldr	r3, [r3, #0]
 8014bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bfc:	6850      	ldr	r0, [r2, #4]
 8014bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c00:	6892      	ldr	r2, [r2, #8]
 8014c02:	4611      	mov	r1, r2
 8014c04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	f2c0 80a7 	blt.w	8014d5c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c14:	695b      	ldr	r3, [r3, #20]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d004      	beq.n	8014c24 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c1c:	3304      	adds	r3, #4
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fe fa28 	bl	8013074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014c24:	463b      	mov	r3, r7
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7ff ff6c 	bl	8014b04 <prvSampleTimeNow>
 8014c2c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2b09      	cmp	r3, #9
 8014c32:	f200 8094 	bhi.w	8014d5e <prvProcessReceivedCommands+0x196>
 8014c36:	a201      	add	r2, pc, #4	; (adr r2, 8014c3c <prvProcessReceivedCommands+0x74>)
 8014c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c3c:	08014c65 	.word	0x08014c65
 8014c40:	08014c65 	.word	0x08014c65
 8014c44:	08014c65 	.word	0x08014c65
 8014c48:	08014cd7 	.word	0x08014cd7
 8014c4c:	08014ceb 	.word	0x08014ceb
 8014c50:	08014d33 	.word	0x08014d33
 8014c54:	08014c65 	.word	0x08014c65
 8014c58:	08014c65 	.word	0x08014c65
 8014c5c:	08014cd7 	.word	0x08014cd7
 8014c60:	08014ceb 	.word	0x08014ceb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c6a:	f043 0301 	orr.w	r3, r3, #1
 8014c6e:	b2da      	uxtb	r2, r3
 8014c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c7a:	699b      	ldr	r3, [r3, #24]
 8014c7c:	18d1      	adds	r1, r2, r3
 8014c7e:	68bb      	ldr	r3, [r7, #8]
 8014c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014c82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c84:	f7ff ff5e 	bl	8014b44 <prvInsertTimerInActiveList>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d067      	beq.n	8014d5e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c90:	6a1b      	ldr	r3, [r3, #32]
 8014c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c9c:	f003 0304 	and.w	r3, r3, #4
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d05c      	beq.n	8014d5e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014ca4:	68ba      	ldr	r2, [r7, #8]
 8014ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ca8:	699b      	ldr	r3, [r3, #24]
 8014caa:	441a      	add	r2, r3
 8014cac:	2300      	movs	r3, #0
 8014cae:	9300      	str	r3, [sp, #0]
 8014cb0:	2300      	movs	r3, #0
 8014cb2:	2100      	movs	r1, #0
 8014cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014cb6:	f7ff fe09 	bl	80148cc <xTimerGenericCommand>
 8014cba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014cbc:	6a3b      	ldr	r3, [r7, #32]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d14d      	bne.n	8014d5e <prvProcessReceivedCommands+0x196>
 8014cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc6:	f383 8811 	msr	BASEPRI, r3
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	61bb      	str	r3, [r7, #24]
 8014cd4:	e7fe      	b.n	8014cd4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cdc:	f023 0301 	bic.w	r3, r3, #1
 8014ce0:	b2da      	uxtb	r2, r3
 8014ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014ce8:	e039      	b.n	8014d5e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014cf0:	f043 0301 	orr.w	r3, r3, #1
 8014cf4:	b2da      	uxtb	r2, r3
 8014cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014cfc:	68ba      	ldr	r2, [r7, #8]
 8014cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d04:	699b      	ldr	r3, [r3, #24]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d109      	bne.n	8014d1e <prvProcessReceivedCommands+0x156>
 8014d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d0e:	f383 8811 	msr	BASEPRI, r3
 8014d12:	f3bf 8f6f 	isb	sy
 8014d16:	f3bf 8f4f 	dsb	sy
 8014d1a:	617b      	str	r3, [r7, #20]
 8014d1c:	e7fe      	b.n	8014d1c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d20:	699a      	ldr	r2, [r3, #24]
 8014d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d24:	18d1      	adds	r1, r2, r3
 8014d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d2c:	f7ff ff0a 	bl	8014b44 <prvInsertTimerInActiveList>
					break;
 8014d30:	e015      	b.n	8014d5e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d38:	f003 0302 	and.w	r3, r3, #2
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d103      	bne.n	8014d48 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8014d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014d42:	f000 fbc7 	bl	80154d4 <vPortFree>
 8014d46:	e00a      	b.n	8014d5e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014d4e:	f023 0301 	bic.w	r3, r3, #1
 8014d52:	b2da      	uxtb	r2, r3
 8014d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014d5a:	e000      	b.n	8014d5e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014d5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014d5e:	4b07      	ldr	r3, [pc, #28]	; (8014d7c <prvProcessReceivedCommands+0x1b4>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	1d39      	adds	r1, r7, #4
 8014d64:	2200      	movs	r2, #0
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7fe fc3a 	bl	80135e0 <xQueueReceive>
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	f47f af2e 	bne.w	8014bd0 <prvProcessReceivedCommands+0x8>
	}
}
 8014d74:	bf00      	nop
 8014d76:	3730      	adds	r7, #48	; 0x30
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	24001294 	.word	0x24001294

08014d80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b088      	sub	sp, #32
 8014d84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014d86:	e047      	b.n	8014e18 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014d88:	4b2d      	ldr	r3, [pc, #180]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d92:	4b2b      	ldr	r3, [pc, #172]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014d94:	681b      	ldr	r3, [r3, #0]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	68db      	ldr	r3, [r3, #12]
 8014d9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7fe f967 	bl	8013074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	6a1b      	ldr	r3, [r3, #32]
 8014daa:	68f8      	ldr	r0, [r7, #12]
 8014dac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014dae:	68fb      	ldr	r3, [r7, #12]
 8014db0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014db4:	f003 0304 	and.w	r3, r3, #4
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d02d      	beq.n	8014e18 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	699b      	ldr	r3, [r3, #24]
 8014dc0:	693a      	ldr	r2, [r7, #16]
 8014dc2:	4413      	add	r3, r2
 8014dc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014dc6:	68ba      	ldr	r2, [r7, #8]
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d90e      	bls.n	8014dec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014dda:	4b19      	ldr	r3, [pc, #100]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	3304      	adds	r3, #4
 8014de2:	4619      	mov	r1, r3
 8014de4:	4610      	mov	r0, r2
 8014de6:	f7fe f90c 	bl	8013002 <vListInsert>
 8014dea:	e015      	b.n	8014e18 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014dec:	2300      	movs	r3, #0
 8014dee:	9300      	str	r3, [sp, #0]
 8014df0:	2300      	movs	r3, #0
 8014df2:	693a      	ldr	r2, [r7, #16]
 8014df4:	2100      	movs	r1, #0
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	f7ff fd68 	bl	80148cc <xTimerGenericCommand>
 8014dfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d109      	bne.n	8014e18 <prvSwitchTimerLists+0x98>
 8014e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e08:	f383 8811 	msr	BASEPRI, r3
 8014e0c:	f3bf 8f6f 	isb	sy
 8014e10:	f3bf 8f4f 	dsb	sy
 8014e14:	603b      	str	r3, [r7, #0]
 8014e16:	e7fe      	b.n	8014e16 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014e18:	4b09      	ldr	r3, [pc, #36]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014e1a:	681b      	ldr	r3, [r3, #0]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d1b2      	bne.n	8014d88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014e22:	4b07      	ldr	r3, [pc, #28]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8014e28:	4b06      	ldr	r3, [pc, #24]	; (8014e44 <prvSwitchTimerLists+0xc4>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	4a04      	ldr	r2, [pc, #16]	; (8014e40 <prvSwitchTimerLists+0xc0>)
 8014e2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014e30:	4a04      	ldr	r2, [pc, #16]	; (8014e44 <prvSwitchTimerLists+0xc4>)
 8014e32:	697b      	ldr	r3, [r7, #20]
 8014e34:	6013      	str	r3, [r2, #0]
}
 8014e36:	bf00      	nop
 8014e38:	3718      	adds	r7, #24
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	2400128c 	.word	0x2400128c
 8014e44:	24001290 	.word	0x24001290

08014e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b082      	sub	sp, #8
 8014e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8014e4e:	f000 f965 	bl	801511c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014e52:	4b15      	ldr	r3, [pc, #84]	; (8014ea8 <prvCheckForValidListAndQueue+0x60>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d120      	bne.n	8014e9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8014e5a:	4814      	ldr	r0, [pc, #80]	; (8014eac <prvCheckForValidListAndQueue+0x64>)
 8014e5c:	f7fe f880 	bl	8012f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014e60:	4813      	ldr	r0, [pc, #76]	; (8014eb0 <prvCheckForValidListAndQueue+0x68>)
 8014e62:	f7fe f87d 	bl	8012f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014e66:	4b13      	ldr	r3, [pc, #76]	; (8014eb4 <prvCheckForValidListAndQueue+0x6c>)
 8014e68:	4a10      	ldr	r2, [pc, #64]	; (8014eac <prvCheckForValidListAndQueue+0x64>)
 8014e6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8014e6c:	4b12      	ldr	r3, [pc, #72]	; (8014eb8 <prvCheckForValidListAndQueue+0x70>)
 8014e6e:	4a10      	ldr	r2, [pc, #64]	; (8014eb0 <prvCheckForValidListAndQueue+0x68>)
 8014e70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014e72:	2300      	movs	r3, #0
 8014e74:	9300      	str	r3, [sp, #0]
 8014e76:	4b11      	ldr	r3, [pc, #68]	; (8014ebc <prvCheckForValidListAndQueue+0x74>)
 8014e78:	4a11      	ldr	r2, [pc, #68]	; (8014ec0 <prvCheckForValidListAndQueue+0x78>)
 8014e7a:	2110      	movs	r1, #16
 8014e7c:	200a      	movs	r0, #10
 8014e7e:	f7fe f98b 	bl	8013198 <xQueueGenericCreateStatic>
 8014e82:	4602      	mov	r2, r0
 8014e84:	4b08      	ldr	r3, [pc, #32]	; (8014ea8 <prvCheckForValidListAndQueue+0x60>)
 8014e86:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014e88:	4b07      	ldr	r3, [pc, #28]	; (8014ea8 <prvCheckForValidListAndQueue+0x60>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d005      	beq.n	8014e9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014e90:	4b05      	ldr	r3, [pc, #20]	; (8014ea8 <prvCheckForValidListAndQueue+0x60>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	490b      	ldr	r1, [pc, #44]	; (8014ec4 <prvCheckForValidListAndQueue+0x7c>)
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7fe fd8e 	bl	80139b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014e9c:	f000 f96c 	bl	8015178 <vPortExitCritical>
}
 8014ea0:	bf00      	nop
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	24001294 	.word	0x24001294
 8014eac:	24001264 	.word	0x24001264
 8014eb0:	24001278 	.word	0x24001278
 8014eb4:	2400128c 	.word	0x2400128c
 8014eb8:	24001290 	.word	0x24001290
 8014ebc:	24001340 	.word	0x24001340
 8014ec0:	240012a0 	.word	0x240012a0
 8014ec4:	08016628 	.word	0x08016628

08014ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014ec8:	b480      	push	{r7}
 8014eca:	b085      	sub	sp, #20
 8014ecc:	af00      	add	r7, sp, #0
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	3b04      	subs	r3, #4
 8014ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	3b04      	subs	r3, #4
 8014ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014ee8:	68bb      	ldr	r3, [r7, #8]
 8014eea:	f023 0201 	bic.w	r2, r3, #1
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	3b04      	subs	r3, #4
 8014ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014ef8:	4a0c      	ldr	r2, [pc, #48]	; (8014f2c <pxPortInitialiseStack+0x64>)
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3b14      	subs	r3, #20
 8014f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014f04:	687a      	ldr	r2, [r7, #4]
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	3b04      	subs	r3, #4
 8014f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f06f 0202 	mvn.w	r2, #2
 8014f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	3b20      	subs	r3, #32
 8014f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
}
 8014f20:	4618      	mov	r0, r3
 8014f22:	3714      	adds	r7, #20
 8014f24:	46bd      	mov	sp, r7
 8014f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2a:	4770      	bx	lr
 8014f2c:	08014f31 	.word	0x08014f31

08014f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014f30:	b480      	push	{r7}
 8014f32:	b085      	sub	sp, #20
 8014f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014f36:	2300      	movs	r3, #0
 8014f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014f3a:	4b11      	ldr	r3, [pc, #68]	; (8014f80 <prvTaskExitError+0x50>)
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f42:	d009      	beq.n	8014f58 <prvTaskExitError+0x28>
 8014f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f48:	f383 8811 	msr	BASEPRI, r3
 8014f4c:	f3bf 8f6f 	isb	sy
 8014f50:	f3bf 8f4f 	dsb	sy
 8014f54:	60fb      	str	r3, [r7, #12]
 8014f56:	e7fe      	b.n	8014f56 <prvTaskExitError+0x26>
 8014f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014f6a:	bf00      	nop
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d0fc      	beq.n	8014f6c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014f72:	bf00      	nop
 8014f74:	3714      	adds	r7, #20
 8014f76:	46bd      	mov	sp, r7
 8014f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f7c:	4770      	bx	lr
 8014f7e:	bf00      	nop
 8014f80:	2400018c 	.word	0x2400018c
	...

08014f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014f90:	4b07      	ldr	r3, [pc, #28]	; (8014fb0 <pxCurrentTCBConst2>)
 8014f92:	6819      	ldr	r1, [r3, #0]
 8014f94:	6808      	ldr	r0, [r1, #0]
 8014f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f9a:	f380 8809 	msr	PSP, r0
 8014f9e:	f3bf 8f6f 	isb	sy
 8014fa2:	f04f 0000 	mov.w	r0, #0
 8014fa6:	f380 8811 	msr	BASEPRI, r0
 8014faa:	4770      	bx	lr
 8014fac:	f3af 8000 	nop.w

08014fb0 <pxCurrentTCBConst2>:
 8014fb0:	24000d64 	.word	0x24000d64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014fb4:	bf00      	nop
 8014fb6:	bf00      	nop

08014fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014fb8:	4808      	ldr	r0, [pc, #32]	; (8014fdc <prvPortStartFirstTask+0x24>)
 8014fba:	6800      	ldr	r0, [r0, #0]
 8014fbc:	6800      	ldr	r0, [r0, #0]
 8014fbe:	f380 8808 	msr	MSP, r0
 8014fc2:	f04f 0000 	mov.w	r0, #0
 8014fc6:	f380 8814 	msr	CONTROL, r0
 8014fca:	b662      	cpsie	i
 8014fcc:	b661      	cpsie	f
 8014fce:	f3bf 8f4f 	dsb	sy
 8014fd2:	f3bf 8f6f 	isb	sy
 8014fd6:	df00      	svc	0
 8014fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014fda:	bf00      	nop
 8014fdc:	e000ed08 	.word	0xe000ed08

08014fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b086      	sub	sp, #24
 8014fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8014fe6:	4b44      	ldr	r3, [pc, #272]	; (80150f8 <xPortStartScheduler+0x118>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	4a44      	ldr	r2, [pc, #272]	; (80150fc <xPortStartScheduler+0x11c>)
 8014fec:	4293      	cmp	r3, r2
 8014fee:	d109      	bne.n	8015004 <xPortStartScheduler+0x24>
 8014ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ff4:	f383 8811 	msr	BASEPRI, r3
 8014ff8:	f3bf 8f6f 	isb	sy
 8014ffc:	f3bf 8f4f 	dsb	sy
 8015000:	613b      	str	r3, [r7, #16]
 8015002:	e7fe      	b.n	8015002 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015004:	4b3c      	ldr	r3, [pc, #240]	; (80150f8 <xPortStartScheduler+0x118>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4a3d      	ldr	r2, [pc, #244]	; (8015100 <xPortStartScheduler+0x120>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d109      	bne.n	8015022 <xPortStartScheduler+0x42>
 801500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015012:	f383 8811 	msr	BASEPRI, r3
 8015016:	f3bf 8f6f 	isb	sy
 801501a:	f3bf 8f4f 	dsb	sy
 801501e:	60fb      	str	r3, [r7, #12]
 8015020:	e7fe      	b.n	8015020 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015022:	4b38      	ldr	r3, [pc, #224]	; (8015104 <xPortStartScheduler+0x124>)
 8015024:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015026:	697b      	ldr	r3, [r7, #20]
 8015028:	781b      	ldrb	r3, [r3, #0]
 801502a:	b2db      	uxtb	r3, r3
 801502c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	22ff      	movs	r2, #255	; 0xff
 8015032:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	781b      	ldrb	r3, [r3, #0]
 8015038:	b2db      	uxtb	r3, r3
 801503a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801503c:	78fb      	ldrb	r3, [r7, #3]
 801503e:	b2db      	uxtb	r3, r3
 8015040:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015044:	b2da      	uxtb	r2, r3
 8015046:	4b30      	ldr	r3, [pc, #192]	; (8015108 <xPortStartScheduler+0x128>)
 8015048:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801504a:	4b30      	ldr	r3, [pc, #192]	; (801510c <xPortStartScheduler+0x12c>)
 801504c:	2207      	movs	r2, #7
 801504e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015050:	e009      	b.n	8015066 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8015052:	4b2e      	ldr	r3, [pc, #184]	; (801510c <xPortStartScheduler+0x12c>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	3b01      	subs	r3, #1
 8015058:	4a2c      	ldr	r2, [pc, #176]	; (801510c <xPortStartScheduler+0x12c>)
 801505a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801505c:	78fb      	ldrb	r3, [r7, #3]
 801505e:	b2db      	uxtb	r3, r3
 8015060:	005b      	lsls	r3, r3, #1
 8015062:	b2db      	uxtb	r3, r3
 8015064:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015066:	78fb      	ldrb	r3, [r7, #3]
 8015068:	b2db      	uxtb	r3, r3
 801506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801506e:	2b80      	cmp	r3, #128	; 0x80
 8015070:	d0ef      	beq.n	8015052 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015072:	4b26      	ldr	r3, [pc, #152]	; (801510c <xPortStartScheduler+0x12c>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f1c3 0307 	rsb	r3, r3, #7
 801507a:	2b04      	cmp	r3, #4
 801507c:	d009      	beq.n	8015092 <xPortStartScheduler+0xb2>
 801507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015082:	f383 8811 	msr	BASEPRI, r3
 8015086:	f3bf 8f6f 	isb	sy
 801508a:	f3bf 8f4f 	dsb	sy
 801508e:	60bb      	str	r3, [r7, #8]
 8015090:	e7fe      	b.n	8015090 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015092:	4b1e      	ldr	r3, [pc, #120]	; (801510c <xPortStartScheduler+0x12c>)
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	021b      	lsls	r3, r3, #8
 8015098:	4a1c      	ldr	r2, [pc, #112]	; (801510c <xPortStartScheduler+0x12c>)
 801509a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801509c:	4b1b      	ldr	r3, [pc, #108]	; (801510c <xPortStartScheduler+0x12c>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80150a4:	4a19      	ldr	r2, [pc, #100]	; (801510c <xPortStartScheduler+0x12c>)
 80150a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	b2da      	uxtb	r2, r3
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80150b0:	4b17      	ldr	r3, [pc, #92]	; (8015110 <xPortStartScheduler+0x130>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	4a16      	ldr	r2, [pc, #88]	; (8015110 <xPortStartScheduler+0x130>)
 80150b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80150ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80150bc:	4b14      	ldr	r3, [pc, #80]	; (8015110 <xPortStartScheduler+0x130>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	4a13      	ldr	r2, [pc, #76]	; (8015110 <xPortStartScheduler+0x130>)
 80150c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80150c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80150c8:	f000 f8d6 	bl	8015278 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80150cc:	4b11      	ldr	r3, [pc, #68]	; (8015114 <xPortStartScheduler+0x134>)
 80150ce:	2200      	movs	r2, #0
 80150d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80150d2:	f000 f8f5 	bl	80152c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80150d6:	4b10      	ldr	r3, [pc, #64]	; (8015118 <xPortStartScheduler+0x138>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	4a0f      	ldr	r2, [pc, #60]	; (8015118 <xPortStartScheduler+0x138>)
 80150dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80150e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80150e2:	f7ff ff69 	bl	8014fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80150e6:	f7ff f86b 	bl	80141c0 <vTaskSwitchContext>
	prvTaskExitError();
 80150ea:	f7ff ff21 	bl	8014f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80150ee:	2300      	movs	r3, #0
}
 80150f0:	4618      	mov	r0, r3
 80150f2:	3718      	adds	r7, #24
 80150f4:	46bd      	mov	sp, r7
 80150f6:	bd80      	pop	{r7, pc}
 80150f8:	e000ed00 	.word	0xe000ed00
 80150fc:	410fc271 	.word	0x410fc271
 8015100:	410fc270 	.word	0x410fc270
 8015104:	e000e400 	.word	0xe000e400
 8015108:	24001390 	.word	0x24001390
 801510c:	24001394 	.word	0x24001394
 8015110:	e000ed20 	.word	0xe000ed20
 8015114:	2400018c 	.word	0x2400018c
 8015118:	e000ef34 	.word	0xe000ef34

0801511c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801511c:	b480      	push	{r7}
 801511e:	b083      	sub	sp, #12
 8015120:	af00      	add	r7, sp, #0
 8015122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015126:	f383 8811 	msr	BASEPRI, r3
 801512a:	f3bf 8f6f 	isb	sy
 801512e:	f3bf 8f4f 	dsb	sy
 8015132:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015134:	4b0e      	ldr	r3, [pc, #56]	; (8015170 <vPortEnterCritical+0x54>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	3301      	adds	r3, #1
 801513a:	4a0d      	ldr	r2, [pc, #52]	; (8015170 <vPortEnterCritical+0x54>)
 801513c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801513e:	4b0c      	ldr	r3, [pc, #48]	; (8015170 <vPortEnterCritical+0x54>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	2b01      	cmp	r3, #1
 8015144:	d10e      	bne.n	8015164 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015146:	4b0b      	ldr	r3, [pc, #44]	; (8015174 <vPortEnterCritical+0x58>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	b2db      	uxtb	r3, r3
 801514c:	2b00      	cmp	r3, #0
 801514e:	d009      	beq.n	8015164 <vPortEnterCritical+0x48>
 8015150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015154:	f383 8811 	msr	BASEPRI, r3
 8015158:	f3bf 8f6f 	isb	sy
 801515c:	f3bf 8f4f 	dsb	sy
 8015160:	603b      	str	r3, [r7, #0]
 8015162:	e7fe      	b.n	8015162 <vPortEnterCritical+0x46>
	}
}
 8015164:	bf00      	nop
 8015166:	370c      	adds	r7, #12
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr
 8015170:	2400018c 	.word	0x2400018c
 8015174:	e000ed04 	.word	0xe000ed04

08015178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015178:	b480      	push	{r7}
 801517a:	b083      	sub	sp, #12
 801517c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801517e:	4b11      	ldr	r3, [pc, #68]	; (80151c4 <vPortExitCritical+0x4c>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d109      	bne.n	801519a <vPortExitCritical+0x22>
 8015186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801518a:	f383 8811 	msr	BASEPRI, r3
 801518e:	f3bf 8f6f 	isb	sy
 8015192:	f3bf 8f4f 	dsb	sy
 8015196:	607b      	str	r3, [r7, #4]
 8015198:	e7fe      	b.n	8015198 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801519a:	4b0a      	ldr	r3, [pc, #40]	; (80151c4 <vPortExitCritical+0x4c>)
 801519c:	681b      	ldr	r3, [r3, #0]
 801519e:	3b01      	subs	r3, #1
 80151a0:	4a08      	ldr	r2, [pc, #32]	; (80151c4 <vPortExitCritical+0x4c>)
 80151a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80151a4:	4b07      	ldr	r3, [pc, #28]	; (80151c4 <vPortExitCritical+0x4c>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d104      	bne.n	80151b6 <vPortExitCritical+0x3e>
 80151ac:	2300      	movs	r3, #0
 80151ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80151b0:	683b      	ldr	r3, [r7, #0]
 80151b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80151b6:	bf00      	nop
 80151b8:	370c      	adds	r7, #12
 80151ba:	46bd      	mov	sp, r7
 80151bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c0:	4770      	bx	lr
 80151c2:	bf00      	nop
 80151c4:	2400018c 	.word	0x2400018c
	...

080151d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80151d0:	f3ef 8009 	mrs	r0, PSP
 80151d4:	f3bf 8f6f 	isb	sy
 80151d8:	4b15      	ldr	r3, [pc, #84]	; (8015230 <pxCurrentTCBConst>)
 80151da:	681a      	ldr	r2, [r3, #0]
 80151dc:	f01e 0f10 	tst.w	lr, #16
 80151e0:	bf08      	it	eq
 80151e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80151e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ea:	6010      	str	r0, [r2, #0]
 80151ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80151f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80151f4:	f380 8811 	msr	BASEPRI, r0
 80151f8:	f3bf 8f4f 	dsb	sy
 80151fc:	f3bf 8f6f 	isb	sy
 8015200:	f7fe ffde 	bl	80141c0 <vTaskSwitchContext>
 8015204:	f04f 0000 	mov.w	r0, #0
 8015208:	f380 8811 	msr	BASEPRI, r0
 801520c:	bc09      	pop	{r0, r3}
 801520e:	6819      	ldr	r1, [r3, #0]
 8015210:	6808      	ldr	r0, [r1, #0]
 8015212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015216:	f01e 0f10 	tst.w	lr, #16
 801521a:	bf08      	it	eq
 801521c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015220:	f380 8809 	msr	PSP, r0
 8015224:	f3bf 8f6f 	isb	sy
 8015228:	4770      	bx	lr
 801522a:	bf00      	nop
 801522c:	f3af 8000 	nop.w

08015230 <pxCurrentTCBConst>:
 8015230:	24000d64 	.word	0x24000d64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015234:	bf00      	nop
 8015236:	bf00      	nop

08015238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015238:	b580      	push	{r7, lr}
 801523a:	b082      	sub	sp, #8
 801523c:	af00      	add	r7, sp, #0
	__asm volatile
 801523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015242:	f383 8811 	msr	BASEPRI, r3
 8015246:	f3bf 8f6f 	isb	sy
 801524a:	f3bf 8f4f 	dsb	sy
 801524e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015250:	f7fe fefe 	bl	8014050 <xTaskIncrementTick>
 8015254:	4603      	mov	r3, r0
 8015256:	2b00      	cmp	r3, #0
 8015258:	d003      	beq.n	8015262 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801525a:	4b06      	ldr	r3, [pc, #24]	; (8015274 <SysTick_Handler+0x3c>)
 801525c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015260:	601a      	str	r2, [r3, #0]
 8015262:	2300      	movs	r3, #0
 8015264:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801526c:	bf00      	nop
 801526e:	3708      	adds	r7, #8
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	e000ed04 	.word	0xe000ed04

08015278 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015278:	b480      	push	{r7}
 801527a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801527c:	4b0b      	ldr	r3, [pc, #44]	; (80152ac <vPortSetupTimerInterrupt+0x34>)
 801527e:	2200      	movs	r2, #0
 8015280:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015282:	4b0b      	ldr	r3, [pc, #44]	; (80152b0 <vPortSetupTimerInterrupt+0x38>)
 8015284:	2200      	movs	r2, #0
 8015286:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015288:	4b0a      	ldr	r3, [pc, #40]	; (80152b4 <vPortSetupTimerInterrupt+0x3c>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	4a0a      	ldr	r2, [pc, #40]	; (80152b8 <vPortSetupTimerInterrupt+0x40>)
 801528e:	fba2 2303 	umull	r2, r3, r2, r3
 8015292:	099b      	lsrs	r3, r3, #6
 8015294:	4a09      	ldr	r2, [pc, #36]	; (80152bc <vPortSetupTimerInterrupt+0x44>)
 8015296:	3b01      	subs	r3, #1
 8015298:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801529a:	4b04      	ldr	r3, [pc, #16]	; (80152ac <vPortSetupTimerInterrupt+0x34>)
 801529c:	2207      	movs	r2, #7
 801529e:	601a      	str	r2, [r3, #0]
}
 80152a0:	bf00      	nop
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop
 80152ac:	e000e010 	.word	0xe000e010
 80152b0:	e000e018 	.word	0xe000e018
 80152b4:	24000094 	.word	0x24000094
 80152b8:	10624dd3 	.word	0x10624dd3
 80152bc:	e000e014 	.word	0xe000e014

080152c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80152c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80152d0 <vPortEnableVFP+0x10>
 80152c4:	6801      	ldr	r1, [r0, #0]
 80152c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80152ca:	6001      	str	r1, [r0, #0]
 80152cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80152ce:	bf00      	nop
 80152d0:	e000ed88 	.word	0xe000ed88

080152d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80152d4:	b480      	push	{r7}
 80152d6:	b085      	sub	sp, #20
 80152d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80152da:	f3ef 8305 	mrs	r3, IPSR
 80152de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	2b0f      	cmp	r3, #15
 80152e4:	d913      	bls.n	801530e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80152e6:	4a16      	ldr	r2, [pc, #88]	; (8015340 <vPortValidateInterruptPriority+0x6c>)
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	4413      	add	r3, r2
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80152f0:	4b14      	ldr	r3, [pc, #80]	; (8015344 <vPortValidateInterruptPriority+0x70>)
 80152f2:	781b      	ldrb	r3, [r3, #0]
 80152f4:	7afa      	ldrb	r2, [r7, #11]
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d209      	bcs.n	801530e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80152fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152fe:	f383 8811 	msr	BASEPRI, r3
 8015302:	f3bf 8f6f 	isb	sy
 8015306:	f3bf 8f4f 	dsb	sy
 801530a:	607b      	str	r3, [r7, #4]
 801530c:	e7fe      	b.n	801530c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801530e:	4b0e      	ldr	r3, [pc, #56]	; (8015348 <vPortValidateInterruptPriority+0x74>)
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015316:	4b0d      	ldr	r3, [pc, #52]	; (801534c <vPortValidateInterruptPriority+0x78>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	429a      	cmp	r2, r3
 801531c:	d909      	bls.n	8015332 <vPortValidateInterruptPriority+0x5e>
 801531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015322:	f383 8811 	msr	BASEPRI, r3
 8015326:	f3bf 8f6f 	isb	sy
 801532a:	f3bf 8f4f 	dsb	sy
 801532e:	603b      	str	r3, [r7, #0]
 8015330:	e7fe      	b.n	8015330 <vPortValidateInterruptPriority+0x5c>
	}
 8015332:	bf00      	nop
 8015334:	3714      	adds	r7, #20
 8015336:	46bd      	mov	sp, r7
 8015338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	e000e3f0 	.word	0xe000e3f0
 8015344:	24001390 	.word	0x24001390
 8015348:	e000ed0c 	.word	0xe000ed0c
 801534c:	24001394 	.word	0x24001394

08015350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b08a      	sub	sp, #40	; 0x28
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015358:	2300      	movs	r3, #0
 801535a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801535c:	f7fe fdbe 	bl	8013edc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015360:	4b57      	ldr	r3, [pc, #348]	; (80154c0 <pvPortMalloc+0x170>)
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d101      	bne.n	801536c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015368:	f000 f90c 	bl	8015584 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801536c:	4b55      	ldr	r3, [pc, #340]	; (80154c4 <pvPortMalloc+0x174>)
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	4013      	ands	r3, r2
 8015374:	2b00      	cmp	r3, #0
 8015376:	f040 808c 	bne.w	8015492 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d01c      	beq.n	80153ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8015380:	2208      	movs	r2, #8
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4413      	add	r3, r2
 8015386:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f003 0307 	and.w	r3, r3, #7
 801538e:	2b00      	cmp	r3, #0
 8015390:	d013      	beq.n	80153ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f023 0307 	bic.w	r3, r3, #7
 8015398:	3308      	adds	r3, #8
 801539a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f003 0307 	and.w	r3, r3, #7
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d009      	beq.n	80153ba <pvPortMalloc+0x6a>
 80153a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153aa:	f383 8811 	msr	BASEPRI, r3
 80153ae:	f3bf 8f6f 	isb	sy
 80153b2:	f3bf 8f4f 	dsb	sy
 80153b6:	617b      	str	r3, [r7, #20]
 80153b8:	e7fe      	b.n	80153b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d068      	beq.n	8015492 <pvPortMalloc+0x142>
 80153c0:	4b41      	ldr	r3, [pc, #260]	; (80154c8 <pvPortMalloc+0x178>)
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d863      	bhi.n	8015492 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80153ca:	4b40      	ldr	r3, [pc, #256]	; (80154cc <pvPortMalloc+0x17c>)
 80153cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80153ce:	4b3f      	ldr	r3, [pc, #252]	; (80154cc <pvPortMalloc+0x17c>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80153d4:	e004      	b.n	80153e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80153d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80153da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80153e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e2:	685b      	ldr	r3, [r3, #4]
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d903      	bls.n	80153f2 <pvPortMalloc+0xa2>
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d1f1      	bne.n	80153d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80153f2:	4b33      	ldr	r3, [pc, #204]	; (80154c0 <pvPortMalloc+0x170>)
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d04a      	beq.n	8015492 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80153fc:	6a3b      	ldr	r3, [r7, #32]
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	2208      	movs	r2, #8
 8015402:	4413      	add	r3, r2
 8015404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015408:	681a      	ldr	r2, [r3, #0]
 801540a:	6a3b      	ldr	r3, [r7, #32]
 801540c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015410:	685a      	ldr	r2, [r3, #4]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	1ad2      	subs	r2, r2, r3
 8015416:	2308      	movs	r3, #8
 8015418:	005b      	lsls	r3, r3, #1
 801541a:	429a      	cmp	r2, r3
 801541c:	d91e      	bls.n	801545c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801541e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	4413      	add	r3, r2
 8015424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015426:	69bb      	ldr	r3, [r7, #24]
 8015428:	f003 0307 	and.w	r3, r3, #7
 801542c:	2b00      	cmp	r3, #0
 801542e:	d009      	beq.n	8015444 <pvPortMalloc+0xf4>
 8015430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015434:	f383 8811 	msr	BASEPRI, r3
 8015438:	f3bf 8f6f 	isb	sy
 801543c:	f3bf 8f4f 	dsb	sy
 8015440:	613b      	str	r3, [r7, #16]
 8015442:	e7fe      	b.n	8015442 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	1ad2      	subs	r2, r2, r3
 801544c:	69bb      	ldr	r3, [r7, #24]
 801544e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015456:	69b8      	ldr	r0, [r7, #24]
 8015458:	f000 f8f6 	bl	8015648 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801545c:	4b1a      	ldr	r3, [pc, #104]	; (80154c8 <pvPortMalloc+0x178>)
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	4a18      	ldr	r2, [pc, #96]	; (80154c8 <pvPortMalloc+0x178>)
 8015468:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801546a:	4b17      	ldr	r3, [pc, #92]	; (80154c8 <pvPortMalloc+0x178>)
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	4b18      	ldr	r3, [pc, #96]	; (80154d0 <pvPortMalloc+0x180>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	429a      	cmp	r2, r3
 8015474:	d203      	bcs.n	801547e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015476:	4b14      	ldr	r3, [pc, #80]	; (80154c8 <pvPortMalloc+0x178>)
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	4a15      	ldr	r2, [pc, #84]	; (80154d0 <pvPortMalloc+0x180>)
 801547c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015480:	685a      	ldr	r2, [r3, #4]
 8015482:	4b10      	ldr	r3, [pc, #64]	; (80154c4 <pvPortMalloc+0x174>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	431a      	orrs	r2, r3
 8015488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801548e:	2200      	movs	r2, #0
 8015490:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015492:	f7fe fd31 	bl	8013ef8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015496:	69fb      	ldr	r3, [r7, #28]
 8015498:	f003 0307 	and.w	r3, r3, #7
 801549c:	2b00      	cmp	r3, #0
 801549e:	d009      	beq.n	80154b4 <pvPortMalloc+0x164>
 80154a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154a4:	f383 8811 	msr	BASEPRI, r3
 80154a8:	f3bf 8f6f 	isb	sy
 80154ac:	f3bf 8f4f 	dsb	sy
 80154b0:	60fb      	str	r3, [r7, #12]
 80154b2:	e7fe      	b.n	80154b2 <pvPortMalloc+0x162>
	return pvReturn;
 80154b4:	69fb      	ldr	r3, [r7, #28]
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3728      	adds	r7, #40	; 0x28
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	24004fa0 	.word	0x24004fa0
 80154c4:	24004fac 	.word	0x24004fac
 80154c8:	24004fa4 	.word	0x24004fa4
 80154cc:	24004f98 	.word	0x24004f98
 80154d0:	24004fa8 	.word	0x24004fa8

080154d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b086      	sub	sp, #24
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d046      	beq.n	8015574 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80154e6:	2308      	movs	r3, #8
 80154e8:	425b      	negs	r3, r3
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	4413      	add	r3, r2
 80154ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80154f4:	693b      	ldr	r3, [r7, #16]
 80154f6:	685a      	ldr	r2, [r3, #4]
 80154f8:	4b20      	ldr	r3, [pc, #128]	; (801557c <vPortFree+0xa8>)
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	4013      	ands	r3, r2
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d109      	bne.n	8015516 <vPortFree+0x42>
 8015502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015506:	f383 8811 	msr	BASEPRI, r3
 801550a:	f3bf 8f6f 	isb	sy
 801550e:	f3bf 8f4f 	dsb	sy
 8015512:	60fb      	str	r3, [r7, #12]
 8015514:	e7fe      	b.n	8015514 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d009      	beq.n	8015532 <vPortFree+0x5e>
 801551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015522:	f383 8811 	msr	BASEPRI, r3
 8015526:	f3bf 8f6f 	isb	sy
 801552a:	f3bf 8f4f 	dsb	sy
 801552e:	60bb      	str	r3, [r7, #8]
 8015530:	e7fe      	b.n	8015530 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015532:	693b      	ldr	r3, [r7, #16]
 8015534:	685a      	ldr	r2, [r3, #4]
 8015536:	4b11      	ldr	r3, [pc, #68]	; (801557c <vPortFree+0xa8>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	4013      	ands	r3, r2
 801553c:	2b00      	cmp	r3, #0
 801553e:	d019      	beq.n	8015574 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d115      	bne.n	8015574 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	685a      	ldr	r2, [r3, #4]
 801554c:	4b0b      	ldr	r3, [pc, #44]	; (801557c <vPortFree+0xa8>)
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	43db      	mvns	r3, r3
 8015552:	401a      	ands	r2, r3
 8015554:	693b      	ldr	r3, [r7, #16]
 8015556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015558:	f7fe fcc0 	bl	8013edc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	685a      	ldr	r2, [r3, #4]
 8015560:	4b07      	ldr	r3, [pc, #28]	; (8015580 <vPortFree+0xac>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	4413      	add	r3, r2
 8015566:	4a06      	ldr	r2, [pc, #24]	; (8015580 <vPortFree+0xac>)
 8015568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801556a:	6938      	ldr	r0, [r7, #16]
 801556c:	f000 f86c 	bl	8015648 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8015570:	f7fe fcc2 	bl	8013ef8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015574:	bf00      	nop
 8015576:	3718      	adds	r7, #24
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}
 801557c:	24004fac 	.word	0x24004fac
 8015580:	24004fa4 	.word	0x24004fa4

08015584 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015584:	b480      	push	{r7}
 8015586:	b085      	sub	sp, #20
 8015588:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801558a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801558e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015590:	4b27      	ldr	r3, [pc, #156]	; (8015630 <prvHeapInit+0xac>)
 8015592:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f003 0307 	and.w	r3, r3, #7
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00c      	beq.n	80155b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	3307      	adds	r3, #7
 80155a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	f023 0307 	bic.w	r3, r3, #7
 80155aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80155ac:	68ba      	ldr	r2, [r7, #8]
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	1ad3      	subs	r3, r2, r3
 80155b2:	4a1f      	ldr	r2, [pc, #124]	; (8015630 <prvHeapInit+0xac>)
 80155b4:	4413      	add	r3, r2
 80155b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80155bc:	4a1d      	ldr	r2, [pc, #116]	; (8015634 <prvHeapInit+0xb0>)
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80155c2:	4b1c      	ldr	r3, [pc, #112]	; (8015634 <prvHeapInit+0xb0>)
 80155c4:	2200      	movs	r2, #0
 80155c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	68ba      	ldr	r2, [r7, #8]
 80155cc:	4413      	add	r3, r2
 80155ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80155d0:	2208      	movs	r2, #8
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	1a9b      	subs	r3, r3, r2
 80155d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	f023 0307 	bic.w	r3, r3, #7
 80155de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	4a15      	ldr	r2, [pc, #84]	; (8015638 <prvHeapInit+0xb4>)
 80155e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80155e6:	4b14      	ldr	r3, [pc, #80]	; (8015638 <prvHeapInit+0xb4>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	2200      	movs	r2, #0
 80155ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80155ee:	4b12      	ldr	r3, [pc, #72]	; (8015638 <prvHeapInit+0xb4>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	2200      	movs	r2, #0
 80155f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	68fa      	ldr	r2, [r7, #12]
 80155fe:	1ad2      	subs	r2, r2, r3
 8015600:	683b      	ldr	r3, [r7, #0]
 8015602:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015604:	4b0c      	ldr	r3, [pc, #48]	; (8015638 <prvHeapInit+0xb4>)
 8015606:	681a      	ldr	r2, [r3, #0]
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	685b      	ldr	r3, [r3, #4]
 8015610:	4a0a      	ldr	r2, [pc, #40]	; (801563c <prvHeapInit+0xb8>)
 8015612:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015614:	683b      	ldr	r3, [r7, #0]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	4a09      	ldr	r2, [pc, #36]	; (8015640 <prvHeapInit+0xbc>)
 801561a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801561c:	4b09      	ldr	r3, [pc, #36]	; (8015644 <prvHeapInit+0xc0>)
 801561e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015622:	601a      	str	r2, [r3, #0]
}
 8015624:	bf00      	nop
 8015626:	3714      	adds	r7, #20
 8015628:	46bd      	mov	sp, r7
 801562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801562e:	4770      	bx	lr
 8015630:	24001398 	.word	0x24001398
 8015634:	24004f98 	.word	0x24004f98
 8015638:	24004fa0 	.word	0x24004fa0
 801563c:	24004fa8 	.word	0x24004fa8
 8015640:	24004fa4 	.word	0x24004fa4
 8015644:	24004fac 	.word	0x24004fac

08015648 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015648:	b480      	push	{r7}
 801564a:	b085      	sub	sp, #20
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015650:	4b28      	ldr	r3, [pc, #160]	; (80156f4 <prvInsertBlockIntoFreeList+0xac>)
 8015652:	60fb      	str	r3, [r7, #12]
 8015654:	e002      	b.n	801565c <prvInsertBlockIntoFreeList+0x14>
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	60fb      	str	r3, [r7, #12]
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	687a      	ldr	r2, [r7, #4]
 8015662:	429a      	cmp	r2, r3
 8015664:	d8f7      	bhi.n	8015656 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	685b      	ldr	r3, [r3, #4]
 801566e:	68ba      	ldr	r2, [r7, #8]
 8015670:	4413      	add	r3, r2
 8015672:	687a      	ldr	r2, [r7, #4]
 8015674:	429a      	cmp	r2, r3
 8015676:	d108      	bne.n	801568a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	685a      	ldr	r2, [r3, #4]
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	685b      	ldr	r3, [r3, #4]
 8015680:	441a      	add	r2, r3
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	68ba      	ldr	r2, [r7, #8]
 8015694:	441a      	add	r2, r3
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	681b      	ldr	r3, [r3, #0]
 801569a:	429a      	cmp	r2, r3
 801569c:	d118      	bne.n	80156d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681a      	ldr	r2, [r3, #0]
 80156a2:	4b15      	ldr	r3, [pc, #84]	; (80156f8 <prvInsertBlockIntoFreeList+0xb0>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d00d      	beq.n	80156c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	685a      	ldr	r2, [r3, #4]
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	441a      	add	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	681a      	ldr	r2, [r3, #0]
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	601a      	str	r2, [r3, #0]
 80156c4:	e008      	b.n	80156d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80156c6:	4b0c      	ldr	r3, [pc, #48]	; (80156f8 <prvInsertBlockIntoFreeList+0xb0>)
 80156c8:	681a      	ldr	r2, [r3, #0]
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	601a      	str	r2, [r3, #0]
 80156ce:	e003      	b.n	80156d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681a      	ldr	r2, [r3, #0]
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	429a      	cmp	r2, r3
 80156de:	d002      	beq.n	80156e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80156e6:	bf00      	nop
 80156e8:	3714      	adds	r7, #20
 80156ea:	46bd      	mov	sp, r7
 80156ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f0:	4770      	bx	lr
 80156f2:	bf00      	nop
 80156f4:	24004f98 	.word	0x24004f98
 80156f8:	24004fa0 	.word	0x24004fa0

080156fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
	  HAL_PWREx_EnableUSBVoltageDetector();
 8015700:	f7f1 f830 	bl	8006764 <HAL_PWREx_EnableUSBVoltageDetector>
  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015704:	2200      	movs	r2, #0
 8015706:	4912      	ldr	r1, [pc, #72]	; (8015750 <MX_USB_DEVICE_Init+0x54>)
 8015708:	4812      	ldr	r0, [pc, #72]	; (8015754 <MX_USB_DEVICE_Init+0x58>)
 801570a:	f7fb fcf0 	bl	80110ee <USBD_Init>
 801570e:	4603      	mov	r3, r0
 8015710:	2b00      	cmp	r3, #0
 8015712:	d001      	beq.n	8015718 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8015714:	f7eb ff10 	bl	8001538 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8015718:	490f      	ldr	r1, [pc, #60]	; (8015758 <MX_USB_DEVICE_Init+0x5c>)
 801571a:	480e      	ldr	r0, [pc, #56]	; (8015754 <MX_USB_DEVICE_Init+0x58>)
 801571c:	f7fb fd1d 	bl	801115a <USBD_RegisterClass>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d001      	beq.n	801572a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8015726:	f7eb ff07 	bl	8001538 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801572a:	490c      	ldr	r1, [pc, #48]	; (801575c <MX_USB_DEVICE_Init+0x60>)
 801572c:	4809      	ldr	r0, [pc, #36]	; (8015754 <MX_USB_DEVICE_Init+0x58>)
 801572e:	f7fa fa19 	bl	800fb64 <USBD_MSC_RegisterStorage>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d001      	beq.n	801573c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8015738:	f7eb fefe 	bl	8001538 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801573c:	4805      	ldr	r0, [pc, #20]	; (8015754 <MX_USB_DEVICE_Init+0x58>)
 801573e:	f7fb fd2d 	bl	801119c <USBD_Start>
 8015742:	4603      	mov	r3, r0
 8015744:	2b00      	cmp	r3, #0
 8015746:	d001      	beq.n	801574c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8015748:	f7eb fef6 	bl	8001538 <Error_Handler>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */


  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801574c:	bf00      	nop
 801574e:	bd80      	pop	{r7, pc}
 8015750:	24000190 	.word	0x24000190
 8015754:	24011aec 	.word	0x24011aec
 8015758:	240000a4 	.word	0x240000a4
 801575c:	240001e0 	.word	0x240001e0

08015760 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015760:	b480      	push	{r7}
 8015762:	b083      	sub	sp, #12
 8015764:	af00      	add	r7, sp, #0
 8015766:	4603      	mov	r3, r0
 8015768:	6039      	str	r1, [r7, #0]
 801576a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	2212      	movs	r2, #18
 8015770:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015772:	4b03      	ldr	r3, [pc, #12]	; (8015780 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015774:	4618      	mov	r0, r3
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr
 8015780:	240001ac 	.word	0x240001ac

08015784 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
 801578a:	4603      	mov	r3, r0
 801578c:	6039      	str	r1, [r7, #0]
 801578e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	2204      	movs	r2, #4
 8015794:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015796:	4b03      	ldr	r3, [pc, #12]	; (80157a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015798:	4618      	mov	r0, r3
 801579a:	370c      	adds	r7, #12
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr
 80157a4:	240001c0 	.word	0x240001c0

080157a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157a8:	b580      	push	{r7, lr}
 80157aa:	b082      	sub	sp, #8
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	4603      	mov	r3, r0
 80157b0:	6039      	str	r1, [r7, #0]
 80157b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80157b4:	79fb      	ldrb	r3, [r7, #7]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d105      	bne.n	80157c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80157ba:	683a      	ldr	r2, [r7, #0]
 80157bc:	4907      	ldr	r1, [pc, #28]	; (80157dc <USBD_FS_ProductStrDescriptor+0x34>)
 80157be:	4808      	ldr	r0, [pc, #32]	; (80157e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80157c0:	f7fc fcb9 	bl	8012136 <USBD_GetString>
 80157c4:	e004      	b.n	80157d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80157c6:	683a      	ldr	r2, [r7, #0]
 80157c8:	4904      	ldr	r1, [pc, #16]	; (80157dc <USBD_FS_ProductStrDescriptor+0x34>)
 80157ca:	4805      	ldr	r0, [pc, #20]	; (80157e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80157cc:	f7fc fcb3 	bl	8012136 <USBD_GetString>
  }
  return USBD_StrDesc;
 80157d0:	4b02      	ldr	r3, [pc, #8]	; (80157dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80157d2:	4618      	mov	r0, r3
 80157d4:	3708      	adds	r7, #8
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	24011dbc 	.word	0x24011dbc
 80157e0:	08016630 	.word	0x08016630

080157e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	4603      	mov	r3, r0
 80157ec:	6039      	str	r1, [r7, #0]
 80157ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80157f0:	683a      	ldr	r2, [r7, #0]
 80157f2:	4904      	ldr	r1, [pc, #16]	; (8015804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80157f4:	4804      	ldr	r0, [pc, #16]	; (8015808 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80157f6:	f7fc fc9e 	bl	8012136 <USBD_GetString>
  return USBD_StrDesc;
 80157fa:	4b02      	ldr	r3, [pc, #8]	; (8015804 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80157fc:	4618      	mov	r0, r3
 80157fe:	3708      	adds	r7, #8
 8015800:	46bd      	mov	sp, r7
 8015802:	bd80      	pop	{r7, pc}
 8015804:	24011dbc 	.word	0x24011dbc
 8015808:	08016644 	.word	0x08016644

0801580c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	4603      	mov	r3, r0
 8015814:	6039      	str	r1, [r7, #0]
 8015816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	221a      	movs	r2, #26
 801581c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801581e:	f000 f843 	bl	80158a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015822:	4b02      	ldr	r3, [pc, #8]	; (801582c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015824:	4618      	mov	r0, r3
 8015826:	3708      	adds	r7, #8
 8015828:	46bd      	mov	sp, r7
 801582a:	bd80      	pop	{r7, pc}
 801582c:	240001c4 	.word	0x240001c4

08015830 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	4603      	mov	r3, r0
 8015838:	6039      	str	r1, [r7, #0]
 801583a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801583c:	79fb      	ldrb	r3, [r7, #7]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d105      	bne.n	801584e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015842:	683a      	ldr	r2, [r7, #0]
 8015844:	4907      	ldr	r1, [pc, #28]	; (8015864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015846:	4808      	ldr	r0, [pc, #32]	; (8015868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015848:	f7fc fc75 	bl	8012136 <USBD_GetString>
 801584c:	e004      	b.n	8015858 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801584e:	683a      	ldr	r2, [r7, #0]
 8015850:	4904      	ldr	r1, [pc, #16]	; (8015864 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015852:	4805      	ldr	r0, [pc, #20]	; (8015868 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015854:	f7fc fc6f 	bl	8012136 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015858:	4b02      	ldr	r3, [pc, #8]	; (8015864 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801585a:	4618      	mov	r0, r3
 801585c:	3708      	adds	r7, #8
 801585e:	46bd      	mov	sp, r7
 8015860:	bd80      	pop	{r7, pc}
 8015862:	bf00      	nop
 8015864:	24011dbc 	.word	0x24011dbc
 8015868:	08016658 	.word	0x08016658

0801586c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b082      	sub	sp, #8
 8015870:	af00      	add	r7, sp, #0
 8015872:	4603      	mov	r3, r0
 8015874:	6039      	str	r1, [r7, #0]
 8015876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015878:	79fb      	ldrb	r3, [r7, #7]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d105      	bne.n	801588a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801587e:	683a      	ldr	r2, [r7, #0]
 8015880:	4907      	ldr	r1, [pc, #28]	; (80158a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015882:	4808      	ldr	r0, [pc, #32]	; (80158a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015884:	f7fc fc57 	bl	8012136 <USBD_GetString>
 8015888:	e004      	b.n	8015894 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801588a:	683a      	ldr	r2, [r7, #0]
 801588c:	4904      	ldr	r1, [pc, #16]	; (80158a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801588e:	4805      	ldr	r0, [pc, #20]	; (80158a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015890:	f7fc fc51 	bl	8012136 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015894:	4b02      	ldr	r3, [pc, #8]	; (80158a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015896:	4618      	mov	r0, r3
 8015898:	3708      	adds	r7, #8
 801589a:	46bd      	mov	sp, r7
 801589c:	bd80      	pop	{r7, pc}
 801589e:	bf00      	nop
 80158a0:	24011dbc 	.word	0x24011dbc
 80158a4:	08016664 	.word	0x08016664

080158a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b084      	sub	sp, #16
 80158ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80158ae:	4b0f      	ldr	r3, [pc, #60]	; (80158ec <Get_SerialNum+0x44>)
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80158b4:	4b0e      	ldr	r3, [pc, #56]	; (80158f0 <Get_SerialNum+0x48>)
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80158ba:	4b0e      	ldr	r3, [pc, #56]	; (80158f4 <Get_SerialNum+0x4c>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80158c0:	68fa      	ldr	r2, [r7, #12]
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	4413      	add	r3, r2
 80158c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d009      	beq.n	80158e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80158ce:	2208      	movs	r2, #8
 80158d0:	4909      	ldr	r1, [pc, #36]	; (80158f8 <Get_SerialNum+0x50>)
 80158d2:	68f8      	ldr	r0, [r7, #12]
 80158d4:	f000 f814 	bl	8015900 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80158d8:	2204      	movs	r2, #4
 80158da:	4908      	ldr	r1, [pc, #32]	; (80158fc <Get_SerialNum+0x54>)
 80158dc:	68b8      	ldr	r0, [r7, #8]
 80158de:	f000 f80f 	bl	8015900 <IntToUnicode>
  }
}
 80158e2:	bf00      	nop
 80158e4:	3710      	adds	r7, #16
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	1ff1e800 	.word	0x1ff1e800
 80158f0:	1ff1e804 	.word	0x1ff1e804
 80158f4:	1ff1e808 	.word	0x1ff1e808
 80158f8:	240001c6 	.word	0x240001c6
 80158fc:	240001d6 	.word	0x240001d6

08015900 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015900:	b480      	push	{r7}
 8015902:	b087      	sub	sp, #28
 8015904:	af00      	add	r7, sp, #0
 8015906:	60f8      	str	r0, [r7, #12]
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	4613      	mov	r3, r2
 801590c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801590e:	2300      	movs	r3, #0
 8015910:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015912:	2300      	movs	r3, #0
 8015914:	75fb      	strb	r3, [r7, #23]
 8015916:	e027      	b.n	8015968 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	0f1b      	lsrs	r3, r3, #28
 801591c:	2b09      	cmp	r3, #9
 801591e:	d80b      	bhi.n	8015938 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	0f1b      	lsrs	r3, r3, #28
 8015924:	b2da      	uxtb	r2, r3
 8015926:	7dfb      	ldrb	r3, [r7, #23]
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	4619      	mov	r1, r3
 801592c:	68bb      	ldr	r3, [r7, #8]
 801592e:	440b      	add	r3, r1
 8015930:	3230      	adds	r2, #48	; 0x30
 8015932:	b2d2      	uxtb	r2, r2
 8015934:	701a      	strb	r2, [r3, #0]
 8015936:	e00a      	b.n	801594e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	0f1b      	lsrs	r3, r3, #28
 801593c:	b2da      	uxtb	r2, r3
 801593e:	7dfb      	ldrb	r3, [r7, #23]
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	4619      	mov	r1, r3
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	440b      	add	r3, r1
 8015948:	3237      	adds	r2, #55	; 0x37
 801594a:	b2d2      	uxtb	r2, r2
 801594c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	011b      	lsls	r3, r3, #4
 8015952:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015954:	7dfb      	ldrb	r3, [r7, #23]
 8015956:	005b      	lsls	r3, r3, #1
 8015958:	3301      	adds	r3, #1
 801595a:	68ba      	ldr	r2, [r7, #8]
 801595c:	4413      	add	r3, r2
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015962:	7dfb      	ldrb	r3, [r7, #23]
 8015964:	3301      	adds	r3, #1
 8015966:	75fb      	strb	r3, [r7, #23]
 8015968:	7dfa      	ldrb	r2, [r7, #23]
 801596a:	79fb      	ldrb	r3, [r7, #7]
 801596c:	429a      	cmp	r2, r3
 801596e:	d3d3      	bcc.n	8015918 <IntToUnicode+0x18>
  }
}
 8015970:	bf00      	nop
 8015972:	371c      	adds	r7, #28
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr

0801597c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b082      	sub	sp, #8
 8015980:	af00      	add	r7, sp, #0
 8015982:	4603      	mov	r3, r0
 8015984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */

	  //HAL_Delay(2U); // mycode
	BSP_SD_Init();
 8015986:	f7f9 fd9f 	bl	800f4c8 <BSP_SD_Init>
  return (USBD_OK);
 801598a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801598c:	4618      	mov	r0, r3
 801598e:	3708      	adds	r7, #8
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8015994:	b580      	push	{r7, lr}
 8015996:	b08e      	sub	sp, #56	; 0x38
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	607a      	str	r2, [r7, #4]
 80159a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */

	HAL_SD_CardInfoTypeDef info;
		  int8_t ret = -1;
 80159a2:	23ff      	movs	r3, #255	; 0xff
 80159a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

		  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80159a8:	f7f9 fe0e 	bl	800f5c8 <BSP_SD_IsDetected>
 80159ac:	4603      	mov	r3, r0
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d00f      	beq.n	80159d2 <STORAGE_GetCapacity_FS+0x3e>
		  {
		    BSP_SD_GetCardInfo(&info);
 80159b2:	f107 0310 	add.w	r3, r7, #16
 80159b6:	4618      	mov	r0, r3
 80159b8:	f7f9 fdf8 	bl	800f5ac <BSP_SD_GetCardInfo>

		    *block_num = info.LogBlockNbr - 1;
 80159bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159be:	1e5a      	subs	r2, r3, #1
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	601a      	str	r2, [r3, #0]
		    *block_size = info.LogBlockSize;
 80159c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c6:	b29a      	uxth	r2, r3
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	801a      	strh	r2, [r3, #0]
		    ret = 0;
 80159cc:	2300      	movs	r3, #0
 80159ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/*
	*block_num = 4;
	*block_size = 0x200;
*/
  return (USBD_OK);
 80159d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3738      	adds	r7, #56	; 0x38
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	4603      	mov	r3, r0
 80159e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */

  static int8_t prev_status = 0;
    int8_t ret = -1;
 80159e6:	23ff      	movs	r3, #255	; 0xff
 80159e8:	73fb      	strb	r3, [r7, #15]

    if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 80159ea:	f7f9 fded 	bl	800f5c8 <BSP_SD_IsDetected>
 80159ee:	4603      	mov	r3, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d011      	beq.n	8015a18 <STORAGE_IsReady_FS+0x3c>
    {
      if (prev_status < 0)
 80159f4:	4b0f      	ldr	r3, [pc, #60]	; (8015a34 <STORAGE_IsReady_FS+0x58>)
 80159f6:	f993 3000 	ldrsb.w	r3, [r3]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	da04      	bge.n	8015a08 <STORAGE_IsReady_FS+0x2c>
      {
        BSP_SD_Init();
 80159fe:	f7f9 fd63 	bl	800f4c8 <BSP_SD_Init>
        prev_status = 0;
 8015a02:	4b0c      	ldr	r3, [pc, #48]	; (8015a34 <STORAGE_IsReady_FS+0x58>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	701a      	strb	r2, [r3, #0]

      }

      if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015a08:	f7f9 fdc0 	bl	800f58c <BSP_SD_GetCardState>
 8015a0c:	4603      	mov	r3, r0
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d10a      	bne.n	8015a28 <STORAGE_IsReady_FS+0x4c>
      {
        ret = 0;
 8015a12:	2300      	movs	r3, #0
 8015a14:	73fb      	strb	r3, [r7, #15]
 8015a16:	e007      	b.n	8015a28 <STORAGE_IsReady_FS+0x4c>
      }
    }
    else if (prev_status == 0)
 8015a18:	4b06      	ldr	r3, [pc, #24]	; (8015a34 <STORAGE_IsReady_FS+0x58>)
 8015a1a:	f993 3000 	ldrsb.w	r3, [r3]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d102      	bne.n	8015a28 <STORAGE_IsReady_FS+0x4c>
    {
      prev_status = -1;
 8015a22:	4b04      	ldr	r3, [pc, #16]	; (8015a34 <STORAGE_IsReady_FS+0x58>)
 8015a24:	22ff      	movs	r2, #255	; 0xff
 8015a26:	701a      	strb	r2, [r3, #0]
    }
    return ret;
 8015a28:	f997 300f 	ldrsb.w	r3, [r7, #15]

//	return (USBD_OK);
  /* USER CODE END 4 */
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3710      	adds	r7, #16
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	24004fb0 	.word	0x24004fb0

08015a38 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8015a38:	b480      	push	{r7}
 8015a3a:	b083      	sub	sp, #12
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	4603      	mov	r3, r0
 8015a40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8015a42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015a44:	4618      	mov	r0, r3
 8015a46:	370c      	adds	r7, #12
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr

08015a50 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b086      	sub	sp, #24
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60b9      	str	r1, [r7, #8]
 8015a58:	607a      	str	r2, [r7, #4]
 8015a5a:	461a      	mov	r2, r3
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	73fb      	strb	r3, [r7, #15]
 8015a60:	4613      	mov	r3, r2
 8015a62:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */

	int8_t ret = -1;
 8015a64:	23ff      	movs	r3, #255	; 0xff
 8015a66:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8015a68:	f7f9 fdae 	bl	800f5c8 <BSP_SD_IsDetected>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00d      	beq.n	8015a8e <STORAGE_Read_FS+0x3e>
	  {
	    BSP_SD_ReadBlocks((uint32_t *) buf, blk_addr, blk_len, 0xff);
 8015a72:	89ba      	ldrh	r2, [r7, #12]
 8015a74:	23ff      	movs	r3, #255	; 0xff
 8015a76:	6879      	ldr	r1, [r7, #4]
 8015a78:	68b8      	ldr	r0, [r7, #8]
 8015a7a:	f7f9 fd4b 	bl	800f514 <BSP_SD_ReadBlocks>

	    // Wait until SD card is ready to use for new operation
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8015a7e:	bf00      	nop
 8015a80:	f7f9 fd84 	bl	800f58c <BSP_SD_GetCardState>
 8015a84:	4603      	mov	r3, r0
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d1fa      	bne.n	8015a80 <STORAGE_Read_FS+0x30>
	    {
	    }

	    ret = 0;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	75fb      	strb	r3, [r7, #23]
	  }


 	/* memcpy(buf, usb_array, 512);*/
  return (USBD_OK);
 8015a8e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3718      	adds	r7, #24
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}

08015a98 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b086      	sub	sp, #24
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	60b9      	str	r1, [r7, #8]
 8015aa0:	607a      	str	r2, [r7, #4]
 8015aa2:	461a      	mov	r2, r3
 8015aa4:	4603      	mov	r3, r0
 8015aa6:	73fb      	strb	r3, [r7, #15]
 8015aa8:	4613      	mov	r3, r2
 8015aaa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */

	int8_t ret = -1;
 8015aac:	23ff      	movs	r3, #255	; 0xff
 8015aae:	75fb      	strb	r3, [r7, #23]

	  if (BSP_SD_IsDetected() != SD_NOT_PRESENT)
 8015ab0:	f7f9 fd8a 	bl	800f5c8 <BSP_SD_IsDetected>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d00d      	beq.n	8015ad6 <STORAGE_Write_FS+0x3e>
	  {
	    BSP_SD_WriteBlocks((uint32_t *) buf, blk_addr, blk_len, 0xff);
 8015aba:	89ba      	ldrh	r2, [r7, #12]
 8015abc:	23ff      	movs	r3, #255	; 0xff
 8015abe:	6879      	ldr	r1, [r7, #4]
 8015ac0:	68b8      	ldr	r0, [r7, #8]
 8015ac2:	f7f9 fd45 	bl	800f550 <BSP_SD_WriteBlocks>

	    // Wait until SD card is ready to use for new operation
	    while (BSP_SD_GetCardState() != SD_TRANSFER_OK)
 8015ac6:	bf00      	nop
 8015ac8:	f7f9 fd60 	bl	800f58c <BSP_SD_GetCardState>
 8015acc:	4603      	mov	r3, r0
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d1fa      	bne.n	8015ac8 <STORAGE_Write_FS+0x30>
	    {
	    }

	    ret = 0;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	75fb      	strb	r3, [r7, #23]
	  }


	/*memcpy(usb_array, buf, 512);*/
  return (USBD_OK);
 8015ad6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8015ad8:	4618      	mov	r0, r3
 8015ada:	3718      	adds	r7, #24
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8015ae0:	b480      	push	{r7}
 8015ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8015ae4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aee:	4770      	bx	lr

08015af0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b08a      	sub	sp, #40	; 0x28
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015af8:	f107 0314 	add.w	r3, r7, #20
 8015afc:	2200      	movs	r2, #0
 8015afe:	601a      	str	r2, [r3, #0]
 8015b00:	605a      	str	r2, [r3, #4]
 8015b02:	609a      	str	r2, [r3, #8]
 8015b04:	60da      	str	r2, [r3, #12]
 8015b06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	4a1e      	ldr	r2, [pc, #120]	; (8015b88 <HAL_PCD_MspInit+0x98>)
 8015b0e:	4293      	cmp	r3, r2
 8015b10:	d136      	bne.n	8015b80 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015b12:	4b1e      	ldr	r3, [pc, #120]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015b18:	4a1c      	ldr	r2, [pc, #112]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b1a:	f043 0301 	orr.w	r3, r3, #1
 8015b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8015b22:	4b1a      	ldr	r3, [pc, #104]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8015b28:	f003 0301 	and.w	r3, r3, #1
 8015b2c:	613b      	str	r3, [r7, #16]
 8015b2e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015b30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b36:	2302      	movs	r3, #2
 8015b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015b42:	230a      	movs	r3, #10
 8015b44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015b46:	f107 0314 	add.w	r3, r7, #20
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	4810      	ldr	r0, [pc, #64]	; (8015b90 <HAL_PCD_MspInit+0xa0>)
 8015b4e:	f7ee fe55 	bl	80047fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015b52:	4b0e      	ldr	r3, [pc, #56]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015b58:	4a0c      	ldr	r2, [pc, #48]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015b5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015b62:	4b0a      	ldr	r3, [pc, #40]	; (8015b8c <HAL_PCD_MspInit+0x9c>)
 8015b64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015b6c:	60fb      	str	r3, [r7, #12]
 8015b6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8015b70:	2200      	movs	r2, #0
 8015b72:	2106      	movs	r1, #6
 8015b74:	2065      	movs	r0, #101	; 0x65
 8015b76:	f7ec fa47 	bl	8002008 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015b7a:	2065      	movs	r0, #101	; 0x65
 8015b7c:	f7ec fa5e 	bl	800203c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015b80:	bf00      	nop
 8015b82:	3728      	adds	r7, #40	; 0x28
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	40080000 	.word	0x40080000
 8015b8c:	58024400 	.word	0x58024400
 8015b90:	58020000 	.word	0x58020000

08015b94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b082      	sub	sp, #8
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015ba8:	4619      	mov	r1, r3
 8015baa:	4610      	mov	r0, r2
 8015bac:	f7fb fb41 	bl	8011232 <USBD_LL_SetupStage>
}
 8015bb0:	bf00      	nop
 8015bb2:	3708      	adds	r7, #8
 8015bb4:	46bd      	mov	sp, r7
 8015bb6:	bd80      	pop	{r7, pc}

08015bb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b082      	sub	sp, #8
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	460b      	mov	r3, r1
 8015bc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015bca:	78fa      	ldrb	r2, [r7, #3]
 8015bcc:	6879      	ldr	r1, [r7, #4]
 8015bce:	4613      	mov	r3, r2
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	1a9b      	subs	r3, r3, r2
 8015bd4:	009b      	lsls	r3, r3, #2
 8015bd6:	440b      	add	r3, r1
 8015bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	78fb      	ldrb	r3, [r7, #3]
 8015be0:	4619      	mov	r1, r3
 8015be2:	f7fb fb79 	bl	80112d8 <USBD_LL_DataOutStage>
}
 8015be6:	bf00      	nop
 8015be8:	3708      	adds	r7, #8
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}

08015bee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015bee:	b580      	push	{r7, lr}
 8015bf0:	b082      	sub	sp, #8
 8015bf2:	af00      	add	r7, sp, #0
 8015bf4:	6078      	str	r0, [r7, #4]
 8015bf6:	460b      	mov	r3, r1
 8015bf8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015c00:	78fa      	ldrb	r2, [r7, #3]
 8015c02:	6879      	ldr	r1, [r7, #4]
 8015c04:	4613      	mov	r3, r2
 8015c06:	00db      	lsls	r3, r3, #3
 8015c08:	1a9b      	subs	r3, r3, r2
 8015c0a:	009b      	lsls	r3, r3, #2
 8015c0c:	440b      	add	r3, r1
 8015c0e:	3348      	adds	r3, #72	; 0x48
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	78fb      	ldrb	r3, [r7, #3]
 8015c14:	4619      	mov	r1, r3
 8015c16:	f7fb fbc2 	bl	801139e <USBD_LL_DataInStage>
}
 8015c1a:	bf00      	nop
 8015c1c:	3708      	adds	r7, #8
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}

08015c22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c22:	b580      	push	{r7, lr}
 8015c24:	b082      	sub	sp, #8
 8015c26:	af00      	add	r7, sp, #0
 8015c28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7fb fcc6 	bl	80115c2 <USBD_LL_SOF>
}
 8015c36:	bf00      	nop
 8015c38:	3708      	adds	r7, #8
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}

08015c3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c3e:	b580      	push	{r7, lr}
 8015c40:	b084      	sub	sp, #16
 8015c42:	af00      	add	r7, sp, #0
 8015c44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015c46:	2301      	movs	r3, #1
 8015c48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d102      	bne.n	8015c58 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015c52:	2300      	movs	r3, #0
 8015c54:	73fb      	strb	r3, [r7, #15]
 8015c56:	e008      	b.n	8015c6a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	68db      	ldr	r3, [r3, #12]
 8015c5c:	2b02      	cmp	r3, #2
 8015c5e:	d102      	bne.n	8015c66 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015c60:	2301      	movs	r3, #1
 8015c62:	73fb      	strb	r3, [r7, #15]
 8015c64:	e001      	b.n	8015c6a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015c66:	f7eb fc67 	bl	8001538 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c70:	7bfa      	ldrb	r2, [r7, #15]
 8015c72:	4611      	mov	r1, r2
 8015c74:	4618      	mov	r0, r3
 8015c76:	f7fb fc69 	bl	801154c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7fb fc22 	bl	80114ca <USBD_LL_Reset>
}
 8015c86:	bf00      	nop
 8015c88:	3710      	adds	r7, #16
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
	...

08015c90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b082      	sub	sp, #8
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fb fc64 	bl	801156c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	687a      	ldr	r2, [r7, #4]
 8015cb0:	6812      	ldr	r2, [r2, #0]
 8015cb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015cb6:	f043 0301 	orr.w	r3, r3, #1
 8015cba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6a1b      	ldr	r3, [r3, #32]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d005      	beq.n	8015cd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015cc4:	4b04      	ldr	r3, [pc, #16]	; (8015cd8 <HAL_PCD_SuspendCallback+0x48>)
 8015cc6:	691b      	ldr	r3, [r3, #16]
 8015cc8:	4a03      	ldr	r2, [pc, #12]	; (8015cd8 <HAL_PCD_SuspendCallback+0x48>)
 8015cca:	f043 0306 	orr.w	r3, r3, #6
 8015cce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015cd0:	bf00      	nop
 8015cd2:	3708      	adds	r7, #8
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}
 8015cd8:	e000ed00 	.word	0xe000ed00

08015cdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7fb fc53 	bl	8011596 <USBD_LL_Resume>
}
 8015cf0:	bf00      	nop
 8015cf2:	3708      	adds	r7, #8
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b082      	sub	sp, #8
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
 8015d00:	460b      	mov	r3, r1
 8015d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d0a:	78fa      	ldrb	r2, [r7, #3]
 8015d0c:	4611      	mov	r1, r2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7fb fc7e 	bl	8011610 <USBD_LL_IsoOUTIncomplete>
}
 8015d14:	bf00      	nop
 8015d16:	3708      	adds	r7, #8
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	bd80      	pop	{r7, pc}

08015d1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b082      	sub	sp, #8
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	460b      	mov	r3, r1
 8015d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d2e:	78fa      	ldrb	r2, [r7, #3]
 8015d30:	4611      	mov	r1, r2
 8015d32:	4618      	mov	r0, r3
 8015d34:	f7fb fc5f 	bl	80115f6 <USBD_LL_IsoINIncomplete>
}
 8015d38:	bf00      	nop
 8015d3a:	3708      	adds	r7, #8
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}

08015d40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fb fc6b 	bl	801162a <USBD_LL_DevConnected>
}
 8015d54:	bf00      	nop
 8015d56:	3708      	adds	r7, #8
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	f7fb fc68 	bl	8011640 <USBD_LL_DevDisconnected>
}
 8015d70:	bf00      	nop
 8015d72:	3708      	adds	r7, #8
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}

08015d78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b082      	sub	sp, #8
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d13e      	bne.n	8015e06 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8015d88:	4a21      	ldr	r2, [pc, #132]	; (8015e10 <USBD_LL_Init+0x98>)
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	4a1f      	ldr	r2, [pc, #124]	; (8015e10 <USBD_LL_Init+0x98>)
 8015d94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015d98:	4b1d      	ldr	r3, [pc, #116]	; (8015e10 <USBD_LL_Init+0x98>)
 8015d9a:	4a1e      	ldr	r2, [pc, #120]	; (8015e14 <USBD_LL_Init+0x9c>)
 8015d9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8015d9e:	4b1c      	ldr	r3, [pc, #112]	; (8015e10 <USBD_LL_Init+0x98>)
 8015da0:	2209      	movs	r2, #9
 8015da2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8015da4:	4b1a      	ldr	r3, [pc, #104]	; (8015e10 <USBD_LL_Init+0x98>)
 8015da6:	2202      	movs	r2, #2
 8015da8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015daa:	4b19      	ldr	r3, [pc, #100]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dac:	2200      	movs	r2, #0
 8015dae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015db0:	4b17      	ldr	r3, [pc, #92]	; (8015e10 <USBD_LL_Init+0x98>)
 8015db2:	2202      	movs	r2, #2
 8015db4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015db6:	4b16      	ldr	r3, [pc, #88]	; (8015e10 <USBD_LL_Init+0x98>)
 8015db8:	2200      	movs	r2, #0
 8015dba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8015dbc:	4b14      	ldr	r3, [pc, #80]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015dc2:	4b13      	ldr	r3, [pc, #76]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8015dc8:	4b11      	ldr	r3, [pc, #68]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dca:	2200      	movs	r2, #0
 8015dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8015dce:	4b10      	ldr	r3, [pc, #64]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dd0:	2200      	movs	r2, #0
 8015dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015dd4:	4b0e      	ldr	r3, [pc, #56]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015dda:	480d      	ldr	r0, [pc, #52]	; (8015e10 <USBD_LL_Init+0x98>)
 8015ddc:	f7ef fa7f 	bl	80052de <HAL_PCD_Init>
 8015de0:	4603      	mov	r3, r0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d001      	beq.n	8015dea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015de6:	f7eb fba7 	bl	8001538 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015dea:	2180      	movs	r1, #128	; 0x80
 8015dec:	4808      	ldr	r0, [pc, #32]	; (8015e10 <USBD_LL_Init+0x98>)
 8015dee:	f7f0 fc3e 	bl	800666e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8015df2:	2240      	movs	r2, #64	; 0x40
 8015df4:	2100      	movs	r1, #0
 8015df6:	4806      	ldr	r0, [pc, #24]	; (8015e10 <USBD_LL_Init+0x98>)
 8015df8:	f7f0 fbf2 	bl	80065e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015dfc:	2280      	movs	r2, #128	; 0x80
 8015dfe:	2101      	movs	r1, #1
 8015e00:	4803      	ldr	r0, [pc, #12]	; (8015e10 <USBD_LL_Init+0x98>)
 8015e02:	f7f0 fbed 	bl	80065e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015e06:	2300      	movs	r3, #0
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3708      	adds	r7, #8
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	24011fbc 	.word	0x24011fbc
 8015e14:	40080000 	.word	0x40080000

08015e18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b084      	sub	sp, #16
 8015e1c:	af00      	add	r7, sp, #0
 8015e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e20:	2300      	movs	r3, #0
 8015e22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e24:	2300      	movs	r3, #0
 8015e26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7ef fb79 	bl	8005526 <HAL_PCD_Start>
 8015e34:	4603      	mov	r3, r0
 8015e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e38:	7bfb      	ldrb	r3, [r7, #15]
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f000 f94a 	bl	80160d4 <USBD_Get_USB_Status>
 8015e40:	4603      	mov	r3, r0
 8015e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015e4e:	b580      	push	{r7, lr}
 8015e50:	b084      	sub	sp, #16
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	6078      	str	r0, [r7, #4]
 8015e56:	4608      	mov	r0, r1
 8015e58:	4611      	mov	r1, r2
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	4603      	mov	r3, r0
 8015e5e:	70fb      	strb	r3, [r7, #3]
 8015e60:	460b      	mov	r3, r1
 8015e62:	70bb      	strb	r3, [r7, #2]
 8015e64:	4613      	mov	r3, r2
 8015e66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e76:	78bb      	ldrb	r3, [r7, #2]
 8015e78:	883a      	ldrh	r2, [r7, #0]
 8015e7a:	78f9      	ldrb	r1, [r7, #3]
 8015e7c:	f7ef ff8a 	bl	8005d94 <HAL_PCD_EP_Open>
 8015e80:	4603      	mov	r3, r0
 8015e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e84:	7bfb      	ldrb	r3, [r7, #15]
 8015e86:	4618      	mov	r0, r3
 8015e88:	f000 f924 	bl	80160d4 <USBD_Get_USB_Status>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3710      	adds	r7, #16
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}

08015e9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015e9a:	b580      	push	{r7, lr}
 8015e9c:	b084      	sub	sp, #16
 8015e9e:	af00      	add	r7, sp, #0
 8015ea0:	6078      	str	r0, [r7, #4]
 8015ea2:	460b      	mov	r3, r1
 8015ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015eb4:	78fa      	ldrb	r2, [r7, #3]
 8015eb6:	4611      	mov	r1, r2
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7ef ffd3 	bl	8005e64 <HAL_PCD_EP_Close>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ec2:	7bfb      	ldrb	r3, [r7, #15]
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	f000 f905 	bl	80160d4 <USBD_Get_USB_Status>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	3710      	adds	r7, #16
 8015ed4:	46bd      	mov	sp, r7
 8015ed6:	bd80      	pop	{r7, pc}

08015ed8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b084      	sub	sp, #16
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
 8015ee0:	460b      	mov	r3, r1
 8015ee2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ef2:	78fa      	ldrb	r2, [r7, #3]
 8015ef4:	4611      	mov	r1, r2
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7f0 f965 	bl	80061c6 <HAL_PCD_EP_Flush>
 8015efc:	4603      	mov	r3, r0
 8015efe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f00:	7bfb      	ldrb	r3, [r7, #15]
 8015f02:	4618      	mov	r0, r3
 8015f04:	f000 f8e6 	bl	80160d4 <USBD_Get_USB_Status>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3710      	adds	r7, #16
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}

08015f16 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f16:	b580      	push	{r7, lr}
 8015f18:	b084      	sub	sp, #16
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
 8015f1e:	460b      	mov	r3, r1
 8015f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f22:	2300      	movs	r3, #0
 8015f24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f26:	2300      	movs	r3, #0
 8015f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f30:	78fa      	ldrb	r2, [r7, #3]
 8015f32:	4611      	mov	r1, r2
 8015f34:	4618      	mov	r0, r3
 8015f36:	f7f0 f88c 	bl	8006052 <HAL_PCD_EP_SetStall>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f3e:	7bfb      	ldrb	r3, [r7, #15]
 8015f40:	4618      	mov	r0, r3
 8015f42:	f000 f8c7 	bl	80160d4 <USBD_Get_USB_Status>
 8015f46:	4603      	mov	r3, r0
 8015f48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3710      	adds	r7, #16
 8015f50:	46bd      	mov	sp, r7
 8015f52:	bd80      	pop	{r7, pc}

08015f54 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b084      	sub	sp, #16
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	460b      	mov	r3, r1
 8015f5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f60:	2300      	movs	r3, #0
 8015f62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f64:	2300      	movs	r3, #0
 8015f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015f6e:	78fa      	ldrb	r2, [r7, #3]
 8015f70:	4611      	mov	r1, r2
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7f0 f8d1 	bl	800611a <HAL_PCD_EP_ClrStall>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f7c:	7bfb      	ldrb	r3, [r7, #15]
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f000 f8a8 	bl	80160d4 <USBD_Get_USB_Status>
 8015f84:	4603      	mov	r3, r0
 8015f86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f88:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3710      	adds	r7, #16
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}

08015f92 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f92:	b480      	push	{r7}
 8015f94:	b085      	sub	sp, #20
 8015f96:	af00      	add	r7, sp, #0
 8015f98:	6078      	str	r0, [r7, #4]
 8015f9a:	460b      	mov	r3, r1
 8015f9c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015fa4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	da0b      	bge.n	8015fc6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015fae:	78fb      	ldrb	r3, [r7, #3]
 8015fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fb4:	68f9      	ldr	r1, [r7, #12]
 8015fb6:	4613      	mov	r3, r2
 8015fb8:	00db      	lsls	r3, r3, #3
 8015fba:	1a9b      	subs	r3, r3, r2
 8015fbc:	009b      	lsls	r3, r3, #2
 8015fbe:	440b      	add	r3, r1
 8015fc0:	333e      	adds	r3, #62	; 0x3e
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	e00b      	b.n	8015fde <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015fc6:	78fb      	ldrb	r3, [r7, #3]
 8015fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015fcc:	68f9      	ldr	r1, [r7, #12]
 8015fce:	4613      	mov	r3, r2
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	1a9b      	subs	r3, r3, r2
 8015fd4:	009b      	lsls	r3, r3, #2
 8015fd6:	440b      	add	r3, r1
 8015fd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015fdc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	3714      	adds	r7, #20
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr

08015fea <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015fea:	b580      	push	{r7, lr}
 8015fec:	b084      	sub	sp, #16
 8015fee:	af00      	add	r7, sp, #0
 8015ff0:	6078      	str	r0, [r7, #4]
 8015ff2:	460b      	mov	r3, r1
 8015ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016004:	78fa      	ldrb	r2, [r7, #3]
 8016006:	4611      	mov	r1, r2
 8016008:	4618      	mov	r0, r3
 801600a:	f7ef fe9e 	bl	8005d4a <HAL_PCD_SetAddress>
 801600e:	4603      	mov	r3, r0
 8016010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016012:	7bfb      	ldrb	r3, [r7, #15]
 8016014:	4618      	mov	r0, r3
 8016016:	f000 f85d 	bl	80160d4 <USBD_Get_USB_Status>
 801601a:	4603      	mov	r3, r0
 801601c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801601e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016020:	4618      	mov	r0, r3
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b086      	sub	sp, #24
 801602c:	af00      	add	r7, sp, #0
 801602e:	60f8      	str	r0, [r7, #12]
 8016030:	607a      	str	r2, [r7, #4]
 8016032:	603b      	str	r3, [r7, #0]
 8016034:	460b      	mov	r3, r1
 8016036:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016038:	2300      	movs	r3, #0
 801603a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801603c:	2300      	movs	r3, #0
 801603e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016046:	7af9      	ldrb	r1, [r7, #11]
 8016048:	683b      	ldr	r3, [r7, #0]
 801604a:	687a      	ldr	r2, [r7, #4]
 801604c:	f7ef ffb7 	bl	8005fbe <HAL_PCD_EP_Transmit>
 8016050:	4603      	mov	r3, r0
 8016052:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016054:	7dfb      	ldrb	r3, [r7, #23]
 8016056:	4618      	mov	r0, r3
 8016058:	f000 f83c 	bl	80160d4 <USBD_Get_USB_Status>
 801605c:	4603      	mov	r3, r0
 801605e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016060:	7dbb      	ldrb	r3, [r7, #22]
}
 8016062:	4618      	mov	r0, r3
 8016064:	3718      	adds	r7, #24
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}

0801606a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801606a:	b580      	push	{r7, lr}
 801606c:	b086      	sub	sp, #24
 801606e:	af00      	add	r7, sp, #0
 8016070:	60f8      	str	r0, [r7, #12]
 8016072:	607a      	str	r2, [r7, #4]
 8016074:	603b      	str	r3, [r7, #0]
 8016076:	460b      	mov	r3, r1
 8016078:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801607a:	2300      	movs	r3, #0
 801607c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801607e:	2300      	movs	r3, #0
 8016080:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016088:	7af9      	ldrb	r1, [r7, #11]
 801608a:	683b      	ldr	r3, [r7, #0]
 801608c:	687a      	ldr	r2, [r7, #4]
 801608e:	f7ef ff33 	bl	8005ef8 <HAL_PCD_EP_Receive>
 8016092:	4603      	mov	r3, r0
 8016094:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016096:	7dfb      	ldrb	r3, [r7, #23]
 8016098:	4618      	mov	r0, r3
 801609a:	f000 f81b 	bl	80160d4 <USBD_Get_USB_Status>
 801609e:	4603      	mov	r3, r0
 80160a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80160a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80160a4:	4618      	mov	r0, r3
 80160a6:	3718      	adds	r7, #24
 80160a8:	46bd      	mov	sp, r7
 80160aa:	bd80      	pop	{r7, pc}

080160ac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b082      	sub	sp, #8
 80160b0:	af00      	add	r7, sp, #0
 80160b2:	6078      	str	r0, [r7, #4]
 80160b4:	460b      	mov	r3, r1
 80160b6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80160be:	78fa      	ldrb	r2, [r7, #3]
 80160c0:	4611      	mov	r1, r2
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7ef ff63 	bl	8005f8e <HAL_PCD_EP_GetRxCount>
 80160c8:	4603      	mov	r3, r0
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	3708      	adds	r7, #8
 80160ce:	46bd      	mov	sp, r7
 80160d0:	bd80      	pop	{r7, pc}
	...

080160d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b085      	sub	sp, #20
 80160d8:	af00      	add	r7, sp, #0
 80160da:	4603      	mov	r3, r0
 80160dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160de:	2300      	movs	r3, #0
 80160e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80160e2:	79fb      	ldrb	r3, [r7, #7]
 80160e4:	2b03      	cmp	r3, #3
 80160e6:	d817      	bhi.n	8016118 <USBD_Get_USB_Status+0x44>
 80160e8:	a201      	add	r2, pc, #4	; (adr r2, 80160f0 <USBD_Get_USB_Status+0x1c>)
 80160ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ee:	bf00      	nop
 80160f0:	08016101 	.word	0x08016101
 80160f4:	08016107 	.word	0x08016107
 80160f8:	0801610d 	.word	0x0801610d
 80160fc:	08016113 	.word	0x08016113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016100:	2300      	movs	r3, #0
 8016102:	73fb      	strb	r3, [r7, #15]
    break;
 8016104:	e00b      	b.n	801611e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016106:	2303      	movs	r3, #3
 8016108:	73fb      	strb	r3, [r7, #15]
    break;
 801610a:	e008      	b.n	801611e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801610c:	2301      	movs	r3, #1
 801610e:	73fb      	strb	r3, [r7, #15]
    break;
 8016110:	e005      	b.n	801611e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016112:	2303      	movs	r3, #3
 8016114:	73fb      	strb	r3, [r7, #15]
    break;
 8016116:	e002      	b.n	801611e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016118:	2303      	movs	r3, #3
 801611a:	73fb      	strb	r3, [r7, #15]
    break;
 801611c:	bf00      	nop
  }
  return usb_status;
 801611e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3714      	adds	r7, #20
 8016124:	46bd      	mov	sp, r7
 8016126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801612a:	4770      	bx	lr

0801612c <atoi>:
 801612c:	220a      	movs	r2, #10
 801612e:	2100      	movs	r1, #0
 8016130:	f000 b9c6 	b.w	80164c0 <strtol>

08016134 <__errno>:
 8016134:	4b01      	ldr	r3, [pc, #4]	; (801613c <__errno+0x8>)
 8016136:	6818      	ldr	r0, [r3, #0]
 8016138:	4770      	bx	lr
 801613a:	bf00      	nop
 801613c:	24000200 	.word	0x24000200

08016140 <__libc_init_array>:
 8016140:	b570      	push	{r4, r5, r6, lr}
 8016142:	4e0d      	ldr	r6, [pc, #52]	; (8016178 <__libc_init_array+0x38>)
 8016144:	4c0d      	ldr	r4, [pc, #52]	; (801617c <__libc_init_array+0x3c>)
 8016146:	1ba4      	subs	r4, r4, r6
 8016148:	10a4      	asrs	r4, r4, #2
 801614a:	2500      	movs	r5, #0
 801614c:	42a5      	cmp	r5, r4
 801614e:	d109      	bne.n	8016164 <__libc_init_array+0x24>
 8016150:	4e0b      	ldr	r6, [pc, #44]	; (8016180 <__libc_init_array+0x40>)
 8016152:	4c0c      	ldr	r4, [pc, #48]	; (8016184 <__libc_init_array+0x44>)
 8016154:	f000 f9ee 	bl	8016534 <_init>
 8016158:	1ba4      	subs	r4, r4, r6
 801615a:	10a4      	asrs	r4, r4, #2
 801615c:	2500      	movs	r5, #0
 801615e:	42a5      	cmp	r5, r4
 8016160:	d105      	bne.n	801616e <__libc_init_array+0x2e>
 8016162:	bd70      	pop	{r4, r5, r6, pc}
 8016164:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016168:	4798      	blx	r3
 801616a:	3501      	adds	r5, #1
 801616c:	e7ee      	b.n	801614c <__libc_init_array+0xc>
 801616e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016172:	4798      	blx	r3
 8016174:	3501      	adds	r5, #1
 8016176:	e7f2      	b.n	801615e <__libc_init_array+0x1e>
 8016178:	0801685c 	.word	0x0801685c
 801617c:	0801685c 	.word	0x0801685c
 8016180:	0801685c 	.word	0x0801685c
 8016184:	08016860 	.word	0x08016860

08016188 <malloc>:
 8016188:	4b02      	ldr	r3, [pc, #8]	; (8016194 <malloc+0xc>)
 801618a:	4601      	mov	r1, r0
 801618c:	6818      	ldr	r0, [r3, #0]
 801618e:	f000 b885 	b.w	801629c <_malloc_r>
 8016192:	bf00      	nop
 8016194:	24000200 	.word	0x24000200

08016198 <free>:
 8016198:	4b02      	ldr	r3, [pc, #8]	; (80161a4 <free+0xc>)
 801619a:	4601      	mov	r1, r0
 801619c:	6818      	ldr	r0, [r3, #0]
 801619e:	f000 b82f 	b.w	8016200 <_free_r>
 80161a2:	bf00      	nop
 80161a4:	24000200 	.word	0x24000200

080161a8 <memcpy>:
 80161a8:	b510      	push	{r4, lr}
 80161aa:	1e43      	subs	r3, r0, #1
 80161ac:	440a      	add	r2, r1
 80161ae:	4291      	cmp	r1, r2
 80161b0:	d100      	bne.n	80161b4 <memcpy+0xc>
 80161b2:	bd10      	pop	{r4, pc}
 80161b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161bc:	e7f7      	b.n	80161ae <memcpy+0x6>

080161be <memmove>:
 80161be:	4288      	cmp	r0, r1
 80161c0:	b510      	push	{r4, lr}
 80161c2:	eb01 0302 	add.w	r3, r1, r2
 80161c6:	d807      	bhi.n	80161d8 <memmove+0x1a>
 80161c8:	1e42      	subs	r2, r0, #1
 80161ca:	4299      	cmp	r1, r3
 80161cc:	d00a      	beq.n	80161e4 <memmove+0x26>
 80161ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161d2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80161d6:	e7f8      	b.n	80161ca <memmove+0xc>
 80161d8:	4283      	cmp	r3, r0
 80161da:	d9f5      	bls.n	80161c8 <memmove+0xa>
 80161dc:	1881      	adds	r1, r0, r2
 80161de:	1ad2      	subs	r2, r2, r3
 80161e0:	42d3      	cmn	r3, r2
 80161e2:	d100      	bne.n	80161e6 <memmove+0x28>
 80161e4:	bd10      	pop	{r4, pc}
 80161e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80161ea:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80161ee:	e7f7      	b.n	80161e0 <memmove+0x22>

080161f0 <memset>:
 80161f0:	4402      	add	r2, r0
 80161f2:	4603      	mov	r3, r0
 80161f4:	4293      	cmp	r3, r2
 80161f6:	d100      	bne.n	80161fa <memset+0xa>
 80161f8:	4770      	bx	lr
 80161fa:	f803 1b01 	strb.w	r1, [r3], #1
 80161fe:	e7f9      	b.n	80161f4 <memset+0x4>

08016200 <_free_r>:
 8016200:	b538      	push	{r3, r4, r5, lr}
 8016202:	4605      	mov	r5, r0
 8016204:	2900      	cmp	r1, #0
 8016206:	d045      	beq.n	8016294 <_free_r+0x94>
 8016208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801620c:	1f0c      	subs	r4, r1, #4
 801620e:	2b00      	cmp	r3, #0
 8016210:	bfb8      	it	lt
 8016212:	18e4      	addlt	r4, r4, r3
 8016214:	f000 f97f 	bl	8016516 <__malloc_lock>
 8016218:	4a1f      	ldr	r2, [pc, #124]	; (8016298 <_free_r+0x98>)
 801621a:	6813      	ldr	r3, [r2, #0]
 801621c:	4610      	mov	r0, r2
 801621e:	b933      	cbnz	r3, 801622e <_free_r+0x2e>
 8016220:	6063      	str	r3, [r4, #4]
 8016222:	6014      	str	r4, [r2, #0]
 8016224:	4628      	mov	r0, r5
 8016226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801622a:	f000 b975 	b.w	8016518 <__malloc_unlock>
 801622e:	42a3      	cmp	r3, r4
 8016230:	d90c      	bls.n	801624c <_free_r+0x4c>
 8016232:	6821      	ldr	r1, [r4, #0]
 8016234:	1862      	adds	r2, r4, r1
 8016236:	4293      	cmp	r3, r2
 8016238:	bf04      	itt	eq
 801623a:	681a      	ldreq	r2, [r3, #0]
 801623c:	685b      	ldreq	r3, [r3, #4]
 801623e:	6063      	str	r3, [r4, #4]
 8016240:	bf04      	itt	eq
 8016242:	1852      	addeq	r2, r2, r1
 8016244:	6022      	streq	r2, [r4, #0]
 8016246:	6004      	str	r4, [r0, #0]
 8016248:	e7ec      	b.n	8016224 <_free_r+0x24>
 801624a:	4613      	mov	r3, r2
 801624c:	685a      	ldr	r2, [r3, #4]
 801624e:	b10a      	cbz	r2, 8016254 <_free_r+0x54>
 8016250:	42a2      	cmp	r2, r4
 8016252:	d9fa      	bls.n	801624a <_free_r+0x4a>
 8016254:	6819      	ldr	r1, [r3, #0]
 8016256:	1858      	adds	r0, r3, r1
 8016258:	42a0      	cmp	r0, r4
 801625a:	d10b      	bne.n	8016274 <_free_r+0x74>
 801625c:	6820      	ldr	r0, [r4, #0]
 801625e:	4401      	add	r1, r0
 8016260:	1858      	adds	r0, r3, r1
 8016262:	4282      	cmp	r2, r0
 8016264:	6019      	str	r1, [r3, #0]
 8016266:	d1dd      	bne.n	8016224 <_free_r+0x24>
 8016268:	6810      	ldr	r0, [r2, #0]
 801626a:	6852      	ldr	r2, [r2, #4]
 801626c:	605a      	str	r2, [r3, #4]
 801626e:	4401      	add	r1, r0
 8016270:	6019      	str	r1, [r3, #0]
 8016272:	e7d7      	b.n	8016224 <_free_r+0x24>
 8016274:	d902      	bls.n	801627c <_free_r+0x7c>
 8016276:	230c      	movs	r3, #12
 8016278:	602b      	str	r3, [r5, #0]
 801627a:	e7d3      	b.n	8016224 <_free_r+0x24>
 801627c:	6820      	ldr	r0, [r4, #0]
 801627e:	1821      	adds	r1, r4, r0
 8016280:	428a      	cmp	r2, r1
 8016282:	bf04      	itt	eq
 8016284:	6811      	ldreq	r1, [r2, #0]
 8016286:	6852      	ldreq	r2, [r2, #4]
 8016288:	6062      	str	r2, [r4, #4]
 801628a:	bf04      	itt	eq
 801628c:	1809      	addeq	r1, r1, r0
 801628e:	6021      	streq	r1, [r4, #0]
 8016290:	605c      	str	r4, [r3, #4]
 8016292:	e7c7      	b.n	8016224 <_free_r+0x24>
 8016294:	bd38      	pop	{r3, r4, r5, pc}
 8016296:	bf00      	nop
 8016298:	24004fb4 	.word	0x24004fb4

0801629c <_malloc_r>:
 801629c:	b570      	push	{r4, r5, r6, lr}
 801629e:	1ccd      	adds	r5, r1, #3
 80162a0:	f025 0503 	bic.w	r5, r5, #3
 80162a4:	3508      	adds	r5, #8
 80162a6:	2d0c      	cmp	r5, #12
 80162a8:	bf38      	it	cc
 80162aa:	250c      	movcc	r5, #12
 80162ac:	2d00      	cmp	r5, #0
 80162ae:	4606      	mov	r6, r0
 80162b0:	db01      	blt.n	80162b6 <_malloc_r+0x1a>
 80162b2:	42a9      	cmp	r1, r5
 80162b4:	d903      	bls.n	80162be <_malloc_r+0x22>
 80162b6:	230c      	movs	r3, #12
 80162b8:	6033      	str	r3, [r6, #0]
 80162ba:	2000      	movs	r0, #0
 80162bc:	bd70      	pop	{r4, r5, r6, pc}
 80162be:	f000 f92a 	bl	8016516 <__malloc_lock>
 80162c2:	4a21      	ldr	r2, [pc, #132]	; (8016348 <_malloc_r+0xac>)
 80162c4:	6814      	ldr	r4, [r2, #0]
 80162c6:	4621      	mov	r1, r4
 80162c8:	b991      	cbnz	r1, 80162f0 <_malloc_r+0x54>
 80162ca:	4c20      	ldr	r4, [pc, #128]	; (801634c <_malloc_r+0xb0>)
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	b91b      	cbnz	r3, 80162d8 <_malloc_r+0x3c>
 80162d0:	4630      	mov	r0, r6
 80162d2:	f000 f83d 	bl	8016350 <_sbrk_r>
 80162d6:	6020      	str	r0, [r4, #0]
 80162d8:	4629      	mov	r1, r5
 80162da:	4630      	mov	r0, r6
 80162dc:	f000 f838 	bl	8016350 <_sbrk_r>
 80162e0:	1c43      	adds	r3, r0, #1
 80162e2:	d124      	bne.n	801632e <_malloc_r+0x92>
 80162e4:	230c      	movs	r3, #12
 80162e6:	6033      	str	r3, [r6, #0]
 80162e8:	4630      	mov	r0, r6
 80162ea:	f000 f915 	bl	8016518 <__malloc_unlock>
 80162ee:	e7e4      	b.n	80162ba <_malloc_r+0x1e>
 80162f0:	680b      	ldr	r3, [r1, #0]
 80162f2:	1b5b      	subs	r3, r3, r5
 80162f4:	d418      	bmi.n	8016328 <_malloc_r+0x8c>
 80162f6:	2b0b      	cmp	r3, #11
 80162f8:	d90f      	bls.n	801631a <_malloc_r+0x7e>
 80162fa:	600b      	str	r3, [r1, #0]
 80162fc:	50cd      	str	r5, [r1, r3]
 80162fe:	18cc      	adds	r4, r1, r3
 8016300:	4630      	mov	r0, r6
 8016302:	f000 f909 	bl	8016518 <__malloc_unlock>
 8016306:	f104 000b 	add.w	r0, r4, #11
 801630a:	1d23      	adds	r3, r4, #4
 801630c:	f020 0007 	bic.w	r0, r0, #7
 8016310:	1ac3      	subs	r3, r0, r3
 8016312:	d0d3      	beq.n	80162bc <_malloc_r+0x20>
 8016314:	425a      	negs	r2, r3
 8016316:	50e2      	str	r2, [r4, r3]
 8016318:	e7d0      	b.n	80162bc <_malloc_r+0x20>
 801631a:	428c      	cmp	r4, r1
 801631c:	684b      	ldr	r3, [r1, #4]
 801631e:	bf16      	itet	ne
 8016320:	6063      	strne	r3, [r4, #4]
 8016322:	6013      	streq	r3, [r2, #0]
 8016324:	460c      	movne	r4, r1
 8016326:	e7eb      	b.n	8016300 <_malloc_r+0x64>
 8016328:	460c      	mov	r4, r1
 801632a:	6849      	ldr	r1, [r1, #4]
 801632c:	e7cc      	b.n	80162c8 <_malloc_r+0x2c>
 801632e:	1cc4      	adds	r4, r0, #3
 8016330:	f024 0403 	bic.w	r4, r4, #3
 8016334:	42a0      	cmp	r0, r4
 8016336:	d005      	beq.n	8016344 <_malloc_r+0xa8>
 8016338:	1a21      	subs	r1, r4, r0
 801633a:	4630      	mov	r0, r6
 801633c:	f000 f808 	bl	8016350 <_sbrk_r>
 8016340:	3001      	adds	r0, #1
 8016342:	d0cf      	beq.n	80162e4 <_malloc_r+0x48>
 8016344:	6025      	str	r5, [r4, #0]
 8016346:	e7db      	b.n	8016300 <_malloc_r+0x64>
 8016348:	24004fb4 	.word	0x24004fb4
 801634c:	24004fb8 	.word	0x24004fb8

08016350 <_sbrk_r>:
 8016350:	b538      	push	{r3, r4, r5, lr}
 8016352:	4c06      	ldr	r4, [pc, #24]	; (801636c <_sbrk_r+0x1c>)
 8016354:	2300      	movs	r3, #0
 8016356:	4605      	mov	r5, r0
 8016358:	4608      	mov	r0, r1
 801635a:	6023      	str	r3, [r4, #0]
 801635c:	f7eb fc26 	bl	8001bac <_sbrk>
 8016360:	1c43      	adds	r3, r0, #1
 8016362:	d102      	bne.n	801636a <_sbrk_r+0x1a>
 8016364:	6823      	ldr	r3, [r4, #0]
 8016366:	b103      	cbz	r3, 801636a <_sbrk_r+0x1a>
 8016368:	602b      	str	r3, [r5, #0]
 801636a:	bd38      	pop	{r3, r4, r5, pc}
 801636c:	240123c4 	.word	0x240123c4

08016370 <strncmp>:
 8016370:	b510      	push	{r4, lr}
 8016372:	b16a      	cbz	r2, 8016390 <strncmp+0x20>
 8016374:	3901      	subs	r1, #1
 8016376:	1884      	adds	r4, r0, r2
 8016378:	f810 3b01 	ldrb.w	r3, [r0], #1
 801637c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016380:	4293      	cmp	r3, r2
 8016382:	d103      	bne.n	801638c <strncmp+0x1c>
 8016384:	42a0      	cmp	r0, r4
 8016386:	d001      	beq.n	801638c <strncmp+0x1c>
 8016388:	2b00      	cmp	r3, #0
 801638a:	d1f5      	bne.n	8016378 <strncmp+0x8>
 801638c:	1a98      	subs	r0, r3, r2
 801638e:	bd10      	pop	{r4, pc}
 8016390:	4610      	mov	r0, r2
 8016392:	e7fc      	b.n	801638e <strncmp+0x1e>

08016394 <strstr>:
 8016394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016396:	7803      	ldrb	r3, [r0, #0]
 8016398:	b17b      	cbz	r3, 80163ba <strstr+0x26>
 801639a:	4604      	mov	r4, r0
 801639c:	7823      	ldrb	r3, [r4, #0]
 801639e:	4620      	mov	r0, r4
 80163a0:	1c66      	adds	r6, r4, #1
 80163a2:	b17b      	cbz	r3, 80163c4 <strstr+0x30>
 80163a4:	1e4a      	subs	r2, r1, #1
 80163a6:	1e63      	subs	r3, r4, #1
 80163a8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80163ac:	b14d      	cbz	r5, 80163c2 <strstr+0x2e>
 80163ae:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80163b2:	42af      	cmp	r7, r5
 80163b4:	4634      	mov	r4, r6
 80163b6:	d0f7      	beq.n	80163a8 <strstr+0x14>
 80163b8:	e7f0      	b.n	801639c <strstr+0x8>
 80163ba:	780b      	ldrb	r3, [r1, #0]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	bf18      	it	ne
 80163c0:	2000      	movne	r0, #0
 80163c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163c4:	4618      	mov	r0, r3
 80163c6:	e7fc      	b.n	80163c2 <strstr+0x2e>

080163c8 <_strtol_l.isra.0>:
 80163c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163cc:	4680      	mov	r8, r0
 80163ce:	4689      	mov	r9, r1
 80163d0:	4692      	mov	sl, r2
 80163d2:	461e      	mov	r6, r3
 80163d4:	460f      	mov	r7, r1
 80163d6:	463d      	mov	r5, r7
 80163d8:	9808      	ldr	r0, [sp, #32]
 80163da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163de:	f000 f885 	bl	80164ec <__locale_ctype_ptr_l>
 80163e2:	4420      	add	r0, r4
 80163e4:	7843      	ldrb	r3, [r0, #1]
 80163e6:	f013 0308 	ands.w	r3, r3, #8
 80163ea:	d132      	bne.n	8016452 <_strtol_l.isra.0+0x8a>
 80163ec:	2c2d      	cmp	r4, #45	; 0x2d
 80163ee:	d132      	bne.n	8016456 <_strtol_l.isra.0+0x8e>
 80163f0:	787c      	ldrb	r4, [r7, #1]
 80163f2:	1cbd      	adds	r5, r7, #2
 80163f4:	2201      	movs	r2, #1
 80163f6:	2e00      	cmp	r6, #0
 80163f8:	d05d      	beq.n	80164b6 <_strtol_l.isra.0+0xee>
 80163fa:	2e10      	cmp	r6, #16
 80163fc:	d109      	bne.n	8016412 <_strtol_l.isra.0+0x4a>
 80163fe:	2c30      	cmp	r4, #48	; 0x30
 8016400:	d107      	bne.n	8016412 <_strtol_l.isra.0+0x4a>
 8016402:	782b      	ldrb	r3, [r5, #0]
 8016404:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016408:	2b58      	cmp	r3, #88	; 0x58
 801640a:	d14f      	bne.n	80164ac <_strtol_l.isra.0+0xe4>
 801640c:	786c      	ldrb	r4, [r5, #1]
 801640e:	2610      	movs	r6, #16
 8016410:	3502      	adds	r5, #2
 8016412:	2a00      	cmp	r2, #0
 8016414:	bf14      	ite	ne
 8016416:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801641a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801641e:	2700      	movs	r7, #0
 8016420:	fbb1 fcf6 	udiv	ip, r1, r6
 8016424:	4638      	mov	r0, r7
 8016426:	fb06 1e1c 	mls	lr, r6, ip, r1
 801642a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801642e:	2b09      	cmp	r3, #9
 8016430:	d817      	bhi.n	8016462 <_strtol_l.isra.0+0x9a>
 8016432:	461c      	mov	r4, r3
 8016434:	42a6      	cmp	r6, r4
 8016436:	dd23      	ble.n	8016480 <_strtol_l.isra.0+0xb8>
 8016438:	1c7b      	adds	r3, r7, #1
 801643a:	d007      	beq.n	801644c <_strtol_l.isra.0+0x84>
 801643c:	4584      	cmp	ip, r0
 801643e:	d31c      	bcc.n	801647a <_strtol_l.isra.0+0xb2>
 8016440:	d101      	bne.n	8016446 <_strtol_l.isra.0+0x7e>
 8016442:	45a6      	cmp	lr, r4
 8016444:	db19      	blt.n	801647a <_strtol_l.isra.0+0xb2>
 8016446:	fb00 4006 	mla	r0, r0, r6, r4
 801644a:	2701      	movs	r7, #1
 801644c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016450:	e7eb      	b.n	801642a <_strtol_l.isra.0+0x62>
 8016452:	462f      	mov	r7, r5
 8016454:	e7bf      	b.n	80163d6 <_strtol_l.isra.0+0xe>
 8016456:	2c2b      	cmp	r4, #43	; 0x2b
 8016458:	bf04      	itt	eq
 801645a:	1cbd      	addeq	r5, r7, #2
 801645c:	787c      	ldrbeq	r4, [r7, #1]
 801645e:	461a      	mov	r2, r3
 8016460:	e7c9      	b.n	80163f6 <_strtol_l.isra.0+0x2e>
 8016462:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016466:	2b19      	cmp	r3, #25
 8016468:	d801      	bhi.n	801646e <_strtol_l.isra.0+0xa6>
 801646a:	3c37      	subs	r4, #55	; 0x37
 801646c:	e7e2      	b.n	8016434 <_strtol_l.isra.0+0x6c>
 801646e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016472:	2b19      	cmp	r3, #25
 8016474:	d804      	bhi.n	8016480 <_strtol_l.isra.0+0xb8>
 8016476:	3c57      	subs	r4, #87	; 0x57
 8016478:	e7dc      	b.n	8016434 <_strtol_l.isra.0+0x6c>
 801647a:	f04f 37ff 	mov.w	r7, #4294967295
 801647e:	e7e5      	b.n	801644c <_strtol_l.isra.0+0x84>
 8016480:	1c7b      	adds	r3, r7, #1
 8016482:	d108      	bne.n	8016496 <_strtol_l.isra.0+0xce>
 8016484:	2322      	movs	r3, #34	; 0x22
 8016486:	f8c8 3000 	str.w	r3, [r8]
 801648a:	4608      	mov	r0, r1
 801648c:	f1ba 0f00 	cmp.w	sl, #0
 8016490:	d107      	bne.n	80164a2 <_strtol_l.isra.0+0xda>
 8016492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016496:	b102      	cbz	r2, 801649a <_strtol_l.isra.0+0xd2>
 8016498:	4240      	negs	r0, r0
 801649a:	f1ba 0f00 	cmp.w	sl, #0
 801649e:	d0f8      	beq.n	8016492 <_strtol_l.isra.0+0xca>
 80164a0:	b10f      	cbz	r7, 80164a6 <_strtol_l.isra.0+0xde>
 80164a2:	f105 39ff 	add.w	r9, r5, #4294967295
 80164a6:	f8ca 9000 	str.w	r9, [sl]
 80164aa:	e7f2      	b.n	8016492 <_strtol_l.isra.0+0xca>
 80164ac:	2430      	movs	r4, #48	; 0x30
 80164ae:	2e00      	cmp	r6, #0
 80164b0:	d1af      	bne.n	8016412 <_strtol_l.isra.0+0x4a>
 80164b2:	2608      	movs	r6, #8
 80164b4:	e7ad      	b.n	8016412 <_strtol_l.isra.0+0x4a>
 80164b6:	2c30      	cmp	r4, #48	; 0x30
 80164b8:	d0a3      	beq.n	8016402 <_strtol_l.isra.0+0x3a>
 80164ba:	260a      	movs	r6, #10
 80164bc:	e7a9      	b.n	8016412 <_strtol_l.isra.0+0x4a>
	...

080164c0 <strtol>:
 80164c0:	4b08      	ldr	r3, [pc, #32]	; (80164e4 <strtol+0x24>)
 80164c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164c4:	681c      	ldr	r4, [r3, #0]
 80164c6:	4d08      	ldr	r5, [pc, #32]	; (80164e8 <strtol+0x28>)
 80164c8:	6a23      	ldr	r3, [r4, #32]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	bf08      	it	eq
 80164ce:	462b      	moveq	r3, r5
 80164d0:	9300      	str	r3, [sp, #0]
 80164d2:	4613      	mov	r3, r2
 80164d4:	460a      	mov	r2, r1
 80164d6:	4601      	mov	r1, r0
 80164d8:	4620      	mov	r0, r4
 80164da:	f7ff ff75 	bl	80163c8 <_strtol_l.isra.0>
 80164de:	b003      	add	sp, #12
 80164e0:	bd30      	pop	{r4, r5, pc}
 80164e2:	bf00      	nop
 80164e4:	24000200 	.word	0x24000200
 80164e8:	24000264 	.word	0x24000264

080164ec <__locale_ctype_ptr_l>:
 80164ec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80164f0:	4770      	bx	lr

080164f2 <__ascii_mbtowc>:
 80164f2:	b082      	sub	sp, #8
 80164f4:	b901      	cbnz	r1, 80164f8 <__ascii_mbtowc+0x6>
 80164f6:	a901      	add	r1, sp, #4
 80164f8:	b142      	cbz	r2, 801650c <__ascii_mbtowc+0x1a>
 80164fa:	b14b      	cbz	r3, 8016510 <__ascii_mbtowc+0x1e>
 80164fc:	7813      	ldrb	r3, [r2, #0]
 80164fe:	600b      	str	r3, [r1, #0]
 8016500:	7812      	ldrb	r2, [r2, #0]
 8016502:	1c10      	adds	r0, r2, #0
 8016504:	bf18      	it	ne
 8016506:	2001      	movne	r0, #1
 8016508:	b002      	add	sp, #8
 801650a:	4770      	bx	lr
 801650c:	4610      	mov	r0, r2
 801650e:	e7fb      	b.n	8016508 <__ascii_mbtowc+0x16>
 8016510:	f06f 0001 	mvn.w	r0, #1
 8016514:	e7f8      	b.n	8016508 <__ascii_mbtowc+0x16>

08016516 <__malloc_lock>:
 8016516:	4770      	bx	lr

08016518 <__malloc_unlock>:
 8016518:	4770      	bx	lr

0801651a <__ascii_wctomb>:
 801651a:	b149      	cbz	r1, 8016530 <__ascii_wctomb+0x16>
 801651c:	2aff      	cmp	r2, #255	; 0xff
 801651e:	bf85      	ittet	hi
 8016520:	238a      	movhi	r3, #138	; 0x8a
 8016522:	6003      	strhi	r3, [r0, #0]
 8016524:	700a      	strbls	r2, [r1, #0]
 8016526:	f04f 30ff 	movhi.w	r0, #4294967295
 801652a:	bf98      	it	ls
 801652c:	2001      	movls	r0, #1
 801652e:	4770      	bx	lr
 8016530:	4608      	mov	r0, r1
 8016532:	4770      	bx	lr

08016534 <_init>:
 8016534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016536:	bf00      	nop
 8016538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801653a:	bc08      	pop	{r3}
 801653c:	469e      	mov	lr, r3
 801653e:	4770      	bx	lr

08016540 <_fini>:
 8016540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016542:	bf00      	nop
 8016544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016546:	bc08      	pop	{r3}
 8016548:	469e      	mov	lr, r3
 801654a:	4770      	bx	lr
